>>> 'Pkg.add("NetworkViz")' log
INFO: Cloning cache of Benchmark from https://github.com/johnmyleswhite/Benchmark.jl.git
INFO: Cloning cache of FunctionalCollections from https://github.com/JuliaLang/FunctionalCollections.jl.git
INFO: Cloning cache of NetworkViz from https://github.com/abhijithanilkumar/NetworkViz.jl.git
INFO: Cloning cache of Patchwork from https://github.com/shashi/Patchwork.jl.git
INFO: Cloning cache of ThreeJS from https://github.com/rohitvarkey/ThreeJS.jl.git
INFO: Installing ArrayViews v0.6.4
INFO: Installing AutoHashEquals v0.0.10
INFO: Installing Benchmark v0.1.0
INFO: Installing BinDeps v0.4.2
INFO: Installing Blosc v0.1.6
INFO: Installing Clustering v0.5.0
INFO: Installing ColorTypes v0.2.5
INFO: Installing Colors v0.6.6
INFO: Installing Combinatorics v0.3.2
INFO: Installing DataArrays v0.3.8
INFO: Installing DataFrames v0.7.6
INFO: Installing Distances v0.3.2
INFO: Installing Docile v0.5.23
INFO: Installing FactCheck v0.4.3
INFO: Installing FileIO v0.1.0
INFO: Installing FixedPointNumbers v0.1.4
INFO: Installing FixedSizeArrays v0.2.2
INFO: Installing FunctionalCollections v0.1.3
INFO: Installing GZip v0.2.19
INFO: Installing GeometryTypes v0.1.6
INFO: Installing HDF5 v0.6.4
INFO: Installing Iterators v0.1.9
INFO: Installing JLD v0.6.3
INFO: Installing LegacyStrings v0.1.1
INFO: Installing LightGraphs v0.5.4
INFO: Installing LightXML v0.2.1
INFO: Installing MacroTools v0.3.0
INFO: Installing NetworkViz v0.0.2
INFO: Installing ParserCombinator v1.7.9
INFO: Installing Patchwork v0.2.2
INFO: Installing Polynomials v0.0.5
INFO: Installing Reexport v0.0.3
INFO: Installing Requires v0.2.2
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing SortingAlgorithms v0.1.0
INFO: Installing StatsBase v0.8.3
INFO: Installing StatsFuns v0.3.0
INFO: Installing ThreeJS v0.2.1
INFO: Installing URIParser v0.1.5
INFO: Building Rmath
INFO: Building Blosc
INFO: Building HDF5
WARNING: `@linux_only` is deprecated, use `@static if is_linux()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @linux_only(::Any) at ./deprecated.jl:501
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/HDF5/deps/build.jl, in expression starting on line 5
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::Type{T}, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in satisfy!(::BinDeps.LibraryDependency, ::Array{DataType,1}) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:781 (repeats 2 times)
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:836 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/HDF5/deps/build.jl, in expression starting on line 27
INFO: Building LightXML
INFO: Package database updated

>>> 'Pkg.test("NetworkViz")' log
Julia Version 0.5.0-rc0+187
Commit 1eeb773 (2016-08-04 02:23 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1381.81640625 MB free)
Uptime: 7681.0 sec
Load Avg:  1.0634765625  0.85498046875  1.15185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     371166 s        108 s      51968 s     241728 s         41 s
#2  3499 MHz     128445 s         39 s      27219 s     582948 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - NetworkViz                    0.0.2
40 additional packages:
 - ArrayViews                    0.6.4
 - AutoHashEquals                0.0.10
 - Benchmark                     0.1.0
 - BinDeps                       0.4.2
 - Blosc                         0.1.6
 - Clustering                    0.5.0
 - ColorTypes                    0.2.5
 - Colors                        0.6.6
 - Combinatorics                 0.3.2
 - Compat                        0.8.6
 - DataArrays                    0.3.8
 - DataFrames                    0.7.6
 - Distances                     0.3.2
 - Docile                        0.5.23
 - FactCheck                     0.4.3
 - FileIO                        0.1.0
 - FixedPointNumbers             0.1.4
 - FixedSizeArrays               0.2.2
 - FunctionalCollections         0.1.3
 - GZip                          0.2.19
 - GeometryTypes                 0.1.6
 - HDF5                          0.6.4
 - Iterators                     0.1.9
 - JLD                           0.6.3
 - LegacyStrings                 0.1.1
 - LightGraphs                   0.5.4
 - LightXML                      0.2.1
 - MacroTools                    0.3.0
 - ParserCombinator              1.7.9
 - Patchwork                     0.2.2
 - Polynomials                   0.0.5
 - Reexport                      0.0.3
 - Requires                      0.2.2
 - Rmath                         0.1.2
 - SHA                           0.2.0
 - SortingAlgorithms             0.1.0
 - StatsBase                     0.8.3
 - StatsFuns                     0.3.0
 - ThreeJS                       0.2.1
 - URIParser                     0.1.5
INFO: Computing test dependencies for NetworkViz...
INFO: Installing BaseTestNext v0.2.1
INFO: Testing NetworkViz
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:40
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:40
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Base.ByteString is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:53
WARNING: Method definition (::Type{Patchwork.Elem})(Symbol, Symbol) in module Patchwork at /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:109 overwritten at /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:114.

WARNING: deprecated syntax "[a=>b for (a,b) in c]".
Use "Dict(a=>b for (a,b) in c)" instead.
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/writers.jl:14
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/writers.jl:14
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/writers.jl:17
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/Patchwork/src/writers.jl:17
WARNING: readall is deprecated, use readstring instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in readall(::IOStream, ::Vararg{IOStream,N}) at ./deprecated.jl:30
 in load_js_runtime() at /home/vagrant/.julia/v0.5/Patchwork/src/writers.jl:6
 in __init__() at /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl:226
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Patchwork/src/Patchwork.jl, in expression starting on line 221
WARNING: error while reinitializing value MethodTable(name=:addrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{3}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#addrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:minrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{4}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{2}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#minrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:restrict_crank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#M<:Any}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#N<:Any}}, Tuple{}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#restrict_crank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Rmath.ji for module Rmath.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsFuns.ji for module StatsFuns.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/LightGraphs.ji for module LightGraphs.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsBase.ji for module StatsBase.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Clustering.ji for module Clustering.
WARNING: error while reinitializing value MethodTable(name=:addrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{3}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#addrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:minrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{4}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{2}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#minrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
ERROR: LoadError: Failed to precompile Clustering to /home/vagrant/.julia/lib/v0.5/Clustering.ji
 in compilecache(::String) at ./loading.jl:505
 in recompile_stale(::Symbol, ::String) at ./loading.jl:581
 in _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:173
 in _require_from_serialized(::Int64, ::Symbol, ::Bool) at ./loading.jl:202
 in require(::Symbol) at ./loading.jl:332
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/LightGraphs/src/LightGraphs.jl, in expression starting on line 11
ERROR: LoadError: LoadError: LoadError: Failed to precompile LightGraphs to /home/vagrant/.julia/lib/v0.5/LightGraphs.ji
 in compilecache(::String) at ./loading.jl:505
 in recompile_stale(::Symbol, ::String) at ./loading.jl:581
 in _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:173
 in _require_from_serialized(::Int64, ::Symbol, ::Bool) at ./loading.jl:202
 in require(::Symbol) at ./loading.jl:332
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/NetworkViz/src/utils.jl, in expression starting on line 2
while loading /home/vagrant/.julia/v0.5/NetworkViz/src/NetworkViz.jl, in expression starting on line 21
while loading /home/vagrant/.julia/v0.5/NetworkViz/test/runtests.jl, in expression starting on line 3
=============================[ ERROR: NetworkViz ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/NetworkViz/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.1
ERROR: NetworkViz had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
