>>> 'Pkg.add("MLKernels")' log
INFO: Cloning cache of MLKernels from git://github.com/trthatcher/MLKernels.jl.git
INFO: Installing MLKernels v0.0.1
INFO: Package database updated

>>> 'Pkg.test("MLKernels")' log
Julia Version 0.3.10
Commit c8ceeef* (2015-06-24 13:54 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing MLKernels
- Testing matrix functions ... Done
- Testing sqdist ... Done
- Testing scprod ... Done
- Testing square scprodmatrix ... Done
- Testing rectangular scprodmatrix ... Done
- Testing weighted square scprodmatrix ... Done
- Testing weighted rectangular scprodmatrix ... Done
- Testing square sqdistmatrix ... Done
- Testing rectangular sqdistmatrix ... Done
- Testing weighted square sqdistmatrix ... Done
- Testing weighted rectangular sqdistmatrix ... Done
- Testing StandardKernel show():
    - Testing ExponentialKernel{Float64}(α=1.0,γ=1.0) ... Done
    - Testing RationalQuadraticKernel{Float64}(α=1.0,β=1.0,γ=1.0) ... Done
    - Testing PowerKernel{Float64}(γ=1.0) ... Done
    - Testing LogKernel{Float64}(α=1.0,γ=1.0) ... Done
    - Testing MaternKernel{Float64}(ν=1.0,θ=1.0) ... Done
    - Testing PolynomialKernel{Float64}(α=1.0,c=1.0,d=2) ... Done
    - Testing SigmoidKernel{Float64}(α=1.0,c=1.0) ... Done
- Testing StandardKernel constructors:
    - Testing ExponentialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing RationalQuadraticKernel{T<:FloatingPoint,CASE} ... Done
    - Testing PowerKernel{T<:FloatingPoint,CASE} ... Done
    - Testing LogKernel{T<:FloatingPoint,CASE} ... Done
    - Testing PolynomialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing MaternKernel{T<:FloatingPoint,CASE} ... Done
    - Testing SigmoidKernel{T<:FloatingPoint} ... Done
- Testing StandardKernel and ARD type conversions:
    - Testing ExponentialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing RationalQuadraticKernel{T<:FloatingPoint,CASE} ... Done
    - Testing PowerKernel{T<:FloatingPoint,CASE} ... Done
    - Testing LogKernel{T<:FloatingPoint,CASE} ... Done
    - Testing PolynomialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing MaternKernel{T<:FloatingPoint,CASE} ... Done
    - Testing SigmoidKernel{T<:FloatingPoint} ... Done
- Testing CompositeKernel type conversions:
- Testing StandardKernel aliases:
    - Testing GaussianKernel ... Done
    - Testing RadialBasisKernel ... Done
    - Testing LaplacianKernel ... Done
    - Testing LinearKernel ... Done
- Testing ARD constructors:
    - Testing ARD ExponentialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD RationalQuadraticKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD PowerKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD LogKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD MaternKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD PolynomialKernel{T<:FloatingPoint,CASE} ... Done
    - Testing ARD SigmoidKernel{T<:FloatingPoint} ... Done
- Testing StandardKernel error cases:
    - Testing ExponentialKernel{T<:FloatingPoint,CASE} error cases ...  [0] [0,1] [1,0] [1,2] ... Done
    - Testing RationalQuadraticKernel{T<:FloatingPoint,CASE} error cases ...  [0] [1,0] [1,1,0] [1.0,1.0,1.01] ... Done
    - Testing PowerKernel{T<:FloatingPoint,CASE} error cases ...  [0] [1.0001] ... Done
    - Testing LogKernel{T<:FloatingPoint,CASE} error cases ...  [0] [1,0] [1.0,1.0001] ... Done
    - Testing MaternKernel{T<:FloatingPoint,CASE} error cases ...  [0] [1,0] ... Done
    - Testing PolynomialKernel{T<:FloatingPoint,CASE} error cases ...  [0,1,2] [1.0,-0.0001,3.0] [1,1,0] ... Done
    - Testing SigmoidKernel{T<:FloatingPoint} error cases ...  [0,1] [1.0,-1.0e-5] ... Done
- Testing ismercer() property:
    - Testing ExponentialKernel{T<:FloatingPoint,CASE}... Done
    - Testing RationalQuadraticKernel{T<:FloatingPoint,CASE}... Done
    - Testing PowerKernel{T<:FloatingPoint,CASE}... Done
    - Testing LogKernel{T<:FloatingPoint,CASE}... Done
    - Testing MaternKernel{T<:FloatingPoint,CASE}... Done
    - Testing PolynomialKernel{T<:FloatingPoint,CASE}... Done
    - Testing SigmoidKernel{T<:FloatingPoint}... Done
- Testing iscondposdef() property:
    - Testing ExponentialKernel{T<:FloatingPoint,CASE}... Done
    - Testing RationalQuadraticKernel{T<:FloatingPoint,CASE}... Done
    - Testing PowerKernel{T<:FloatingPoint,CASE}... Done
    - Testing LogKernel{T<:FloatingPoint,CASE}... Done
    - Testing MaternKernel{T<:FloatingPoint,CASE}... Done
    - Testing PolynomialKernel{T<:FloatingPoint,CASE}... Done
    - Testing SigmoidKernel{T<:FloatingPoint}... Done
- Testing ScalarProductKernel kernel() function:
    - Testing PolynomialKernel{Float32}(α=1.0,c=1.0,d=2)... Done
    - Testing PolynomialKernel{Float64}(α=1.0,c=1.0,d=2)... Done
    - Testing PolynomialKernel{BigFloat}(α=1e+00,c=1e+00,d=2)... Done
    - Testing ARD{Float32}(κ=PolynomialKernel(α=1.0,c=1.0,d=2), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=PolynomialKernel(α=1.0,c=1.0,d=2), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=PolynomialKernel(α=1e+00,c=1e+00,d=2), w=BigFloat[2e+00])... Done
    - Testing SigmoidKernel{Float32}(α=1.0,c=1.0)... Done
    - Testing SigmoidKernel{Float64}(α=1.0,c=1.0)... Done
    - Testing SigmoidKernel{BigFloat}(α=1e+00,c=1e+00)... Done
    - Testing ARD{Float32}(κ=SigmoidKernel(α=1.0,c=1.0), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=SigmoidKernel(α=1.0,c=1.0), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=SigmoidKernel(α=1e+00,c=1e+00), w=BigFloat[2e+00])... Done
- Testing SquaredDistanceKernel kernel() function:
    - Testing ExponentialKernel{Float32}(α=2.0,γ=0.5)... Done
    - Testing ExponentialKernel{Float64}(α=2.0,γ=0.5)... Done
    - Testing ExponentialKernel{BigFloat}(α=2e+00,γ=5e-01)... Done
    - Testing ARD{Float32}(κ=ExponentialKernel(α=2.0,γ=0.5), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=ExponentialKernel(α=2.0,γ=0.5), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=ExponentialKernel(α=2e+00,γ=5e-01), w=BigFloat[2e+00])... Done
    - Testing RationalQuadraticKernel{Float32}(α=2.0,β=2.0,γ=0.5)... Done
    - Testing RationalQuadraticKernel{Float64}(α=2.0,β=2.0,γ=0.5)... Done
    - Testing RationalQuadraticKernel{BigFloat}(α=2e+00,β=2e+00,γ=5e-01)... Done
    - Testing ARD{Float32}(κ=RationalQuadraticKernel(α=2.0,β=2.0,γ=0.5), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=RationalQuadraticKernel(α=2.0,β=2.0,γ=0.5), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=RationalQuadraticKernel(α=2e+00,β=2e+00,γ=5e-01), w=BigFloat[2e+00])... Done
    - Testing PowerKernel{Float32}(γ=0.5)... Done
    - Testing PowerKernel{Float64}(γ=0.5)... Done
    - Testing PowerKernel{BigFloat}(γ=5e-01)... Done
    - Testing ARD{Float32}(κ=PowerKernel(γ=0.5), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=PowerKernel(γ=0.5), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=PowerKernel(γ=5e-01), w=BigFloat[2e+00])... Done
    - Testing LogKernel{Float32}(α=2.0,γ=0.5)... Done
    - Testing LogKernel{Float64}(α=2.0,γ=0.5)... Done
    - Testing LogKernel{BigFloat}(α=2e+00,γ=5e-01)... Done
    - Testing ARD{Float32}(κ=LogKernel(α=2.0,γ=0.5), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=LogKernel(α=2.0,γ=0.5), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=LogKernel(α=2e+00,γ=5e-01), w=BigFloat[2e+00])... Done
    - Testing MaternKernel{Float32}(ν=2.0,θ=2.0)... Done
    - Testing MaternKernel{Float64}(ν=2.0,θ=2.0)... Done
    - Testing MaternKernel{BigFloat}(ν=2e+00,θ=2e+00)... Done
    - Testing ARD{Float32}(κ=MaternKernel(ν=2.0,θ=2.0), w=Float32[2.0])... Done
    - Testing ARD{Float64}(κ=MaternKernel(ν=2.0,θ=2.0), w=[2.0])... Done
    - Testing ARD{BigFloat}(κ=MaternKernel(ν=2e+00,θ=2e+00), w=BigFloat[2e+00])... Done
- Testing special case kappa() function:
    - Testing ExponentialKernel{Float32,:γ1}... Done
    - Testing ExponentialKernel{Float64,:γ1}... Done
    - Testing ExponentialKernel{BigFloat,:γ1}... Done
    - Testing RationalQuadraticKernel{Float32,:β1}... Done
    - Testing RationalQuadraticKernel{Float32,:γ1}... Done
    - Testing RationalQuadraticKernel{Float32,:β1γ1}... Done
    - Testing RationalQuadraticKernel{Float64,:β1}... Done
    - Testing RationalQuadraticKernel{Float64,:γ1}... Done
    - Testing RationalQuadraticKernel{Float64,:β1γ1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:β1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:γ1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:β1γ1}... Done
    - Testing PowerKernel{Float32,:γ1}... Done
    - Testing PowerKernel{Float64,:γ1}... Done
    - Testing PowerKernel{BigFloat,:γ1}... Done
    - Testing LogKernel{Float32,:γ1}... Done
    - Testing LogKernel{Float64,:γ1}... Done
    - Testing LogKernel{BigFloat,:γ1}... Done
    - Testing MaternKernel{Float32,:ν1}... Done
    - Testing MaternKernel{Float64,:ν1}... Done
    - Testing MaternKernel{BigFloat,:ν1}... Done
    - Testing PolynomialKernel{Float32,:d1}... Done
    - Testing PolynomialKernel{Float64,:d1}... Done
    - Testing PolynomialKernel{BigFloat,:d1}... Done
- Testing special case error cases:
    - Testing ExponentialKernel{Float32,:γ1}... Done
    - Testing ExponentialKernel{Float64,:γ1}... Done
    - Testing ExponentialKernel{BigFloat,:γ1}... Done
    - Testing RationalQuadraticKernel{Float32,:β1}... Done
    - Testing RationalQuadraticKernel{Float64,:β1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:β1}... Done
    - Testing RationalQuadraticKernel{Float32,:γ1}... Done
    - Testing RationalQuadraticKernel{Float64,:γ1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:γ1}... Done
    - Testing RationalQuadraticKernel{Float32,:β1γ1}... Done
    - Testing RationalQuadraticKernel{Float64,:β1γ1}... Done
    - Testing RationalQuadraticKernel{BigFloat,:β1γ1}... Done
    - Testing PowerKernel{Float32,:γ1}... Done
    - Testing PowerKernel{Float64,:γ1}... Done
    - Testing PowerKernel{BigFloat,:γ1}... Done
    - Testing LogKernel{Float32,:γ1}... Done
    - Testing LogKernel{Float64,:γ1}... Done
    - Testing LogKernel{BigFloat,:γ1}... Done
    - Testing MaternKernel{Float32,:ν1}... Done
    - Testing MaternKernel{Float64,:ν1}... Done
    - Testing MaternKernel{BigFloat,:ν1}... Done
    - Testing PolynomialKernel{Float32,:d1}... Done
    - Testing PolynomialKernel{Float64,:d1}... Done
    - Testing PolynomialKernel{BigFloat,:d1}... Done
- Testing KernelProduct constructors ...  Done
- Testing KernelSum constructors ... KernelSum{Float32}(1.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0))KernelSum{Float32}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0))KernelSum{Float32}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2))KernelSum{Float32}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2))KernelSum{Float32}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2), SigmoidKernel(α=1.0,c=1.0))KernelSum{Float64}(1.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0))KernelSum{Float64}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0))KernelSum{Float64}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2))KernelSum{Float64}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2))KernelSum{Float64}(0.0, ExponentialKernel(α=1.0,γ=1.0), RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0), PolynomialKernel(α=1.0,c=1.0,d=2), SigmoidKernel(α=1.0,c=1.0))KernelSum{BigFloat}(1e+00, ExponentialKernel(α=1e+00,γ=1e+00), RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00))KernelSum{BigFloat}(0e+00, ExponentialKernel(α=1e+00,γ=1e+00), RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00))KernelSum{BigFloat}(0e+00, ExponentialKernel(α=1e+00,γ=1e+00), RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00), PolynomialKernel(α=1e+00,c=1e+00,d=2))KernelSum{BigFloat}(0e+00, ExponentialKernel(α=1e+00,γ=1e+00), RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00), PolynomialKernel(α=1e+00,c=1e+00,d=2))KernelSum{BigFloat}(0e+00, ExponentialKernel(α=1e+00,γ=1e+00), RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00), PolynomialKernel(α=1e+00,c=1e+00,d=2), SigmoidKernel(α=1e+00,c=1e+00)) Done
- Testing CompositeKernel kernel function ... KernelProduct{Float32}(3.0, (ExponentialKernel(α=1.0,γ=1.0) + RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0)), (3.0 + PolynomialKernel(α=1.0,c=1.0,d=2) + SigmoidKernel(α=1.0,c=1.0)))KernelProduct{Float64}(3.0, (ExponentialKernel(α=1.0,γ=1.0) + RationalQuadraticKernel(α=1.0,β=1.0,γ=1.0)), (3.0 + PolynomialKernel(α=1.0,c=1.0,d=2) + SigmoidKernel(α=1.0,c=1.0)))KernelProduct{BigFloat}(3e+00, (ExponentialKernel(α=1e+00,γ=1e+00) + RationalQuadraticKernel(α=1e+00,β=1e+00,γ=1e+00)), (3e+00 + PolynomialKernel(α=1e+00,c=1e+00,d=2) + SigmoidKernel(α=1e+00,c=1e+00))) Done
- Testing center_kernelmatrix ... Done
- Testing generic kernelmatrix ... Done
- Testing generic kernelmatrix_scaled ... Done
- Testing generic kernelmatrix_product ... Done
- Testing generic kernelmatrix_sum ... Done
- Testing optimized euclidean distance kernelmatrix ... Done
- Testing optimized euclidian distance kernelmatrix_scaled ... Done
- Testing optimized euclidian distance kernelmatrix_product ... Done
- Testing optimized euclidian distance kernelmatrix_sum ... Done
- Testing ExponentialKernel{T<:FloatingPoint,CASE} for positive definity... Done
- Testing RationalQuadraticKernel{T<:FloatingPoint,CASE} for positive definity... Done
- Testing PowerKernel{T<:FloatingPoint,CASE} for conditional positive definity... Done
- Testing LogKernel{T<:FloatingPoint,CASE} for conditional positive definity... Done
- Testing PolynomialKernel{T<:FloatingPoint,CASE} for positive definity... Done
- Testing kernelmatrix! error cases ... Done.
- Testing kernel matrix approximation ... Done
INFO: MLKernels tests passed
INFO: No packages to install, update or remove

>>> End of log
