>>> 'Pkg.add("Roots")' log
INFO: Installing Calculus v0.1.15
INFO: Installing ForwardDiff v0.2.5
INFO: Installing NaNMath v0.2.2
INFO: Installing Polynomials v0.1.0
INFO: Installing Primes v0.1.1
INFO: Installing Roots v0.2.1
INFO: Package database updated

>>> 'Pkg.test("Roots")' log
Julia Version 0.6.0-dev.1233
Commit 42df52a (2016-11-11 19:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (584.2109375 MB free)
Uptime: 18297.0 sec
Load Avg:  0.95751953125  1.02685546875  1.00927734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1054705 s       3778 s     108543 s     453433 s         72 s
#2  3500 MHz     313777 s       4614 s      57256 s    1398301 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - Roots                         0.2.1
6 additional packages:
 - Calculus                      0.1.15
 - Compat                        0.9.3
 - ForwardDiff                   0.2.5
 - NaNMath                       0.2.2
 - Polynomials                   0.1.0
 - Primes                        0.1.1
INFO: Testing Roots
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in ratio(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:55
 in precondition(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:70
 in #agcd#64(::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:241
 in (::Roots.#kw##agcd)(::Array{Any,1}, ::Roots.#agcd, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at ./<missing>:0
 in #multroot#76(::Float64, ::Float64, ::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:168
 in multroot(::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:151
 in #multroot#78(::Array{Any,1}, ::Function, ::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:225
 in multroot(::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:219
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Roots/test/./tests_multroot.jl, in expression starting on line 8
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in ratio(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}, ::Float64, ::Float64) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:58
 in precondition(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:70
 in #agcd#64(::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:241
 in (::Roots.#kw##agcd)(::Array{Any,1}, ::Roots.#agcd, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at ./<missing>:0
 in #multroot#76(::Float64, ::Float64, ::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:168
 in multroot(::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:151
 in #multroot#78(::Array{Any,1}, ::Function, ::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:225
 in multroot(::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:219
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Roots/test/./tests_multroot.jl, in expression starting on line 8
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in geometric_mean(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:50
 in precondition(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:86
 in #agcd#64(::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:241
 in (::Roots.#kw##agcd)(::Array{Any,1}, ::Roots.#agcd, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at ./<missing>:0
 in #multroot#76(::Float64, ::Float64, ::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:168
 in multroot(::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:151
 in #multroot#78(::Array{Any,1}, ::Function, ::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:225
 in multroot(::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:219
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Roots/test/./tests_multroot.jl, in expression starting on line 8
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in #lemma24#62(::Float64, ::Function, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:103
 in reveal_rank(::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}, ::Float64) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:144
 in #agcd#64(::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/agcd.jl:243
 in (::Roots.#kw##agcd)(::Array{Any,1}, ::Roots.#agcd, ::Polynomials.Poly{Float64}, ::Polynomials.Poly{Float64}) at ./<missing>:0
 in #multroot#76(::Float64, ::Float64, ::Float64, ::Float64, ::Function, ::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:168
 in multroot(::Polynomials.Poly{Float64}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:151
 in #multroot#78(::Array{Any,1}, ::Function, ::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:225
 in multroot(::Function) at /home/vagrant/.julia/v0.6/Roots/src/Polys/multroot.jl:219
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Roots/test/./tests_multroot.jl, in expression starting on line 8
ERROR: LoadError: LoadError: MethodError: no method matching sub_with_overflow(::BigInt, ::BigInt)
 in #sort!#7(::Base.Sort.QuickSortAlg, ::Function, ::Function, ::Bool, ::Base.Order.ForwardOrdering, ::Function, ::Array{BigInt,1}) at ./sort.jl:439
 in #sort#8(::Array{Any,1}, ::Function, ::Array{BigInt,1}) at ./sort.jl:477
 in sort(::Array{BigInt,1}) at ./sort.jl:477
 in divisors(::BigInt) at /home/vagrant/.julia/v0.6/Roots/src/Polys/real_roots.jl:353
 in rational_roots(::Polynomials.Poly{BigInt}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/real_roots.jl:365
 in rational_roots(::Polynomials.Poly{Rational{BigInt}}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/real_roots.jl:381
 in factor(::Polynomials.Poly{Rational{BigInt}}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/real_roots.jl:390
 in real_roots(::Polynomials.Poly{BigInt}) at /home/vagrant/.julia/v0.6/Roots/src/Polys/real_roots.jl:319
 in fzeros(::Polynomials.Poly{BigInt}) at /home/vagrant/.julia/v0.6/Roots/src/Roots.jl:185
 in fzeros(::##176#177) at /home/vagrant/.julia/v0.6/Roots/src/Roots.jl:196
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Roots/test/./tests_multroot.jl, in expression starting on line 36
while loading /home/vagrant/.julia/v0.6/Roots/test/runtests.jl, in expression starting on line 8
================================[ ERROR: Roots ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Roots/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Roots had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
