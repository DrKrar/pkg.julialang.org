>>> 'Pkg.add("GeometryTypes")' log
INFO: Installing ColorTypes v0.2.12
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing FixedSizeArrays v0.2.5
INFO: Installing GeometryTypes v0.2.1
INFO: Installing Iterators v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of GeometryTypes
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("GeometryTypes")' log
Julia Version 0.6.0-dev.1653
Commit 66ab171 (2016-12-22 07:36 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1791.0703125 MB free)
Uptime: 32143.0 sec
Load Avg:  0.9921875  0.9853515625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1516702 s        112 s     183026 s    1241783 s         88 s
#2  3504 MHz     546228 s         51 s     123438 s    2435836 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - GeometryTypes                 0.2.1
 - JSON                          0.8.0
5 additional packages:
 - ColorTypes                    0.2.12
 - Compat                        0.9.5
 - FixedPointNumbers             0.2.1
 - FixedSizeArrays               0.2.5
 - Iterators                     0.2.0
INFO: Computing test dependencies for GeometryTypes...
INFO: Installing BaseTestNext v0.2.2
INFO: Testing GeometryTypes
SignedDistanceField: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in (::##1#7)(::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:12
   in GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::##1#7, ::GeometryTypes.HyperRectangle{3,Float64}, ::Float64, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:41
   in GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::Function, ::GeometryTypes.HyperRectangle{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:22
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:11 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:15 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
getindex: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in (::##5#11)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:28
   in GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::##5#11, ::GeometryTypes.HyperRectangle{2,Float64}, ::Float64, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:68
   in GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::Function, ::GeometryTypes.HyperRectangle{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:52
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:27 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:15 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(min_euclidean(Vec(0.0,0.0),s)) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:4 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(0.5,0.0),s) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:5 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-1,-1.0),s) ≈ √2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:6 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-7,0.5),s) ≈ 7
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:7 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0),s) ≈ √0.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:8 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ 1 / 2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.1,0.0))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:11 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(1,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:15 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(1,0.1),atol=0.1)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in (::Base.#kw##contains)(::Array{Any,1}, ::Base.#contains, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at ./<missing>:0
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
counterexample: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(pt,s) ≈ √4.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:27 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
counterexample: Error During Test
  Got an exception of type DimensionMismatch outside of a @test
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:29 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(min_euclidean(Vec(0.0,0.0,0),s)) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:38 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(0.5,0.0,0),s) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:39 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-1,-1.0,0),s) ≈ √2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:40 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-7,0.5,0),s) ≈ 7
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:41 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0,0),s) ≈ √0.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:42 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0,1),s) ≈ √3 * (2 / 3)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:43 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ 1 / 6
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:44 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(1,0,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:45 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.1,0,0.1))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   in pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:46 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(0.0,2)) ≈ Vec(0,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   in (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:52 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(0.0,-2)) ≈ Vec(0,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   in (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:53 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(56.0,2)) ≈ Vec(1,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   in (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:54 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(-56.0,2)) ≈ Vec(-1,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   in (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:55 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: @inferred(min_euclidean(Vec(0.0,0.0,0),s)) ≈ 0
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:60 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(0.5,0.5,0.5),s) ≈ 0
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:61 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(-1,0,0.0),s) ≈ 1
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:62 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(1,0,0.0),s) ≈ √(2 / 3)
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   in sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   in min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:63 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ √3
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in volume(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:31
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:64 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.2,0.2,0.2))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in pinvli(::FixedSizeArrays.Mat{3,1,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:66 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(0.1,0.0999,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in pinvli(::FixedSizeArrays.Mat{3,1,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   in weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   in #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:67 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Utility functions: Error During Test
  Got an exception of type ErrorException outside of a @test
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
isapprox: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(isapprox(s,s2))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:40 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
isapprox: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(s,s2,atol=100.0)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
   in nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   in construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   in macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   in map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   in - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   in #isapprox#103(::Float64, ::Float64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   in (::Base.#kw##isapprox)(::Array{Any,1}, ::Base.#isapprox, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at ./<missing>:0
   in #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   in (::Base.#kw##isapprox)(::Array{Any,1}, ::Base.#isapprox, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at ./<missing>:0
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:41 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Rects: Error During Test
  Got an exception of type ErrorException outside of a @test
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in convert(::Type{GeometryTypes.FlexibleConvexHull}, ::GeometryTypes.HyperCube{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:68
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:51 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
two simplices: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk(c1,c2) ≈ 3
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   in (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   in macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   in with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23 [inlined]
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   in gjk(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:21 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
two simplices: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(c1,c2) ≈ 3
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   in (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   in macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   in with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23 [inlined]
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   in gjk(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:22 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk0(FlexibleConvexHull(md)) == (Vec(0,0.0),0.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   in (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   in macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   in with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   in gjk0(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:42 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk(c1,c3) == 0.0
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   in (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   in macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   in with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   in gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:43 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(c1,c3) == 0.0
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
   in power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   in sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   in proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   in (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   in macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   in with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   in proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   in gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:44 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, :(min_euclidean(Vec(2,2,2.0),c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(gjk(Vec(2,2,2.0),c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(√(3 / 4))))
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   in support_vector_max(::GeometryTypes.MinkowskiDifference{FixedSizeArrays.Vec{3,Float64},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   in gjk0(::GeometryTypes.MinkowskiDifference{FixedSizeArrays.Vec{3,Float64},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   in gjk(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:50 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, 0)) $(Expr(:escape, :(<=))) $(Expr(:escape, :(min_euclidean(s,c)))) $(Expr(:escape, :(<=))) $(Expr(:escape, 1.0e-14))
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   in support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   in gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:53 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, 0)) $(Expr(:escape, :(<=))) $(Expr(:escape, :(gjk(s,c)))) $(Expr(:escape, :(<=))) $(Expr(:escape, 1.0e-14))
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   in support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   in gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:54 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, :(min_euclidean(s,c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(gjk(s,c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(√(3 / 4))))
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   in support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   in gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   in gjk(::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:57 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
support_vector_max: Error During Test
  Test threw an exception of type ErrorException
  Expression: support_vector_max(FlexibleConvexHull(r),Vec(1,1.0)) == (Vec(0.5,1.0),1.5)
  generated function body is not pure. this likely means it contains a closure or comprehension.
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:69 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   in macro expansion; at ./test.jl:714 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:292
   in _start() at ./client.jl:356
ERROR: LoadError: Some tests did not pass: 248 passed, 0 failed, 59 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:524
 in macro expansion; at ./test.jl:721 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:292
 in _start() at ./client.jl:356
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl, in expression starting on line 10
============================[ ERROR: GeometryTypes ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.2
ERROR: GeometryTypes had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:269
 in _start() at ./client.jl:356

>>> End of log
