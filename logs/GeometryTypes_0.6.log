>>> 'Pkg.add("GeometryTypes")' log
INFO: Installing ColorTypes v0.2.12
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing FixedSizeArrays v0.2.5
INFO: Installing GeometryTypes v0.2.1
INFO: Installing Iterators v0.2.0
INFO: Package database updated

>>> 'Pkg.test("GeometryTypes")' log
Julia Version 0.6.0-dev.1843
Commit c38a5a3 (2017-01-01 14:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1575.484375 MB free)
Uptime: 28905.0 sec
Load Avg:  0.9970703125  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1454831 s         54 s     186902 s     936063 s         80 s
#2  3500 MHz     532440 s         92 s      92703 s    2183162 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - GeometryTypes                 0.2.1
 - JSON                          0.8.0
5 additional packages:
 - ColorTypes                    0.2.12
 - Compat                        0.10.0
 - FixedPointNumbers             0.2.1
 - FixedSizeArrays               0.2.5
 - Iterators                     0.2.0
INFO: Computing test dependencies for GeometryTypes...
INFO: Installing BaseTestNext v0.2.2
INFO: Testing GeometryTypes
WARNING: map!{F}(f::F,A::AbstractArray) is deprecated, use map!(f,A,A) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] map!(::Base.LinAlg.#normalize, ::Array{FixedSizeArrays.Point{3,Float32},1}) at ./deprecated.jl:50
 [3] normals(::Array{FixedSizeArrays.Point{3,Float32},1}, ::Array{GeometryTypes.Face{3,UInt32,-1},1}, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/algorithms.jl:25
 [4] decompose(::Type{GeometryTypes.Normal{3,Float32}}, ::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/decompose.jl:312
 [5] (::GeometryTypes.##27#28{GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void},GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void},Array{Symbol,1}})(::Int64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/meshes.jl:87
 [6] ntuple(::GeometryTypes.##27#28{GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void},GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void},Array{Symbol,1}}, ::Int64) at ./tuple.jl:79
 [7] GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void}(::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/meshes.jl:82
 [8] GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void}(::Dict{Symbol,Any}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/meshes.jl:136
 [9] (::Core.#kw#Type)(::Array{Any,1}, ::Type{GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void}}) at ./<missing>:0
 [10] GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},GeometryTypes.Normal{3,Float32},Void,Void,Void,Void}(::Array{FixedSizeArrays.Point{2,Float32},1}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/polygons.jl:145
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/polygons.jl:21 [inlined]
 [12] macro expansion; at ./test.jl:714 [inlined]
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/polygons.jl:0 [inlined]
 [14] macro expansion; at ./test.jl:714 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:532
 [17] include(::String) at ./sysimg.jl:14
 [18] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:11 [inlined]
 [19] macro expansion; at ./test.jl:714 [inlined]
 [20] anonymous at ./<missing>:?
 [21] include_from_node1(::String) at ./loading.jl:532
 [22] include(::String) at ./sysimg.jl:14
 [23] process_options(::Base.JLOptions) at ./client.jl:298
 [24] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/polygons.jl, in expression starting on line 1
WARNING: map!{F}(f::F,A::AbstractArray) is deprecated, use map!(f,A,A) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] map!(::Base.LinAlg.#normalize, ::Array{FixedSizeArrays.Point{3,Float64},1}) at ./deprecated.jl:50
 [3] normals(::Array{FixedSizeArrays.Point{3,Float64},1}, ::Array{GeometryTypes.Face{3,Int64,0},1}, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/algorithms.jl:25
 [4] normals(::Array{FixedSizeArrays.Point{3,Float64},1}, ::Array{GeometryTypes.Face{3,Int64,0},1}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/algorithms.jl:13
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/meshes.jl:137 [inlined]
 [6] macro expansion; at ./test.jl:714 [inlined]
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/meshes.jl:0 [inlined]
 [8] macro expansion; at ./test.jl:714 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:14 [inlined]
 [13] macro expansion; at ./test.jl:714 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/meshes.jl, in expression starting on line 1
SignedDistanceField: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] (::##1#7)(::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:12
   [2] GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::##1#7, ::GeometryTypes.HyperRectangle{3,Float64}, ::Float64, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:41
   [3] GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::Function, ::GeometryTypes.HyperRectangle{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:22
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:11 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:0 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:532
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:15 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:298
   [17] _start() at ./client.jl:364
getindex: Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] (::##5#11)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:28
   [2] GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::##5#11, ::GeometryTypes.HyperRectangle{2,Float64}, ::Float64, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:68
   [3] GeometryTypes.SignedDistanceField{N,SpaceT,FieldT}(::Function, ::GeometryTypes.HyperRectangle{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/distancefields.jl:52
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:27 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/distancefields.jl:0 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:532
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:15 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:298
   [17] _start() at ./client.jl:364
WARNING: map!{F}(f::F,A::AbstractArray) is deprecated, use map!(f,A,A) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] map!(::Base.LinAlg.#normalize, ::Array{FixedSizeArrays.Point{3,Float64},1}) at ./deprecated.jl:50
 [3] normals(::Array{FixedSizeArrays.Point{3,Float64},1}, ::Array{GeometryTypes.Face{3,UInt32,0},1}, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/algorithms.jl:25
 [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl:124 [inlined]
 [5] macro expansion; at ./test.jl:714 [inlined]
 [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl:0 [inlined]
 [7] macro expansion; at ./test.jl:714 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:17 [inlined]
 [12] macro expansion; at ./test.jl:714 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl, in expression starting on line 1
WARNING: map!{F}(f::F,A::AbstractArray) is deprecated, use map!(f,A,A) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] map!(::Base.LinAlg.#normalize, ::Array{FixedSizeArrays.Point{3,Float16},1}) at ./deprecated.jl:50
 [3] normals(::Array{FixedSizeArrays.Point{3,Float16},1}, ::Array{GeometryTypes.Face{3,UInt64,-1},1}, ::Type{T}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/algorithms.jl:25
 [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl:128 [inlined]
 [5] macro expansion; at ./test.jl:714 [inlined]
 [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl:0 [inlined]
 [7] macro expansion; at ./test.jl:714 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:17 [inlined]
 [12] macro expansion; at ./test.jl:714 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/decompose.jl, in expression starting on line 1
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(min_euclidean(Vec(0.0,0.0),s)) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:4 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(0.5,0.0),s) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:5 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-1,-1.0),s) ≈ √2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:6 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-7,0.5),s) ≈ 7
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:7 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0),s) ≈ √0.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:8 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ 1 / 2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:9 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:532
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:298
   [17] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.1,0.0))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:11 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,v)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:13 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(1,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:15 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
2d simplex in 2d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(1,0.1),atol=0.1)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] (::Base.#kw##contains)(::Array{Any,1}, ::Base.#contains, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::FixedSizeArrays.Vec{2,Float64}) at ./<missing>:0
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:16 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:532
   [14] include(::String) at ./sysimg.jl:14
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] process_options(::Base.JLOptions) at ./client.jl:298
   [21] _start() at ./client.jl:364
counterexample: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(pt,s) ≈ √4.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:27 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
counterexample: Error During Test
  Got an exception of type DimensionMismatch outside of a @test
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{2,2,Float64}, ::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{2,2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:29 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(min_euclidean(Vec(0.0,0.0,0),s)) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:38 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(0.5,0.0,0),s) ≈ 0
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:39 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-1,-1.0,0),s) ≈ √2
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:40 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(-7,0.5,0),s) ≈ 7
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:41 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0,0),s) ≈ √0.5
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:42 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: min_euclidean(Vec(1.0,1.0,1),s) ≈ √3 * (2 / 3)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:99
   [7] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [8] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:43 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [17] macro expansion; at ./test.jl:714 [inlined]
   [18] anonymous at ./<missing>:?
   [19] include_from_node1(::String) at ./loading.jl:532
   [20] include(::String) at ./sysimg.jl:14
   [21] process_options(::Base.JLOptions) at ./client.jl:298
   [22] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ 1 / 6
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:44 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:532
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:298
   [17] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(1,0,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:45 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
3d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.1,0,0.1))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] *(::FixedSizeArrays.Mat{3,3,Float64}, ::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:317
   [4] pinvli(::FixedSizeArrays.Mat{3,3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [5] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [6] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:46 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(0.0,2)) ≈ Vec(0,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   [5] (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:52 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(0.0,-2)) ≈ Vec(0,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   [5] (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:53 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(56.0,2)) ≈ Vec(1,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   [5] (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:54 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 2d: Error During Test
  Test threw an exception of type MethodError
  Expression: proj(Vec(-56.0,2)) ≈ Vec(-1,1.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:71
   [5] (::#proj#13)(::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:51
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:55 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: @inferred(min_euclidean(Vec(0.0,0.0,0),s)) ≈ 0
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [5] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:60 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(0.5,0.5,0.5),s) ≈ 0
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [5] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:61 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(-1,0,0.0),s) ≈ 1
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [5] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:62 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(Vec(1,0,0.0),s) ≈ √(2 / 3)
  MethodError: no method matching *(::FixedSizeArrays.Vec{3,Float64}, ::FixedSizeArrays.Vec{3,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{3,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::Float64) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:74
   [4] sqdist; at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:122 [inlined] (repeats 2 times)
   [5] min_euclidean; at /home/vagrant/.julia/v0.6/GeometryTypes/src/operations.jl:53 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:63 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: @inferred(volume(s)) ≈ √3
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] volume(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:31
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:64 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:532
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:532
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:298
   [17] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: contains(s,Vec(0.2,0.2,0.2))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] pinvli(::FixedSizeArrays.Mat{3,1,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [4] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [5] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:66 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
1d simplex in 3d: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(contains(s,Vec(0.1,0.0999,0.1)))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] pinvli(::FixedSizeArrays.Mat{3,1,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:11
   [4] weights(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:43
   [5] #contains#14(::Float64, ::Float64, ::Function, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/relations.jl:79
   [6] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:67 [inlined]
   [7] macro expansion; at ./test.jl:714 [inlined]
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/simplices.jl:0 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:21 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] anonymous at ./<missing>:?
   [16] include_from_node1(::String) at ./loading.jl:532
   [17] include(::String) at ./sysimg.jl:14
   [18] process_options(::Base.JLOptions) at ./client.jl:298
   [19] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
conversions: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(FlexibleConvexHull(i1),i2)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] isapprox(::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] isapprox(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:16 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
Utility functions: Error During Test
  Got an exception of type ErrorException outside of a @test
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:23 [inlined]
   [2] macro expansion; at ./test.jl:714 [inlined]
   [3] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [4] macro expansion; at ./test.jl:714 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:532
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] process_options(::Base.JLOptions) at ./client.jl:298
   [14] _start() at ./client.jl:364
isapprox: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: !(isapprox(s,s2))
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:40 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:532
   [14] include(::String) at ./sysimg.jl:14
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] process_options(::Base.JLOptions) at ./client.jl:298
   [21] _start() at ./client.jl:364
isapprox: Error During Test
  Test threw an exception of type DimensionMismatch
  Expression: isapprox(s,s2,atol=100.0)
  DimensionMismatch("Nested tuples must have equal length to form a FixedSizeArray")
  Stacktrace:
   [1] nested_Tuple_shape(::Type{T}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:214
   [2] construct_similar(...) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/core.jl:231
   [3] macro expansion at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:81 [inlined]
   [4] map at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/mapreduce.jl:113 [inlined]
   [5] - at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:81 [inlined]
   [6] #isapprox#103(::Float64, ::Float64, ::Base.LinAlg.#vecnorm, ::Function, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/array_of_fixedsize.jl:29
   [7] (::Base.#kw##isapprox)(::Array{Any,1}, ::Base.#isapprox, ::FixedSizeArrays.Mat{2,3,Float64}, ::FixedSizeArrays.Mat{2,3,Float64}) at ./<missing>:0
   [8] #isapprox#58(::Array{Any,1}, ::Function, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:71
   [9] (::Base.#kw##isapprox)(::Array{Any,1}, ::Base.#isapprox, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{3,FixedSizeArrays.Vec{2,Float64}}) at ./<missing>:0
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:41 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:532
   [16] include(::String) at ./sysimg.jl:14
   [17] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [18] macro expansion; at ./test.jl:714 [inlined]
   [19] anonymous at ./<missing>:?
   [20] include_from_node1(::String) at ./loading.jl:532
   [21] include(::String) at ./sysimg.jl:14
   [22] process_options(::Base.JLOptions) at ./client.jl:298
   [23] _start() at ./client.jl:364
Rects: Error During Test
  Got an exception of type ErrorException outside of a @test
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] convert(::Type{GeometryTypes.FlexibleConvexHull}, ::GeometryTypes.HyperCube{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/convexhulls.jl:68
   [2] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:51 [inlined]
   [3] macro expansion; at ./test.jl:714 [inlined]
   [4] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/convexhulls.jl:9 [inlined]
   [5] macro expansion; at ./test.jl:714 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:532
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:22 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:298
   [15] _start() at ./client.jl:364
two simplices: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk(c1,c2) ≈ 3
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   [4] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   [5] (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   [6] macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   [7] with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   [8] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23 [inlined]
   [9] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   [10] gjk(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:21 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [21] macro expansion; at ./test.jl:714 [inlined]
   [22] anonymous at ./<missing>:?
   [23] include_from_node1(::String) at ./loading.jl:532
   [24] include(::String) at ./sysimg.jl:14
   [25] process_options(::Base.JLOptions) at ./client.jl:298
   [26] _start() at ./client.jl:364
two simplices: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(c1,c2) ≈ 3
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   [4] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   [5] (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   [6] macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   [7] with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   [8] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23 [inlined]
   [9] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   [10] gjk(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:22 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [21] macro expansion; at ./test.jl:714 [inlined]
   [22] anonymous at ./<missing>:?
   [23] include_from_node1(::String) at ./loading.jl:532
   [24] include(::String) at ./sysimg.jl:14
   [25] process_options(::Base.JLOptions) at ./client.jl:298
   [26] _start() at ./client.jl:364
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk0(FlexibleConvexHull(md)) == (Vec(0,0.0),0.0)
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   [4] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   [5] (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   [6] macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   [7] with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   [8] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   [9] gjk0(::GeometryTypes.FlexibleConvexHull{FixedSizeArrays.Vec{2,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   [10] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:42 [inlined]
   [11] macro expansion; at ./test.jl:714 [inlined]
   [12] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [13] macro expansion; at ./test.jl:714 [inlined]
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [20] macro expansion; at ./test.jl:714 [inlined]
   [21] anonymous at ./<missing>:?
   [22] include_from_node1(::String) at ./loading.jl:532
   [23] include(::String) at ./sysimg.jl:14
   [24] process_options(::Base.JLOptions) at ./client.jl:298
   [25] _start() at ./client.jl:364
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: gjk(c1,c3) == 0.0
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   [4] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   [5] (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   [6] macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   [7] with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   [8] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   [9] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   [10] gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:43 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [21] macro expansion; at ./test.jl:714 [inlined]
   [22] anonymous at ./<missing>:?
   [23] include_from_node1(::String) at ./loading.jl:532
   [24] include(::String) at ./sysimg.jl:14
   [25] process_options(::Base.JLOptions) at ./client.jl:298
   [26] _start() at ./client.jl:364
gjk intersecting lines: Error During Test
  Test threw an exception of type MethodError
  Expression: min_euclidean(c1,c3) == 0.0
  MethodError: no method matching *(::FixedSizeArrays.Vec{2,Float64}, ::FixedSizeArrays.Vec{2,Float64})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:273
    *(!Matched::Number, ::FixedSizeArrays.FixedArray{T,NDim,SIZE}) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:95
    *(::FixedSizeArrays.FixedArray{T,NDim,SIZE}, !Matched::Number) at /home/vagrant/.julia/v0.6/FixedSizeArrays/src/ops.jl:96
    ...
  Stacktrace:
   [1] power_by_squaring(::FixedSizeArrays.Vec{2,Float64}, ::Int64) at ./intfuncs.jl:166
   [2] sqnorm at /home/vagrant/.julia/v0.6/GeometryTypes/src/linalgutils.jl:2 [inlined]
   [3] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:128 [inlined]
   [4] proj_sqdist at /home/vagrant/.julia/v0.6/GeometryTypes/src/simplices.jl:134 [inlined] (repeats 2 times)
   [5] (::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}})(::GeometryTypes.Simplex{1,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:24
   [6] macro expansion at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:18 [inlined]
   [7] with_immutable(::GeometryTypes.##59#60{FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}, ::Type{Val{10}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:16
   [8] proj_sqdist(::FixedSizeArrays.Vec{2,Float64}, ::GeometryTypes.FlexibleSimplex{FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:23
   [9] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}},GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{2,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:134
   [10] gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}, ::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{2,Float64}}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [11] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:44 [inlined]
   [12] macro expansion; at ./test.jl:714 [inlined]
   [13] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [14] macro expansion; at ./test.jl:714 [inlined]
   [15] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [16] macro expansion; at ./test.jl:714 [inlined]
   [17] anonymous at ./<missing>:?
   [18] include_from_node1(::String) at ./loading.jl:532
   [19] include(::String) at ./sysimg.jl:14
   [20] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [21] macro expansion; at ./test.jl:714 [inlined]
   [22] anonymous at ./<missing>:?
   [23] include_from_node1(::String) at ./loading.jl:532
   [24] include(::String) at ./sysimg.jl:14
   [25] process_options(::Base.JLOptions) at ./client.jl:298
   [26] _start() at ./client.jl:364
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, :(min_euclidean(Vec(2,2,2.0),c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(gjk(Vec(2,2,2.0),c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(√(3 / 4))))
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   [2] support_vector_max(::GeometryTypes.MinkowskiDifference{FixedSizeArrays.Vec{3,Float64},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   [3] gjk0(::GeometryTypes.MinkowskiDifference{FixedSizeArrays.Vec{3,Float64},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   [4] gjk(::FixedSizeArrays.Vec{3,Float64}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [5] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:50 [inlined]
   [6] macro expansion; at ./test.jl:714 [inlined]
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, 0)) $(Expr(:escape, :(<=))) $(Expr(:escape, :(min_euclidean(s,c)))) $(Expr(:escape, :(<=))) $(Expr(:escape, 1.0e-14))
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   [2] support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   [3] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   [4] gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [5] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:53 [inlined]
   [6] macro expansion; at ./test.jl:714 [inlined]
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, 0)) $(Expr(:escape, :(<=))) $(Expr(:escape, :(gjk(s,c)))) $(Expr(:escape, :(<=))) $(Expr(:escape, 1.0e-14))
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   [2] support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   [3] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   [4] gjk(::GeometryTypes.Simplex{2,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [5] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:54 [inlined]
   [6] macro expansion; at ./test.jl:714 [inlined]
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
Cube: Error During Test
  Test threw an exception of type ErrorException
  Expression: $(Expr(:escape, :(min_euclidean(s,c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(gjk(s,c)))) $(Expr(:escape, :≈)) $(Expr(:escape, :(√(3 / 4))))
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] support_vector_max(::GeometryTypes.HyperCube{3,Float64}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:64
   [2] support_vector_max(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:77
   [3] gjk0(::GeometryTypes.MinkowskiDifference{GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}},GeometryTypes.HyperCube{3,Float64}}, ::Float64, ::Int64, ::FixedSizeArrays.Vec{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:129
   [4] gjk(::GeometryTypes.Simplex{4,FixedSizeArrays.Vec{3,Float64}}, ::GeometryTypes.HyperCube{3,Float64}) at /home/vagrant/.julia/v0.6/GeometryTypes/src/gjk.jl:152
   [5] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:57 [inlined]
   [6] macro expansion; at ./test.jl:714 [inlined]
   [7] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [8] macro expansion; at ./test.jl:714 [inlined]
   [9] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [10] macro expansion; at ./test.jl:714 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:532
   [13] include(::String) at ./sysimg.jl:14
   [14] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [15] macro expansion; at ./test.jl:714 [inlined]
   [16] anonymous at ./<missing>:?
   [17] include_from_node1(::String) at ./loading.jl:532
   [18] include(::String) at ./sysimg.jl:14
   [19] process_options(::Base.JLOptions) at ./client.jl:298
   [20] _start() at ./client.jl:364
support_vector_max: Error During Test
  Test threw an exception of type ErrorException
  Expression: support_vector_max(FlexibleConvexHull(r),Vec(1,1.0)) == (Vec(0.5,1.0),1.5)
  generated function body is not pure. this likely means it contains a closure or comprehension.
  Stacktrace:
   [1] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:69 [inlined]
   [2] macro expansion; at ./test.jl:714 [inlined]
   [3] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/gjk.jl:0 [inlined]
   [4] macro expansion; at ./test.jl:714 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:532
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion; at /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl:23 [inlined]
   [9] macro expansion; at ./test.jl:714 [inlined]
   [10] anonymous at ./<missing>:?
   [11] include_from_node1(::String) at ./loading.jl:532
   [12] include(::String) at ./sysimg.jl:14
   [13] process_options(::Base.JLOptions) at ./client.jl:298
   [14] _start() at ./client.jl:364
ERROR: LoadError: Some tests did not pass: 248 passed, 0 failed, 59 errored, 0 broken.
Stacktrace:
 [1] finish(::Base.Test.DefaultTestSet) at ./test.jl:524
 [2] macro expansion; at ./test.jl:721 [inlined]
 [3] anonymous at ./<missing>:?
 [4] include_from_node1(::String) at ./loading.jl:532
 [5] include(::String) at ./sysimg.jl:14
 [6] process_options(::Base.JLOptions) at ./client.jl:298
 [7] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl, in expression starting on line 10
============================[ ERROR: GeometryTypes ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/GeometryTypes/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.2
ERROR: GeometryTypes had test errors
Stacktrace:
 [1] #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:754
 [2] (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 [3] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 [4] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 [5] #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 [6] (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 [7] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 [8] test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 [9] eval(::Module, ::Any) at ./boot.jl:236
 [10] process_options(::Base.JLOptions) at ./client.jl:275
 [11] _start() at ./client.jl:364

>>> End of log
