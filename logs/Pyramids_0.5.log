>>> 'Pkg.add("Pyramids")' log
INFO: Cloning cache of AxisAlgorithms from https://github.com/timholy/AxisAlgorithms.jl.git
INFO: Cloning cache of Interpolations from https://github.com/tlycken/Interpolations.jl.git
INFO: Cloning cache of Pyramids from https://github.com/loganwilliams/Pyramids.jl.git
INFO: Cloning cache of Ratios from https://github.com/timholy/Ratios.jl.git
INFO: Installing AxisAlgorithms v0.1.5
INFO: Installing BinDeps v0.4.2
INFO: Installing ColorTypes v0.2.5
INFO: Installing ColorVectorSpace v0.1.5
INFO: Installing Colors v0.6.6
INFO: Installing FileIO v0.1.0
INFO: Installing FixedPointNumbers v0.1.4
INFO: Installing Graphics v0.1.3
INFO: Installing Images v0.5.7
INFO: Installing Interpolations v0.3.5
INFO: Installing Pyramids v0.0.1
INFO: Installing Ratios v0.0.4
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing SIUnits v0.0.6
INFO: Installing StatsBase v0.9.0
INFO: Installing StatsFuns v0.3.0
INFO: Installing TexExtensions v0.0.3
INFO: Installing URIParser v0.1.5
INFO: Installing WoodburyMatrices v0.2.0
INFO: Installing Zlib v0.1.12
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("Pyramids")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1876.5390625 MB free)
Uptime: 13526.0 sec
Load Avg:  1.044921875  1.07421875  1.0146484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     715522 s       5680 s      80978 s     371437 s         28 s
#2  3499 MHz     253032 s        105 s      42115 s    1008493 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - Pyramids                      0.0.1
22 additional packages:
 - AxisAlgorithms                0.1.5
 - BinDeps                       0.4.2
 - ColorTypes                    0.2.5
 - ColorVectorSpace              0.1.5
 - Colors                        0.6.6
 - Compat                        0.8.6
 - FileIO                        0.1.0
 - FixedPointNumbers             0.1.4
 - Graphics                      0.1.3
 - Images                        0.5.7
 - Interpolations                0.3.5
 - Ratios                        0.0.4
 - Reexport                      0.0.3
 - Rmath                         0.1.2
 - SHA                           0.2.0
 - SIUnits                       0.0.6
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.0
 - TexExtensions                 0.0.3
 - URIParser                     0.1.5
 - WoodburyMatrices              0.2.0
 - Zlib                          0.1.12
INFO: Testing Pyramids
WARNING: error while reinitializing value MethodTable(name=:add_format, defs=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Any, Any, Any, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Any, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Union{AbstractArray{T<:Any, 1}, Tuple, String}, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Tuple{Vararg{#T<:Array{UInt8, 1}, #N<:Any}}, Any}, tvars=svec(#sym<:Any, #T<:Array{UInt8, 1}, #N<:Any), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), any=nothing, key=#<null>), max_args=4, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_format(...):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:add_saver, defs=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{#sym<:Any}}, Symbol}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol), isleafsig=false, issimplesig=true, va=false)], list=nothing, any=nothing, key=#<null>), max_args=3, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_saver(...):
OutOfMemoryError()
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Rmath.ji for module Rmath.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsFuns.ji for module StatsFuns.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsBase.ji for module StatsBase.
WARNING: error while reinitializing value MethodTable(name=:add_format, defs=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Any, Any, Any, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Any, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Union{AbstractArray{T<:Any, 1}, Tuple, String}, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Tuple{Vararg{#T<:Array{UInt8, 1}, #N<:Any}}, Any}, tvars=svec(#sym<:Any, #T<:Array{UInt8, 1}, #N<:Any), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), any=nothing, key=#<null>), max_args=4, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_format(...):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:add_saver, defs=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{#sym<:Any}}, Symbol}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol), isleafsig=false, issimplesig=true, va=false)], list=nothing, any=nothing, key=#<null>), max_args=3, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_saver(...):
OutOfMemoryError()
WARNING: Method definition iextract(Type{#T<:Interpolations.GridType}, Any) in module Interpolations at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/b-splines.jl:35 overwritten at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/gridded.jl:43.
Running end-to-end image comparison test for Complex Steerable Pyramid.
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in define_indices_d(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:2
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:44
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in define_indices_d(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:2
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:44
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in define_indices_d(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:2
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:44
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:10
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:10
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:10
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:11
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:11
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:11
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:12
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in coefficients(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:12
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:45
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:36
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:27
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:47
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:37
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:27
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:47
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in offsetsym(::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:158
 in collect(::Base.Generator{UnitRange{Int64},Interpolations.##35#36{Tuple{Int64}}}) at ./array.jl:274
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64, ::Vararg{Int64,N}) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:40
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:38
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:27
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:47
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in offsetsym(::Int64, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:158
 in collect(::Base.Generator{UnitRange{Int64},Interpolations.##35#36{Tuple{Int64}}}) at ./array.jl:274
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64, ::Int64, ::Vararg{Int64,N}) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:40
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/linear.jl:38
 in index_gen(::Type{Interpolations.Gridded{Interpolations.Linear}}, ::Int64) at /home/vagrant/.julia/v0.5/Interpolations/src/b-splines/indexing.jl:27
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:47
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{Any,N}) at ./deprecated.jl:30
 in getindex!(...) at /home/vagrant/.julia/v0.5/Interpolations/src/gridded/indexing.jl:49
 in specialize_method at ./inference.jl:1383 [inlined]
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1479
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Tuple{}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_apply(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:920
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:989
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1716
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1588
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::Core.Inference.InferenceState) at ./inference.jl:1528
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1533
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:846
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1037
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1067
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:394
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1041
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1088
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1179
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1661
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1606
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Bool, ::Bool, ::Bool, ::LambdaInfo) at ./inference.jl:1528
 in typeinf_ext(::LambdaInfo) at ./inference.jl:1551
 in (::Pyramids.#kw##build_complex_steerable_pyramid)(::Array{Any,1}, ::Pyramids.#build_complex_steerable_pyramid, ::Array{Float64,2}, ::Int64, ::Int64) at ./<missing>:0
 in (::Pyramids.##call#1#6)(::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Type{T}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/src/Pyramids.jl:59
 in (::Core.#kw#Type)(::Array{Any,1}, ::Type{Pyramids.ImagePyramid}, ::Array{Float64,2}, ::Pyramids.ComplexSteerablePyramid) at ./<missing>:0
 in #end_to_end#1(::Bool, ::Function, ::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:13
 in end_to_end(::Pyramids.ComplexSteerablePyramid) at /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl:5
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Pyramids/test/runtests.jl, in expression starting on line 24
	without array conversion
Running end-to-end image comparison test for Gaussian Pyramid.
	without array conversion
Running end-to-end image comparison test for Laplacian Pyramid.
Tests passing.
INFO: Pyramids tests passed

>>> End of log
