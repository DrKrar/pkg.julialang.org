>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.1
INFO: Package database updated

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1465.94921875 MB free)
Uptime: 43912.0 sec
Load Avg:  1.00439453125  1.0146484375  0.97705078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2132514 s       2161 s     167466 s    1628412 s        150 s
#2  3500 MHz    1421014 s       5413 s     144723 s    2654966 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - KrylovMethods                 0.2.1
1 additional packages:
 - Compat                        0.19.0
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Cloning cache of MatrixDepot from git://github.com/weijianzhang/MatrixDepot.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.2.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	9.96e-02
  2	9.81e-02
  3	1.02e-03
bicgstb iterated maxIter (=3) times but reached only residual norm 9.81e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6. Residual norm is 8.33e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	7.81e-02
  2	3.54e-02
  3	4.00e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 3.54e-02 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 6.5. Residual norm is 4.04e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
WARNING: could not import Base.issymmetric into LinearOperators
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	1.51e-01
cg iterated maxIter (=1) times but reached only residual norm 1.51e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 9.47e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	8.85e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 8.85e-16.
=== blockcg ===
iter	max(relres)
  1	4.75e-16
blockCG iterated maxIter (=1) times but reached only residual norm 4.75e-16 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	3.91e-01
  2	2.27e-01
  3	1.68e-01
  4	1.40e-01
  5	9.87e-02
  6	6.05e-02
  7	3.52e-02
  8	1.79e-02
  9	8.15e-03
 10	3.69e-03
 11	1.65e-03
 12	8.07e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 8.07e-04.
=== blockcg ===
iter	max(relres)
  1	3.91e-01
  2	2.27e-01
  3	1.68e-01
  4	1.40e-01
  5	9.87e-02
  6	6.05e-02
  7	3.52e-02
  8	1.79e-02
  9	8.15e-03
 10	3.69e-03
 11	1.65e-03
 12	8.07e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 8.07e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	8.85e+00	5.93e-01	1.07e+01
  2	7.38e-01	6.42e-01	1.06e+01
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  7.38e-01.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  6.53e-10.
=== CGLS: All tests passed. ===
=== Testing GS ===
=== GS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	3.3e-01 1.1e-01 4.2e-02 	 4.2e-02
  2	1.5e-02 6.0e-03 2.2e-03 	 2.2e-03
  3	7.1e-04 2.7e-04 8.9e-05 	 8.9e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 4.19e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,-1.177270031531701]
Givens rotation for v=[-0.927414396385941,0.0]
Givens rotation for v=[0.32236847086972814,-0.8501055055101565]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 31. Residual norm is 9.92e-03.
ssor achieved desired tolerance at iteration 47. Residual norm is 9.76e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 54. Residual norm is 8.18e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.44e-01
  2	6.39e-02
  3	3.89e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.89e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 15. Residual norm is 9.43e-03.
ssor achieved desired tolerance at iteration 22. Residual norm is 9.67e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 1.14e+00.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 9.83e+00.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 2.89e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	2.89e-01	1.25e+00	5.71e+00		1.19e+00
2	3.45e-02	9.24e-02	8.37e+00		1.75e+00
3	4.35e-03	8.56e-03	8.37e+00		1.75e+00
4	1.26e-04	6.22e-05	8.37e+00		1.75e+00
5	3.41e-07	1.28e-08	8.37e+00		1.88e+00
6	1.96e-10	1.43e-12	8.37e+00		2.07e+00
7	1.69e-17	1.81e-23	8.37e+00		2.09e+00
minres converged at iteration 7. |A r_k|=1.81e-23 and |r_k|=1.69e-17.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	8.94e-02	6.47e-01	7.56e+00		1.01e+00
2	4.41e-03	3.08e-03	7.56e+00		1.59e+00
3	4.48e-04	8.06e-04	7.56e+00		1.59e+00
4	1.32e-05	5.88e-06	7.56e+00		1.59e+00
5	6.52e-08	4.51e-09	7.56e+00		1.68e+00
6	3.92e-11	2.98e-13	7.56e+00		1.87e+00
7	1.57e-18	7.89e-25	7.56e+00		1.89e+00
minres converged at iteration 7. |A r_k|=7.89e-25 and |r_k|=1.57e-18.
test stop by condlim
The estimated condition number (=2.81e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 16.
test stop by beta
minres stopped because beta (=9.39e-13) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.2.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
