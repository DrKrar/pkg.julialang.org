>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (931.296875 MB free)
Uptime: 32106.0 sec
Load Avg:  0.93212890625  0.97021484375  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1445097 s       3426 s     143371 s    1229661 s         56 s
#2  3500 MHz     920574 s       3673 s     127947 s    1980184 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - KrylovMethods                 0.2.0
1 additional packages:
 - Compat                        0.8.6
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.1.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	1.10e-01
  2	1.15e-02
  3	1.86e-03
bicgstb iterated maxIter (=3) times but reached only residual norm 1.15e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 7. Residual norm is 2.88e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	1.00e-01
  2	1.07e-02
  3	2.46e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.07e-02 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 6.5. Residual norm is 6.30e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	1.05e-01
cg iterated maxIter (=1) times but reached only residual norm 1.05e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 8.63e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	5.26e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 5.26e-16.
=== blockcg ===
iter	max(relres)
  1	9.10e-15
blockCG iterated maxIter (=1) times but reached only residual norm 9.10e-15 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	4.26e-01
  2	2.54e-01
  3	1.81e-01
  4	1.12e-01
  5	8.09e-02
  6	5.75e-02
  7	4.10e-02
  8	2.44e-02
  9	1.29e-02
 10	6.43e-03
 11	2.95e-03
 12	1.20e-03
 13	4.46e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 4.46e-04.
=== blockcg ===
iter	max(relres)
  1	4.26e-01
  2	2.54e-01
  3	1.81e-01
  4	1.12e-01
  5	8.09e-02
  6	5.75e-02
  7	4.10e-02
  8	2.44e-02
  9	1.29e-02
 10	6.43e-03
 11	2.95e-03
 12	1.20e-03
 13	4.46e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 4.46e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	1.03e+01	4.05e-01	1.01e+01
  2	1.05e+00	5.25e-01	1.01e+01
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  1.05e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  4.19e-11.
=== CGLS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	2.7e-01 7.1e-02 2.0e-02 	 2.0e-02
  2	6.0e-03 1.7e-03 3.8e-04 	 3.8e-04
  3	1.2e-04 3.5e-05 8.8e-06 	 8.8e-06
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 7.56e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,-0.5870254195798648]
Givens rotation for v=[-0.44956345055819397,0.0]
Givens rotation for v=[-1.5648856729563367,0.1940564783118096]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 31. Residual norm is 9.80e-03.
ssor achieved desired tolerance at iteration 46. Residual norm is 9.89e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 54. Residual norm is 5.98e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.42e-01
  2	6.34e-02
  3	3.90e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.90e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 16. Residual norm is 9.08e-03.
ssor achieved desired tolerance at iteration 23. Residual norm is 9.61e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 4.86e-01.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 9.42e+00.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 1.97e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.97e-01	4.36e-01	5.31e+00		1.12e+00
2	1.46e-02	1.30e-02	5.54e+00		1.16e+00
3	5.58e-04	2.72e-04	5.54e+00		1.16e+00
4	1.04e-04	2.38e-04	5.54e+00		1.16e+00
5	5.71e-07	3.41e-08	5.54e+00		1.18e+00
6	7.77e-13	1.01e-17	5.54e+00		1.37e+00
minres converged at iteration 6. |A r_k|=1.01e-17 and |r_k|=7.77e-13.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	4.13e-02	1.06e-01	5.19e+00		1.00e+00
2	1.76e-03	8.34e-04	5.28e+00		1.09e+00
3	1.11e-04	8.97e-05	5.48e+00		1.14e+00
4	1.80e-05	3.66e-05	5.48e+00		1.14e+00
5	9.57e-08	5.35e-09	5.48e+00		1.22e+00
6	1.37e-13	1.87e-18	5.48e+00		1.36e+00
minres converged at iteration 6. |A r_k|=1.87e-18 and |r_k|=1.37e-13.
test stop by condlim
The estimated condition number (=2.59e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 16.
test stop by beta
minres stopped because beta (=2.19e-13) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	gmres iterated maxIter (=300) times without achieving the desired tolerance.
 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.1.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
