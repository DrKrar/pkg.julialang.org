>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1519.30078125 MB free)
Uptime: 32735.0 sec
Load Avg:  0.8876953125  0.9375  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1617132 s       6011 s     135044 s    1160189 s         41 s
#2  3499 MHz     962250 s        185 s     117148 s    2073380 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - KrylovMethods                 0.2.1
1 additional packages:
 - Compat                        0.9.3
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Cloning cache of MatrixDepot from git://github.com/weijianzhang/MatrixDepot.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.2.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	7.61e-02
  2	8.85e-02
  3	8.30e-04
bicgstb iterated maxIter (=3) times but reached only residual norm 8.85e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6. Residual norm is 5.14e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	1.05e-01
  2	1.23e-01
  3	8.90e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.23e-01 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 6.5. Residual norm is 5.99e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
WARNING: could not import Base.issymmetric into LinearOperators
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	2.23e-01
cg iterated maxIter (=1) times but reached only residual norm 2.23e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 7.32e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	3.38e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 3.38e-16.
=== blockcg ===
iter	max(relres)
  1	2.32e-15
blockCG iterated maxIter (=1) times but reached only residual norm 2.32e-15 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	3.94e-01
  2	2.42e-01
  3	1.89e-01
  4	1.55e-01
  5	1.17e-01
  6	7.78e-02
  7	4.52e-02
  8	2.43e-02
  9	1.27e-02
 10	5.86e-03
 11	2.45e-03
 12	9.36e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 9.36e-04.
=== blockcg ===
iter	max(relres)
  1	3.94e-01
  2	2.42e-01
  3	1.89e-01
  4	1.55e-01
  5	1.17e-01
  6	7.78e-02
  7	4.52e-02
  8	2.43e-02
  9	1.27e-02
 10	5.86e-03
 11	2.45e-03
 12	9.36e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 9.36e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	1.86e+01	5.31e-01	8.42e+00
  2	3.06e+00	6.86e-01	8.35e+00
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  3.06e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  5.96e-08.
=== CGLS: All tests passed. ===
=== Testing GS ===
=== GS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	3.3e-01 1.1e-01 3.1e-02 	 3.1e-02
  2	8.5e-03 2.7e-03 7.3e-04 	 7.3e-04
  3	2.1e-04 6.1e-05 1.8e-05 	 1.8e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 4.44e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,-0.6785521693811519]
Givens rotation for v=[-0.625889189575665,0.0]
Givens rotation for v=[1.3130342119549578,-0.4736848351560781]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 42. Residual norm is 9.92e-03.
ssor achieved desired tolerance at iteration 63. Residual norm is 9.91e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 54. Residual norm is 6.33e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.43e-01
  2	6.51e-02
  3	4.07e-02
ssor iterated maxIter (=3) times but reached only residual norm 4.07e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 16. Residual norm is 9.61e-03.
ssor achieved desired tolerance at iteration 24. Residual norm is 9.47e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 6.25e-01.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 1.12e+01.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 2.38e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	2.38e-01	6.76e-01	5.20e+00		1.16e+00
2	4.95e-02	2.29e-01	9.17e+00		2.05e+00
3	7.78e-04	1.77e-04	9.17e+00		2.05e+00
4	1.01e-04	1.94e-04	9.17e+00		2.05e+00
5	4.66e-06	2.48e-06	9.17e+00		2.11e+00
6	1.74e-07	8.31e-08	9.17e+00		2.11e+00
7	9.00e-09	5.13e-09	9.17e+00		2.22e+00
8	2.11e-12	6.06e-15	9.17e+00		2.22e+00
9	1.52e-16	1.16e-19	9.17e+00		2.29e+00
minres converged at iteration 9. |A r_k|=1.16e-19 and |r_k|=1.52e-16.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	7.36e-02	5.20e-01	8.62e+00		1.00e+00
2	8.16e-03	1.11e-02	8.62e+00		1.78e+00
3	1.98e-04	6.57e-05	8.62e+00		1.78e+00
4	1.21e-05	1.15e-05	8.62e+00		1.78e+00
5	3.41e-07	1.06e-07	8.62e+00		2.09e+00
6	2.04e-08	1.55e-08	8.62e+00		2.09e+00
7	2.26e-10	2.74e-11	8.62e+00		2.10e+00
8	2.77e-13	4.25e-15	8.62e+00		2.10e+00
minres converged at iteration 8. |A r_k|=4.25e-15 and |r_k|=2.77e-13.
test stop by condlim
The estimated condition number (=2.07e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 11.
test stop by beta
minres stopped because beta (=5.25e-14) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.2.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
