>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (934.05859375 MB free)
Uptime: 31637.0 sec
Load Avg:  1.03125  0.9853515625  0.97021484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1504432 s        392 s     148104 s    1115937 s        101 s
#2  3500 MHz     910358 s       5080 s     132139 s    1954585 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - KrylovMethods                 0.2.1
1 additional packages:
 - Compat                        0.9.2
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Cloning cache of MatrixDepot from git://github.com/weijianzhang/MatrixDepot.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.1.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	1.24e-01
  2	1.32e-02
  3	7.08e-02
bicgstb iterated maxIter (=3) times but reached only residual norm 1.32e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6.5. Residual norm is 7.51e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	9.16e-02
  2	1.42e-02
  3	2.34e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.42e-02 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 6.5. Residual norm is 9.34e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	1.85e-01
cg iterated maxIter (=1) times but reached only residual norm 1.85e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 8.35e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	1.32e-15
  2	3.22e-29
blockCG achieved desired tolerance at iteration 2. Residual norm is 3.22e-29.
=== blockcg ===
iter	max(relres)
  1	4.80e-16
blockCG iterated maxIter (=1) times but reached only residual norm 4.80e-16 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	3.91e-01
  2	2.29e-01
  3	1.75e-01
  4	1.31e-01
  5	1.05e-01
  6	8.51e-02
  7	5.62e-02
  8	3.10e-02
  9	1.42e-02
 10	6.33e-03
 11	2.87e-03
 12	1.33e-03
 13	5.81e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 5.81e-04.
=== blockcg ===
iter	max(relres)
  1	3.91e-01
  2	2.29e-01
  3	1.75e-01
  4	1.31e-01
  5	1.05e-01
  6	8.51e-02
  7	5.62e-02
  8	3.10e-02
  9	1.42e-02
 10	6.33e-03
 11	2.87e-03
 12	1.33e-03
 13	5.81e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 5.81e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	1.47e+01	5.91e-01	1.06e+01
  2	2.13e+00	7.01e-01	1.06e+01
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  2.13e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  9.38e-10.
=== CGLS: All tests passed. ===
=== Testing GS ===
=== GS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	3.1e-01 1.0e-01 3.3e-02 	 3.3e-02
  2	1.1e-02 3.6e-03 1.0e-03 	 1.0e-03
  3	3.2e-04 9.8e-05 3.4e-05 	 3.4e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 9.61e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,1.580681102131686]
Givens rotation for v=[1.8154740829584861,0.0]
Givens rotation for v=[-0.838390897049445,-0.1315727895187505]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 24. Residual norm is 9.77e-03.
ssor achieved desired tolerance at iteration 36. Residual norm is 9.73e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 53. Residual norm is 9.55e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.43e-01
  2	6.38e-02
  3	3.91e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.91e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 15. Residual norm is 9.34e-03.
ssor achieved desired tolerance at iteration 22. Residual norm is 9.57e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 4.12e-02.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 1.01e+01.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 3.56e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	3.56e-01	2.59e+00	6.72e+00		1.18e+00
2	9.17e-02	5.55e-01	8.46e+00		1.49e+00
3	6.47e-03	1.21e-02	8.53e+00		1.50e+00
4	4.39e-04	5.48e-04	8.53e+00		1.66e+00
5	1.31e-05	5.90e-06	8.53e+00		2.04e+00
6	5.15e-07	3.23e-07	8.53e+00		2.04e+00
7	1.24e-09	4.75e-11	8.53e+00		2.04e+00
8	8.42e-17	8.36e-23	8.53e+00		2.10e+00
minres converged at iteration 8. |A r_k|=8.36e-23 and |r_k|=8.42e-17.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.50e-01	1.59e+00	7.09e+00		1.02e+00
2	2.21e-02	6.44e-02	8.60e+00		1.41e+00
3	1.12e-03	1.45e-03	8.60e+00		1.41e+00
4	1.27e-04	2.49e-04	8.60e+00		1.78e+00
5	3.50e-06	1.52e-06	8.60e+00		1.95e+00
6	1.38e-07	8.65e-08	8.60e+00		1.95e+00
7	4.10e-10	1.95e-11	8.60e+00		1.95e+00
8	8.01e-17	2.29e-22	8.60e+00		2.11e+00
minres converged at iteration 8. |A r_k|=2.29e-22 and |r_k|=8.01e-17.
test stop by condlim
The estimated condition number (=2.04e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 15.
test stop by beta
minres stopped because beta (=9.63e-14) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	gmres iterated maxIter (=17050) times without achieving the desired tolerance.
 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.1.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
