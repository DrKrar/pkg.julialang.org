>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (938.37890625 MB free)
Uptime: 33572.0 sec
Load Avg:  0.92041015625  0.93896484375  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz    1492152 s       3216 s     160514 s    1305521 s         60 s
#2  3507 MHz    1037753 s       4069 s     139550 s    2012492 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - KrylovMethods                 0.2.0
1 additional packages:
 - Compat                        0.8.7
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.1.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	8.68e-02
  2	1.28e-02
  3	7.14e-03
bicgstb iterated maxIter (=3) times but reached only residual norm 1.28e-02 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 8.5. Residual norm is 5.32e-09.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	9.02e-02
  2	1.44e-02
  3	6.25e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 1.44e-02 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 6.5. Residual norm is 3.17e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	1.90e-01
cg iterated maxIter (=1) times but reached only residual norm 1.90e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 8.98e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	1.57e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 1.57e-16.
=== blockcg ===
iter	max(relres)
  1	2.62e-15
blockCG iterated maxIter (=1) times but reached only residual norm 2.62e-15 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	4.25e-01
  2	2.90e-01
  3	2.17e-01
  4	1.53e-01
  5	1.10e-01
  6	7.93e-02
  7	4.91e-02
  8	2.37e-02
  9	1.02e-02
 10	4.42e-03
 11	1.87e-03
 12	7.39e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 7.39e-04.
=== blockcg ===
iter	max(relres)
  1	4.25e-01
  2	2.90e-01
  3	2.17e-01
  4	1.53e-01
  5	1.10e-01
  6	7.93e-02
  7	4.91e-02
  8	2.37e-02
  9	1.02e-02
 10	4.42e-03
 11	1.87e-03
 12	7.39e-04
blockCG achieved desired tolerance at iteration 12. Residual norm is 7.39e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	2.93e+01	6.30e-01	8.95e+00
  2	1.61e+00	7.18e-01	8.89e+00
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  1.61e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  2.70e-09.
=== CGLS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	2.8e-01 8.6e-02 2.3e-02 	 2.3e-02
  2	6.5e-03 2.1e-03 6.1e-04 	 6.1e-04
  3	1.8e-04 5.5e-05 1.7e-05 	 1.7e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 4.93e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,1.4650258230877002]
Givens rotation for v=[0.47027762668209644,0.0]
Givens rotation for v=[-0.40357834450383834,-0.1244393692304586]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 24. Residual norm is 9.56e-03.
ssor achieved desired tolerance at iteration 35. Residual norm is 9.88e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 54. Residual norm is 6.98e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.44e-01
  2	6.45e-02
  3	3.98e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.98e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 16. Residual norm is 9.07e-03.
ssor achieved desired tolerance at iteration 23. Residual norm is 9.62e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 1.82e+00.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 9.83e+00.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 1.95e-01 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.95e-01	5.08e-01	5.57e+00		1.15e+00
2	1.03e-01	1.24e+00	8.66e+00		1.79e+00
3	6.26e-03	8.19e-03	1.43e+01		2.96e+00
4	3.27e-04	2.13e-04	1.43e+01		3.17e+00
5	1.10e-05	5.95e-06	1.43e+01		3.17e+00
6	1.32e-08	1.93e-10	1.43e+01		3.23e+00
7	1.17e-15	1.15e-21	1.43e+01		3.57e+00
minres converged at iteration 7. |A r_k|=1.15e-21 and |r_k|=1.17e-15.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	1.07e-01	1.35e+00	8.31e+00		1.00e+00
2	2.18e-02	9.04e-02	1.42e+01		1.71e+00
3	6.07e-04	2.33e-04	1.42e+01		2.80e+00
4	6.03e-05	7.75e-05	1.42e+01		3.04e+00
5	1.14e-06	3.34e-07	1.42e+01		3.04e+00
6	2.45e-09	6.49e-11	1.42e+01		3.21e+00
7	1.58e-15	1.13e-20	1.42e+01		3.55e+00
minres converged at iteration 7. |A r_k|=1.13e-20 and |r_k|=1.58e-15.
test stop by condlim
The estimated condition number (=3.03e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 16.
test stop by beta
minres stopped because beta (=4.99e-13) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.1.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
