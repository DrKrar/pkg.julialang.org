>>> 'Pkg.add("KrylovMethods")' log
INFO: Cloning cache of KrylovMethods from git://github.com/lruthotto/KrylovMethods.jl.git
INFO: Installing KrylovMethods v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of KrylovMethods
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("KrylovMethods")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (926.4375 MB free)
Uptime: 34629.0 sec
Load Avg:  1.02587890625  0.9736328125  0.95751953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1462995 s       6861 s     142908 s    1458053 s         68 s
#2  3499 MHz    1023908 s         86 s     133745 s    2123768 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - KrylovMethods                 0.2.1
1 additional packages:
 - Compat                        0.8.8
INFO: Computing test dependencies for KrylovMethods...
INFO: Cloning cache of LinearOperators from git://github.com/JuliaSmoothOptimizers/LinearOperators.jl.git
INFO: Installing GZip v0.2.20
INFO: Installing LinearOperators v0.1.0
INFO: Installing MatrixDepot v0.5.6
INFO: Testing KrylovMethods
=== Testing bicgstb for real matrix === 
=== bicgstb ===
iter	 relres
  1	8.60e-02
  2	9.22e-03
  3	6.09e-04
bicgstb iterated maxIter (=3) times but reached only residual norm 9.22e-03 instead of tol=1.00e-06.
bcgstb achieved desired tolerance at iteration 6. Residual norm is 6.31e-07.
Testing bicgstb for complex matrix
=== BICGSTB: All tests passed ===
=== Testing blockBiCGSTB for real matrix === 
=== block bicgstb ===
iter	 relres
  1	9.37e-02
  2	2.61e-02
  3	8.75e-03
blockBiCGSTB iterated maxIter (=3) times but reached only residual norm 2.61e-02 instead of tol=1.00e-06.
blockBiCGSTB achieved desired tolerance at iteration 7. Residual norm is 5.97e-07.
Testing BlockBiCGSTAB for complex matrix
=== BlockBiCGSTAB: All tests passed ===
=== Testing CG ===
=== cg ===
iter	 relres
  1	0.00e+00
cg achieved desired tolerance at iteration 1. Residual norm is 0.00e+00.
=== cg ===
iter	 relres
  1	1.50e-01
cg iterated maxIter (=1) times but reached only residual norm 1.50e-01 instead of tol=1.00e-15.
Matrix A in cg has to be positive definite.
cg achieved desired tolerance at iteration 24. Residual norm is 7.27e-06.
=== CG : All tests passed. ====
=== Testing blockCG ===
=== blockcg ===
iter	max(relres)
  1	8.85e-16
blockCG achieved desired tolerance at iteration 1. Residual norm is 8.85e-16.
=== blockcg ===
iter	max(relres)
  1	4.47e-16
blockCG iterated maxIter (=1) times but reached only residual norm 4.47e-16 instead of tol=1.00e-30.
=== blockcg ===
iter	max(relres)
  1	4.03e-01
  2	2.43e-01
  3	1.79e-01
  4	1.38e-01
  5	1.18e-01
  6	8.00e-02
  7	4.48e-02
  8	2.47e-02
  9	1.38e-02
 10	6.98e-03
 11	3.02e-03
 12	1.34e-03
 13	5.58e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 5.58e-04.
=== blockcg ===
iter	max(relres)
  1	4.03e-01
  2	2.43e-01
  3	1.79e-01
  4	1.38e-01
  5	1.18e-01
  6	8.00e-02
  7	4.48e-02
  8	2.47e-02
  9	1.38e-02
 10	6.98e-03
 11	3.02e-03
 12	1.34e-03
 13	5.58e-04
blockCG achieved desired tolerance at iteration 13. Residual norm is 5.58e-04.
=== Testing CLGS ===
=== cgls ===
iter	   |A'r|	 norm(r)	 norm(x)
  1	3.31e+01	6.45e-01	9.15e+00
  2	3.93e+00	7.76e-01	9.07e+00
cgls iterated maxIter (=2) times witout reaching tolerance. Returned result has residual norm  3.93e+00.
cgls relative gradient norm below desired tolerance at iteration 10. Returned result has residual norm  4.97e-09.
=== CGLS: All tests passed. ===
=== Testing GS ===
=== GS: All tests passed. ===
=== Testing gmres for real matrix === 
=== gmres ===
iter	 relres

  1	3.3e-01 1.1e-01 3.7e-02 	 3.7e-02
  2	1.1e-02 3.5e-03 9.3e-04 	 9.3e-04
  3	3.3e-04 1.0e-04 3.6e-05 	 3.6e-05
gmres iterated maxIter (=3) times without achieving the desired tolerance.
gmres achieved desired tolerance at iteration 3. Residual norm is 3.95e-07.
=== Testing gmres for complex matrix === 
=== GMRES: All tests passed. ===
=== Testing Lanczos helpers ===
Givens rotation for v=[0.0,0.8069597465427868]
Givens rotation for v=[-1.594674765043802,0.0]
Givens rotation for v=[-0.6456419495157558,0.4699988432047284]
=== Testing Lanczos Bidiagonalization ===
=== Testing Lanczos Tridiagonalization ===
=== Lanczos: All tests passed. ===
=== Testing SSOR for real matrix ===
ssor achieved desired tolerance at iteration 30. Residual norm is 9.74e-03.
ssor achieved desired tolerance at iteration 44. Residual norm is 9.95e-03.
=== Testing SSOR as Preconditioner ===
cg achieved desired tolerance at iteration 53. Residual norm is 4.89e-13.
=== Testing SSOR for complex matrix ===
=== sor ===
iter	 relres

  1	1.43e-01
  2	6.41e-02
  3	3.92e-02
ssor iterated maxIter (=3) times but reached only residual norm 3.92e-02 instead of tol=1.00e-02.
ssor achieved desired tolerance at iteration 15. Residual norm is 9.15e-03.
ssor achieved desired tolerance at iteration 22. Residual norm is 9.39e-03.
=== SSOR : All tests passed. ====
=== Testing LSQR ===
iter	|r_k|		|A'*r_k|	|A|		cond(A)		STOP
001	4.629e-01	4.792e-01	1.673e+00	1.000e+00	[0,0,0]
002	2.979e-16	4.965e-16	2.000e+00	2.309e+00	[1,0,0]
lsqr achieved desired tolerance at iteration 2. The system should be compatible. Residual norm is 2.98e-16.
lsqr achieved desired tolerance at iteration 2. The system should be incompatible. Gradient norm is 1.48e+00.
lsqr achieved desired tolerance at iteration 10. The system should be incompatible. Gradient norm is 9.62e+00.
=== LSQR: All tests passed. ===
=== Testing MINRES ===
minres iterated maxIter (=1) times but reached only residual norm 7.16e-02 instead of tol=1.00e-12.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	7.16e-02	6.32e-02	5.08e+00		1.24e+00
2	7.77e-03	2.11e-02	8.36e+00		2.05e+00
3	1.15e-03	2.17e-03	8.36e+00		2.05e+00
4	6.05e-06	8.07e-07	8.67e+00		2.13e+00
5	3.53e-08	2.55e-09	8.67e+00		2.13e+00
6	9.49e-19	3.10e-28	8.67e+00		2.15e+00
minres converged at iteration 6. |A r_k|=3.10e-28 and |r_k|=9.49e-19.
=== minres ===
iter	|r_k|		|A*r_k|		|A|			cond(A)
1	9.28e-03	3.02e-02	8.32e+00		1.00e+00
2	1.18e-03	1.88e-03	8.32e+00		1.98e+00
3	4.35e-05	4.11e-05	8.68e+00		2.06e+00
4	3.57e-08	3.64e-10	8.68e+00		2.11e+00
5	2.68e-10	2.46e-11	8.68e+00		2.15e+00
6	1.08e-18	5.40e-26	8.68e+00		2.15e+00
minres converged at iteration 6. |A r_k|=5.40e-26 and |r_k|=1.08e-18.
test stop by condlim
The estimated condition number (=2.86e+02) in minres is bigger than the tolerance (=2.00e+02) at iteration 19.
test stop by beta
minres stopped because beta (=1.08e-13) became smaller than the tolerance (btol=1.00e-10) at iteration 5.
test if anything is done for zero right hand side
=== MINRES : All tests passed. ====
Tests for symmetric and positive definite A
hilb	n=[5,5]	gmres iterated maxIter (=250) times without achieving the desired tolerance.
 gmres is OK cg is OK
cauchy	n=[4,4]	gmres iterated maxIter (=200) times without achieving the desired tolerance.
 gmres is OK cg is OK
invhilb	n=[4,4]	 gmres is OK cg is OK
moler	n=[7,7]	 gmres is OK cg is OK
pascal	n=[6,6]	gmres iterated maxIter (=300) times without achieving the desired tolerance.
 gmres is OK cg is OK
pei	n=[100,100]	 gmres is OK cg is OK
tridiag	n=[100,100]	 gmres is OK cg is OK
lehmer	n=[100,100]	gmres iterated maxIter (=5000) times without achieving the desired tolerance.
 gmres is OK cg is OK
poisson	n=[144,144]	 gmres is OK cg is OK
wathen	n=[341,341]	 gmres is OK cg is OK
INFO: KrylovMethods tests passed
INFO: Removing GZip v0.2.20
INFO: Removing LinearOperators v0.1.0
INFO: Removing MatrixDepot v0.5.6

>>> End of log
