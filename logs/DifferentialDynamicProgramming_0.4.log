>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.3
Commit a2f713d (2016-01-12 21:37 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63806.656   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.02684e-12  final value -33.8415      factorizations 19
  4.473073 seconds (3.07 M allocations: 229.637 MB, 1.29% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.948      15.9        15.9        0.0804      0.0         
2           34.0669     10.5        10.5        0.082       -0.2        
3           23.5822     7.46        7.46        0.106       -0.6        
4           16.1203     4.66        4.66        0.146       -1.2        
5           11.4621     3.16        3.16        0.201       -2.0        
6           8.29888     1.01        1.01        0.258       -3.1        
7           7.28996     0.0458      0.0458      0.0842      -4.3        
8           7.24421     4.51e-05    4.51e-05    0.0028      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.244161    

                     final grad:   4.176507e-06

                     final lambda: 0.0000000e+00

                     time / iter:  781   ms

                     total time:   7.03  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.1%

                     fwd pass:   2.2 %

                     other:      6.0 % (graphics etc.)
 =========== end iLQG ===========
 17.476904 seconds (14.45 M allocations: 876.355 MB, 2.73% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
