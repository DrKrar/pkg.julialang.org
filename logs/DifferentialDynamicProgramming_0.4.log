>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 56252.361   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.08221e-12  final value -32.3593      factorizations 12
  5.062930 seconds (3.09 M allocations: 214.976 MB, 2.55% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0848     12.1        12.1        0.0742      0.0         
2           37.9462     10.8        10.8        0.0856      -0.2        
3           27.127      10.3        10.3        0.124       -0.6        
4           16.7991     7.24        7.24        0.188       -1.2        
5           9.5617      3.81        3.81        0.239       -2.0        
6           5.74978     1.25        1.25        0.3         -3.1        
7           4.49549     0.0598      0.0598      0.0964      -4.3        
8           4.43565     5.54e-05    5.54e-05    0.00325     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.435597    

                     final grad:   5.267859e-06

                     final lambda: 0.0000000e+00

                     time / iter:  737   ms

                     total time:   6.63  seconds, of which

                     derivs:     0.8 %

                     back pass:  93.3%

                     fwd pass:   2.0 %

                     other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 18.435451 seconds (14.45 M allocations: 927.081 MB, 3.14% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
