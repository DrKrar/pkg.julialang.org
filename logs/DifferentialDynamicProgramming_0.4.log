>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1045.98046875 MB free)
Uptime: 17752.0 sec
Load Avg:  1.04345703125  1.0703125  1.05126953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     811740 s       5597 s      76512 s     701278 s         45 s
#2  3500 MHz     532812 s         84 s      70301 s    1094560 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67486.256   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.90123e-12  final value -33.4768      factorizations 19
  4.868628 seconds (3.11 M allocations: 229.617 MB, 1.29% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.7097     23.7        23.7        0.103       0.0         
2           28.0459     12.5        12.5        0.0892      -0.2        
3           15.5443     5.95        5.95        0.0888      -0.6        
4           9.58994     2.72        2.72        0.0875      -1.2        
5           6.86688     1.85        1.85        0.16        -2.0        
6           5.01244     0.537       0.537       0.198       -3.1        
7           4.47563     0.02        0.02        0.0652      -4.3        
8           4.45566     1.55e-05    1.55e-05    0.00236     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.455646    

                     final grad:   3.611003e-06

                     final lambda: 0.0000000e+00

                     time / iter:  890   ms

                     total time:   8.01  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.5%

                     fwd pass:   2.0 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 19.739083 seconds (14.46 M allocations: 876.682 MB, 2.93% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
