>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1012.5078125 MB free)
Uptime: 17877.0 sec
Load Avg:  1.0703125  1.17919921875  1.19775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     819784 s       8756 s      84006 s     682311 s         99 s
#2  3504 MHz     551764 s       7133 s      74843 s    1071719 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.4
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 57537.977   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.98152e-12  final value -27.0599      factorizations 16
  5.691875 seconds (3.10 M allocations: 215.174 MB, 1.17% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1943     20.2        20.2        0.0981      0.0         
2           29.9942     8.56        8.56        0.0737      -0.2        
3           21.4304     6.6         6.6         0.0957      -0.6        
4           14.8347     6.17        6.17        0.185       -1.2        
5           8.66471     2.8         2.8         0.27        -2.0        
6           5.86401     0.487       0.487       0.224       -3.1        
7           5.37659     0.0187      0.0187      0.0721      -4.3        
8           5.35785     1.58e-05    1.58e-05    0.00233     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.357831    

                     final grad:   3.489301e-06

                     final lambda: 0.0000000e+00

                     time / iter:  965   ms

                     total time:   8.68  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.0%

                     fwd pass:   1.8 %

                     other:      6.3 % (graphics etc.)
 =========== end iLQG ===========
 21.858418 seconds (14.46 M allocations: 876.714 MB, 2.60% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
