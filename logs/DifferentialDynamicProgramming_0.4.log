>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (938.7578125 MB free)
Uptime: 16796.0 sec
Load Avg:  0.92626953125  1.00146484375  1.0166015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     700988 s        742 s      83573 s     702135 s         44 s
#2  3500 MHz     527753 s       5142 s      71600 s     973222 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.7
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 71671.578   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.73927e-12  final value -35.2673      factorizations 16
  4.775059 seconds (3.10 M allocations: 239.010 MB, 2.41% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.267      21.7        21.7        0.104       0.0         
2           28.5696     8.69        8.69        0.0787      -0.2        
3           19.8841     4.35        4.35        0.0816      -0.6        
4           15.5361     2.51        2.51        0.121       -1.2        
5           13.0263     1.8         1.8         0.217       -2.0        
6           11.2253     0.605       0.605       0.255       -3.1        
7           10.62       0.0184      0.0184      0.0726      -4.3        
8           10.6016     7.64e-06    7.64e-06    0.00197     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   10.60161    

                     final grad:   2.794881e-06

                     final lambda: 0.0000000e+00

                     time / iter:  767   ms

                     total time:   6.90  seconds, of which

                     derivs:     0.6 %

                     back pass:  93.2%

                     fwd pass:   1.3 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 17.380339 seconds (14.46 M allocations: 927.149 MB, 3.48% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
