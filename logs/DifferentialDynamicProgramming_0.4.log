>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1026.46484375 MB free)
Uptime: 16287.0 sec
Load Avg:  1.09814453125  1.04296875  1.0361328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     730747 s       6224 s      73242 s     648791 s         21 s
#2  3500 MHz     452387 s       1388 s      75069 s    1039456 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63838.455   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.12029e-12  final value -26.5267      factorizations 18
  6.023135 seconds (3.11 M allocations: 224.922 MB, 1.27% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.345      9.04        9.04        0.0649      0.0         
2           40.3007     8.27        8.27        0.0738      -0.2        
3           32.028      8.56        8.56        0.111       -0.6        
4           23.4717     7.43        7.43        0.194       -1.2        
5           16.0395     5.12        5.12        0.33        -2.0        
6           10.9175     2.6         2.6         0.475       -3.1        
7           8.31501     0.165       0.165       0.162       -4.3        
8           8.15029     0.000118    0.000118    0.00437     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.150169    

                     final grad:   6.320935e-06

                     final lambda: 0.0000000e+00

                     time / iter:  459   ms

                     total time:   4.14  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.9%

                     fwd pass:   1.9 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 20.652460 seconds (14.46 M allocations: 876.681 MB, 2.89% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
