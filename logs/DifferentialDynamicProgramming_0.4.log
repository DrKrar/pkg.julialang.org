>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (895.11328125 MB free)
Uptime: 18230.0 sec
Load Avg:  1.2236328125  1.24609375  1.21337890625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3505 MHz     790227 s       5614 s      91726 s     696989 s         89 s
#2  3505 MHz     508763 s         37 s      87769 s    1109848 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60156.965   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.96889e-12  final value -40.6256      factorizations 16
  6.469856 seconds (3.10 M allocations: 211.845 MB, 1.32% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4678     17.7        17.7        0.0934      0.0         
2           32.7912     11.7        11.7        0.0907      -0.2        
3           21.1028     7.47        7.47        0.106       -0.6        
4           13.6367     4.05        4.05        0.14        -1.2        
5           9.58885     2.24        2.24        0.239       -2.0        
6           7.34661     1.09        1.09        0.286       -3.1        
7           6.25181     0.0883      0.0883      0.0907      -4.3        
8           6.16347     9.3e-05    9.3e-05    0.00329     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.163379    

                     final grad:   5.136912e-06

                     final lambda: 0.0000000e+00

                     time / iter:  994   ms

                     total time:   8.95  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.2%

                     fwd pass:   1.9 %

                     other:      6.2 % (graphics etc.)
 =========== end iLQG ===========
 24.064489 seconds (14.46 M allocations: 876.714 MB, 2.68% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
