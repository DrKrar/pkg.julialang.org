>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (945.6328125 MB free)
Uptime: 17739.0 sec
Load Avg:  1.03857421875  1.0791015625  1.01904296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     729404 s       3336 s      79815 s     760090 s         34 s
#2  3500 MHz     503546 s       3734 s      71086 s    1108378 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58698.759   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.93075e-12  final value -36.3661      factorizations 14
  4.187757 seconds (3.10 M allocations: 201.240 MB, 1.46% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2105     23.6        23.6        0.111       0.0         
2           25.6189     10.3        10.3        0.0854      -0.2        
3           15.3451     4.98        4.98        0.0851      -0.6        
4           10.3626     2.12        2.12        0.0923      -1.2        
5           8.23864     1.1         1.1         0.127       -2.0        
6           7.13895     0.479       0.479       0.169       -3.1        
7           6.66018     0.0321      0.0321      0.0567      -4.3        
8           6.62804     3.47e-05    3.47e-05    0.00224     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.628008    

                     final grad:   3.595479e-06

                     final lambda: 0.0000000e+00

                     time / iter:  949   ms

                     total time:   8.54  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.0%

                     fwd pass:   1.7 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 21.344533 seconds (14.46 M allocations: 876.681 MB, 2.70% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
