>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 56736.144   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.20283e-12  final value -25.2893      factorizations 14
  4.980974 seconds (3.10 M allocations: 226.587 MB, 2.84% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8815     24.1        24.1        0.106       0.0         
2           26.808      10.3        10.3        0.084       -0.2        
3           16.4883     4.64        4.64        0.083       -0.6        
4           11.8442     2.33        2.33        0.0972      -1.2        
5           9.51128     1.49        1.49        0.157       -2.0        
6           8.02245     0.464       0.464       0.202       -3.1        
7           7.55842     0.0249      0.0249      0.0672      -4.3        
8           7.53356     2.83e-05    2.83e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.533534    

                     final grad:   3.847569e-06

                     final lambda: 0.0000000e+00

                     time / iter:  860   ms

                     total time:   7.74  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.8%

                     fwd pass:   1.9 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 18.326277 seconds (14.45 M allocations: 927.075 MB, 3.33% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
