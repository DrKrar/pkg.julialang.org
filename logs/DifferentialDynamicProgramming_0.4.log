>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (930.83984375 MB free)
Uptime: 16464.0 sec
Load Avg:  0.94580078125  0.970703125  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     716548 s       5383 s      83946 s     642236 s         49 s
#2  3500 MHz     425305 s        630 s      72832 s    1049003 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.0
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63176.816   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.69492e-12  final value -38.005       factorizations 15
  3.394285 seconds (3.10 M allocations: 234.243 MB, 2.99% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.791      20.5        20.5        0.101       0.0         
2           29.2442     10          10          0.0827      -0.2        
3           19.1976     7.04        7.04        0.104       -0.6        
4           12.1537     4.09        4.09        0.141       -1.2        
5           8.05889     2.51        2.51        0.207       -2.0        
6           5.55268     0.845       0.845       0.246       -3.1        
7           4.70778     0.0392      0.0392      0.0662      -4.3        
8           4.66856     3.58e-05    3.58e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.668528    

                     final grad:   3.513362e-06

                     final lambda: 0.0000000e+00

                     time / iter:  931   ms

                     total time:   8.38  seconds, of which

                     derivs:     1.1 %

                     back pass:  92.1%

                     fwd pass:   1.3 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 20.830839 seconds (14.46 M allocations: 927.121 MB, 2.97% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
