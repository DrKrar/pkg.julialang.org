>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64790.875   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.11028e-12  final value -29.5334      factorizations 15
  4.435042 seconds (3.07 M allocations: 206.936 MB, 1.17% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.972      19.6        19.6        0.0939      0.0         
2           31.336      10.4        10.4        0.0816      -0.2        
3           20.9751     6.44        6.44        0.0962      -0.6        
4           14.5385     3.44        3.44        0.125       -1.2        
5           11.0949     1.83        1.83        0.166       -2.0        
6           9.26545     0.868       0.868       0.231       -3.1        
7           8.3978      0.078       0.078       0.0718      -4.3        
8           8.31976     0.000103    0.000103    0.00281     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.31966     

                     final grad:   4.496383e-06

                     final lambda: 0.0000000e+00

                     time / iter:  758   ms

                     total time:   6.82  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.8%

                     fwd pass:   1.6 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 17.463205 seconds (14.44 M allocations: 876.384 MB, 2.96% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
