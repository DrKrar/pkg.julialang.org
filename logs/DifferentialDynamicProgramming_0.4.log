>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64791.222   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.86565e-12  final value -38.251       factorizations 13
  4.185769 seconds (3.09 M allocations: 222.394 MB, 2.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4233     24.6        24.6        0.111       0.0         
2           25.8018     11.9        11.9        0.0918      -0.2        
3           13.8679     5.17        5.17        0.0849      -0.6        
4           8.70257     2.13        2.13        0.0813      -1.2        
5           6.57481     1.13        1.13        0.139       -2.0        
6           5.44786     0.251       0.251       0.167       -3.1        
7           5.19735     0.00781     0.00781     0.0514      -4.3        
8           5.18954     7.01e-06    7.01e-06    0.00195     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.18953     

                     final grad:   3.256317e-06

                     final lambda: 0.0000000e+00

                     time / iter:  669   ms

                     total time:   6.02  seconds, of which

                     derivs:     0.9 %

                     back pass:  93.7%

                     fwd pass:   1.5 %

                     other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 17.682630 seconds (14.45 M allocations: 927.028 MB, 3.26% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
