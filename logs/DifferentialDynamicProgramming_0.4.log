>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61254.783   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.93737e-12  final value -22.4736      factorizations 21
  4.548887 seconds (3.08 M allocations: 240.953 MB, 1.31% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.813      23.7        23.7        0.114       0.0         
2           25.1414     9.25        9.25        0.0838      -0.2        
3           15.8948     4.47        4.47        0.0784      -0.6        
4           11.4209     2.93        2.93        0.108       -1.2        
5           8.49026     1.28        1.28        0.159       -2.0        
6           7.20715     0.244       0.244       0.133       -3.1        
7           6.96333     0.0134      0.0134      0.047       -4.3        
8           6.94992     1.6e-05    1.6e-05    0.00192     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.9499      

                     final grad:   3.200457e-06

                     final lambda: 0.0000000e+00

                     time / iter:  786   ms

                     total time:   7.08  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.6%

                     fwd pass:   1.9 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 19.094957 seconds (14.44 M allocations: 876.385 MB, 2.74% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
