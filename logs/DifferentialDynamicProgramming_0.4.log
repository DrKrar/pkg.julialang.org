>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61383.679   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.12303e-12  final value -23.349       factorizations 20
  3.981636 seconds (3.11 M allocations: 262.168 MB, 2.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.6082     23.5        23.5        0.104       0.0         
2           25.0816     10.6        10.6        0.0838      -0.2        
3           14.5149     5.68        5.68        0.0907      -0.6        
4           8.8307      2.95        2.95        0.11        -1.2        
5           5.88217     1.84        1.84        0.175       -2.0        
6           4.04522     0.7         0.7         0.261       -3.1        
7           3.34551     0.043       0.043       0.0708      -4.3        
8           3.30247     4.85e-05    4.85e-05    0.00253     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.30242     

                     final grad:   4.095722e-06

                     final lambda: 0.0000000e+00

                     time / iter:  739   ms

                     total time:   6.65  seconds, of which

                     derivs:     1.0 %

                     back pass:  90.6%

                     fwd pass:   2.4 %

                     other:      6.1 % (graphics etc.)
 =========== end iLQG ===========
 16.360272 seconds (14.45 M allocations: 927.045 MB, 3.65% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
