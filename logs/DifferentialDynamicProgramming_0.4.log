>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1052.67578125 MB free)
Uptime: 17954.0 sec
Load Avg:  1.146484375  1.0947265625  1.06298828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     865537 s         88 s      73748 s     666894 s         52 s
#2  3499 MHz     508353 s       6558 s      65312 s    1140149 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64261.052   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.79932e-12  final value -24.8363      factorizations 18
  3.298207 seconds (3.11 M allocations: 222.541 MB, 1.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5653     26          26          0.115       0.0         
2           23.6059     10.9        10.9        0.0829      -0.2        
3           12.705      4.64        4.64        0.0716      -0.6        
4           8.0678      2.36        2.36        0.0881      -1.2        
5           5.71076     1.11        1.11        0.167       -2.0        
6           4.60498     0.375       0.375       0.205       -3.1        
7           4.22969     0.0298      0.0298      0.0778      -4.3        
8           4.19993     2.97e-05    2.97e-05    0.00279     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.1999      

                     final grad:   4.32305e-06

                     final lambda: 0.0000000e+00

                     time / iter:  829   ms

                     total time:   7.46  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.9%

                     fwd pass:   1.8 %

                     other:      3.6 % (graphics etc.)
 =========== end iLQG ===========
 21.070037 seconds (14.46 M allocations: 876.713 MB, 2.62% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
