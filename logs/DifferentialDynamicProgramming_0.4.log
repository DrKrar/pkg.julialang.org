>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64765.604   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 2.78155e-12  final value -27.077       factorizations 11
  4.154881 seconds (3.06 M allocations: 184.728 MB, 1.44% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4121     20.5        20.5        0.102       0.0         
2           28.9189     11.4        11.4        0.0887      -0.2        
3           17.4922     6.16        6.16        0.0945      -0.6        
4           11.3292     2.97        2.97        0.115       -1.2        
5           8.35618     1.68        1.68        0.175       -2.0        
6           6.67703     0.646       0.646       0.233       -3.1        
7           6.03139     0.0465      0.0465      0.0663      -4.3        
8           5.98493     5.52e-05    5.52e-05    0.00255     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.984875    

                     final grad:   4.206913e-06

                     final lambda: 0.0000000e+00

                     time / iter:  725   ms

                     total time:   6.52  seconds, of which

                     derivs:     0.4 %

                     back pass:  90.9%

                     fwd pass:   2.2 %

                     other:      6.4 % (graphics etc.)
 =========== end iLQG ===========
 14.883279 seconds (14.44 M allocations: 876.384 MB, 3.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
