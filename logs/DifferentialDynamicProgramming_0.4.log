>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (845.39453125 MB free)
Uptime: 17055.0 sec
Load Avg:  1.1064453125  1.05908203125  1.04931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     701290 s        138 s      85142 s     715293 s         50 s
#2  3500 MHz     474534 s       6526 s      78833 s    1050297 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65863.152   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.88167e-12  final value -20.625       factorizations 18
  4.789575 seconds (3.11 M allocations: 251.435 MB, 2.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0679     22.4        22.4        0.102       0.0         
2           27.6867     12.7        12.7        0.0901      -0.2        
3           14.9919     7.03        7.03        0.0967      -0.6        
4           7.96121     3.06        3.06        0.101       -1.2        
5           4.90284     1.17        1.17        0.146       -2.0        
6           3.73546     0.272       0.272       0.169       -3.1        
7           3.46298     0.0195      0.0195      0.0574      -4.3        
8           3.44349     2.6e-05    2.6e-05    0.00226     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.44346     

                     final grad:   3.827886e-06

                     final lambda: 0.0000000e+00

                     time / iter:  916   ms

                     total time:   8.25  seconds, of which

                     derivs:     0.6 %

                     back pass:  93.3%

                     fwd pass:   1.8 %

                     other:      4.3 % (graphics etc.)
 =========== end iLQG ===========
 21.272200 seconds (14.45 M allocations: 927.028 MB, 3.26% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
