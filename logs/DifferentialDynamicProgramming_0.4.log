>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (906.44140625 MB free)
Uptime: 16539.0 sec
Load Avg:  1.2412109375  1.08349609375  1.05615234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     746190 s       3834 s      82090 s     620780 s         42 s
#2  3496 MHz     446054 s       2667 s      80730 s    1040701 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63320.270   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.80518e-12  final value -17.1325      factorizations 18
  5.087988 seconds (3.11 M allocations: 252.159 MB, 2.58% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8933     21.8        21.8        0.103       0.0         
2           28.0635     8.06        8.06        0.0738      -0.2        
3           20.0044     4.11        4.11        0.0822      -0.6        
4           15.8968     2.47        2.47        0.121       -1.2        
5           13.4263     2.01        2.01        0.187       -2.0        
6           11.4153     0.855       0.855       0.224       -3.1        
7           10.5602     0.0584      0.0584      0.0621      -4.3        
8           10.5018     6.96e-05    6.96e-05    0.00238     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   10.50175    

                     final grad:   3.743386e-06

                     final lambda: 0.0000000e+00

                     time / iter:  762   ms

                     total time:   6.85  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.3%

                     fwd pass:   2.2 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 19.678856 seconds (14.46 M allocations: 927.128 MB, 3.22% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
