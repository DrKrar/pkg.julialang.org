>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60066.800   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.00737e-12  final value -31.1233      factorizations 19
  5.699882 seconds (3.07 M allocations: 231.180 MB, 1.31% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1043     23.6        23.6        0.105       0.0         
2           26.4911     10.7        10.7        0.0849      -0.2        
3           15.7485     5.53        5.53        0.0878      -0.6        
4           10.2137     3.5         3.5         0.124       -1.2        
5           6.7102      2.07        2.07        0.204       -2.0        
6           4.63747     0.609       0.609       0.204       -3.1        
7           4.02864     0.0399      0.0399      0.0639      -4.3        
8           3.98873     4.89e-05    4.89e-05    0.00245     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.988685    

                     final grad:   4.009439e-06

                     final lambda: 0.0000000e+00

                     time / iter:  702   ms

                     total time:   6.32  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.9%

                     fwd pass:   1.4 %

                     other:      4.2 % (graphics etc.)
 =========== end iLQG ===========
 16.950197 seconds (14.44 M allocations: 876.387 MB, 3.03% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
