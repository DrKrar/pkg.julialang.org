>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1043.265625 MB free)
Uptime: 18090.0 sec
Load Avg:  1.38037109375  1.216796875  1.123046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     836642 s       4694 s      78234 s     691261 s         88 s
#2  3500 MHz     532888 s       1862 s      69677 s    1117730 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.4
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66970.659   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.3286e-12  final value -41.4805      factorizations 19
  4.572847 seconds (3.11 M allocations: 229.968 MB, 1.44% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9463     14.9        14.9        0.0819      0.0         
2           35.0405     9.59        9.59        0.0746      -0.2        
3           25.4499     8.63        8.63        0.108       -0.6        
4           16.8247     7.06        7.06        0.187       -1.2        
5           9.76383     3.16        3.16        0.256       -2.0        
6           6.60394     0.595       0.595       0.194       -3.1        
7           6.00936     0.0263      0.0263      0.0692      -4.3        
8           5.98304     2.37e-05    2.37e-05    0.00239     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.983012    

                     final grad:   3.703058e-06

                     final lambda: 0.0000000e+00

                     time / iter:  788   ms

                     total time:   7.09  seconds, of which

                     derivs:     0.8 %

                     back pass:  90.2%

                     fwd pass:   2.4 %

                     other:      6.6 % (graphics etc.)
 =========== end iLQG ===========
 19.741791 seconds (14.46 M allocations: 876.713 MB, 2.54% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
