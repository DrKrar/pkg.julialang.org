>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (931.75390625 MB free)
Uptime: 16721.0 sec
Load Avg:  1.00048828125  1.046875  1.0498046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     736229 s       6210 s      79043 s     641639 s         37 s
#2  3499 MHz     492222 s        844 s      71649 s    1014218 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 74443.999   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.863e-12  final value -35.1443      factorizations 17
  4.686093 seconds (3.10 M allocations: 219.886 MB, 1.29% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.5711     23.1        23.1        0.107       0.0         
2           25.4333     10.6        10.6        0.0848      -0.2        
3           14.8207     4.88        4.88        0.0784      -0.6        
4           9.93948     2.37        2.37        0.0859      -1.2        
5           7.5709      0.979       0.979       0.129       -2.0        
6           6.59143     0.189       0.189       0.146       -3.1        
7           6.40239     0.0103      0.0103      0.0501      -4.3        
8           6.39208     1.24e-05    1.24e-05    0.00206     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.392071    

                     final grad:   3.457428e-06

                     final lambda: 0.0000000e+00

                     time / iter:  840   ms

                     total time:   7.56  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.0%

                     fwd pass:   2.1 %

                     other:      6.2 % (graphics etc.)
 =========== end iLQG ===========
 20.771851 seconds (14.46 M allocations: 876.683 MB, 2.54% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
