>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64684.003   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.05342e-12  final value -27.7399      factorizations 15
  4.915206 seconds (3.06 M allocations: 206.515 MB, 1.40% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1881     27.4        27.4        0.119       0.0         
2           23.7694     10.6        10.6        0.0841      -0.2        
3           13.2186     5.15        5.15        0.0831      -0.6        
4           8.06416     2.59        2.59        0.101       -1.2        
5           5.46939     0.942       0.942       0.135       -2.0        
6           4.52746     0.128       0.128       0.129       -3.1        
7           4.39966     0.00396     0.00396     0.0465      -4.3        
8           4.3957      4.24e-06    4.24e-06    0.00182     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.395692    

                     final grad:   3.059449e-06

                     final lambda: 0.0000000e+00

                     time / iter:  702   ms

                     total time:   6.31  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.6%

                     fwd pass:   2.2 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 16.171516 seconds (14.44 M allocations: 876.384 MB, 3.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
