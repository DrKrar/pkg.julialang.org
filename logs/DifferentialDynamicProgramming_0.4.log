>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62730.847   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 2.80184e-12  final value -49.0996      factorizations 20
  4.178770 seconds (3.11 M allocations: 262.053 MB, 2.65% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1641     24.5        24.5        0.113       0.0         
2           25.6239     6.93        6.93        0.0712      -0.2        
3           18.6965     3.38        3.38        0.0729      -0.6        
4           15.3164     3.67        3.67        0.155       -1.2        
5           11.644      2.42        2.42        0.27        -2.0        
6           9.22058     0.411       0.411       0.186       -3.1        
7           8.80962     0.0162      0.0162      0.0485      -4.3        
8           8.79342     1.9e-05    1.9e-05    0.00193     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.793401    

                     final grad:   3.178787e-06

                     final lambda: 0.0000000e+00

                     time / iter:  884   ms

                     total time:   7.96  seconds, of which

                     derivs:     0.4 %

                     back pass:  92.9%

                     fwd pass:   1.8 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 18.661657 seconds (14.45 M allocations: 927.075 MB, 3.06% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
