>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65727.917   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.90851e-12  final value -35.4159      factorizations 18
  4.575102 seconds (3.11 M allocations: 249.830 MB, 2.76% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8924     19.4        19.4        0.0959      0.0         
2           30.4966     10.4        10.4        0.0837      -0.2        
3           20.0745     6.6         6.6         0.1         -0.6        
4           13.4703     3.95        3.95        0.153       -1.2        
5           9.51932     1.57        1.57        0.205       -2.0        
6           7.9509      0.423       0.423       0.197       -3.1        
7           7.52768     0.0295      0.0295      0.0626      -4.3        
8           7.4982      3.62e-05    3.62e-05    0.00246     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.498168    

                     final grad:   3.948981e-06

                     final lambda: 0.0000000e+00

                     time / iter:  706   ms

                     total time:   6.35  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.4%

                     fwd pass:   2.0 %

                     other:      5.1 % (graphics etc.)
 =========== end iLQG ===========
 16.378691 seconds (14.45 M allocations: 927.045 MB, 3.36% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
