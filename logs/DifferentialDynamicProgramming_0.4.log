>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64071.121   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.16775e-12  final value -33.2193      factorizations 15
  4.170105 seconds (3.06 M allocations: 205.782 MB, 1.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9373     16.8        16.8        0.0818      0.0         
2           33.1219     10.3        10.3        0.0757      -0.2        
3           22.8594     7.63        7.63        0.101       -0.6        
4           15.2256     5.4         5.4         0.16        -1.2        
5           9.82932     2.68        2.68        0.214       -2.0        
6           7.14444     0.581       0.581       0.235       -3.1        
7           6.56307     0.0165      0.0165      0.0792      -4.3        
8           6.54653     9.03e-06    9.03e-06    0.00235     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.546524    

                     final grad:   3.350074e-06

                     final lambda: 0.0000000e+00

                     time / iter:  787   ms

                     total time:   7.08  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.1%

                     fwd pass:   1.7 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 19.983387 seconds (14.44 M allocations: 876.385 MB, 2.84% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
