>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1029.0625 MB free)
Uptime: 18064.0 sec
Load Avg:  1.03076171875  0.99365234375  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     836481 s      11520 s      82183 s     693245 s         63 s
#2  3499 MHz     552443 s       3716 s      74527 s    1109208 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64132.130   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.77747e-12  final value -27.5272      factorizations 15
  4.620795 seconds (3.10 M allocations: 208.619 MB, 1.41% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0354     22.2        22.2        0.099       0.0         
2           27.7957     11.2        11.2        0.0845      -0.2        
3           16.5531     5.89        5.89        0.0923      -0.6        
4           10.6634     2.97        2.97        0.117       -1.2        
5           7.69415     1.47        1.47        0.176       -2.0        
6           6.22825     0.511       0.511       0.222       -3.1        
7           5.71731     0.0415      0.0415      0.0686      -4.3        
8           5.67579     5.41e-05    5.41e-05    0.00253     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.675738    

                     final grad:   3.977765e-06

                     final lambda: 0.0000000e+00

                     time / iter:  868   ms

                     total time:   7.81  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.6%

                     fwd pass:   2.0 %

                     other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 20.297109 seconds (14.46 M allocations: 876.712 MB, 2.71% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
