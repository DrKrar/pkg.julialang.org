>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1056.921875 MB free)
Uptime: 19393.0 sec
Load Avg:  1.0439453125  1.11767578125  1.0751953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     816328 s         54 s      62904 s     877523 s         38 s
#2  3504 MHz     554148 s        102 s      54096 s    1275409 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61810.546   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.92583e-12  final value -27.2407      factorizations 18
  4.852860 seconds (3.11 M allocations: 227.347 MB, 1.34% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5776     19.1        19.1        0.0902      0.0         
2           30.4575     9.24        9.24        0.076       -0.2        
3           21.2194     5.65        5.65        0.0851      -0.6        
4           15.5718     4.54        4.54        0.13        -1.2        
5           11.0297     3.05        3.05        0.202       -2.0        
6           7.97646     0.848       0.848       0.198       -3.1        
7           7.12797     0.0454      0.0454      0.0664      -4.3        
8           7.08255     5.24e-05    5.24e-05    0.00247     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.082493    

                     final grad:   4.148119e-06

                     final lambda: 0.0000000e+00

                     time / iter:  569   ms

                     total time:   5.12  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.7%

                     fwd pass:   1.6 %

                     other:      5.1 % (graphics etc.)
 =========== end iLQG ===========
 14.556907 seconds (14.46 M allocations: 876.719 MB, 2.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
