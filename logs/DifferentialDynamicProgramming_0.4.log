>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1078.00390625 MB free)
Uptime: 22764.0 sec
Load Avg:  1.0078125  1.04833984375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     984598 s       6687 s      86063 s     983152 s        106 s
#2  3496 MHz     707328 s         43 s      76095 s    1404352 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66188.399   
RESULT: Improvement smaller than tolerance.
iterations 21  gradient 0.000641006  final value -24.1895      factorizations 20
  4.828895 seconds (3.09 M allocations: 261.219 MB, 2.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5176     28.2        28.2        0.104       0.0         
2           22.3273     10.6        10.6        0.0776      -0.2        
3           11.7412     4.37        4.37        0.0767      -0.6        
4           7.36661     2.22        2.22        0.102       -1.2        
5           5.14591     1.4         1.4         0.178       -2.0        
6           3.74923     0.577       0.577       0.209       -3.1        
7           3.17254     0.0409      0.0409      0.0667      -4.3        
8           3.13167     4.82e-05    4.82e-05    0.00245     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.131619    

            final grad:   3.960577e-06

            final lambda: 4.4841551e-08

            time / iter:  1031  ms

            total time:   9.28  seconds, of which

            derivs:     0.6 %

            back pass:  92.2%

            fwd pass:   1.6 %

            other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 22.846562 seconds (14.74 M allocations: 921.409 MB, 2.91% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
