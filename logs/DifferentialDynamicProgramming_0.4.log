>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1038.9375 MB free)
Uptime: 18393.0 sec
Load Avg:  1.15625  1.07568359375  1.0556640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     870400 s        111 s      83036 s     695909 s         54 s
#2  3500 MHz     549432 s       6376 s      75172 s    1146562 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59986.028   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.04477e-12  final value -35.9423      factorizations 19
  3.456970 seconds (3.11 M allocations: 229.906 MB, 1.34% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.6006     22.2        22.2        0.102       0.0         
2           26.371      11.2        11.2        0.0859      -0.2        
3           15.1443     5.16        5.16        0.0859      -0.6        
4           9.98584     1.85        1.85        0.0904      -1.2        
5           8.13217     0.883       0.883       0.131       -2.0        
6           7.24934     0.402       0.402       0.171       -3.1        
7           6.84724     0.0329      0.0329      0.0642      -4.3        
8           6.81436     4.03e-05    4.03e-05    0.00252     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.814322    

                     final grad:   4.111285e-06

                     final lambda: 0.0000000e+00

                     time / iter:  776   ms

                     total time:   6.99  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.8%

                     fwd pass:   2.2 %

                     other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 19.700400 seconds (14.46 M allocations: 876.687 MB, 2.52% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
