>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65412.229   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.14014e-12  final value -32.9467      factorizations 20
  5.783997 seconds (3.11 M allocations: 260.866 MB, 2.47% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8467     16          16          0.0859      0.0         
2           33.8243     9.6         9.6         0.0804      -0.2        
3           24.2221     7.54        7.54        0.107       -0.6        
4           16.68       6.68        6.68        0.196       -1.2        
5           10.003      3.38        3.38        0.291       -2.0        
6           6.62783     0.867       0.867       0.264       -3.1        
7           5.76068     0.0437      0.0437      0.0962      -4.3        
8           5.71702     3.81e-05    3.81e-05    0.00318     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.716981    

                     final grad:   4.451737e-06

                     final lambda: 0.0000000e+00

                     time / iter:  896   ms

                     total time:   8.06  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.9%

                     fwd pass:   1.9 %

                     other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 20.415246 seconds (14.45 M allocations: 927.050 MB, 3.03% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
