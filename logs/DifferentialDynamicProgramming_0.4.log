>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1022.0234375 MB free)
Uptime: 18651.0 sec
Load Avg:  1.10009765625  1.0908203125  1.06103515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     868915 s       6500 s      78995 s     725000 s         62 s
#2  3500 MHz     551490 s        140 s      72396 s    1169112 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64312.939   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.17363e-12  final value -39.0692      factorizations 15
  4.104407 seconds (3.10 M allocations: 207.388 MB, 1.36% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4992     19.7        19.7        0.0945      0.0         
2           29.81       10.8        10.8        0.0825      -0.2        
3           19.0091     5.84        5.84        0.0902      -0.6        
4           13.1706     3.14        3.14        0.127       -1.2        
5           10.029      1.81        1.81        0.218       -2.0        
6           8.2147      0.478       0.478       0.24        -3.1        
7           7.7362      0.0273      0.0273      0.0693      -4.3        
8           7.70895     3.42e-05    3.42e-05    0.00255     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.708918    

                     final grad:   4.337465e-06

                     final lambda: 0.0000000e+00

                     time / iter:  949   ms

                     total time:   8.54  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.1%

                     fwd pass:   1.7 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 23.140623 seconds (14.46 M allocations: 876.714 MB, 2.59% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
