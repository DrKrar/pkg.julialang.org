>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66490.727   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.89546e-12  final value -25.782       factorizations 12
  4.523137 seconds (3.06 M allocations: 190.031 MB, 1.24% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.3378     27.2        27.2        0.123       0.0         
2           22.1002     9.89        9.89        0.084       -0.2        
3           12.2093     3.9         3.9         0.0702      -0.6        
4           8.31082     1.95        1.95        0.0881      -1.2        
5           6.36243     1.22        1.22        0.145       -2.0        
6           5.14558     0.417       0.417       0.178       -3.1        
7           4.72847     0.0213      0.0213      0.0602      -4.3        
8           4.70713     1.96e-05    1.96e-05    0.0023      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.707106    

                     final grad:   3.598866e-06

                     final lambda: 0.0000000e+00

                     time / iter:  728   ms

                     total time:   6.55  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.4%

                     fwd pass:   1.4 %

                     other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 18.887587 seconds (14.44 M allocations: 876.410 MB, 2.80% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
