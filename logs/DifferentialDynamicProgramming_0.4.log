>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1008.515625 MB free)
Uptime: 18223.0 sec
Load Avg:  0.9306640625  1.03271484375  1.0576171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     834483 s      11225 s      82370 s     713858 s         49 s
#2  3504 MHz     568922 s       3348 s      74110 s    1107931 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59148.556   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.71224e-12  final value -31.2516      factorizations 16
  5.140291 seconds (3.10 M allocations: 214.213 MB, 1.30% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.0893     22.1        22.1        0.098       0.0         
2           27.0109     11.2        11.2        0.081       -0.2        
3           15.8283     6.03        6.03        0.0872      -0.6        
4           9.79557     3.25        3.25        0.107       -1.2        
5           6.54739     1.79        1.79        0.165       -2.0        
6           4.75956     0.548       0.548       0.198       -3.1        
7           4.21165     0.0325      0.0325      0.0664      -4.3        
8           4.1791      3.68e-05    3.68e-05    0.00247     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.179068    

                     final grad:   3.870842e-06

                     final lambda: 0.0000000e+00

                     time / iter:  876   ms

                     total time:   7.88  seconds, of which

                     derivs:     0.4 %

                     back pass:  93.8%

                     fwd pass:   1.8 %

                     other:      4.0 % (graphics etc.)
 =========== end iLQG ===========
 21.822108 seconds (14.46 M allocations: 876.714 MB, 2.60% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
