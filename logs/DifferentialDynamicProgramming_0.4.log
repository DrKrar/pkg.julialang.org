>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66867.657   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.91663e-12  final value -27.0753      factorizations 13
  4.251925 seconds (3.06 M allocations: 196.627 MB, 1.12% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3274     23.4        23.4        0.109       0.0         
2           26.9655     11          11          0.0884      -0.2        
3           15.996      5.12        5.12        0.0854      -0.6        
4           10.8788     2.64        2.64        0.102       -1.2        
5           8.23842     1.77        1.77        0.19        -2.0        
6           6.4712      0.444       0.444       0.21        -3.1        
7           6.02747     0.0103      0.0103      0.0553      -4.3        
8           6.01713     5.43e-06    5.43e-06    0.00189     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.017129    

                     final grad:   3.058535e-06

                     final lambda: 0.0000000e+00

                     time / iter:  706   ms

                     total time:   6.35  seconds, of which

                     derivs:     0.5 %

                     back pass:  94.3%

                     fwd pass:   1.5 %

                     other:      3.8 % (graphics etc.)
 =========== end iLQG ===========
 17.426477 seconds (14.44 M allocations: 876.399 MB, 3.21% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
