>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (920.5625 MB free)
Uptime: 16481.0 sec
Load Avg:  0.94677734375  1.0048828125  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     755654 s       4422 s      76949 s     596764 s         44 s
#2  3499 MHz     411047 s       2306 s      71176 s    1072990 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68202.095   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.81162e-12  final value -29.9579      factorizations 21
  5.027479 seconds (3.11 M allocations: 267.625 MB, 2.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.0282     22.5        22.5        0.106       0.0         
2           26.5324     11          11          0.0857      -0.2        
3           15.5168     6.38        6.38        0.0974      -0.6        
4           9.14014     3.33        3.33        0.117       -1.2        
5           5.80535     1.42        1.42        0.158       -2.0        
6           4.38327     0.338       0.338       0.176       -3.1        
7           4.04555     0.0177      0.0177      0.0571      -4.3        
8           4.02787     1.87e-05    1.87e-05    0.00215     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.027847    

                     final grad:   3.509163e-06

                     final lambda: 0.0000000e+00

                     time / iter:  769   ms

                     total time:   6.92  seconds, of which

                     derivs:     0.8 %

                     back pass:  93.9%

                     fwd pass:   1.4 %

                     other:      3.9 % (graphics etc.)
 =========== end iLQG ===========
 19.249790 seconds (14.46 M allocations: 927.175 MB, 3.10% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
