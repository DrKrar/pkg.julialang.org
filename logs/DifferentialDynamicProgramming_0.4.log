>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (513.47265625 MB free)
Uptime: 17664.0 sec
Load Avg:  1.03271484375  1.18212890625  1.2158203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz     948451 s       3834 s      87968 s     605658 s         40 s
#2  3498 MHz     466309 s       3115 s      73590 s    1132131 s         14 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.1
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 71214.303   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.20004e-12  final value -27.17        factorizations 14
  4.378610 seconds (3.10 M allocations: 203.640 MB, 1.31% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.2793     15.5        15.5        0.0848      0.0         
2           33.7453     9.87        9.87        0.0815      -0.2        
3           23.8716     6.72        6.72        0.0991      -0.6        
4           17.1509     4.2         4.2         0.139       -1.2        
5           12.946      2.4         2.4         0.244       -2.0        
6           10.5414     0.523       0.523       0.274       -3.1        
7           10.0185     0.0218      0.0218      0.0632      -4.3        
8           9.99674     2.38e-05    2.38e-05    0.00211     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   9.996712    

                     final grad:   3.401025e-06

                     final lambda: 0.0000000e+00

                     time / iter:  768   ms

                     total time:   6.92  seconds, of which

                     derivs:     0.5 %

                     back pass:  94.1%

                     fwd pass:   1.8 %

                     other:      3.6 % (graphics etc.)
 =========== end iLQG ===========
 18.721433 seconds (14.46 M allocations: 876.714 MB, 2.91% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
