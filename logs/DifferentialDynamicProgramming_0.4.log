>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1021.23046875 MB free)
Uptime: 17717.0 sec
Load Avg:  1.03271484375  1.0673828125  1.10205078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     839482 s       2242 s      85562 s     659443 s         74 s
#2  3499 MHz     520245 s       4887 s      83302 s    1082470 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69515.838   
RESULT: Gradient norm smaller than tolerance.
iterations 11  gradient 3.00099e-12  final value -25.1982      factorizations 10
  4.277972 seconds (3.09 M allocations: 180.837 MB, 1.31% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9735     22.9        22.9        0.104       0.0         
2           27.0851     10.2        10.2        0.082       -0.2        
3           16.8451     5.08        5.08        0.0819      -0.6        
4           11.7701     3.08        3.08        0.101       -1.2        
5           8.69417     1.79        1.79        0.164       -2.0        
6           6.90684     0.562       0.562       0.168       -3.1        
7           6.34507     0.0435      0.0435      0.0602      -4.3        
8           6.30159     5.67e-05    5.67e-05    0.00241     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.301536    

                     final grad:   4.048117e-06

                     final lambda: 0.0000000e+00

                     time / iter:  901   ms

                     total time:   8.11  seconds, of which

                     derivs:     0.4 %

                     back pass:  92.8%

                     fwd pass:   1.8 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 21.178028 seconds (14.46 M allocations: 876.714 MB, 2.77% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
