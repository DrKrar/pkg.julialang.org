>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (925.69140625 MB free)
Uptime: 16808.0 sec
Load Avg:  1.08642578125  1.13720703125  1.12255859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     712453 s        117 s      83883 s     696131 s         33 s
#2  3500 MHz     511672 s       5958 s      70911 s    1012159 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65356.038   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.17324e-12  final value -29.3313      factorizations 19
  4.882344 seconds (3.11 M allocations: 255.938 MB, 2.56% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3616     17.2        17.2        0.0922      0.0         
2           33.1568     11.2        11.2        0.09        -0.2        
3           21.9463     9           9           0.12        -0.6        
4           12.9423     5.94        5.94        0.167       -1.2        
5           6.9978      2.88        2.88        0.208       -2.0        
6           4.11452     0.668       0.668       0.241       -3.1        
7           3.44616     0.0248      0.0248      0.0778      -4.3        
8           3.42139     1.9e-05    1.9e-05    0.00264     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.421371    

                     final grad:   3.931334e-06

                     final lambda: 0.0000000e+00

                     time / iter:  716   ms

                     total time:   6.45  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.9%

                     fwd pass:   1.3 %

                     other:      5.2 % (graphics etc.)
 =========== end iLQG ===========
 17.605827 seconds (14.46 M allocations: 927.137 MB, 3.41% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
