>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65627.524   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.64263e-12  final value -26.6162      factorizations 21
  3.606407 seconds (3.08 M allocations: 241.879 MB, 1.56% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5668     22.4        22.4        0.107       0.0         
2           28.1658     11.9        11.9        0.0923      -0.2        
3           16.3148     6.09        6.09        0.0934      -0.6        
4           10.228      3.2         3.2         0.107       -1.2        
5           7.02421     1.86        1.86        0.187       -2.0        
6           5.15927     0.657       0.657       0.208       -3.1        
7           4.50267     0.036       0.036       0.0654      -4.3        
8           4.46665     2.93e-05    2.93e-05    0.00234     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.466624    

                     final grad:   3.58588e-06

                     final lambda: 0.0000000e+00

                     time / iter:  609   ms

                     total time:   5.48  seconds, of which

                     derivs:     1.1 %

                     back pass:  93.0%

                     fwd pass:   1.5 %

                     other:      4.4 % (graphics etc.)
 =========== end iLQG ===========
 17.957472 seconds (14.44 M allocations: 876.385 MB, 3.10% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
