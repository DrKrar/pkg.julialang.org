>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 57943.672   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 2.78574e-12  final value -25.4708      factorizations 20
  4.957329 seconds (3.11 M allocations: 262.368 MB, 2.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0207     22.7        22.7        0.103       0.0         
2           27.3258     11.6        11.6        0.0856      -0.2        
3           15.7099     5.66        5.66        0.0855      -0.6        
4           10.0506     2.52        2.52        0.0914      -1.2        
5           7.53244     1.63        1.63        0.174       -2.0        
6           5.90634     0.491       0.491       0.209       -3.1        
7           5.41516     0.015       0.015       0.0632      -4.3        
8           5.40013     8.13e-06    8.13e-06    0.00205     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.400119    

                     final grad:   3.121255e-06

                     final lambda: 0.0000000e+00

                     time / iter:  879   ms

                     total time:   7.91  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.8%

                     fwd pass:   2.0 %

                     other:      4.7 % (graphics etc.)
 =========== end iLQG ===========
 19.061129 seconds (14.45 M allocations: 927.075 MB, 3.05% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
