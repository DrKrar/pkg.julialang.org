>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1028.67578125 MB free)
Uptime: 15754.0 sec
Load Avg:  1.0703125  1.099609375  1.0625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     738040 s       1717 s      72737 s     592821 s         21 s
#2  3499 MHz     458424 s       4901 s      67607 s     991563 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58222.496   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.91192e-12  final value -27.3696      factorizations 13
  4.319900 seconds (3.10 M allocations: 199.967 MB, 1.35% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.473      24.5        24.5        0.11        0.0         
2           26.0095     9.98        9.98        0.0804      -0.2        
3           16.0326     5.02        5.02        0.0824      -0.6        
4           11.0088     3.21        3.21        0.136       -1.2        
5           7.79455     1.66        1.66        0.217       -2.0        
6           6.13743     0.459       0.459       0.218       -3.1        
7           5.6783      0.023       0.023       0.0733      -4.3        
8           5.65525     2.33e-05    2.33e-05    0.00244     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.655231    

                     final grad:   3.95293e-06

                     final lambda: 0.0000000e+00

                     time / iter:  640   ms

                     total time:   5.76  seconds, of which

                     derivs:     0.5 %

                     back pass:  90.6%

                     fwd pass:   2.4 %

                     other:      6.5 % (graphics etc.)
 =========== end iLQG ===========
 16.786812 seconds (14.46 M allocations: 876.713 MB, 2.96% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
