>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68414.627   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.56809e-12  final value -28.2363      factorizations 14
  4.244637 seconds (3.06 M allocations: 203.262 MB, 1.46% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.2859     18.4        18.4        0.0946      0.0         
2           29.8671     11          11          0.0863      -0.2        
3           18.8434     6.34        6.34        0.0945      -0.6        
4           12.5028     3.06        3.06        0.111       -1.2        
5           9.43834     1.83        1.83        0.195       -2.0        
6           7.60846     0.859       0.859       0.283       -3.1        
7           6.74969     0.0595      0.0595      0.0891      -4.3        
8           6.69023     6.41e-05    6.41e-05    0.00306     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.690163    

                     final grad:   4.490908e-06

                     final lambda: 0.0000000e+00

                     time / iter:  717   ms

                     total time:   6.45  seconds, of which

                     derivs:     0.9 %

                     back pass:  91.6%

                     fwd pass:   2.0 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 17.506795 seconds (14.44 M allocations: 876.414 MB, 3.06% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
