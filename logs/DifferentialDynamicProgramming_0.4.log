>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66854.448   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.98132e-12  final value -26.4963      factorizations 15
  3.897215 seconds (3.10 M allocations: 234.179 MB, 2.58% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.6135     27.8        27.8        0.119       0.0         
2           20.8491     9.43        9.43        0.0795      -0.2        
3           11.4233     3.81        3.81        0.0696      -0.6        
4           7.60899     1.92        1.92        0.0837      -1.2        
5           5.68516     1.05        1.05        0.146       -2.0        
6           4.63783     0.361       0.361       0.168       -3.1        
7           4.27668     0.021       0.021       0.0591      -4.3        
8           4.25565     2.09e-05    2.09e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.255627    

                     final grad:   3.422263e-06

                     final lambda: 0.0000000e+00

                     time / iter:  784   ms

                     total time:   7.05  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.8%

                     fwd pass:   2.0 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 19.408387 seconds (14.45 M allocations: 927.028 MB, 3.29% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
