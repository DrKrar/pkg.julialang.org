>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60683.321   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.08409e-12  final value -28.1996      factorizations 18
  3.556385 seconds (3.07 M allocations: 224.131 MB, 1.38% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.7832     17.5        17.5        0.0859      0.0         
2           33.2433     8.9         8.9         0.0737      -0.2        
3           24.3427     6.34        6.34        0.097       -0.6        
4           18.0054     6.2         6.2         0.197       -1.2        
5           11.8018     3.53        3.53        0.336       -2.0        
6           8.27418     1.03        1.03        0.285       -3.1        
7           7.24584     0.0746      0.0746      0.0978      -4.3        
8           7.17119     8.47e-05    8.47e-05    0.00316     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.171109    

                     final grad:   4.605546e-06

                     final lambda: 0.0000000e+00

                     time / iter:  788   ms

                     total time:   7.09  seconds, of which

                     derivs:     1.1 %

                     back pass:  91.3%

                     fwd pass:   1.9 %

                     other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 17.611451 seconds (14.44 M allocations: 876.385 MB, 2.89% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
