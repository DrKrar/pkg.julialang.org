>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 71569.731   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.03966e-12  final value -30.5857      factorizations 18
  3.868132 seconds (3.11 M allocations: 250.153 MB, 3.18% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7822     17.4        17.4        0.0938      0.0         
2           32.369      9.3         9.3         0.0803      -0.2        
3           23.067      7.09        7.09        0.111       -0.6        
4           15.9739     5.78        5.78        0.182       -1.2        
5           10.1893     2.86        2.86        0.253       -2.0        
6           7.32566     0.533       0.533       0.218       -3.1        
7           6.79236     0.0207      0.0207      0.0604      -4.3        
8           6.77166     2.07e-05    2.07e-05    0.00209     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.771635    

                     final grad:   3.37867e-06

                     final lambda: 0.0000000e+00

                     time / iter:  738   ms

                     total time:   6.64  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.0%

                     fwd pass:   2.1 %

                     other:      4.2 % (graphics etc.)
 =========== end iLQG ===========
 18.151984 seconds (14.45 M allocations: 927.076 MB, 3.15% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
