>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1051.44921875 MB free)
Uptime: 22901.0 sec
Load Avg:  1.0029296875  1.02880859375  1.08740234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1022284 s         48 s      87103 s     963456 s         95 s
#2  3499 MHz     702673 s       6387 s      79068 s    1410706 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62807.209   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.76108e-12  final value -32.4838      factorizations 16
  4.467851 seconds (3.10 M allocations: 240.436 MB, 2.99% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.991      22.7        22.7        0.112       0.0         
2           26.3145     9.41        9.41        0.0845      -0.2        
3           16.9095     5.86        5.86        0.0923      -0.6        
4           11.0489     4.22        4.22        0.141       -1.2        
5           6.82665     1.77        1.77        0.179       -2.0        
6           5.05586     0.426       0.426       0.198       -3.1        
7           4.63026     0.0304      0.0304      0.0667      -4.3        
8           4.59986     3.91e-05    3.91e-05    0.00245     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.599825    

            final grad:   4.030839e-06

            final lambda: 4.4841551e-08

            time / iter:  880   ms

            total time:   7.92  seconds, of which

            derivs:     0.6 %

            back pass:  93.8%

            fwd pass:   1.1 %

            other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 22.530896 seconds (14.73 M allocations: 920.791 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
