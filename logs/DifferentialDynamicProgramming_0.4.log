>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.5
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1076.82421875 MB free)
Uptime: 20919.0 sec
Load Avg:  1.26611328125  1.15283203125  1.099609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     960360 s       2159 s      80238 s     829174 s         63 s
#2  3500 MHz     632735 s       5412 s      68977 s    1309681 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.19.0
 - MacroTools                    0.3.5
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 70572.827   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 3.05782e-12  final value -22.939       factorizations 21
  5.414364 seconds (3.11 M allocations: 268.038 MB, 2.71% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3298     28.8        28.8        0.121       0.0         
2           21.5276     9.88        9.88        0.0838      -0.2        
3           11.6495     3.79        3.79        0.073       -0.6        
4           7.86211     2.21        2.21        0.0861      -1.2        
5           5.65218     1.03        1.03        0.145       -2.0        
6           4.62265     0.161       0.161       0.141       -3.1        
7           4.46121     0.00735     0.00735     0.0488      -4.3        
8           4.45386     8.83e-06    8.83e-06    0.00192     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.45385     

            final grad:   3.268918e-06

            final lambda: 4.4841551e-08

            time / iter:  1000  ms

            total time:   9.00  seconds, of which

            derivs:     0.5 %

            back pass:  92.7%

            fwd pass:   1.8 %

            other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 23.692802 seconds (14.73 M allocations: 920.760 MB, 3.02% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
