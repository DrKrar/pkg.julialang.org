>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1018.29296875 MB free)
Uptime: 16702.0 sec
Load Avg:  1.1240234375  1.0458984375  1.05029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     719116 s         67 s      72756 s     712315 s         16 s
#2  3499 MHz     504923 s       5430 s      67898 s    1024583 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60389.974   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.04967e-12  final value -36.1641      factorizations 15
  3.866863 seconds (3.10 M allocations: 207.548 MB, 1.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           47.6798     28.1        28.1        0.122       0.0         
2           19.6051     8.67        8.67        0.0763      -0.2        
3           10.9395     3.82        3.82        0.0671      -0.6        
4           7.1203      2.08        2.08        0.0849      -1.2        
5           5.03971     0.95        0.95        0.12        -2.0        
6           4.08983     0.37        0.37        0.143       -3.1        
7           3.7197      0.0307      0.0307      0.0543      -4.3        
8           3.68904     3.78e-05    3.78e-05    0.00216     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.688998    

                     final grad:   3.588363e-06

                     final lambda: 0.0000000e+00

                     time / iter:  803   ms

                     total time:   7.22  seconds, of which

                     derivs:     0.7 %

                     back pass:  94.3%

                     fwd pass:   1.5 %

                     other:      3.5 % (graphics etc.)
 =========== end iLQG ===========
 19.638341 seconds (14.46 M allocations: 876.714 MB, 2.73% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
