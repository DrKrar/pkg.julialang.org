>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62484.875   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.09252e-12  final value -31.3084      factorizations 16
  3.807741 seconds (3.10 M allocations: 238.465 MB, 2.90% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.0869     23.1        23.1        0.0982      0.0         
2           25.9921     11.4        11.4        0.0826      -0.2        
3           14.5673     5.22        5.22        0.0818      -0.6        
4           9.34673     2.38        2.38        0.0921      -1.2        
5           6.96418     1.17        1.17        0.163       -2.0        
6           5.79122     0.19        0.19        0.174       -3.1        
7           5.60104     0.00549     0.00549     0.0477      -4.3        
8           5.59555     5.92e-06    5.92e-06    0.00188     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.595546    

                     final grad:   3.223116e-06

                     final lambda: 0.0000000e+00

                     time / iter:  834   ms

                     total time:   7.51  seconds, of which

                     derivs:     0.7 %

                     back pass:  94.5%

                     fwd pass:   1.5 %

                     other:      3.3 % (graphics etc.)
 =========== end iLQG ===========
 16.714115 seconds (14.45 M allocations: 927.028 MB, 3.48% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
