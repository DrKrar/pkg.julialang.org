>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.5
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1077.88671875 MB free)
Uptime: 20816.0 sec
Load Avg:  1.10302734375  1.04150390625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     947246 s       6760 s      84958 s     827748 s         85 s
#2  3500 MHz     668592 s         75 s      74160 s    1260944 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.19.0
 - MacroTools                    0.3.5
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66303.242   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.03767e-12  final value -29.4268      factorizations 18
  6.489175 seconds (3.11 M allocations: 248.531 MB, 2.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.63       25.9        25.9        0.114       0.0         
2           23.7378     10.4        10.4        0.0846      -0.2        
3           13.2966     4.2         4.2         0.075       -0.6        
4           9.09758     2.15        2.15        0.0911      -1.2        
5           6.94547     1.36        1.36        0.156       -2.0        
6           5.58438     0.59        0.59        0.162       -3.1        
7           4.9943      0.0474      0.0474      0.0635      -4.3        
8           4.94693     6e-05    6e-05    0.00261     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.946867    

            final grad:   4.275601e-06

            final lambda: 4.4841551e-08

            time / iter:  959   ms

            total time:   8.63  seconds, of which

            derivs:     0.6 %

            back pass:  92.2%

            fwd pass:   1.7 %

            other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 23.640487 seconds (14.73 M allocations: 920.792 MB, 3.04% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
