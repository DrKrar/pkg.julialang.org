>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (911.46875 MB free)
Uptime: 20593.0 sec
Load Avg:  1.01220703125  0.966796875  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     791898 s       6485 s      90267 s     895169 s        176 s
#2  3500 MHz     544094 s       2238 s      83052 s    1264821 s         12 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59428.144   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.05569e-12  final value -30.8671      factorizations 12
  4.669666 seconds (3.09 M allocations: 217.340 MB, 2.97% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.4917     23.9        23.9        0.105       0.0         
2           27.5425     9.74        9.74        0.0776      -0.2        
3           17.8067     5.11        5.11        0.0835      -0.6        
4           12.6973     2.77        2.77        0.121       -1.2        
5           9.92245     1.18        1.18        0.188       -2.0        
6           8.74542     0.329       0.329       0.186       -3.1        
7           8.41647     0.0266      0.0266      0.0593      -4.3        
8           8.38991     3.24e-05    3.24e-05    0.00214     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.38988     

                     final grad:   3.509344e-06

                     final lambda: 0.0000000e+00

                     time / iter:  823   ms

                     total time:   7.40  seconds, of which

                     derivs:     0.9 %

                     back pass:  92.9%

                     fwd pass:   1.6 %

                     other:      4.7 % (graphics etc.)
 =========== end iLQG ===========
 18.229020 seconds (14.46 M allocations: 927.168 MB, 3.04% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
