>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (956.03125 MB free)
Uptime: 15581.0 sec
Load Avg:  1.1865234375  1.107421875  1.07275390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     682589 s       1167 s      75742 s     617232 s         32 s
#2  3500 MHz     470454 s       5921 s      69588 s     911694 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60348.535   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.9657e-12  final value -28.2566      factorizations 16
  4.723945 seconds (3.10 M allocations: 238.593 MB, 2.43% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8538     25.6        25.6        0.106       0.0         
2           24.2959     11.2        11.2        0.0803      -0.2        
3           13.1068     5.51        5.51        0.0816      -0.6        
4           7.59562     2.2         2.2         0.0943      -1.2        
5           5.40007     0.63        0.63        0.115       -2.0        
6           4.77057     0.147       0.147       0.138       -3.1        
7           4.62314     0.0116      0.0116      0.0546      -4.3        
8           4.61156     1.55e-05    1.55e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.611545    

                     final grad:   3.715447e-06

                     final lambda: 0.0000000e+00

                     time / iter:  693   ms

                     total time:   6.24  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.6%

                     fwd pass:   2.4 %

                     other:      4.2 % (graphics etc.)
 =========== end iLQG ===========
 16.451113 seconds (14.46 M allocations: 927.162 MB, 3.34% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
