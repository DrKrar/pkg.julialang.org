>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68367.095   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.07111e-12  final value -27.0926      factorizations 18
  3.904703 seconds (3.11 M allocations: 249.909 MB, 2.57% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8573     22.2        22.2        0.105       0.0         
2           28.6555     11.8        11.8        0.0923      -0.2        
3           16.8267     6.24        6.24        0.0959      -0.6        
4           10.5895     2.66        2.66        0.102       -1.2        
5           7.92588     0.849       0.849       0.137       -2.0        
6           7.07705     0.157       0.157       0.134       -3.1        
7           6.92044     0.0106      0.0106      0.0513      -4.3        
8           6.90989     1.38e-05    1.38e-05    0.00208     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.909876    

                     final grad:   3.468828e-06

                     final lambda: 0.0000000e+00

                     time / iter:  758   ms

                     total time:   6.82  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.7%

                     fwd pass:   1.6 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 17.927122 seconds (14.45 M allocations: 927.033 MB, 3.08% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
