>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59498.025   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.26694e-12  final value -31.6003      factorizations 16
  3.382454 seconds (3.10 M allocations: 238.309 MB, 3.10% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.6282     20.3        20.3        0.0977      0.0         
2           28.3568     10.7        10.7        0.0845      -0.2        
3           17.6685     6.13        6.13        0.0946      -0.6        
4           11.5428     3.5         3.5         0.121       -1.2        
5           8.04173     1.98        1.98        0.194       -2.0        
6           6.05877     0.572       0.572       0.216       -3.1        
7           5.48705     0.0352      0.0352      0.0726      -4.3        
8           5.45188     4.09e-05    4.09e-05    0.00263     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.451843    

                     final grad:   4.155179e-06

                     final lambda: 0.0000000e+00

                     time / iter:  776   ms

                     total time:   6.99  seconds, of which

                     derivs:     0.4 %

                     back pass:  95.0%

                     fwd pass:   1.4 %

                     other:      3.2 % (graphics etc.)
 =========== end iLQG ===========
 17.642191 seconds (14.45 M allocations: 927.044 MB, 3.15% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
