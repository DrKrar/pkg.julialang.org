>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59810.303   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.03448e-12  final value -32.737       factorizations 18
  4.078709 seconds (3.11 M allocations: 250.461 MB, 2.84% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.8312     25.6        25.6        0.11        0.0         
2           23.2671     8.92        8.92        0.0784      -0.2        
3           14.3486     3.54        3.54        0.0702      -0.6        
4           10.8098     2.28        2.28        0.0877      -1.2        
5           8.52633     1.63        1.63        0.16        -2.0        
6           6.89563     0.521       0.521       0.197       -3.1        
7           6.37429     0.0298      0.0298      0.0657      -4.3        
8           6.34452     3.26e-05    3.26e-05    0.00234     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.344488    

                     final grad:   3.664895e-06

                     final lambda: 0.0000000e+00

                     time / iter:  684   ms

                     total time:   6.16  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.6%

                     fwd pass:   1.8 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 14.806973 seconds (14.45 M allocations: 927.075 MB, 3.64% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
