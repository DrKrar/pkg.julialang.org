>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65698.956   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.92029e-12  final value -32.4565      factorizations 16
  4.677663 seconds (3.10 M allocations: 238.144 MB, 2.64% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.9325     26          26          0.115       0.0         
2           22.9107     9.43        9.43        0.0789      -0.2        
3           13.4792     4.01        4.01        0.0717      -0.6        
4           9.47349     1.98        1.98        0.0906      -1.2        
5           7.49754     1.1         1.1         0.141       -2.0        
6           6.39732     0.406       0.406       0.16        -3.1        
7           5.99154     0.0311      0.0311      0.0581      -4.3        
8           5.9604      3.86e-05    3.86e-05    0.00228     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.960357    

                     final grad:   3.702376e-06

                     final lambda: 0.0000000e+00

                     time / iter:  770   ms

                     total time:   6.93  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.5%

                     fwd pass:   2.3 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 17.281617 seconds (14.45 M allocations: 927.050 MB, 3.30% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
