>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (915.0078125 MB free)
Uptime: 17320.0 sec
Load Avg:  1.0810546875  1.03662109375  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     774378 s         68 s      86485 s     653577 s         38 s
#2  3499 MHz     489679 s       5418 s      80317 s    1063213 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64969.969   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.69331e-12  final value -26.0803      factorizations 14
  4.323378 seconds (3.10 M allocations: 230.719 MB, 3.03% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.376      27.2        27.2        0.104       0.0         
2           24.1369     10.5        10.5        0.0785      -0.2        
3           13.6653     3.92        3.92        0.0716      -0.6        
4           9.74641     1.51        1.51        0.0767      -1.2        
5           8.23603     0.721       0.721       0.125       -2.0        
6           7.51536     0.248       0.248       0.17        -3.1        
7           7.26785     0.0161      0.0161      0.0602      -4.3        
8           7.2518      1.62e-05    1.62e-05    0.00224     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.25178     

                     final grad:   3.659192e-06

                     final lambda: 0.0000000e+00

                     time / iter:  778   ms

                     total time:   7.00  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.9%

                     fwd pass:   1.3 %

                     other:      4.3 % (graphics etc.)
 =========== end iLQG ===========
 19.013018 seconds (14.46 M allocations: 927.121 MB, 3.36% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
