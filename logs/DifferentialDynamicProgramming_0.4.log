>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64872.783   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.00199e-12  final value -32.1312      factorizations 13
  4.103018 seconds (3.09 M allocations: 220.780 MB, 3.02% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1206     24.5        24.5        0.106       0.0         
2           26.6535     12.9        12.9        0.0902      -0.2        
3           13.7347     6.33        6.33        0.0882      -0.6        
4           7.40741     2.72        2.72        0.0863      -1.2        
5           4.68546     1.14        1.14        0.136       -2.0        
6           3.54381     0.201       0.201       0.15        -3.1        
7           3.34279     0.00543     0.00543     0.0517      -4.3        
8           3.33736     5.04e-06    5.04e-06    0.00188     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.337351    

                     final grad:   3.166158e-06

                     final lambda: 0.0000000e+00

                     time / iter:  889   ms

                     total time:   8.00  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.9%

                     fwd pass:   1.7 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 20.013029 seconds (14.45 M allocations: 927.075 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
