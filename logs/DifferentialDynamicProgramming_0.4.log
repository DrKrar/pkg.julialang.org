>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 77913.389   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.78662e-12  final value -38.8873      factorizations 12
  4.007340 seconds (3.09 M allocations: 217.030 MB, 2.54% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6744     8.41        8.41        0.0584      0.0         
2           41.2622     7.74        7.74        0.069       -0.2        
3           33.5175     8.44        8.44        0.115       -0.6        
4           25.0789     8.7         8.7         0.225       -1.2        
5           16.3813     4.98        4.98        0.358       -2.0        
6           11.4001     0.873       0.873       0.281       -3.1        
7           10.5267     0.0379      0.0379      0.0715      -4.3        
8           10.4888     4.2e-05    4.2e-05    0.00251     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   10.48875    

                     final grad:   3.880342e-06

                     final lambda: 0.0000000e+00

                     time / iter:  640   ms

                     total time:   5.76  seconds, of which

                     derivs:     0.5 %

                     back pass:  89.7%

                     fwd pass:   2.7 %

                     other:      7.0 % (graphics etc.)
 =========== end iLQG ===========
 15.524244 seconds (14.45 M allocations: 927.081 MB, 3.37% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
