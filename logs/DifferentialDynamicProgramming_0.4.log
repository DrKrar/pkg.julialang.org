>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 72065.811   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.31891e-12  final value -38.6767      factorizations 16
  3.478116 seconds (3.07 M allocations: 211.021 MB, 1.49% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8936     10.8        10.8        0.0694      0.0         
2           39.0879     9.68        9.68        0.0814      -0.2        
3           29.4118     9.55        9.55        0.124       -0.6        
4           19.8619     7.59        7.59        0.204       -1.2        
5           12.2705     4.36        4.36        0.294       -2.0        
6           7.91442     1.57        1.57        0.36        -3.1        
7           6.33947     0.0863      0.0863      0.117       -4.3        
8           6.25316     6.95e-05    6.95e-05    0.0037      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.253092    

                     final grad:   5.095359e-06

                     final lambda: 0.0000000e+00

                     time / iter:  749   ms

                     total time:   6.74  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.1%

                     fwd pass:   1.9 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 17.905652 seconds (14.44 M allocations: 876.410 MB, 2.79% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
