>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67015.865   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.11057e-12  final value -24.5091      factorizations 13
  4.465524 seconds (3.06 M allocations: 196.619 MB, 1.39% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.1297     29.4        29.4        0.116       0.0         
2           19.7018     9.46        9.46        0.0749      -0.2        
3           10.2388     3.27        3.27        0.0563      -0.6        
4           6.96511     1.79        1.79        0.0765      -1.2        
5           5.17694     0.938       0.938       0.147       -2.0        
6           4.23881     0.311       0.311       0.184       -3.1        
7           3.92763     0.0186      0.0186      0.0667      -4.3        
8           3.909       1.5e-05    1.5e-05    0.00238     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.908981    

                     final grad:   3.750912e-06

                     final lambda: 0.0000000e+00

                     time / iter:  771   ms

                     total time:   6.94  seconds, of which

                     derivs:     0.6 %

                     back pass:  94.3%

                     fwd pass:   1.6 %

                     other:      3.5 % (graphics etc.)
 =========== end iLQG ===========
 17.722190 seconds (14.44 M allocations: 876.384 MB, 2.97% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
