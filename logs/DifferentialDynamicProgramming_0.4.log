>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (965.0234375 MB free)
Uptime: 15650.0 sec
Load Avg:  0.99169921875  1.0361328125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     627451 s        365 s      77240 s     682010 s         32 s
#2  3499 MHz     466129 s       4807 s      67011 s     942976 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65771.661   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.39294e-12  final value -33.8443      factorizations 16
  3.561180 seconds (3.10 M allocations: 238.475 MB, 3.00% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6779     16          16          0.0887      0.0         
2           34.6505     11.5        11.5        0.0921      -0.2        
3           23.1903     8.75        8.75        0.121       -0.6        
4           14.445      5.5         5.5         0.167       -1.2        
5           8.94005     2.67        2.67        0.241       -2.0        
6           6.26957     0.689       0.689       0.274       -3.1        
7           5.58092     0.0361      0.0361      0.0789      -4.3        
8           5.54487     3.97e-05    3.97e-05    0.00264     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.544833    

                     final grad:   4.035138e-06

                     final lambda: 0.0000000e+00

                     time / iter:  781   ms

                     total time:   7.03  seconds, of which

                     derivs:     0.4 %

                     back pass:  91.5%

                     fwd pass:   2.2 %

                     other:      5.9 % (graphics etc.)
 =========== end iLQG ===========
 18.263240 seconds (14.46 M allocations: 927.101 MB, 3.27% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
