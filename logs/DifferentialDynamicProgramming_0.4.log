>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1024.390625 MB free)
Uptime: 17951.0 sec
Load Avg:  0.97802734375  1.04736328125  1.05517578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     877298 s       3791 s      80891 s     651005 s         50 s
#2  3500 MHz     508485 s       2086 s      74716 s    1138479 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61789.080   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.85196e-12  final value -26.2051      factorizations 12
  4.433802 seconds (3.09 M allocations: 191.795 MB, 1.35% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1481     24.6        24.6        0.112       0.0         
2           25.5388     9.6         9.6         0.0828      -0.2        
3           15.9343     4.13        4.13        0.0793      -0.6        
4           11.7996     2.29        2.29        0.0961      -1.2        
5           9.50809     1.62        1.62        0.168       -2.0        
6           7.88561     0.392       0.392       0.189       -3.1        
7           7.49317     0.0113      0.0113      0.0559      -4.3        
8           7.48191     8.34e-06    8.34e-06    0.00199     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.481904    

                     final grad:   3.159374e-06

                     final lambda: 0.0000000e+00

                     time / iter:  917   ms

                     total time:   8.26  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.1%

                     fwd pass:   1.8 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 18.821683 seconds (14.46 M allocations: 876.682 MB, 2.69% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
