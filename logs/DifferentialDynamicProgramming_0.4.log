>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (983.49609375 MB free)
Uptime: 21825.0 sec
Load Avg:  1.048828125  1.0517578125  1.04833984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     985432 s       4035 s      95715 s     874186 s         96 s
#2  3500 MHz     702614 s       3513 s      87101 s    1302725 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59555.292   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 2.71719e-12  final value -25.3894      factorizations 11
  5.496845 seconds (3.09 M allocations: 211.452 MB, 2.79% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.5873     19.1        19.1        0.0935      0.0         
2           30.4983     11.8        11.8        0.088       -0.2        
3           18.7187     7.52        7.52        0.103       -0.6        
4           11.1976     3.48        3.48        0.124       -1.2        
5           7.72211     1.14        1.14        0.149       -2.0        
6           6.57899     0.279       0.279       0.163       -3.1        
7           6.30048     0.0165      0.0165      0.0574      -4.3        
8           6.28396     1.93e-05    1.93e-05    0.00213     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.283942    

            final grad:   3.411557e-06

            final lambda: 4.4841551e-08

            time / iter:  975   ms

            total time:   8.77  seconds, of which

            derivs:     0.6 %

            back pass:  93.4%

            fwd pass:   1.5 %

            other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 24.086400 seconds (14.73 M allocations: 920.904 MB, 2.78% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
