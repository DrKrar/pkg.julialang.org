>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68765.151   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.04292e-12  final value -30.6139      factorizations 14
  5.887682 seconds (3.10 M allocations: 228.287 MB, 2.72% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2187     27.4        27.4        0.113       0.0         
2           22.8226     11.4        11.4        0.086       -0.2        
3           11.3975     4.7         4.7         0.0771      -0.6        
4           6.70115     2.12        2.12        0.0904      -1.2        
5           4.58311     0.93        0.93        0.143       -2.0        
6           3.65263     0.204       0.204       0.161       -3.1        
7           3.44864     0.00948     0.00948     0.0575      -4.3        
8           3.43917     1.07e-05    1.07e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.439156    

                     final grad:   3.595574e-06

                     final lambda: 0.0000000e+00

                     time / iter:  801   ms

                     total time:   7.21  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.9%

                     fwd pass:   2.0 %

                     other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 17.257141 seconds (14.45 M allocations: 927.075 MB, 3.16% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
