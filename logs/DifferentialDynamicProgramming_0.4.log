>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1032.31640625 MB free)
Uptime: 18804.0 sec
Load Avg:  0.9755859375  1.0400390625  1.08740234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     884293 s       3803 s      82871 s     720034 s        110 s
#2  3500 MHz     517938 s       3674 s      77340 s    1194167 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60264.166   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.12669e-12  final value -31.5973      factorizations 13
  4.202226 seconds (3.10 M allocations: 195.892 MB, 1.38% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4698     21.8        21.8        0.0943      0.0         
2           28.6889     12.2        12.2        0.0826      -0.2        
3           16.4538     7.52        7.52        0.0899      -0.6        
4           8.93137     4.45        4.45        0.132       -1.2        
5           4.48425     1.93        1.93        0.203       -2.0        
6           2.55186     0.356       0.356       0.19        -3.1        
7           2.19554     0.0133      0.0133      0.0649      -4.3        
8           2.18223     1.17e-05    1.17e-05    0.00221     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   2.182218    

                     final grad:   3.491825e-06

                     final lambda: 0.0000000e+00

                     time / iter:  967   ms

                     total time:   8.71  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.1%

                     fwd pass:   2.1 %

                     other:      6.1 % (graphics etc.)
 =========== end iLQG ===========
 23.014507 seconds (14.46 M allocations: 876.712 MB, 2.32% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
