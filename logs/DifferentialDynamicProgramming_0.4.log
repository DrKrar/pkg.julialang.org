>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (844.7734375 MB free)
Uptime: 16995.0 sec
Load Avg:  0.955078125  0.9462890625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     704702 s       3037 s      79347 s     711870 s         47 s
#2  3500 MHz     464842 s       3496 s      73066 s    1060250 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64624.736   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.14337e-12  final value -22.5908      factorizations 16
  4.208230 seconds (3.10 M allocations: 237.852 MB, 2.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6255     22.4        22.4        0.102       0.0         
2           28.2639     13          13          0.0941      -0.2        
3           15.2365     7.13        7.13        0.101       -0.6        
4           8.10221     3.29        3.29        0.107       -1.2        
5           4.80777     1.48        1.48        0.162       -2.0        
6           3.3252      0.41        0.41        0.188       -3.1        
7           2.91557     0.0277      0.0277      0.0672      -4.3        
8           2.88789     3.2e-05    3.2e-05    0.00256     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   2.88786     

                     final grad:   4.129713e-06

                     final lambda: 0.0000000e+00

                     time / iter:  912   ms

                     total time:   8.21  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.1%

                     fwd pass:   1.9 %

                     other:      4.4 % (graphics etc.)
 =========== end iLQG ===========
 20.589898 seconds (14.45 M allocations: 927.034 MB, 3.25% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
