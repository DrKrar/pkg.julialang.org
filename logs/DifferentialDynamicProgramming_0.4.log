>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67318.107   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.87953e-12  final value -24.5327      factorizations 14
  4.522165 seconds (3.10 M allocations: 229.073 MB, 2.77% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4242     26          26          0.109       0.0         
2           23.423      10.3        10.3        0.0801      -0.2        
3           13.1446     3.95        3.95        0.0687      -0.6        
4           9.1918      1.84        1.84        0.0834      -1.2        
5           7.35367     1.02        1.02        0.146       -2.0        
6           6.33098     0.398       0.398       0.15        -3.1        
7           5.93276     0.0269      0.0269      0.0554      -4.3        
8           5.90583     3.04e-05    3.04e-05    0.0021      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.905804    

                     final grad:   3.488661e-06

                     final lambda: 0.0000000e+00

                     time / iter:  810   ms

                     total time:   7.29  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.7%

                     fwd pass:   1.8 %

                     other:      4.7 % (graphics etc.)
 =========== end iLQG ===========
 21.175119 seconds (14.45 M allocations: 927.076 MB, 3.29% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
