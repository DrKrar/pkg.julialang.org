>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (996.27734375 MB free)
Uptime: 50869.0 sec
Load Avg:  1.123046875  1.1005859375  1.06591796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    1546476 s        306 s     194265 s    2780093 s        175 s
#2  3496 MHz     902618 s       5649 s     181894 s    3687740 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59620.835   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.91623e-12  final value -28.7117      factorizations 19
  5.000012 seconds (3.11 M allocations: 257.490 MB, 2.65% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7545     17.7        17.7        0.0876      0.0         
2           32.0657     12          12          0.085       -0.2        
3           20.0161     8.69        8.69        0.104       -0.6        
4           11.3242     5.44        5.44        0.151       -1.2        
5           5.88256     2.72        2.72        0.204       -2.0        
6           3.16591     0.761       0.761       0.225       -3.1        
7           2.40541     0.0359      0.0359      0.0773      -4.3        
8           2.36946     3.38e-05    3.38e-05    0.00278     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   2.369431    

                     final grad:   4.263839e-06

                     final lambda: 0.0000000e+00

                     time / iter:  932   ms

                     total time:   8.39  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.6%

                     fwd pass:   1.9 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 22.772220 seconds (14.46 M allocations: 927.128 MB, 2.85% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
