>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (889.109375 MB free)
Uptime: 18053.0 sec
Load Avg:  0.99609375  0.98876953125  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     794410 s        388 s      81556 s     751935 s         27 s
#2  3500 MHz     545854 s       6445 s      78507 s    1104118 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 75749.528   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.75638e-12  final value -35.1144      factorizations 15
  5.005584 seconds (3.10 M allocations: 233.096 MB, 2.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1985     19.8        19.8        0.0942      0.0         
2           30.3884     8.57        8.57        0.0735      -0.2        
3           21.8201     4.68        4.68        0.0788      -0.6        
4           17.1431     3.41        3.41        0.129       -1.2        
5           13.7336     2.73        2.73        0.303       -2.0        
6           10.9992     0.849       0.849       0.348       -3.1        
7           10.1499     0.0347      0.0347      0.0761      -4.3        
8           10.1152     2.85e-05    2.85e-05    0.00237     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   10.11518    

                     final grad:   3.537762e-06

                     final lambda: 0.0000000e+00

                     time / iter:  724   ms

                     total time:   6.52  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.4%

                     fwd pass:   2.1 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 18.064634 seconds (14.46 M allocations: 927.138 MB, 3.34% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
