>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (941.14453125 MB free)
Uptime: 17764.0 sec
Load Avg:  1.03369140625  0.99267578125  1.00146484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3505 MHz     775102 s       1794 s      88530 s     695423 s         39 s
#2  3505 MHz     503262 s       5580 s      77138 s    1100065 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63029.045   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.57014e-12  final value -21.5289      factorizations 16
  4.956535 seconds (3.10 M allocations: 240.180 MB, 2.71% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.6529     19.2        19.2        0.0955      0.0         
2           32.4967     12          12          0.0913      -0.2        
3           20.539      8.07        8.07        0.11        -0.6        
4           12.4706     4.53        4.53        0.137       -1.2        
5           7.94391     2.8         2.8         0.223       -2.0        
6           5.14659     0.943       0.943       0.277       -3.1        
7           4.20341     0.0513      0.0513      0.0837      -4.3        
8           4.15214     4.98e-05    4.98e-05    0.00292     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.152089    

                     final grad:   4.430125e-06

                     final lambda: 0.0000000e+00

                     time / iter:  607   ms

                     total time:   5.47  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.7%

                     fwd pass:   1.7 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 15.823364 seconds (14.46 M allocations: 927.169 MB, 3.59% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
