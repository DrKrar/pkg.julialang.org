>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1074.0546875 MB free)
Uptime: 21154.0 sec
Load Avg:  1.10205078125  1.03271484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3484 MHz     997055 s       6808 s      89424 s     794581 s         76 s
#2  3484 MHz     621890 s       1747 s      78282 s    1334336 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.2
3 additional packages:
 - Compat                        0.14.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66086.851   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.89223e-12  final value -23.6319      factorizations 14
  5.718854 seconds (3.10 M allocations: 229.112 MB, 2.49% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.9444     21.5        21.5        0.102       0.0         
2           30.4218     9.76        9.76        0.0815      -0.2        
3           20.6571     5.96        5.96        0.0926      -0.6        
4           14.6929     4.33        4.33        0.142       -1.2        
5           10.3649     2.45        2.45        0.189       -2.0        
6           7.91598     0.754       0.754       0.168       -3.1        
7           7.16222     0.051       0.051       0.0635      -4.3        
8           7.11122     6.33e-05    6.33e-05    0.00242     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.111154    

            final grad:   3.922877e-06

            final lambda: 4.4841551e-08

            time / iter:  698   ms

            total time:   6.28  seconds, of which

            derivs:     0.9 %

            back pass:  89.9%

            fwd pass:   2.3 %

            other:      7.0 % (graphics etc.)
 =========== end iLQG ===========
 20.720224 seconds (14.73 M allocations: 920.730 MB, 3.00% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
