>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64246.466   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.82289e-12  final value -37.2992      factorizations 14
  3.697936 seconds (3.06 M allocations: 199.441 MB, 1.55% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6883     21.9        21.9        0.105       0.0         
2           28.7817     10.4        10.4        0.0885      -0.2        
3           18.4089     5.11        5.11        0.089       -0.6        
4           13.2961     2.23        2.23        0.0961      -1.2        
5           11.0681     0.723       0.723       0.147       -2.0        
6           10.3446     0.101       0.101       0.132       -3.1        
7           10.2434     0.00594     0.00594     0.0421      -4.3        
8           10.2375     7.79e-06    7.79e-06    0.00176     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   10.23746    

                     final grad:   2.978827e-06

                     final lambda: 0.0000000e+00

                     time / iter:  745   ms

                     total time:   6.71  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.8%

                     fwd pass:   2.0 %

                     other:      3.5 % (graphics etc.)
 =========== end iLQG ===========
 18.118659 seconds (14.44 M allocations: 876.384 MB, 2.99% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
