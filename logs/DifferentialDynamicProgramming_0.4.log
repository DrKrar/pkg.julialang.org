>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66380.045   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.08901e-12  final value -25.7869      factorizations 16
  4.775665 seconds (3.10 M allocations: 237.625 MB, 2.60% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1655     26.2        26.2        0.112       0.0         
2           24.9742     10          10          0.0829      -0.2        
3           14.9574     5.02        5.02        0.0815      -0.6        
4           9.93936     3.2         3.2         0.107       -1.2        
5           6.74195     1.97        1.97        0.185       -2.0        
6           4.773       0.691       0.691       0.198       -3.1        
7           4.08153     0.0511      0.0511      0.0637      -4.3        
8           4.03045     6.28e-05    6.28e-05    0.00241     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.030385    

                     final grad:   3.956528e-06

                     final lambda: 0.0000000e+00

                     time / iter:  745   ms

                     total time:   6.71  seconds, of which

                     derivs:     0.8 %

                     back pass:  92.5%

                     fwd pass:   2.0 %

                     other:      4.7 % (graphics etc.)
 =========== end iLQG ===========
 17.845149 seconds (14.45 M allocations: 927.076 MB, 3.18% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
