>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1056.3125 MB free)
Uptime: 23085.0 sec
Load Avg:  1.02880859375  1.13037109375  1.12841796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     999876 s       5346 s      88217 s     995452 s         88 s
#2  3500 MHz     722813 s       1466 s      79055 s    1419706 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67031.739   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.07075e-12  final value -26.4734      factorizations 15
  6.240052 seconds (3.10 M allocations: 235.261 MB, 2.61% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.599      21.5        21.5        0.109       0.0         
2           29.1177     11.3        11.3        0.0958      -0.2        
3           17.821      6.21        6.21        0.102       -0.6        
4           11.609      3.6         3.6         0.125       -1.2        
5           8.01325     1.61        1.61        0.186       -2.0        
6           6.40116     0.293       0.293       0.18        -3.1        
7           6.10849     0.0134      0.0134      0.0568      -4.3        
8           6.09512     1.52e-05    1.52e-05    0.00224     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.095105    

            final grad:   3.649924e-06

            final lambda: 4.4841551e-08

            time / iter:  1018  ms

            total time:   9.16  seconds, of which

            derivs:     0.6 %

            back pass:  92.0%

            fwd pass:   1.5 %

            other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 23.966205 seconds (14.73 M allocations: 920.855 MB, 2.88% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
