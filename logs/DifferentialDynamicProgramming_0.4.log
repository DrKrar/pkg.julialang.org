>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65434.391   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.96093e-12  final value -16.595       factorizations 12
  4.761708 seconds (3.09 M allocations: 217.503 MB, 2.62% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.3243     26.1        26.1        0.114       0.0         
2           23.1985     10.2        10.2        0.0858      -0.2        
3           13.0206     4.5         4.5         0.0799      -0.6        
4           8.52333     2.27        2.27        0.0895      -1.2        
5           6.25036     1.16        1.16        0.145       -2.0        
6           5.08665     0.358       0.358       0.158       -3.1        
7           4.72853     0.0227      0.0227      0.0531      -4.3        
8           4.70581     2.63e-05    2.63e-05    0.0021      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.70578     

                     final grad:   3.386247e-06

                     final lambda: 0.0000000e+00

                     time / iter:  669   ms

                     total time:   6.02  seconds, of which

                     derivs:     0.6 %

                     back pass:  94.1%

                     fwd pass:   1.3 %

                     other:      4.0 % (graphics etc.)
 =========== end iLQG ===========
 16.206444 seconds (14.45 M allocations: 927.076 MB, 3.45% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
