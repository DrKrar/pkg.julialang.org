>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1066.7578125 MB free)
Uptime: 23636.0 sec
Load Avg:  0.8828125  0.96728515625  1.0205078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1052460 s       4599 s      89902 s     989086 s         77 s
#2  3499 MHz     651322 s       2436 s      78666 s    1557237 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.19.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 70250.653   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.42515e-12  final value -46.1935      factorizations 19
  5.733051 seconds (3.11 M allocations: 254.192 MB, 2.94% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.7372     21.5        21.5        0.0983      0.0         
2           29.2631     10.9        10.9        0.0831      -0.2        
3           18.3134     6.45        6.45        0.095       -0.6        
4           11.8644     3.64        3.64        0.122       -1.2        
5           8.22509     1.77        1.77        0.168       -2.0        
6           6.45784     0.48        0.48        0.175       -3.1        
7           5.97752     0.0315      0.0315      0.0617      -4.3        
8           5.94603     3.76e-05    3.76e-05    0.00243     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.945988    

            final grad:   3.936959e-06

            final lambda: 4.4841551e-08

            time / iter:  1087  ms

            total time:   9.78  seconds, of which

            derivs:     0.6 %

            back pass:  91.1%

            fwd pass:   1.6 %

            other:      6.7 % (graphics etc.)
 =========== end iLQG ===========
 26.063021 seconds (14.73 M allocations: 920.820 MB, 3.00% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
