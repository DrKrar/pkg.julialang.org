>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62535.007   
RESULT: Gradient norm smaller than tolerance.
iterations 24  gradient 2.94231e-12  final value -19.8584      factorizations 22
  3.938025 seconds (3.08 M allocations: 249.752 MB, 1.44% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8898     22.7        22.7        0.104       0.0         
2           27.1677     11.9        11.9        0.0898      -0.2        
3           15.2826     5.87        5.87        0.09        -0.6        
4           9.40841     3.22        3.22        0.0966      -1.2        
5           6.18576     2.06        2.06        0.172       -2.0        
6           4.12555     0.548       0.548       0.192       -3.1        
7           3.57776     0.0225      0.0225      0.0588      -4.3        
8           3.55526     1.91e-05    1.91e-05    0.00215     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.555237    

                     final grad:   3.489588e-06

                     final lambda: 0.0000000e+00

                     time / iter:  737   ms

                     total time:   6.63  seconds, of which

                     derivs:     0.5 %

                     back pass:  94.2%

                     fwd pass:   1.2 %

                     other:      4.1 % (graphics etc.)
 =========== end iLQG ===========
 18.704983 seconds (14.44 M allocations: 876.416 MB, 2.67% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
