>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (946.64453125 MB free)
Uptime: 16615.0 sec
Load Avg:  0.9970703125  1.0078125  0.97265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz     743290 s       1882 s      80414 s     632202 s         28 s
#2  3498 MHz     487623 s       5016 s      76377 s    1001396 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69096.225   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.19996e-12  final value -31.9979      factorizations 12
  3.853340 seconds (3.09 M allocations: 215.765 MB, 2.97% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2876     23          23          0.104       0.0         
2           27.2906     10.3        10.3        0.0795      -0.2        
3           17.0353     6.32        6.32        0.0949      -0.6        
4           10.715      3.47        3.47        0.137       -1.2        
5           7.24553     1.33        1.33        0.162       -2.0        
6           5.91942     0.34        0.34        0.193       -3.1        
7           5.57905     0.0201      0.0201      0.0656      -4.3        
8           5.55898     2.28e-05    2.28e-05    0.00234     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.558961    

                     final grad:   3.740907e-06

                     final lambda: 0.0000000e+00

                     time / iter:  690   ms

                     total time:   6.21  seconds, of which

                     derivs:     0.4 %

                     back pass:  90.4%

                     fwd pass:   2.1 %

                     other:      7.1 % (graphics etc.)
 =========== end iLQG ===========
 15.080350 seconds (14.46 M allocations: 927.122 MB, 3.48% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
