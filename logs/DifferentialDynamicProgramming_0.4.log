>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1015.62109375 MB free)
Uptime: 18114.0 sec
Load Avg:  1.05419921875  1.06396484375  1.05078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     825688 s       4428 s      82093 s     720182 s         59 s
#2  3499 MHz     579548 s       1961 s      73567 s    1085688 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67725.447   
RESULT: Improvement smaller than tolerance.
iterations 19  gradient 0.0021198    final value -34.2307      factorizations 18
  4.400309 seconds (3.09 M allocations: 224.033 MB, 1.39% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8364     16          16          0.0873      0.0         
2           33.8505     11.5        11.5        0.0886      -0.2        
3           22.3521     8.09        8.09        0.109       -0.6        
4           14.2668     4.51        4.51        0.134       -1.2        
5           9.7535      3.18        3.18        0.192       -2.0        
6           6.57451     1.59        1.59        0.259       -3.1        
7           4.98767     0.117       0.117       0.0852      -4.3        
8           4.87112     0.000138    0.000138    0.00347     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.870979    

                     final grad:   5.455655e-06

                     final lambda: 0.0000000e+00

                     time / iter:  771   ms

                     total time:   6.94  seconds, of which

                     derivs:     0.4 %

                     back pass:  92.4%

                     fwd pass:   1.8 %

                     other:      5.4 % (graphics etc.)
 =========== end iLQG ===========
 19.215872 seconds (14.47 M allocations: 877.301 MB, 2.63% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
