>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69174.304   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.91038e-12  final value -32.7496      factorizations 16
  5.146718 seconds (3.07 M allocations: 211.836 MB, 1.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0765     24.8        24.8        0.114       0.0         
2           26.239      12.4        12.4        0.0949      -0.2        
3           13.8253     5.85        5.85        0.0921      -0.6        
4           7.97266     2.35        2.35        0.092       -1.2        
5           5.62126     1.04        1.04        0.144       -2.0        
6           4.5856      0.39        0.39        0.172       -3.1        
7           4.19546     0.0316      0.0316      0.0604      -4.3        
8           4.16385     3.99e-05    3.99e-05    0.0024      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.163812    

                     final grad:   4.060124e-06

                     final lambda: 0.0000000e+00

                     time / iter:  863   ms

                     total time:   7.77  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.4%

                     fwd pass:   1.8 %

                     other:      5.2 % (graphics etc.)
 =========== end iLQG ===========
 19.718894 seconds (14.44 M allocations: 876.385 MB, 2.96% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
