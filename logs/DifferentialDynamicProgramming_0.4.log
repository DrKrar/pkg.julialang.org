>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1072.40234375 MB free)
Uptime: 22644.0 sec
Load Avg:  1.068359375  1.001953125  0.97265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     987312 s        404 s      81935 s     979559 s         92 s
#2  3500 MHz     709676 s       5662 s      72658 s    1394865 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62026.977   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.38344e-12  final value -45.5758      factorizations 16
  3.702209 seconds (3.10 M allocations: 237.700 MB, 3.17% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8276     22.7        22.7        0.107       0.0         
2           28.0783     11.4        11.4        0.0893      -0.2        
3           16.7055     5.81        5.81        0.0923      -0.6        
4           10.8976     2.55        2.55        0.101       -1.2        
5           8.34265     1.01        1.01        0.154       -2.0        
6           7.33668     0.208       0.208       0.179       -3.1        
7           7.129       0.0114      0.0114      0.0552      -4.3        
8           7.11764     1.3e-05    1.3e-05    0.00204     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   7.117631    

            final grad:   3.397403e-06

            final lambda: 4.4841551e-08

            time / iter:  584   ms

            total time:   5.26  seconds, of which

            derivs:     0.5 %

            back pass:  93.3%

            fwd pass:   1.6 %

            other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 14.955909 seconds (14.73 M allocations: 920.760 MB, 3.20% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
