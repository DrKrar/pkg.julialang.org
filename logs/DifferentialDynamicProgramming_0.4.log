>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1051.58203125 MB free)
Uptime: 17918.0 sec
Load Avg:  0.98828125  1.037109375  1.04248046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     874915 s       5014 s      81304 s     635251 s         83 s
#2  3500 MHz     481920 s       1110 s      73958 s    1161775 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58956.416   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.73391e-12  final value -34.567       factorizations 13
  4.745441 seconds (3.10 M allocations: 196.017 MB, 1.47% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.7057     19.1        19.1        0.097       0.0         
2           30.5658     10.8        10.8        0.0862      -0.2        
3           19.7337     6.26        6.26        0.0951      -0.6        
4           13.4694     2.82        2.82        0.119       -1.2        
5           10.6503     1.38        1.38        0.201       -2.0        
6           9.26605     0.776       0.776       0.372       -3.1        
7           8.49053     0.0558      0.0558      0.107       -4.3        
8           8.43477     5.15e-05    5.15e-05    0.00318     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.434722    

                     final grad:   4.534271e-06

                     final lambda: 0.0000000e+00

                     time / iter:  935   ms

                     total time:   8.42  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.7%

                     fwd pass:   2.0 %

                     other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 21.054969 seconds (14.46 M allocations: 876.713 MB, 2.33% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
