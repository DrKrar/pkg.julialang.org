>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64177.871   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.98298e-12  final value -29.5011      factorizations 18
  5.345623 seconds (3.07 M allocations: 223.034 MB, 1.24% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0689     28          28          0.114       0.0         
2           23.0848     10.7        10.7        0.0811      -0.2        
3           12.3835     4.31        4.31        0.0712      -0.6        
4           8.07344     1.79        1.79        0.0804      -1.2        
5           6.27974     1.29        1.29        0.144       -2.0        
6           4.98613     0.57        0.57        0.184       -3.1        
7           4.41576     0.0345      0.0345      0.0651      -4.3        
8           4.38123     3.77e-05    3.77e-05    0.00248     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.381194    

                     final grad:   3.878046e-06

                     final lambda: 0.0000000e+00

                     time / iter:  810   ms

                     total time:   7.29  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.6%

                     fwd pass:   1.2 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 20.365046 seconds (14.44 M allocations: 876.385 MB, 2.66% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
