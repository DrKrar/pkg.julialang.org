>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67620.522   
RESULT: Gradient norm smaller than tolerance.
iterations 21  gradient 3.03462e-12  final value -31.0313      factorizations 20
  5.263627 seconds (3.11 M allocations: 261.780 MB, 2.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3216     22.4        22.4        0.103       0.0         
2           27.9378     11.7        11.7        0.0867      -0.2        
3           16.2834     6.37        6.37        0.0956      -0.6        
4           9.91137     2.88        2.88        0.114       -1.2        
5           7.03603     1.12        1.12        0.165       -2.0        
6           5.91843     0.177       0.177       0.172       -3.1        
7           5.74153     0.00754     0.00754     0.0491      -4.3        
8           5.734       9.94e-06    9.94e-06    0.00192     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.733987    

                     final grad:   3.315582e-06

                     final lambda: 0.0000000e+00

                     time / iter:  799   ms

                     total time:   7.19  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.1%

                     fwd pass:   2.0 %

                     other:      5.2 % (graphics etc.)
 =========== end iLQG ===========
 18.667294 seconds (14.45 M allocations: 927.080 MB, 2.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
