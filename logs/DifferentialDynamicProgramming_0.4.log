>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62395.625   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.05066e-12  final value -27.9046      factorizations 15
  5.055082 seconds (3.10 M allocations: 234.076 MB, 2.58% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4013     30.3        30.3        0.121       0.0         
2           20.1305     8.56        8.56        0.0754      -0.2        
3           11.5689     2.81        2.81        0.0601      -0.6        
4           8.76313     1.23        1.23        0.0678      -1.2        
5           7.52859     0.48        0.48        0.1         -2.0        
6           7.04864     0.13        0.13        0.103       -3.1        
7           6.91873     0.0104      0.0104      0.0462      -4.3        
8           6.90835     1.34e-05    1.34e-05    0.00193     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.90834     

                     final grad:   3.229509e-06

                     final lambda: 0.0000000e+00

                     time / iter:  811   ms

                     total time:   7.30  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.4%

                     fwd pass:   1.4 %

                     other:      4.5 % (graphics etc.)
 =========== end iLQG ===========
 20.229527 seconds (14.45 M allocations: 927.076 MB, 3.29% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
