>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 52977.231   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.22653e-12  final value -28.3379      factorizations 15
  4.155533 seconds (3.06 M allocations: 206.609 MB, 1.33% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6282     31.4        31.4        0.124       0.0         
2           18.2256     8.56        8.56        0.0742      -0.2        
3           9.66325     3.24        3.24        0.0612      -0.6        
4           6.4226      1.67        1.67        0.0893      -1.2        
5           4.75097     0.737       0.737       0.127       -2.0        
6           4.0137      0.214       0.214       0.133       -3.1        
7           3.79954     0.0127      0.0127      0.0502      -4.3        
8           3.78683     1.39e-05    1.39e-05    0.00202     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.786813    

                     final grad:   3.334133e-06

                     final lambda: 0.0000000e+00

                     time / iter:  977   ms

                     total time:   8.79  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.4%

                     fwd pass:   1.5 %

                     other:      5.4 % (graphics etc.)
 =========== end iLQG ===========
 23.801830 seconds (14.44 M allocations: 876.384 MB, 2.75% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
