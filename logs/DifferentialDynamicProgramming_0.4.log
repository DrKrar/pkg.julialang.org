>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1031.10546875 MB free)
Uptime: 18332.0 sec
Load Avg:  1.18212890625  1.130859375  1.0791015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     859517 s       6430 s      82639 s     696313 s         52 s
#2  3499 MHz     547657 s       1739 s      74841 s    1146423 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66346.083   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.1388e-12  final value -40.3187      factorizations 14
  3.636617 seconds (3.10 M allocations: 201.223 MB, 1.46% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2823     24.2        24.2        0.113       0.0         
2           27.0379     10.6        10.6        0.0857      -0.2        
3           16.4011     5.77        5.77        0.0936      -0.6        
4           10.632      2.42        2.42        0.109       -1.2        
5           8.21059     0.882       0.882       0.149       -2.0        
6           7.32866     0.268       0.268       0.185       -3.1        
7           7.06071     0.0211      0.0211      0.0583      -4.3        
8           7.03961     2.61e-05    2.61e-05    0.0022      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.039586    

                     final grad:   3.602959e-06

                     final lambda: 0.0000000e+00

                     time / iter:  765   ms

                     total time:   6.88  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.2%

                     fwd pass:   2.0 %

                     other:      6.0 % (graphics etc.)
 =========== end iLQG ===========
 16.610052 seconds (14.46 M allocations: 876.717 MB, 2.87% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
