>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60350.658   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.17655e-12  final value -40.426       factorizations 15
  3.815825 seconds (3.07 M allocations: 206.612 MB, 1.41% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.612      14.1        14.1        0.0834      0.0         
2           36.4779     9.38        9.38        0.0829      -0.2        
3           27.1027     8.3         8.3         0.115       -0.6        
4           18.8068     6.82        6.82        0.189       -1.2        
5           11.988      3.55        3.55        0.304       -2.0        
6           8.4416      0.702       0.702       0.277       -3.1        
7           7.73941     0.0321      0.0321      0.0782      -4.3        
8           7.70729     3.43e-05    3.43e-05    0.00245     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.707253    

                     final grad:   3.888304e-06

                     final lambda: 0.0000000e+00

                     time / iter:  573   ms

                     total time:   5.16  seconds, of which

                     derivs:     0.6 %

                     back pass:  89.5%

                     fwd pass:   2.5 %

                     other:      7.4 % (graphics etc.)
 =========== end iLQG ===========
 12.738402 seconds (14.44 M allocations: 876.416 MB, 3.71% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
