>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (916.13671875 MB free)
Uptime: 15783.0 sec
Load Avg:  1.07666015625  1.0078125  1.013671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     707467 s       2036 s      83624 s     583222 s         45 s
#2  3503 MHz     455685 s       5420 s      77497 s     946299 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.1
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60981.037   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 2.96408e-12  final value -25.2449      factorizations 21
  4.670972 seconds (3.11 M allocations: 267.225 MB, 2.80% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4183     27          27          0.119       0.0         
2           22.4062     10.8        10.8        0.0881      -0.2        
3           11.6457     4.54        4.54        0.0785      -0.6        
4           7.10714     2.49        2.49        0.083       -1.2        
5           4.6174      1.4         1.4         0.146       -2.0        
6           3.21756     0.315       0.315       0.148       -3.1        
7           2.90225     0.0132      0.0132      0.0529      -4.3        
8           2.88903     1.35e-05    1.35e-05    0.00204     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   2.889017    

                     final grad:   3.30346e-06

                     final lambda: 0.0000000e+00

                     time / iter:  931   ms

                     total time:   8.38  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.2%

                     fwd pass:   1.8 %

                     other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 22.364475 seconds (14.46 M allocations: 927.139 MB, 2.97% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
