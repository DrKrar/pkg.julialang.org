>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (976.1875 MB free)
Uptime: 16221.0 sec
Load Avg:  1.01416015625  0.9951171875  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     727713 s        392 s      75890 s     620133 s         43 s
#2  3500 MHz     453350 s       5077 s      69011 s    1017730 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58869.573   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.1069e-12  final value -34.1369      factorizations 19
  3.998484 seconds (3.11 M allocations: 256.249 MB, 2.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.4103     18.7        18.7        0.0941      0.0         
2           32.6941     11          11          0.0876      -0.2        
3           21.7123     6.54        6.54        0.102       -0.6        
4           15.1739     3.34        3.34        0.129       -1.2        
5           11.836      1.91        1.91        0.202       -2.0        
6           9.92625     0.53        0.53        0.223       -3.1        
7           9.39648     0.0205      0.0205      0.0614      -4.3        
8           9.37594     1.43e-05    1.43e-05    0.00213     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   9.375923    

                     final grad:   3.193156e-06

                     final lambda: 0.0000000e+00

                     time / iter:  779   ms

                     total time:   7.01  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.8%

                     fwd pass:   1.5 %

                     other:      4.0 % (graphics etc.)
 =========== end iLQG ===========
 20.075353 seconds (14.46 M allocations: 927.129 MB, 3.12% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
