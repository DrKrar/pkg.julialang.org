>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61882.693   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.2397e-12  final value -33.0021      factorizations 19
  4.681231 seconds (3.11 M allocations: 255.252 MB, 3.42% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5716     24.9        24.9        0.11        0.0         
2           25.6874     10.2        10.2        0.0841      -0.2        
3           15.4525     4.8         4.8         0.0809      -0.6        
4           10.6557     2.68        2.68        0.097       -1.2        
5           7.97129     1.38        1.38        0.151       -2.0        
6           6.59485     0.261       0.261       0.18        -3.1        
7           6.33412     0.00846     0.00846     0.0564      -4.3        
8           6.32566     8.16e-06    8.16e-06    0.00202     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.325655    

                     final grad:   3.331656e-06

                     final lambda: 0.0000000e+00

                     time / iter:  947   ms

                     total time:   8.52  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.5%

                     fwd pass:   1.8 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 20.826004 seconds (14.45 M allocations: 927.044 MB, 3.35% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
