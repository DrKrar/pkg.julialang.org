>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66931.126   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 2.76257e-12  final value -21.6297      factorizations 13
  5.107072 seconds (3.06 M allocations: 198.590 MB, 1.37% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4039     21.5        21.5        0.0922      0.0         
2           27.9292     11.3        11.3        0.0769      -0.2        
3           16.6001     5.81        5.81        0.0785      -0.6        
4           10.789      2.6         2.6         0.0904      -1.2        
5           8.18684     1.01        1.01        0.135       -2.0        
6           7.17385     0.303       0.303       0.153       -3.1        
7           6.87066     0.0228      0.0228      0.0574      -4.3        
8           6.84789     2.86e-05    2.86e-05    0.00236     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.847859    

                     final grad:   3.880108e-06

                     final lambda: 0.0000000e+00

                     time / iter:  768   ms

                     total time:   6.91  seconds, of which

                     derivs:     0.4 %

                     back pass:  91.8%

                     fwd pass:   2.0 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 19.078353 seconds (14.44 M allocations: 876.384 MB, 2.81% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
