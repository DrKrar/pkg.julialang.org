>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 72628.551   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.15774e-12  final value -20.0601      factorizations 18
  3.922240 seconds (3.11 M allocations: 249.831 MB, 2.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.4704     22.3        22.3        0.102       0.0         
2           26.1902     10.5        10.5        0.0804      -0.2        
3           15.7243     5.21        5.21        0.0854      -0.6        
4           10.5142     2.23        2.23        0.099       -1.2        
5           8.28066     0.921       0.921       0.138       -2.0        
6           7.35977     0.272       0.272       0.161       -3.1        
7           7.0874      0.0199      0.0199      0.052       -4.3        
8           7.06751     2.54e-05    2.54e-05    0.0021      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.067482    

                     final grad:   3.496708e-06

                     final lambda: 0.0000000e+00

                     time / iter:  939   ms

                     total time:   8.45  seconds, of which

                     derivs:     0.8 %

                     back pass:  93.1%

                     fwd pass:   1.5 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 21.891970 seconds (14.45 M allocations: 927.044 MB, 3.20% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
