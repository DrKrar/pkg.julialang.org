>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58952.880   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.22066e-12  final value -31.0356      factorizations 14
  4.654774 seconds (3.10 M allocations: 227.925 MB, 2.68% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.7763     21.1        21.1        0.101       0.0         
2           29.6758     10.7        10.7        0.086       -0.2        
3           19.009      5.47        5.47        0.0901      -0.6        
4           13.5356     2.89        2.89        0.117       -1.2        
5           10.6484     1.73        1.73        0.201       -2.0        
6           8.92312     0.472       0.472       0.258       -3.1        
7           8.45135     0.025       0.025       0.0687      -4.3        
8           8.42639     2.84e-05    2.84e-05    0.00238     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.426359    

                     final grad:   3.899997e-06

                     final lambda: 0.0000000e+00

                     time / iter:  790   ms

                     total time:   7.11  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.4%

                     fwd pass:   2.0 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 16.771638 seconds (14.45 M allocations: 927.081 MB, 3.10% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
