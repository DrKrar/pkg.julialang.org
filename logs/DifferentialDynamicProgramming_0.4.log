>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67730.636   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.99087e-12  final value -37.213       factorizations 13
  4.223714 seconds (3.06 M allocations: 195.272 MB, 1.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.276      15.3        15.3        0.0821      0.0         
2           36.0219     9.99        9.99        0.0798      -0.2        
3           26.0329     7.55        7.55        0.106       -0.6        
4           18.4868     4.84        4.84        0.164       -1.2        
5           13.6512     1.85        1.85        0.216       -2.0        
6           11.7967     0.455       0.455       0.196       -3.1        
7           11.3418     0.0295      0.0295      0.0581      -4.3        
8           11.3124     3.35e-05    3.35e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   11.31234    

                     final grad:   3.591088e-06

                     final lambda: 0.0000000e+00

                     time / iter:  773   ms

                     total time:   6.95  seconds, of which

                     derivs:     0.6 %

                     back pass:  94.0%

                     fwd pass:   1.3 %

                     other:      4.1 % (graphics etc.)
 =========== end iLQG ===========
 18.846882 seconds (14.44 M allocations: 876.385 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
