>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1004.33984375 MB free)
Uptime: 18003.0 sec
Load Avg:  0.9765625  1.0439453125  1.0439453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     859399 s       3445 s      82133 s     667925 s         65 s
#2  3500 MHz     522729 s       2889 s      74434 s    1140449 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 74217.388   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.06453e-12  final value -34.5463      factorizations 14
  4.642343 seconds (3.10 M allocations: 202.808 MB, 1.29% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.8043     22.4        22.4        0.109       0.0         
2           27.4215     10.9        10.9        0.0903      -0.2        
3           16.5584     5.4         5.4         0.0895      -0.6        
4           11.1581     3.16        3.16        0.114       -1.2        
5           8.00064     1.81        1.81        0.172       -2.0        
6           6.18763     0.712       0.712       0.197       -3.1        
7           5.47568     0.0611      0.0611      0.0688      -4.3        
8           5.41463     7.85e-05    7.85e-05    0.00272     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.414553    

                     final grad:   4.387025e-06

                     final lambda: 0.0000000e+00

                     time / iter:  838   ms

                     total time:   7.54  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.8%

                     fwd pass:   2.0 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 19.217646 seconds (14.46 M allocations: 876.683 MB, 2.63% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
