>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1050.0 MB free)
Uptime: 18523.0 sec
Load Avg:  1.095703125  1.05615234375  1.0498046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     795264 s       2324 s      78754 s     808792 s         52 s
#2  3499 MHz     561592 s       5548 s      72969 s    1148816 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68787.938   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.06291e-12  final value -24.3133      factorizations 14
  3.862835 seconds (3.10 M allocations: 202.888 MB, 1.42% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.6619     18          18          0.0921      0.0         
2           32.6476     10.4        10.4        0.0865      -0.2        
3           22.2144     6.74        6.74        0.103       -0.6        
4           15.4718     4.28        4.28        0.142       -1.2        
5           11.1915     2.53        2.53        0.235       -2.0        
6           8.66369     0.752       0.752       0.245       -3.1        
7           7.91195     0.0439      0.0439      0.072       -4.3        
8           7.86801     4.88e-05    4.88e-05    0.00261     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.86796     

                     final grad:   3.877447e-06

                     final lambda: 0.0000000e+00

                     time / iter:  600   ms

                     total time:   5.40  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.5%

                     fwd pass:   2.0 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 16.031898 seconds (14.46 M allocations: 876.714 MB, 3.10% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
