>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63535.961   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 2.72305e-12  final value -27.9912      factorizations 18
  4.755975 seconds (3.11 M allocations: 253.121 MB, 3.00% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4706     27.5        27.5        0.109       0.0         
2           22.9996     10.7        10.7        0.0799      -0.2        
3           12.2691     4.39        4.39        0.0706      -0.6        
4           7.87878     2.09        2.09        0.0772      -1.2        
5           5.78475     0.955       0.955       0.13        -2.0        
6           4.82946     0.192       0.192       0.134       -3.1        
7           4.63726     0.00894     0.00894     0.0486      -4.3        
8           4.62832     9.74e-06    9.74e-06    0.00182     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.628306    

                     final grad:   2.98612e-06

                     final lambda: 0.0000000e+00

                     time / iter:  775   ms

                     total time:   6.98  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.3%

                     fwd pass:   2.0 %

                     other:      5.9 % (graphics etc.)
 =========== end iLQG ===========
 18.172529 seconds (14.45 M allocations: 927.075 MB, 3.52% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
