>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1047.703125 MB free)
Uptime: 15804.0 sec
Load Avg:  0.9521484375  1.02685546875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz     660958 s       2179 s      55646 s     717477 s         16 s
#2  3507 MHz     478157 s       4015 s      46311 s    1004890 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63286.940   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.9688e-12  final value -30.6464      factorizations 18
  3.802297 seconds (3.11 M allocations: 225.614 MB, 1.40% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4399     16.4        16.4        0.0874      0.0         
2           34.0791     12.4        12.4        0.0899      -0.2        
3           21.6942     8.88        8.88        0.108       -0.6        
4           12.8171     4.02        4.02        0.123       -1.2        
5           8.79585     1.38        1.38        0.138       -2.0        
6           7.4136      0.291       0.291       0.188       -3.1        
7           7.12245     0.00997     0.00997     0.0561      -4.3        
8           7.11248     9.34e-06    9.34e-06    0.00205     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.11247     

                     final grad:   3.355631e-06

                     final lambda: 0.0000000e+00

                     time / iter:  821   ms

                     total time:   7.39  seconds, of which

                     derivs:     0.7 %

                     back pass:  90.9%

                     fwd pass:   2.1 %

                     other:      6.3 % (graphics etc.)
 =========== end iLQG ===========
 18.887971 seconds (14.46 M allocations: 876.717 MB, 2.77% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
