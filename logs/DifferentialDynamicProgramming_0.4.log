>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1004.5390625 MB free)
Uptime: 17899.0 sec
Load Avg:  1.0810546875  1.037109375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     823992 s       2026 s      84484 s     696835 s         62 s
#2  3499 MHz     496115 s       4625 s      80940 s    1148254 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.1
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62444.968   
RESULT: Gradient norm smaller than tolerance.
iterations 22  gradient 3.15336e-12  final value -34.5744      factorizations 21
  3.863247 seconds (3.11 M allocations: 241.576 MB, 1.52% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           52.0094     24.9        24.9        0.109       0.0         
2           27.1179     12.2        12.2        0.0905      -0.2        
3           14.8833     5.95        5.95        0.088       -0.6        
4           8.934       2.68        2.68        0.0953      -1.2        
5           6.25697     1.07        1.07        0.139       -2.0        
6           5.18381     0.146       0.146       0.145       -3.1        
7           5.03792     0.00394     0.00394     0.0479      -4.3        
8           5.03398     4.25e-06    4.25e-06    0.00187     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.033977    

                     final grad:   3.204352e-06

                     final lambda: 0.0000000e+00

                     time / iter:  705   ms

                     total time:   6.34  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.1%

                     fwd pass:   2.2 %

                     other:      5.1 % (graphics etc.)
 =========== end iLQG ===========
 19.255721 seconds (14.46 M allocations: 876.712 MB, 2.68% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
