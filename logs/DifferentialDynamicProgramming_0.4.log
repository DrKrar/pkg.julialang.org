>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69219.829   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.0254e-12  final value -36.0928      factorizations 15
  4.156146 seconds (3.10 M allocations: 232.239 MB, 2.88% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3999     25          25          0.109       0.0         
2           25.4133     11.2        11.2        0.0859      -0.2        
3           14.1857     5.83        5.83        0.085       -0.6        
4           8.35512     2.93        2.93        0.11        -1.2        
5           5.42568     1.15        1.15        0.153       -2.0        
6           4.27193     0.165       0.165       0.152       -3.1        
7           4.10668     0.00448     0.00448     0.0455      -4.3        
8           4.1022      4.84e-06    4.84e-06    0.00173     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.102196    

                     final grad:   2.948253e-06

                     final lambda: 0.0000000e+00

                     time / iter:  771   ms

                     total time:   6.94  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.9%

                     fwd pass:   1.7 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 19.897660 seconds (14.45 M allocations: 927.081 MB, 3.17% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
