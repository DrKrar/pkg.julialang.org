>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64749.368   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.02743e-12  final value -23.9004      factorizations 13
  3.463981 seconds (3.06 M allocations: 196.968 MB, 1.58% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2955     19.2        19.2        0.095       0.0         
2           31.0522     11.3        11.3        0.087       -0.2        
3           19.7717     6.33        6.33        0.0968      -0.6        
4           13.4399     2.9         2.9         0.11        -1.2        
5           10.5443     1.53        1.53        0.165       -2.0        
6           9.01919     0.403       0.403       0.2         -3.1        
7           8.61605     0.017       0.017       0.061       -4.3        
8           8.59909     1.5e-05    1.5e-05    0.00229     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.599073    

                     final grad:   3.578543e-06

                     final lambda: 0.0000000e+00

                     time / iter:  675   ms

                     total time:   6.07  seconds, of which

                     derivs:     0.5 %

                     back pass:  90.3%

                     fwd pass:   1.9 %

                     other:      7.3 % (graphics etc.)
 =========== end iLQG ===========
 15.941904 seconds (14.44 M allocations: 876.385 MB, 3.21% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
