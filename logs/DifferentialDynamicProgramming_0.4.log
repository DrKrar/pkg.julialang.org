>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (965.6875 MB free)
Uptime: 17080.0 sec
Load Avg:  0.96142578125  1.01513671875  1.0107421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     710140 s       3912 s      82622 s     710893 s         39 s
#2  3501 MHz     494552 s       2856 s      75998 s    1055982 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.8.8
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62700.182   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.85893e-12  final value -19.1555      factorizations 16
  5.946757 seconds (3.10 M allocations: 242.817 MB, 2.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.1439     30.2        30.2        0.125       0.0         
2           17.9934     7.94        7.94        0.0732      -0.2        
3           10.0533     3.04        3.04        0.0566      -0.6        
4           7.01391     2.23        2.23        0.0863      -1.2        
5           4.78658     1.28        1.28        0.138       -2.0        
6           3.50922     0.262       0.262       0.135       -3.1        
7           3.24707     0.0123      0.0123      0.0492      -4.3        
8           3.23473     1.44e-05    1.44e-05    0.00197     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.234713    

                     final grad:   3.344002e-06

                     final lambda: 0.0000000e+00

                     time / iter:  805   ms

                     total time:   7.25  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.2%

                     fwd pass:   2.2 %

                     other:      5.9 % (graphics etc.)
 =========== end iLQG ===========
 15.464167 seconds (14.46 M allocations: 927.122 MB, 4.03% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
