>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69182.058   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.87331e-12  final value -29.3968      factorizations 16
  4.931595 seconds (3.07 M allocations: 214.212 MB, 1.48% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.744      12.1        12.1        0.069       0.0         
2           37.6482     7.52        7.52        0.0649      -0.2        
3           30.1287     5.11        5.11        0.0803      -0.6        
4           25.0154     4.25        4.25        0.146       -1.2        
5           20.7699     5.27        5.27        0.442       -2.0        
6           15.5024     3.14        3.14        0.784       -3.1        
7           12.3627     0.202       0.202       0.156       -4.3        
8           12.161      0.000156    0.000156    0.00429     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   12.16086    

                     final grad:   5.891881e-06

                     final lambda: 0.0000000e+00

                     time / iter:  912   ms

                     total time:   8.21  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.8%

                     fwd pass:   1.9 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 22.852588 seconds (14.44 M allocations: 876.384 MB, 2.90% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
