>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60956.649   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.29364e-12  final value -45.6869      factorizations 14
  4.037183 seconds (3.06 M allocations: 199.516 MB, 1.51% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1132     23.3        23.3        0.109       0.0         
2           26.7767     8.99        8.99        0.0817      -0.2        
3           17.7819     4           4           0.0804      -0.6        
4           13.7863     3.37        3.37        0.13        -1.2        
5           10.417      3.34        3.34        0.273       -2.0        
6           7.07937     1.05        1.05        0.294       -3.1        
7           6.02449     0.0434      0.0434      0.0688      -4.3        
8           5.98111     3.97e-05    3.97e-05    0.00232     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.981075    

                     final grad:   3.702401e-06

                     final lambda: 0.0000000e+00

                     time / iter:  675   ms

                     total time:   6.07  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.6%

                     fwd pass:   2.3 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 17.101573 seconds (14.44 M allocations: 876.385 MB, 2.84% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
