>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64123.822   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.95714e-12  final value -27.6367      factorizations 18
  4.328104 seconds (3.11 M allocations: 250.789 MB, 2.47% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.8748     18.4        18.4        0.0914      0.0         
2           30.4488     10.6        10.6        0.0788      -0.2        
3           19.8349     6.27        6.27        0.0872      -0.6        
4           13.5621     2.98        2.98        0.124       -1.2        
5           10.583      1.83        1.83        0.185       -2.0        
6           8.75382     1.11        1.11        0.281       -3.1        
7           7.64666     0.0721      0.0721      0.096       -4.3        
8           7.57461     5.74e-05    5.74e-05    0.00316     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.574552    

                     final grad:   4.651886e-06

                     final lambda: 0.0000000e+00

                     time / iter:  726   ms

                     total time:   6.53  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.4%

                     fwd pass:   2.2 %

                     other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 18.972572 seconds (14.45 M allocations: 927.081 MB, 2.84% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
