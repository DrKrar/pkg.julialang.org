>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (907.94140625 MB free)
Uptime: 16869.0 sec
Load Avg:  0.98046875  0.9853515625  0.9853515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     693402 s       3206 s      85050 s     706658 s         34 s
#2  3499 MHz     517484 s       3612 s      77074 s     996953 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60400.935   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.03652e-12  final value -32.1633      factorizations 13
  3.300901 seconds (3.10 M allocations: 223.558 MB, 3.24% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.8584     27.4        27.4        0.117       0.0         
2           23.43       10.3        10.3        0.0819      -0.2        
3           13.1766     3.94        3.94        0.0703      -0.6        
4           9.23565     1.84        1.84        0.0789      -1.2        
5           7.39762     0.89        0.89        0.126       -2.0        
6           6.50717     0.25        0.25        0.138       -3.1        
7           6.25703     0.0156      0.0156      0.0509      -4.3        
8           6.24145     1.76e-05    1.76e-05    0.00198     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.241431    

                     final grad:   3.275624e-06

                     final lambda: 0.0000000e+00

                     time / iter:  892   ms

                     total time:   8.03  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.1%

                     fwd pass:   1.8 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 22.237492 seconds (14.46 M allocations: 927.237 MB, 2.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
