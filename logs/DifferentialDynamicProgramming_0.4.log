>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (840.0390625 MB free)
Uptime: 16952.0 sec
Load Avg:  1.1318359375  1.05615234375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     700308 s       1834 s      84974 s     699216 s         41 s
#2  3500 MHz     459819 s       5641 s      75834 s    1057683 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 56382.461   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.08399e-12  final value -43.0947      factorizations 13
  4.703137 seconds (3.10 M allocations: 219.691 MB, 2.68% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           52.0804     29.4        29.4        0.12        0.0         
2           22.6774     10.5        10.5        0.0801      -0.2        
3           12.1566     4.46        4.46        0.0736      -0.6        
4           7.69688     2.19        2.19        0.0856      -1.2        
5           5.50386     1.16        1.16        0.14        -2.0        
6           4.34721     0.334       0.334       0.167       -3.1        
7           4.01358     0.0192      0.0192      0.0534      -4.3        
8           3.99441     2.09e-05    2.09e-05    0.00209     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.994388    

                     final grad:   3.381826e-06

                     final lambda: 0.0000000e+00

                     time / iter:  738   ms

                     total time:   6.64  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.8%

                     fwd pass:   1.9 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 16.831489 seconds (14.45 M allocations: 927.080 MB, 2.98% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
