>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (884.3203125 MB free)
Uptime: 17087.0 sec
Load Avg:  1.09912109375  1.05615234375  1.001953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     683740 s       5686 s      98104 s     721840 s         57 s
#2  3500 MHz     529797 s        722 s      82028 s     991739 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63598.551   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.11785e-12  final value -30.6094      factorizations 14
  4.449291 seconds (3.10 M allocations: 227.564 MB, 2.51% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.1094     22.7        22.7        0.107       0.0         
2           25.3843     10.4        10.4        0.0865      -0.2        
3           14.9707     4.52        4.52        0.0818      -0.6        
4           10.4549     1.95        1.95        0.0886      -1.2        
5           8.50302     0.887       0.887       0.133       -2.0        
6           7.61584     0.257       0.257       0.126       -3.1        
7           7.3591      0.0195      0.0195      0.0484      -4.3        
8           7.33963     2.43e-05    2.43e-05    0.00201     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.33961     

                     final grad:   3.29559e-06

                     final lambda: 0.0000000e+00

                     time / iter:  780   ms

                     total time:   7.02  seconds, of which

                     derivs:     0.4 %

                     back pass:  92.6%

                     fwd pass:   1.2 %

                     other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 19.351513 seconds (14.46 M allocations: 927.237 MB, 3.42% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
