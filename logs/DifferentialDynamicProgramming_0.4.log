>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1041.14453125 MB free)
Uptime: 21857.0 sec
Load Avg:  1.0234375  1.04345703125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1017021 s       5598 s      93183 s     839990 s         54 s
#2  3500 MHz     645802 s         85 s      83613 s    1368835 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.21.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64910.532   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.02629e-12  final value -28.2911      factorizations 17
  5.459107 seconds (3.11 M allocations: 244.605 MB, 2.43% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0207     22.1        22.1        0.108       0.0         
2           27.9699     10.7        10.7        0.0861      -0.2        
3           17.2822     5.66        5.66        0.094       -0.6        
4           11.6247     2.35        2.35        0.102       -1.2        
5           9.26991     0.966       0.966       0.138       -2.0        
6           8.30361     0.192       0.192       0.163       -3.1        
7           8.11179     0.00795     0.00795     0.0515      -4.3        
8           8.10384     8.77e-06    8.77e-06    0.00193     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   8.103836    

            final grad:   3.189561e-06

            final lambda: 4.4841551e-08

            time / iter:  876   ms

            total time:   7.89  seconds, of which

            derivs:     0.6 %

            back pass:  92.3%

            fwd pass:   1.5 %

            other:      5.7 % (graphics etc.)
 =========== end iLQG ===========
 19.348532 seconds (14.73 M allocations: 920.861 MB, 3.13% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
