>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1055.75390625 MB free)
Uptime: 18322.0 sec
Load Avg:  1.0302734375  1.046875  1.09619140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     859660 s       7262 s      80041 s     687925 s         76 s
#2  3500 MHz     524253 s        103 s      71856 s    1170357 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.4
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 74214.369   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 2.82722e-12  final value -29.7712      factorizations 16
  5.347705 seconds (3.10 M allocations: 213.588 MB, 1.22% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.1511     10.3        10.3        0.0654      0.0         
2           38.8896     8.24        8.24        0.0725      -0.2        
3           30.6501     8.84        8.84        0.117       -0.6        
4           21.8066     7.74        7.74        0.206       -1.2        
5           14.0709     4.3         4.3         0.316       -2.0        
6           9.76625     1.43        1.43        0.304       -3.1        
7           8.33839     0.0917      0.0917      0.0922      -4.3        
8           8.24666     0.000104    0.000104    0.00304     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   8.246557    

                     final grad:   4.570023e-06

                     final lambda: 0.0000000e+00

                     time / iter:  929   ms

                     total time:   8.36  seconds, of which

                     derivs:     0.5 %

                     back pass:  92.3%

                     fwd pass:   1.6 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 22.799226 seconds (14.46 M allocations: 876.712 MB, 2.50% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
