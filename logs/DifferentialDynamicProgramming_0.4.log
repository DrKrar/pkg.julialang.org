>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (878.7734375 MB free)
Uptime: 16484.0 sec
Load Avg:  1.04541015625  1.06201171875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     691366 s         57 s      85269 s     665446 s         45 s
#2  3499 MHz     466423 s         92 s      73726 s    1007584 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64180.697   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.01987e-12  final value -42.8131      factorizations 14
  3.800685 seconds (3.10 M allocations: 226.889 MB, 2.91% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9333     26.5        26.5        0.115       0.0         
2           23.4058     10.4        10.4        0.0841      -0.2        
3           12.9921     4.67        4.67        0.077       -0.6        
4           8.32108     2.64        2.64        0.089       -1.2        
5           5.68234     1.2         1.2         0.149       -2.0        
6           4.487       0.247       0.247       0.142       -3.1        
7           4.23992     0.0142      0.0142      0.0507      -4.3        
8           4.22576     1.65e-05    1.65e-05    0.00203     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.225745    

                     final grad:   3.296212e-06

                     final lambda: 0.0000000e+00

                     time / iter:  793   ms

                     total time:   7.14  seconds, of which

                     derivs:     0.4 %

                     back pass:  93.6%

                     fwd pass:   1.4 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 17.888012 seconds (14.45 M allocations: 927.076 MB, 3.02% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
