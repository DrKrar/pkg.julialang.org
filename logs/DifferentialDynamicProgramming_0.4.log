>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1036.66796875 MB free)
Uptime: 16247.0 sec
Load Avg:  1.01171875  0.99951171875  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz     736948 s       3621 s      68514 s     643532 s         16 s
#2  3498 MHz     463038 s       1516 s      67808 s    1047354 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63160.691   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.2039e-12  final value -32.9699      factorizations 14
  3.437723 seconds (3.10 M allocations: 200.275 MB, 1.49% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4652     21.2        21.2        0.0988      0.0         
2           29.2727     12.5        12.5        0.0919      -0.2        
3           16.7408     7.08        7.08        0.101       -0.6        
4           9.66234     3.43        3.43        0.109       -1.2        
5           6.23637     1.53        1.53        0.167       -2.0        
6           4.70362     0.28        0.28        0.199       -3.1        
7           4.42341     0.0135      0.0135      0.0603      -4.3        
8           4.40986     1.64e-05    1.64e-05    0.00225     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.409844    

                     final grad:   3.781322e-06

                     final lambda: 0.0000000e+00

                     time / iter:  862   ms

                     total time:   7.76  seconds, of which

                     derivs:     0.7 %

                     back pass:  94.6%

                     fwd pass:   1.4 %

                     other:      3.3 % (graphics etc.)
 =========== end iLQG ===========
 21.310822 seconds (14.46 M allocations: 876.714 MB, 2.65% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
