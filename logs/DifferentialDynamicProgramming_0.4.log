>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (910.78515625 MB free)
Uptime: 16755.0 sec
Load Avg:  0.8828125  0.97607421875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     705268 s       6538 s      84802 s     679653 s         60 s
#2  3500 MHz     502397 s         48 s      77566 s    1006648 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.7.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 59314.548   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.19072e-12  final value -33.8144      factorizations 12
  4.926875 seconds (3.09 M allocations: 216.125 MB, 2.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1193     25.3        25.3        0.112       0.0         
2           25.8559     11.2        11.2        0.0887      -0.2        
3           14.6478     4.51        4.51        0.0803      -0.6        
4           10.1368     1.97        1.97        0.0829      -1.2        
5           8.16692     1.06        1.06        0.147       -2.0        
6           7.11136     0.243       0.243       0.173       -3.1        
7           6.86808     0.00997     0.00997     0.0543      -4.3        
8           6.85811     1.14e-05    1.14e-05    0.00198     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.858096    

                     final grad:   3.308565e-06

                     final lambda: 0.0000000e+00

                     time / iter:  906   ms

                     total time:   8.15  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.9%

                     fwd pass:   1.5 %

                     other:      5.0 % (graphics etc.)
 =========== end iLQG ===========
 20.829287 seconds (14.46 M allocations: 927.143 MB, 2.86% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
