>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60378.916   
RESULT: Gradient norm smaller than tolerance.
iterations 15  gradient 3.08011e-12  final value -22.9314      factorizations 14
  4.372798 seconds (3.10 M allocations: 225.895 MB, 2.85% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.1233     26.2        26.2        0.111       0.0         
2           23.9688     9.97        9.97        0.0779      -0.2        
3           14.0025     5.54        5.54        0.0807      -0.6        
4           8.458       3.61        3.61        0.12        -1.2        
5           4.84368     1.46        1.46        0.168       -2.0        
6           3.38776     0.289       0.289       0.167       -3.1        
7           3.09901     0.0198      0.0198      0.0645      -4.3        
8           3.07925     2.58e-05    2.58e-05    0.00247     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.07922     

                     final grad:   3.886477e-06

                     final lambda: 0.0000000e+00

                     time / iter:  702   ms

                     total time:   6.32  seconds, of which

                     derivs:     0.7 %

                     back pass:  93.1%

                     fwd pass:   1.9 %

                     other:      4.2 % (graphics etc.)
 =========== end iLQG ===========
 18.835875 seconds (14.46 M allocations: 927.106 MB, 2.97% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
