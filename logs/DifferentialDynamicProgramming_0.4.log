>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1052.3125 MB free)
Uptime: 17559.0 sec
Load Avg:  1.21484375  1.03515625  1.04736328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     832016 s       1086 s      76790 s     659066 s         46 s
#2  3499 MHz     535089 s       5046 s      66869 s    1078822 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 74386.186   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.85238e-12  final value -29.8494      factorizations 13
  3.951237 seconds (3.10 M allocations: 197.355 MB, 1.45% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.4671     26.8        26.8        0.117       0.0         
2           24.6866     10.5        10.5        0.0834      -0.2        
3           14.1541     4.76        4.76        0.0807      -0.6        
4           9.38943     2.29        2.29        0.0962      -1.2        
5           7.10307     0.994       0.994       0.139       -2.0        
6           6.10878     0.201       0.201       0.141       -3.1        
7           5.90805     0.0113      0.0113      0.0523      -4.3        
8           5.89677     1.38e-05    1.38e-05    0.002       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.896756    

                     final grad:   3.319723e-06

                     final lambda: 0.0000000e+00

                     time / iter:  785   ms

                     total time:   7.06  seconds, of which

                     derivs:     0.8 %

                     back pass:  93.8%

                     fwd pass:   1.6 %

                     other:      3.8 % (graphics etc.)
 =========== end iLQG ===========
 18.689156 seconds (14.46 M allocations: 876.683 MB, 2.57% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
