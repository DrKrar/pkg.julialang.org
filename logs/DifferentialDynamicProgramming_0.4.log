>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 58353.538   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.68281e-12  final value -23.2774      factorizations 17
  4.884946 seconds (3.07 M allocations: 219.053 MB, 1.39% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.3993     25.7        25.7        0.11        0.0         
2           24.6911     9.13        9.13        0.0765      -0.2        
3           15.5575     4.4         4.4         0.0779      -0.6        
4           11.1579     3.15        3.15        0.116       -1.2        
5           8.00889     2.14        2.14        0.178       -2.0        
6           5.86505     0.825       0.825       0.167       -3.1        
7           5.03958     0.0608      0.0608      0.0592      -4.3        
8           4.97877     7.24e-05    7.24e-05    0.00232     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.978697    

                     final grad:   3.716924e-06

                     final lambda: 0.0000000e+00

                     time / iter:  658   ms

                     total time:   5.93  seconds, of which

                     derivs:     0.9 %

                     back pass:  92.3%

                     fwd pass:   1.9 %

                     other:      4.9 % (graphics etc.)
 =========== end iLQG ===========
 18.001349 seconds (14.44 M allocations: 876.385 MB, 2.84% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
