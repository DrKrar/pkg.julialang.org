>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1062.03515625 MB free)
Uptime: 22278.0 sec
Load Avg:  1.28564453125  1.16796875  1.10498046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1000903 s       4467 s      93844 s     907676 s         90 s
#2  3500 MHz     664277 s       3069 s      85862 s    1391883 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.20.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67915.457   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.01036e-12  final value -25.8685      factorizations 18
  6.200540 seconds (3.11 M allocations: 251.681 MB, 2.30% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6404     29.1        29.1        0.123       0.0         
2           20.5799     9.63        9.63        0.082       -0.2        
3           10.9493     3.68        3.68        0.0658      -0.6        
4           7.2698      2.3         2.3         0.0935      -1.2        
5           4.96636     1.39        1.39        0.158       -2.0        
6           3.57539     0.418       0.418       0.158       -3.1        
7           3.15707     0.0277      0.0277      0.0559      -4.3        
8           3.12933     3.34e-05    3.34e-05    0.00218     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.129296    

            final grad:   3.61683e-06

            final lambda: 4.4841551e-08

            time / iter:  1001  ms

            total time:   9.01  seconds, of which

            derivs:     0.6 %

            back pass:  92.4%

            fwd pass:   1.6 %

            other:      5.4 % (graphics etc.)
 =========== end iLQG ===========
 23.941710 seconds (14.73 M allocations: 920.817 MB, 2.66% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
