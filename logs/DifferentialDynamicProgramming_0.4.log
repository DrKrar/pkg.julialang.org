>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1014.58203125 MB free)
Uptime: 17322.0 sec
Load Avg:  1.0029296875  1.10009765625  1.07666015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     829982 s       4474 s      83704 s     616038 s         86 s
#2  3500 MHz     489486 s       3182 s      75186 s    1092953 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 57771.521   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.30802e-12  final value -39.0945      factorizations 15
  5.573543 seconds (3.10 M allocations: 208.223 MB, 1.21% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.0372     20.5        20.5        0.101       0.0         
2           30.5576     9.47        9.47        0.0842      -0.2        
3           21.0919     4.53        4.53        0.0862      -0.6        
4           16.5667     2.2         2.2         0.0985      -1.2        
5           14.3711     1.77        1.77        0.155       -2.0        
6           12.6031     0.839       0.839       0.187       -3.1        
7           11.7642     0.0627      0.0627      0.0651      -4.3        
8           11.7015     7.66e-05    7.66e-05    0.00257     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   11.70146    

                     final grad:   4.053053e-06

                     final lambda: 0.0000000e+00

                     time / iter:  910   ms

                     total time:   8.19  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.2%

                     fwd pass:   1.9 %

                     other:      5.3 % (graphics etc.)
 =========== end iLQG ===========
 18.672540 seconds (14.46 M allocations: 876.718 MB, 2.68% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
