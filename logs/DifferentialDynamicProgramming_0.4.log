>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1026.54296875 MB free)
Uptime: 21728.0 sec
Load Avg:  1.037109375  1.0341796875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz     994780 s         85 s      94706 s     867293 s         57 s
#2  3502 MHz     694150 s       5696 s      87174 s    1300387 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
3 additional packages:
 - Compat                        0.21.0
 - MacroTools                    0.3.6
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 65160.173   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 2.88168e-12  final value -38.6564      factorizations 18
  4.117433 seconds (3.11 M allocations: 249.749 MB, 2.83% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.8892     22.1        22.1        0.104       0.0         
2           29.8345     11.2        11.2        0.0871      -0.2        
3           18.6087     6.77        6.77        0.0967      -0.6        
4           11.8341     4.06        4.06        0.131       -1.2        
5           7.77362     1.8         1.8         0.176       -2.0        
6           5.97422     0.446       0.446       0.173       -3.1        
7           5.52822     0.0289      0.0289      0.0578      -4.3        
8           5.49928     3.45e-05    3.45e-05    0.00233     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   5.499247    

            final grad:   3.813779e-06

            final lambda: 4.4841551e-08

            time / iter:  801   ms

            total time:   7.21  seconds, of which

            derivs:     0.5 %

            back pass:  94.2%

            fwd pass:   1.3 %

            other:      4.0 % (graphics etc.)
 =========== end iLQG ===========
 19.158927 seconds (14.73 M allocations: 920.887 MB, 3.14% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
