>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (589.2890625 MB free)
Uptime: 20982.0 sec
Load Avg:  0.30078125  0.26416015625  0.29833984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     817182 s       2654 s      75687 s    1027076 s         48 s
#2  3500 MHz     496766 s       3777 s      67531 s    1464175 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.5
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67884.011   
RESULT: Gradient norm smaller than tolerance.
iterations 20  gradient 3.15667e-12  final value -34.4755      factorizations 19
  4.885212 seconds (3.11 M allocations: 227.878 MB, 1.28% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.7652     26.9        26.9        0.11        0.0         
2           24.8766     10.4        10.4        0.0798      -0.2        
3           14.4914     4.4         4.4         0.0762      -0.6        
4           10.096      2.33        2.33        0.0917      -1.2        
5           7.76251     1.35        1.35        0.167       -2.0        
6           6.4082      0.336       0.336       0.187       -3.1        
7           6.07213     0.0141      0.0141      0.0593      -4.3        
8           6.05799     1.19e-05    1.19e-05    0.0022      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.057975    

                     final grad:   3.462662e-06

                     final lambda: 0.0000000e+00

                     time / iter:  777   ms

                     total time:   6.99  seconds, of which

                     derivs:     0.8 %

                     back pass:  94.0%

                     fwd pass:   1.6 %

                     other:      3.7 % (graphics etc.)
 =========== end iLQG ===========
 21.746811 seconds (14.46 M allocations: 876.739 MB, 2.86% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
