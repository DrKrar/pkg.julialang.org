>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 60165.430   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 2.74675e-12  final value -34.424       factorizations 12
  4.184490 seconds (3.09 M allocations: 216.862 MB, 2.95% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.881      17.6        17.6        0.0908      0.0         
2           31.2575     7.95        7.95        0.0702      -0.2        
3           23.3095     5.79        5.79        0.0914      -0.6        
4           17.5222     4.77        4.77        0.165       -1.2        
5           12.749      2.22        2.22        0.236       -2.0        
6           10.529      0.719       0.719       0.181       -3.1        
7           9.81041     0.0535      0.0535      0.0603      -4.3        
8           9.75695     6.53e-05    6.53e-05    0.0023      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   9.756888    

                     final grad:   3.644944e-06

                     final lambda: 0.0000000e+00

                     time / iter:  767   ms

                     total time:   6.90  seconds, of which

                     derivs:     0.6 %

                     back pass:  93.8%

                     fwd pass:   1.9 %

                     other:      3.7 % (graphics etc.)
 =========== end iLQG ===========
 16.722534 seconds (14.46 M allocations: 927.101 MB, 3.15% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
