>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61651.815   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.12319e-12  final value -23.2243      factorizations 18
  4.686871 seconds (3.07 M allocations: 224.446 MB, 1.42% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.144      23.3        23.3        0.106       0.0         
2           25.7954     11.3        11.3        0.0878      -0.2        
3           14.5039     5.48        5.48        0.0868      -0.6        
4           9.01987     2.94        2.94        0.107       -1.2        
5           6.08344     1.57        1.57        0.184       -2.0        
6           4.51799     0.391       0.391       0.187       -3.1        
7           4.12724     0.0207      0.0207      0.0573      -4.3        
8           4.1065      2.3e-05    2.3e-05    0.00214     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.106475    

                     final grad:   3.538138e-06

                     final lambda: 0.0000000e+00

                     time / iter:  729   ms

                     total time:   6.56  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.1%

                     fwd pass:   2.2 %

                     other:      6.1 % (graphics etc.)
 =========== end iLQG ===========
 19.025507 seconds (14.44 M allocations: 876.398 MB, 2.99% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
