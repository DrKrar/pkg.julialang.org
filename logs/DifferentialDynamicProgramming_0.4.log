>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1015.875 MB free)
Uptime: 18328.0 sec
Load Avg:  1.275390625  1.1396484375  1.099609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     852109 s       6078 s      84489 s     694054 s         91 s
#2  3499 MHz     546523 s         57 s      74440 s    1126053 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.4
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62049.363   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.97131e-12  final value -36.1302      factorizations 13
  5.150424 seconds (3.10 M allocations: 196.784 MB, 1.33% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.0819     21.8        21.8        0.106       0.0         
2           28.3005     10.9        10.9        0.0864      -0.2        
3           17.4343     6.42        6.42        0.0929      -0.6        
4           11.0125     3.8         3.8         0.126       -1.2        
5           7.21538     2.24        2.24        0.186       -2.0        
6           4.97173     0.92        0.92        0.228       -3.1        
7           4.05165     0.0722      0.0722      0.0787      -4.3        
8           3.97945     9.38e-05    9.38e-05    0.00305     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   3.979359    

                     final grad:   4.772145e-06

                     final lambda: 0.0000000e+00

                     time / iter:  970   ms

                     total time:   8.73  seconds, of which

                     derivs:     0.8 %

                     back pass:  91.5%

                     fwd pass:   1.8 %

                     other:      6.0 % (graphics etc.)
 =========== end iLQG ===========
 22.206906 seconds (14.46 M allocations: 876.713 MB, 2.57% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
