>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1065.96875 MB free)
Uptime: 17703.0 sec
Load Avg:  1.11083984375  1.06005859375  1.05078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     817236 s       1362 s      80356 s     684071 s         89 s
#2  3500 MHz     541448 s       7534 s      69088 s    1082019 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.3
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 67776.941   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.61841e-12  final value -36.5254      factorizations 13
  4.604335 seconds (3.10 M allocations: 196.676 MB, 1.26% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4875     14          14          0.0837      0.0         
2           36.5005     9.72        9.72        0.0843      -0.2        
3           26.7777     8.56        8.56        0.117       -0.6        
4           18.2147     7.06        7.06        0.19        -1.2        
5           11.1596     3.47        3.47        0.282       -2.0        
6           7.69048     1.09        1.09        0.28        -3.1        
7           6.6013      0.06        0.06        0.0865      -4.3        
8           6.54131     5.16e-05    5.16e-05    0.003       -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.541263    

                     final grad:   4.492057e-06

                     final lambda: 0.0000000e+00

                     time / iter:  893   ms

                     total time:   8.03  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.9%

                     fwd pass:   1.7 %

                     other:      4.8 % (graphics etc.)
 =========== end iLQG ===========
 21.342997 seconds (14.46 M allocations: 876.684 MB, 2.60% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
