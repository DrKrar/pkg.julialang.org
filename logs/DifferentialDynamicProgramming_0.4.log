>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1045.03125 MB free)
Uptime: 18661.0 sec
Load Avg:  0.98779296875  1.0498046875  1.0458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     860907 s       5615 s      82169 s     723821 s         92 s
#2  3499 MHz     540059 s       2806 s      74838 s    1173178 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.2
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69417.524   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.31437e-12  final value -36.3381      factorizations 16
  4.295301 seconds (3.10 M allocations: 213.124 MB, 1.56% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.4022     20.3        20.3        0.0966      0.0         
2           30.0718     9.64        9.64        0.0784      -0.2        
3           20.4349     6.76        6.76        0.0981      -0.6        
4           13.6741     5           5           0.151       -1.2        
5           8.67605     2.01        2.01        0.226       -2.0        
6           6.66736     0.364       0.364       0.193       -3.1        
7           6.30335     0.0198      0.0198      0.0588      -4.3        
8           6.28356     2.52e-05    2.52e-05    0.00211     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.28354     

                     final grad:   3.589132e-06

                     final lambda: 0.0000000e+00

                     time / iter:  681   ms

                     total time:   6.13  seconds, of which

                     derivs:     0.8 %

                     back pass:  90.2%

                     fwd pass:   2.5 %

                     other:      6.5 % (graphics etc.)
 =========== end iLQG ===========
 16.245721 seconds (14.46 M allocations: 876.713 MB, 2.87% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
