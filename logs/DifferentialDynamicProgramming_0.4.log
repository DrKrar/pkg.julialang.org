>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: Nothing to be done

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (938.92578125 MB free)
Uptime: 16544.0 sec
Load Avg:  0.8935546875  0.96875  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     662890 s       3811 s      85869 s     727953 s         34 s
#2  3499 MHz     448339 s       3524 s      75384 s    1049081 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69332.833   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.37649e-12  final value -30.0469      factorizations 12
  4.306062 seconds (3.09 M allocations: 216.665 MB, 2.61% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5112     21.1        21.1        0.0998      0.0         
2           29.399      11.6        11.6        0.0888      -0.2        
3           17.8259     6.17        6.17        0.0949      -0.6        
4           11.6542     3.05        3.05        0.101       -1.2        
5           8.60881     1.54        1.54        0.146       -2.0        
6           7.06795     0.325       0.325       0.185       -3.1        
7           6.74326     0.0119      0.0119      0.0577      -4.3        
8           6.73135     1.12e-05    1.12e-05    0.00209     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.731342    

                     final grad:   3.437718e-06

                     final lambda: 0.0000000e+00

                     time / iter:  623   ms

                     total time:   5.61  seconds, of which

                     derivs:     0.5 %

                     back pass:  93.8%

                     fwd pass:   1.6 %

                     other:      4.1 % (graphics etc.)
 =========== end iLQG ===========
 16.997614 seconds (14.45 M allocations: 927.075 MB, 3.37% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
