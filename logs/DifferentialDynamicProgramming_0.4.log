>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 68141.836   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.73392e-12  final value -23.1688      factorizations 13
  3.188874 seconds (3.06 M allocations: 195.184 MB, 1.52% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6081     18          18          0.0922      0.0         
2           31.5658     10.8        10.8        0.0851      -0.2        
3           20.7204     7.25        7.25        0.103       -0.6        
4           13.4678     4.29        4.29        0.144       -1.2        
5           9.17366     2.45        2.45        0.227       -2.0        
6           6.71871     0.752       0.752       0.24        -3.1        
7           5.96629     0.0346      0.0346      0.0702      -4.3        
8           5.93164     3.15e-05    3.15e-05    0.00253     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.931612    

                     final grad:   3.99634e-06

                     final lambda: 0.0000000e+00

                     time / iter:  463   ms

                     total time:   4.16  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.6%

                     fwd pass:   2.2 %

                     other:      5.5 % (graphics etc.)
 =========== end iLQG ===========
 12.321354 seconds (14.44 M allocations: 876.385 MB, 3.63% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
