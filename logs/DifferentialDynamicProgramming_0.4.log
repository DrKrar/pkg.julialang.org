>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1052.11328125 MB free)
Uptime: 18291.0 sec
Load Avg:  0.9921875  1.0234375  1.04248046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     831829 s       4264 s      76177 s     727216 s         44 s
#2  3499 MHz     567536 s       2276 s      69280 s    1122836 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66698.948   
RESULT: Gradient norm smaller than tolerance.
iterations 17  gradient 3.21308e-12  final value -33.7793      factorizations 16
  4.807731 seconds (3.10 M allocations: 212.393 MB, 1.25% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2638     19.9        19.9        0.0949      0.0         
2           30.3271     10.4        10.4        0.0789      -0.2        
3           19.8883     6.62        6.62        0.0936      -0.6        
4           13.2714     4.17        4.17        0.142       -1.2        
5           9.09758     1.84        1.84        0.216       -2.0        
6           7.25549     0.337       0.337       0.209       -3.1        
7           6.91862     0.0126      0.0126      0.0591      -4.3        
8           6.90603     1.21e-05    1.21e-05    0.00199     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.906016    

                     final grad:   3.186764e-06

                     final lambda: 0.0000000e+00

                     time / iter:  939   ms

                     total time:   8.45  seconds, of which

                     derivs:     0.7 %

                     back pass:  91.7%

                     fwd pass:   2.0 %

                     other:      5.6 % (graphics etc.)
 =========== end iLQG ===========
 21.374250 seconds (14.46 M allocations: 876.687 MB, 2.79% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
