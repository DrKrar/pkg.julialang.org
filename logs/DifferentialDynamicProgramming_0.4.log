>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (846.78515625 MB free)
Uptime: 17080.0 sec
Load Avg:  1.033203125  1.09765625  1.06640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     726029 s       2694 s      84732 s     690083 s         38 s
#2  3500 MHz     484963 s       3328 s      77229 s    1068013 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.6.0
3 additional packages:
 - Compat                        0.8.6
 - MacroTools                    0.3.0
 - Requires                      0.2.2
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 61753.008   
RESULT: Gradient norm smaller than tolerance.
iterations 13  gradient 3.03504e-12  final value -37.7801      factorizations 12
  4.505658 seconds (3.09 M allocations: 216.454 MB, 2.76% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.1686     22.6        22.6        0.102       0.0         
2           28.5979     11.9        11.9        0.0869      -0.2        
3           16.7278     6.21        6.21        0.0914      -0.6        
4           10.5179     3.16        3.16        0.109       -1.2        
5           7.36231     1.72        1.72        0.176       -2.0        
6           5.63867     0.493       0.493       0.215       -3.1        
7           5.14586     0.0299      0.0299      0.0688      -4.3        
8           5.11599     3.5e-05    3.5e-05    0.00253     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.11595     

                     final grad:   4.207019e-06

                     final lambda: 0.0000000e+00

                     time / iter:  683   ms

                     total time:   6.15  seconds, of which

                     derivs:     1.1 %

                     back pass:  90.7%

                     fwd pass:   2.3 %

                     other:      5.9 % (graphics etc.)
 =========== end iLQG ===========
 18.631876 seconds (14.45 M allocations: 927.044 MB, 3.24% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
