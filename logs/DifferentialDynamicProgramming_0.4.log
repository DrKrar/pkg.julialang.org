>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 55832.500   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.02682e-12  final value -27.316       factorizations 18
  3.509946 seconds (3.11 M allocations: 250.867 MB, 3.05% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           52.7554     22.5        22.5        0.104       0.0         
2           30.2771     9.39        9.39        0.0792      -0.2        
3           20.8867     5.33        5.33        0.0892      -0.6        
4           15.5555     4.04        4.04        0.146       -1.2        
5           11.5125     3.1         3.1         0.28        -2.0        
6           8.40906     0.998       0.998       0.291       -3.1        
7           7.41134     0.0442      0.0442      0.0751      -4.3        
8           7.36719     3.72e-05    3.72e-05    0.00258     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   7.36715     

                     final grad:   3.852335e-06

                     final lambda: 0.0000000e+00

                     time / iter:  622   ms

                     total time:   5.60  seconds, of which

                     derivs:     0.6 %

                     back pass:  92.8%

                     fwd pass:   1.9 %

                     other:      4.7 % (graphics etc.)
 =========== end iLQG ===========
 14.925717 seconds (14.45 M allocations: 927.076 MB, 4.07% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
