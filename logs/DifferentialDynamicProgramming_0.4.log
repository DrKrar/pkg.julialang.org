>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1036.3203125 MB free)
Uptime: 19055.0 sec
Load Avg:  0.900390625  0.986328125  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     837938 s       7179 s      77542 s     797626 s         33 s
#2  3501 MHz     544128 s         48 s      70079 s    1228444 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.10.0
 - MacroTools                    0.3.4
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 62359.481   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.01945e-12  final value -29.8969      factorizations 15
  5.119526 seconds (3.10 M allocations: 208.144 MB, 1.36% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.379      19.2        19.2        0.0975      0.0         
2           31.1756     10.9        10.9        0.0857      -0.2        
3           20.3011     7.52        7.52        0.102       -0.6        
4           12.7825     4.56        4.56        0.145       -1.2        
5           8.22167     1.94        1.94        0.21        -2.0        
6           6.27684     0.435       0.435       0.24        -3.1        
7           5.84157     0.0194      0.0194      0.068       -4.3        
8           5.82216     1.86e-05    1.86e-05    0.00227     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.82214     

                     final grad:   3.579242e-06

                     final lambda: 0.0000000e+00

                     time / iter:  652   ms

                     total time:   5.87  seconds, of which

                     derivs:     0.8 %

                     back pass:  90.7%

                     fwd pass:   2.1 %

                     other:      6.3 % (graphics etc.)
 =========== end iLQG ===========
 17.411363 seconds (14.46 M allocations: 876.688 MB, 2.87% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
