>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 66029.853   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 3.26291e-12  final value -33.9708      factorizations 17
  4.686364 seconds (3.10 M allocations: 245.118 MB, 2.69% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.9289     19.1        19.1        0.0982      0.0         
2           30.8484     11.8        11.8        0.0937      -0.2        
3           19.0499     7.18        7.18        0.106       -0.6        
4           11.8714     3.37        3.37        0.116       -1.2        
5           8.50191     1.6         1.6         0.15        -2.0        
6           6.9051      0.587       0.587       0.185       -3.1        
7           6.31834     0.0423      0.0423      0.0633      -4.3        
8           6.27603     5.08e-05    5.08e-05    0.00246     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   6.275979    

                     final grad:   3.887593e-06

                     final lambda: 0.0000000e+00

                     time / iter:  768   ms

                     total time:   6.92  seconds, of which

                     derivs:     0.7 %

                     back pass:  92.9%

                     fwd pass:   1.8 %

                     other:      4.6 % (graphics etc.)
 =========== end iLQG ===========
 17.346691 seconds (14.45 M allocations: 927.034 MB, 3.11% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
