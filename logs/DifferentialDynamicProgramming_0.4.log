>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from git://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.2
INFO: Installing Requires v0.2.3
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1056.21875 MB free)
Uptime: 18291.0 sec
Load Avg:  0.96533203125  1.07958984375  1.1025390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     832322 s       5825 s      83070 s     702707 s        126 s
#2  3499 MHz     544620 s        392 s      76100 s    1113125 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
3 additional packages:
 - Compat                        0.9.4
 - MacroTools                    0.3.2
 - Requires                      0.2.3
INFO: Testing DifferentialDynamicProgramming
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69132.448   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.19256e-12  final value -23.6205      factorizations 18
  4.878324 seconds (3.11 M allocations: 225.290 MB, 1.30% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           48.4483     25.6        25.6        0.113       0.0         
2           22.897      9.8         9.8         0.0797      -0.2        
3           13.0983     4.06        4.06        0.0686      -0.6        
4           9.04309     1.99        1.99        0.0925      -1.2        
5           7.05649     1.25        1.25        0.181       -2.0        
6           5.80211     0.945       0.945       0.251       -3.1        
7           4.85686     0.0904      0.0904      0.0817      -4.3        
8           4.76645     9.61e-05    9.61e-05    0.00323     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   4.766353    

                     final grad:   5.558005e-06

                     final lambda: 0.0000000e+00

                     time / iter:  965   ms

                     total time:   8.68  seconds, of which

                     derivs:     0.6 %

                     back pass:  91.8%

                     fwd pass:   1.8 %

                     other:      5.8 % (graphics etc.)
 =========== end iLQG ===========
 23.189021 seconds (14.46 M allocations: 876.714 MB, 2.30% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
