>>> 'Pkg.add("ReusableFunctions")' log
INFO: Installing BinDeps v0.3.21
INFO: Installing Blosc v0.1.4
INFO: Installing Docile v0.5.23
INFO: Installing FileIO v0.0.4
INFO: Installing HDF5 v0.5.8
INFO: Installing JLD v0.5.9
INFO: Installing ReusableFunctions v0.1.3
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building Blosc
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ReusableFunctions
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ReusableFunctions")' log
Julia Version 0.4.3
Commit a2f713d (2016-01-12 21:37 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ReusableFunctions
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/HDF5.ji for module HDF5.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/JLD.ji for module JLD.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/ReusableFunctions.ji for module ReusableFunctions.
Testing with integers:
Should be about 1 second:  0.921811 seconds (3.44 k allocations: 187.156 KB)
Should be less than .1 seconds:  0.003967 seconds (1.93 k allocations: 101.094 KB)
Testing with dictionaries:
Should be about 1 second:  0.936966 seconds (6.28 k allocations: 321.922 KB)
Should be less than .1 seconds:  0.023193 seconds (2.88 k allocations: 147.656 KB)
Testing with Float64 arrays:
Should be about 1 second:  1.027840 seconds (3.63 k allocations: 199.844 KB)
Should be less than .1 seconds:  0.004445 seconds (1.94 k allocations: 102.813 KB)
Testing with integers:
Should be about 1 second:  0.911884 seconds (81 allocations: 4.078 KB)
Should be less than .1 seconds:  0.000007 seconds
Testing with dictionaries:
Should be about 1 second:  0.912068 seconds (181 allocations: 11.891 KB)
Should be less than .1 seconds:  0.000056 seconds (100 allocations: 7.813 KB)
Testing with Float64 arrays:
Should be about 1 second:  1.013139 seconds (110 allocations: 7.344 KB)
Should be less than .1 seconds:  0.000072 seconds (20 allocations: 2.813 KB)
testing with Dict->Dict efficient storage
Should be about 1 second:  0.930994 seconds (3.86 k allocations: 212.984 KB)
Should be less than .1 seconds:  0.004338 seconds (2.31 k allocations: 123.125 KB)
INFO: ReusableFunctions tests passed

>>> End of log
