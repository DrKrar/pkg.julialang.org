>>> 'Pkg.add("EmpiricalRisks")' log
INFO: Cloning cache of EmpiricalRisks from https://github.com/lindahua/EmpiricalRisks.jl.git
INFO: Installing ArrayViews v0.6.4
INFO: Installing EmpiricalRisks v0.2.4
INFO: Package database updated

>>> 'Pkg.test("EmpiricalRisks")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1817.58984375 MB free)
Uptime: 17546.0 sec
Load Avg:  1.0498046875  1.03857421875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     894240 s       3797 s     120588 s     491528 s         30 s
#2  3499 MHz     311622 s       2436 s      54252 s    1303035 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - EmpiricalRisks                0.2.4
 - JSON                          0.6.0
2 additional packages:
 - ArrayViews                    0.6.4
 - Compat                        0.8.6
INFO: Computing test dependencies for EmpiricalRisks...
INFO: Installing Calculus v0.1.15
INFO: Installing DualNumbers v0.2.2
INFO: Installing NaNMath v0.2.1
INFO: Testing EmpiricalRisks
  * uniloss.jl ...
WARNING: error while reinitializing value MethodTable(name=:restrict_crank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#M<:Any}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#N<:Any}}, Tuple{}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#restrict_crank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:minrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{1}}, Type{ArrayViews.ContRank{2}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{1}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#minrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
ERROR: LoadError: LoadError: LoadError: LoadError: UndefVarError: FloatingPoint not defined
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/EmpiricalRisks/test/runtests.jl:13 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/EmpiricalRisks/src/common.jl, in expression starting on line 35
while loading /home/vagrant/.julia/v0.5/EmpiricalRisks/src/EmpiricalRisks.jl, in expression starting on line 84
while loading /home/vagrant/.julia/v0.5/EmpiricalRisks/test/uniloss.jl, in expression starting on line 1
while loading /home/vagrant/.julia/v0.5/EmpiricalRisks/test/runtests.jl, in expression starting on line 10
===========================[ ERROR: EmpiricalRisks ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/EmpiricalRisks/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.1.15
INFO: Removing DualNumbers v0.2.2
INFO: Removing NaNMath v0.2.1
ERROR: EmpiricalRisks had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
