>>> 'Pkg.add("SingularIntegralEquations")' log
INFO: Cloning cache of ApproxFun from https://github.com/ApproxFun/ApproxFun.jl.git
INFO: Cloning cache of BandedMatrices from https://github.com/JuliaMatrices/BandedMatrices.jl.git
INFO: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
INFO: Cloning cache of FastTransforms from https://github.com/MikaelSlevinsky/FastTransforms.jl.git
INFO: Cloning cache of SingularIntegralEquations from https://github.com/ApproxFun/SingularIntegralEquations.jl.git
INFO: Cloning cache of ToeplitzMatrices from https://github.com/JuliaMatrices/ToeplitzMatrices.jl.git
INFO: Installing ApproxFun v0.4.1
INFO: Installing BandedMatrices v0.1.2
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.12
INFO: Installing Colors v0.6.9
INFO: Installing DualNumbers v0.2.3
INFO: Installing FastGaussQuadrature v0.1.0
INFO: Installing FastTransforms v0.0.7
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing FixedSizeArrays v0.2.5
INFO: Installing Iterators v0.2.0
INFO: Installing Measures v0.0.3
INFO: Installing NaNMath v0.2.2
INFO: Installing PlotThemes v0.1.0
INFO: Installing PlotUtils v0.2.0
INFO: Installing Plots v0.10.2
INFO: Installing RecipesBase v0.1.0
INFO: Installing Reexport v0.0.3
INFO: Installing Showoff v0.0.7
INFO: Installing SingularIntegralEquations v0.2.1
INFO: Installing StatsBase v0.11.1
INFO: Installing ToeplitzMatrices v0.1.1
INFO: Building Plots
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of SingularIntegralEquations
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SingularIntegralEquations")' log
Julia Version 0.6.0-dev.1565
Commit 0408aa2 (2016-12-15 03:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1531.40234375 MB free)
Uptime: 21021.0 sec
Load Avg:  0.96435546875  0.943359375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1233424 s        303 s     159532 s     474139 s         40 s
#2  3499 MHz     373986 s       5766 s      68562 s    1592694 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - SingularIntegralEquations     0.2.1
22 additional packages:
 - ApproxFun                     0.4.1
 - BandedMatrices                0.1.2
 - Calculus                      0.1.15
 - ColorTypes                    0.2.12
 - Colors                        0.6.9
 - Compat                        0.9.5
 - DualNumbers                   0.2.3
 - FastGaussQuadrature           0.1.0
 - FastTransforms                0.0.7
 - FixedPointNumbers             0.2.1
 - FixedSizeArrays               0.2.5
 - Iterators                     0.2.0
 - Measures                      0.0.3
 - NaNMath                       0.2.2
 - PlotThemes                    0.1.0
 - PlotUtils                     0.2.0
 - Plots                         0.10.2
 - RecipesBase                   0.1.0
 - Reexport                      0.0.3
 - Showoff                       0.0.7
 - StatsBase                     0.11.1
 - ToeplitzMatrices              0.1.1
INFO: Testing SingularIntegralEquations
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 27
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 99
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 155
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 85
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 86
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 87
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 88
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 676
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 677
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 678
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/HypergeometricFunctions/specialfunctions.jl, in expression starting on line 71
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/HypergeometricFunctions/specialfunctions.jl, in expression starting on line 85
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/HypergeometricFunctions/specialfunctions.jl, in expression starting on line 200
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/HypergeometricFunctions/specialfunctions.jl, in expression starting on line 201
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/HypergeometricFunctions/specialfunctions.jl, in expression starting on line 202
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/stieltjesmoment.jl, in expression starting on line 48
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:989
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/src/singfuncauchy.jl, in expression starting on line 25
Special function tests
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:167
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in log(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:217
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl, in expression starting on line 36
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:169
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in log(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:217
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl, in expression starting on line 36
WARNING: max{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use max.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in max(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in log(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:217
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl, in expression starting on line 36
WARNING: min{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use min.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in min(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in log(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:217
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl, in expression starting on line 36
Hilbert test
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:167
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in .^(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:166
 in sqrt(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:198
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/HilbertTest.jl, in expression starting on line 51
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:169
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in .^(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:166
 in sqrt(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:198
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/HilbertTest.jl, in expression starting on line 51
WARNING: max{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use max.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in max(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in .^(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:166
 in sqrt(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:198
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/HilbertTest.jl, in expression starting on line 51
WARNING: min{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use min.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in min(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in .^(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:166
 in sqrt(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Segment{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:198
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/HilbertTest.jl, in expression starting on line 51
Stieltjes test
Stieltjes integral test
Cauchy test
ERROR: LoadError: LoadError: MethodError: Cannot `convert` an object of type Int64 to an object of type ApproxFun.Infinity{Bool}
This may have arisen from a call to the constructor ApproxFun.Infinity{Bool}(...),
since type constructors fall back to convert methods.
 in mapfoldl_impl(::ApproxFun.#dimension, ::Base.#+, ::ApproxFun.Infinity{Bool}, ::Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicLine{false,Float64}},ApproxFun.SinSpace{ApproxFun.PeriodicLine{false,Float64}}}, ::Int64) at ./reduce.jl:43
 in mapfoldl(::ApproxFun.#dimension, ::Function, ::Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicLine{false,Float64}},ApproxFun.SinSpace{ApproxFun.PeriodicLine{false,Float64}}}) at ./reduce.jl:73
 in #Fun#96(::String, ::Type{T}, ::Function, ::ApproxFun.SumSpace{Tuple{ApproxFun.CosSpace{ApproxFun.PeriodicLine{false,Float64}},ApproxFun.SinSpace{ApproxFun.PeriodicLine{false,Float64}}},ApproxFun.RealBasis,ApproxFun.PeriodicLine{false,Float64},1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Fun/constructors.jl:204
 in #Fun#100(::Array{Any,1}, ::Type{T}, ::Function, ::ApproxFun.PeriodicLine{false,Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Fun/constructors.jl:215
 in ApproxFun.Fun{S,T}(::Function, ::ApproxFun.PeriodicLine{false,Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Fun/constructors.jl:215
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/HilbertTest.jl, in expression starting on line 145
while loading /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl, in expression starting on line 47
======================[ ERROR: SingularIntegralEquations ]======================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/SingularIntegralEquations/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: SingularIntegralEquations had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
