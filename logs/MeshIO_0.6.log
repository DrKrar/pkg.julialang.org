>>> 'Pkg.add("MeshIO")' log
INFO: Installing ColorTypes v0.2.12
INFO: Installing FileIO v0.2.1
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing FixedSizeArrays v0.2.5
INFO: Installing GeometryTypes v0.2.1
INFO: Installing Iterators v0.2.0
INFO: Installing MeshIO v0.0.6
INFO: Package database updated

>>> 'Pkg.test("MeshIO")' log
Julia Version 0.6.0-dev.1918
Commit cfa2312 (2017-01-04 22:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (681.18359375 MB free)
Uptime: 2952.0 sec
Load Avg:  1.0595703125  1.01318359375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     146901 s        119 s      24010 s      95839 s          4 s
#2  3500 MHz      50418 s         58 s      11766 s     225154 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - MeshIO                        0.0.6
7 additional packages:
 - ColorTypes                    0.2.12
 - Compat                        0.10.0
 - FileIO                        0.2.1
 - FixedPointNumbers             0.2.1
 - FixedSizeArrays               0.2.5
 - GeometryTypes                 0.2.1
 - Iterators                     0.2.0
INFO: Computing test dependencies for MeshIO...
INFO: Installing FactCheck v0.4.3
INFO: Testing MeshIO
MeshIO
  > load save 2dm
Error encountered while saving "/tmp/tmpkXjVaB/test.2dm".
Fatal error:
ERROR: LoadError: MethodError: no method matching save(::FileIO.File{FileIO.DataFormat{Symbol("2DM")}}, ::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void})
The applicable method may be too new: running in world age 20687, while current world is 20688.
Closest candidates are:
  save{format}(::FileIO.File{format}, ::GeometryTypes.AbstractMesh{VertT,FaceT}) at /home/vagrant/.julia/v0.6/MeshIO/src/MeshIO.jl:24 (method too new to be called from this world context.)
  save(!Matched::FileIO.Stream{FileIO.DataFormat{:OFF},IOtype<:IO}, ::GeometryTypes.AbstractMesh{VertT,FaceT}) at /home/vagrant/.julia/v0.6/MeshIO/src/io/off.jl:5 (method too new to be called from this world context.)
  save(!Matched::FileIO.Stream{FileIO.DataFormat{:PLY_BINARY},IOtype<:IO}, ::GeometryTypes.AbstractMesh{VertT,FaceT}) at /home/vagrant/.julia/v0.6/MeshIO/src/io/ply.jl:2 (method too new to be called from this world context.)
  ...
Stacktrace:
 [1] #save#18(::Array{Any,1}, ::Function, ::FileIO.File{FileIO.DataFormat{Symbol("2DM")}}, ::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void}, ::Vararg{GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void},N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:102
 [2] save(::FileIO.File{FileIO.DataFormat{Symbol("2DM")}}, ::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:93
 [3] #save#14(::Array{Any,1}, ::Function, ::String, ::GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void}, ::Vararg{GeometryTypes.HomogenousMesh{FixedSizeArrays.Point{3,Float32},GeometryTypes.Face{3,UInt32,-1},Void,Void,Void,Void,Void},N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 [4] (::##3#109{String})() at /home/vagrant/.julia/v0.6/MeshIO/test/runtests.jl:17
 [5] context(::##3#109{String}, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:475
 [6] (::##2#108)(::String) at /home/vagrant/.julia/v0.6/MeshIO/test/runtests.jl:16
 [7] mktempdir(::##2#108, ::String) at ./file.jl:386
 [8] (::##1#107)() at /home/vagrant/.julia/v0.6/MeshIO/test/runtests.jl:14
 [9] facts(::##1#107, ::String) at /home/vagrant/.julia/v0.6/FactCheck/src/FactCheck.jl:449
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] process_options(::Base.JLOptions) at ./client.jl:298
 [13] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/MeshIO/test/runtests.jl, in expression starting on line 5
===============================[ ERROR: MeshIO ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MeshIO/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing FactCheck v0.4.3
ERROR: MeshIO had test errors
Stacktrace:
 [1] #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:754
 [2] (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 [3] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 [4] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 [5] #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 [6] (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 [7] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261
 [8] test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261
 [9] eval(::Module, ::Any) at ./boot.jl:236
 [10] process_options(::Base.JLOptions) at ./client.jl:275
 [11] _start() at ./client.jl:364

>>> End of log
