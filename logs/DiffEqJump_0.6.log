>>> 'Pkg.add("DiffEqJump")' log
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffEqBase v0.12.1
INFO: Installing DiffEqJump v0.2.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Parameters v0.7.2
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.2.0
INFO: Installing SimpleTraits v0.4.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DiffEqJump
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DiffEqJump")' log
Julia Version 0.6.0-pre.alpha.208
Commit 003a14f (2017-03-21 20:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1785.24609375 MB free)
Uptime: 23878.0 sec
Load Avg:  1.22998046875  1.07373046875  1.0625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1408715 s       4300 s     118935 s     601204 s         42 s
#2  3500 MHz     636250 s        281 s      73290 s    1602120 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqJump                    0.2.0
 - JSON                          0.8.3
9 additional packages:
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - DiffEqBase                    0.12.1
 - MacroTools                    0.3.6
 - Parameters                    0.7.2
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.2.0
 - SimpleTraits                  0.4.0
INFO: Computing test dependencies for DiffEqJump...
INFO: Installing BinDeps v0.4.7
INFO: Installing Blosc v0.2.0
INFO: Installing Calculus v0.2.2
INFO: Installing ChunkedArrays v0.1.1
INFO: Installing Combinatorics v0.4.0
INFO: Installing Conda v0.5.2
INFO: Installing DiffBase v0.1.0
INFO: Installing DiffEqPDEBase v0.0.3
INFO: Installing DiffEqProblemLibrary v0.4.0
INFO: Installing Distances v0.4.1
INFO: Installing Distributions v0.12.1
INFO: Installing EllipsisNotation v0.0.2
INFO: Installing FileIO v0.3.0
INFO: Installing FiniteElementDiffEq v0.2.1
INFO: Installing ForwardDiff v0.4.1
INFO: Installing GenericSVD v0.0.2
INFO: Installing HDF5 v0.7.3
INFO: Installing Hiccup v0.1.1
INFO: Installing InplaceOps v0.1.0
INFO: Installing IterativeSolvers v0.2.2
INFO: Installing Iterators v0.3.0
INFO: Installing JLD v0.6.9
INFO: Installing Juno v0.2.7
INFO: Installing LegacyStrings v0.2.1
INFO: Installing LineSearches v0.1.5
INFO: Installing Media v0.2.5
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.2
INFO: Installing Optim v0.7.8
INFO: Installing OrdinaryDiffEq v1.5.0
INFO: Installing PDMats v0.5.6
INFO: Installing ParameterizedFunctions v1.1.0
INFO: Installing PolynomialFactors v0.0.3
INFO: Installing Polynomials v0.1.3
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing Primes v0.1.3
INFO: Installing QuadGK v0.1.1
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Rmath v0.1.6
INFO: Installing Roots v0.3.0
INFO: Installing SHA v0.3.2
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.13.1
INFO: Installing StatsFuns v0.4.0
INFO: Installing StochasticDiffEq v1.2.1
INFO: Installing SymEngine v0.1.4
INFO: Installing URIParser v0.1.8
INFO: Installing VectorizedRoutines v0.0.2
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
INFO: Building SymEngine
INFO: Building HDF5
INFO: Testing DiffEqJump

WARNING: deprecated syntax "abstract AbstractJump" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:12.
Use "abstract type AbstractJump end" instead.

WARNING: deprecated syntax "abstract AbstractAggregatorAlgorithm" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:13.
Use "abstract type AbstractAggregatorAlgorithm end" instead.

WARNING: deprecated syntax "abstract AbstractJumpAggregator" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:14.
Use "abstract type AbstractJumpAggregator end" instead.

WARNING: deprecated syntax "abstract AbstractJumpProblem{P,J}<:DEProblem" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:15.
Use "abstract type AbstractJumpProblem{P,J}<:DEProblem end" instead.
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:23
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:23
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/coupled_array.jl:35
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/coupled_array.jl:35
  2.211729 seconds (6.05 M allocations: 375.252 MiB, 3.83% gc time)
  1.767434 seconds (3.11 M allocations: 181.996 MiB, 2.54% gc time)
Test Summary:       | Pass  Total
Constant Rate Tests |    2      2
 25.180652 seconds (50.11 M allocations: 2.417 GiB, 3.99% gc time)
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl:16
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl:16
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl:16
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:5 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl, in expression starting on line 28
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:5 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl, in expression starting on line 28
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##15#16,##21#22,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Tuple{}}},##21#22,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64},DiffEqJump.VariableRateJump{##11#12,##13#14,Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:5 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/variable_rate.jl, in expression starting on line 28
Test Summary:       | Pass  Total
Variable Rate Tests |    4      4
 26.440001 seconds (17.09 M allocations: 989.739 MiB, 2.22% gc time)
  3.686466 seconds (2.04 M allocations: 160.000 MiB, 1.78% gc time)
  3.548816 seconds (2.06 M allocations: 160.763 MiB, 1.54% gc time)
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl:56
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl:56
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl:56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##41#43{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},DiffEqJump.##42#44{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 66
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 66
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##45#47{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,##41#42},Int64},DiffEqJump.##46#48{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 66
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 79
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 79
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.CoupledArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##49#51{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},DiffEqBase.DiscreteProblem{Array{Float64,1},Float64,true,DiffEqBase.##144#145},Int64},DiffEqJump.##50#52{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##41#42,##43#44,Base.Random.#randn!},Int64},Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqJump.##58#67,DiffEqJump.##59#68,DiffEqJump.##61#70},Tuple{DiffEqJump.##57#66,##37#38,DiffEqJump.##60#69}},Tuple{}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqJump/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqJump/test/splitcoupled.jl, in expression starting on line 79
Test Summary:       | Pass  Total
Split Coupled Tests |    4      4
 41.957769 seconds (35.23 M allocations: 1.761 GiB, 1.81% gc time)
elapsed time: 95.335814737 seconds
INFO: DiffEqJump tests passed
INFO: Removing BinDeps v0.4.7
INFO: Removing Blosc v0.2.0
INFO: Removing Calculus v0.2.2
INFO: Removing ChunkedArrays v0.1.1
INFO: Removing Combinatorics v0.4.0
INFO: Removing Conda v0.5.2
INFO: Removing DiffBase v0.1.0
INFO: Removing DiffEqPDEBase v0.0.3
INFO: Removing DiffEqProblemLibrary v0.4.0
INFO: Removing Distances v0.4.1
INFO: Removing Distributions v0.12.1
INFO: Removing EllipsisNotation v0.0.2
INFO: Removing FileIO v0.3.0
INFO: Removing FiniteElementDiffEq v0.2.1
INFO: Removing ForwardDiff v0.4.1
INFO: Removing GenericSVD v0.0.2
INFO: Removing HDF5 v0.7.3
INFO: Removing Hiccup v0.1.1
INFO: Removing InplaceOps v0.1.0
INFO: Removing IterativeSolvers v0.2.2
INFO: Removing Iterators v0.3.0
INFO: Removing JLD v0.6.9
INFO: Removing Juno v0.2.7
INFO: Removing LegacyStrings v0.2.1
INFO: Removing LineSearches v0.1.5
INFO: Removing Media v0.2.5
INFO: Removing NLsolve v0.9.1
INFO: Removing NaNMath v0.2.2
INFO: Removing Optim v0.7.8
INFO: Removing OrdinaryDiffEq v1.5.0
INFO: Removing PDMats v0.5.6
INFO: Removing ParameterizedFunctions v1.1.0
INFO: Removing PolynomialFactors v0.0.3
INFO: Removing Polynomials v0.1.3
INFO: Removing PositiveFactorizations v0.0.4
INFO: Removing Primes v0.1.3
INFO: Removing QuadGK v0.1.1
INFO: Removing ResettableStacks v0.1.0
INFO: Removing Rmath v0.1.6
INFO: Removing Roots v0.3.0
INFO: Removing SHA v0.3.2
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StatsBase v0.13.1
INFO: Removing StatsFuns v0.4.0
INFO: Removing StochasticDiffEq v1.2.1
INFO: Removing SymEngine v0.1.4
INFO: Removing URIParser v0.1.8
INFO: Removing VectorizedRoutines v0.0.2

>>> End of log
