>>> 'Pkg.add("DiffEqParamEstim")' log
INFO: Cloning cache of DiffEqParamEstim from https://github.com/JuliaDiffEq/DiffEqParamEstim.jl.git
INFO: Cloning cache of LearnBase from https://github.com/JuliaML/LearnBase.jl.git
INFO: Cloning cache of LossFunctions from https://github.com/JuliaML/LossFunctions.jl.git
INFO: Cloning cache of LsqFit from https://github.com/JuliaOpt/LsqFit.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.1.15
INFO: Installing DataStructures v0.4.6
INFO: Installing DiffEqBase v0.1.3
INFO: Installing DiffEqParamEstim v0.0.2
INFO: Installing Distances v0.3.2
INFO: Installing Distributions v0.11.0
INFO: Installing ForwardDiff v0.2.5
INFO: Installing GenericSVD v0.0.2
INFO: Installing Hiccup v0.0.3
INFO: Installing InplaceOps v0.1.0
INFO: Installing Juno v0.2.5
INFO: Installing Lazy v0.11.4
INFO: Installing LearnBase v0.1.0
INFO: Installing LossFunctions v0.0.2
INFO: Installing LsqFit v0.0.2
INFO: Installing MacroTools v0.3.2
INFO: Installing Media v0.2.4
INFO: Installing NLsolve v0.7.3
INFO: Installing NaNMath v0.2.2
INFO: Installing Optim v0.6.1
INFO: Installing OrdinaryDiffEq v0.1.1
INFO: Installing PDMats v0.5.1
INFO: Installing Parameters v0.5.0
INFO: Installing PositiveFactorizations v0.0.2
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.0.2
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.4
INFO: Installing SHA v0.3.0
INFO: Installing StatsBase v0.11.1
INFO: Installing StatsFuns v0.3.1
INFO: Installing URIParser v0.1.6
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("DiffEqParamEstim")' log
Julia Version 0.6.0-dev.1241
Commit 80770e9 (2016-11-14 21:35 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1702.06640625 MB free)
Uptime: 20665.0 sec
Load Avg:  1.12744140625  1.0322265625  1.181640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1241274 s       8462 s     141418 s     452554 s         40 s
#2  3503 MHz     580212 s       2246 s      80937 s    1337907 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqParamEstim              0.0.2
 - JSON                          0.8.0
34 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.9.4
 - DataStructures                0.4.6
 - DiffEqBase                    0.1.3
 - Distances                     0.3.2
 - Distributions                 0.11.0
 - ForwardDiff                   0.2.5
 - GenericSVD                    0.0.2
 - Hiccup                        0.0.3
 - InplaceOps                    0.1.0
 - Juno                          0.2.5
 - Lazy                          0.11.4
 - LearnBase                     0.1.0
 - LossFunctions                 0.0.2
 - LsqFit                        0.0.2
 - MacroTools                    0.3.2
 - Media                         0.2.4
 - NLsolve                       0.7.3
 - NaNMath                       0.2.2
 - Optim                         0.6.1
 - OrdinaryDiffEq                0.1.1
 - PDMats                        0.5.1
 - Parameters                    0.5.0
 - PositiveFactorizations        0.0.2
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.0.2
 - Reexport                      0.0.3
 - Rmath                         0.1.4
 - SHA                           0.3.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - URIParser                     0.1.6
INFO: Computing test dependencies for DiffEqParamEstim...
INFO: Cloning cache of LeastSquaresOptim from https://github.com/matthieugomez/LeastSquaresOptim.jl.git
INFO: Installing Conda v0.4.0
INFO: Installing LeastSquaresOptim v0.2.0
INFO: Installing ParameterizedFunctions v0.3.2
INFO: Installing SymEngine v0.1.2
INFO: Building Conda
INFO: Building SymEngine
Warning: 'conda-forge' already in 'channels' list, moving to the top
Warning: 'symengine' already in 'channels' list, moving to the top
INFO: Testing DiffEqParamEstim
Use LM to fit the parameter
     0     4.515239e+00              NaN
 * lambda: 10000.0

     1     4.514347e+00     4.476356e+02
 * g(x): 447.635627626423
 * lambda: 1000.0
 * dx: [9.95988e-7]

     2     4.505444e+00     4.471889e+02
 * g(x): 447.1888814568565
 * lambda: 100.0
 * dx: [9.94993e-6]

     3     4.417765e+00     4.427655e+02
 * g(x): 442.7655141721576
 * lambda: 10.0
 * dx: [9.85147e-5]

     4     3.660307e+00     4.025495e+02
 * g(x): 402.54950224681374
 * lambda: 1.0
 * dx: [0.000895636]

     5     9.242457e-01     1.989286e+02
 * g(x): 198.92862442561272
 * lambda: 0.1
 * dx: [0.00448023]

     6     4.523723e-02     1.838246e+01
 * g(x): 18.38246240918147
 * lambda: 0.010000000000000002
 * dx: [0.00403313]

     7     3.768639e-02     1.837560e-01
 * g(x): 0.18375603667122078
 * lambda: 0.0010000000000000002
 * dx: [0.000406245]

     8     3.768561e-02     1.868902e-04
 * g(x): 0.00018689015973527567
 * lambda: 0.00010000000000000003
 * dx: [4.1663e-6]

     9     3.768561e-02     3.261062e-08
 * g(x): 3.261061884418659e-8
 * lambda: 1.0000000000000004e-5
 * dx: [4.9043e-9]

Use Optim Brent to fit the parameter
Use Optim BFGS to fit the parameter
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
WARNING: Interrupted. Larger maxiters is needed.
Use LeastSquaresOptim to fit the parameter
WARNING: isfinite{T <: Number}(x::AbstractArray{T}) is deprecated, use isfinite.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in isfinite(::Array{Float64,1}) at ./deprecated.jl:50
 in check_isfinite(::Array{Float64,1}) at /home/vagrant/.julia/v0.6/LeastSquaresOptim/src/utils/utils.jl:44
 in #optimize!#13(::Float64, ::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Bool, ::Int64, ::LeastSquaresOptim.#optimize!, ::LeastSquaresOptim.LeastSquaresProblemAllocated{Array{Float64,1},Array{Float64,1},DiffEqParamEstim.##8#11{Array{Any,1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,ParameterizedFunctions.LotkaVolterraTest},Array{Float64,1},Array{Float64,2},Void},Array{Float64,2},LeastSquaresOptim.##3#7{Array{Float64,1},Int64},NTuple{6,Array{Float64,1}},LeastSquaresOptim.LSMRAllocatedSolver{LeastSquaresOptim.##20#22,LeastSquaresOptim.InverseDiagonal{Array{Float64,1}},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1}}}) at /home/vagrant/.julia/v0.6/LeastSquaresOptim/src/optimizer/dogleg.jl:89
 in (::LeastSquaresOptim.#kw##optimize!)(::Array{Any,1}, ::LeastSquaresOptim.#optimize!, ::LeastSquaresOptim.LeastSquaresProblemAllocated{Array{Float64,1},Array{Float64,1},DiffEqParamEstim.##8#11{Array{Any,1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,ParameterizedFunctions.LotkaVolterraTest},Array{Float64,1},Array{Float64,2},Void},Array{Float64,2},LeastSquaresOptim.##3#7{Array{Float64,1},Int64},NTuple{6,Array{Float64,1}},LeastSquaresOptim.LSMRAllocatedSolver{LeastSquaresOptim.##20#22,LeastSquaresOptim.InverseDiagonal{Array{Float64,1}},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Float64,1}}}) at ./<missing>:0
 in #optimize!#11(::Array{Any,1}, ::Function, ::LeastSquaresOptim.LeastSquaresProblem{Array{Float64,1},Array{Float64,1},DiffEqParamEstim.##8#11{Array{Any,1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,ParameterizedFunctions.LotkaVolterraTest},Array{Float64,1},Array{Float64,2},Void},Array{Float64,2},LeastSquaresOptim.##3#7{Array{Float64,1},Int64}}, ::LeastSquaresOptim.Dogleg, ::LeastSquaresOptim.LSMR{Void,Void}) at /home/vagrant/.julia/v0.6/LeastSquaresOptim/src/types.jl:131
 in (::LeastSquaresOptim.#kw##optimize!)(::Array{Any,1}, ::LeastSquaresOptim.#optimize!, ::LeastSquaresOptim.LeastSquaresProblem{Array{Float64,1},Array{Float64,1},DiffEqParamEstim.##8#11{Array{Any,1},DiffEqBase.ODEProblem{Array{Float64,1},Float64,true,ParameterizedFunctions.LotkaVolterraTest},Array{Float64,1},Array{Float64,2},Void},Array{Float64,2},LeastSquaresOptim.##3#7{Array{Float64,1},Int64}}, ::LeastSquaresOptim.Dogleg, ::LeastSquaresOptim.LSMR{Void,Void}) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/DiffEqParamEstim/test/runtests.jl, in expression starting on line 71
INFO: DiffEqParamEstim tests passed
INFO: Removing Conda v0.4.0
INFO: Removing LeastSquaresOptim v0.2.0
INFO: Removing ParameterizedFunctions v0.3.2
INFO: Removing SymEngine v0.1.2

>>> End of log
