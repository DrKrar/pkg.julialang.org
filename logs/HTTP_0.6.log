>>> 'Pkg.add("HTTP")' log
INFO: Cloning cache of HTTP from https://github.com/JuliaWeb/HTTP.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing HTTP v0.4.0
INFO: Installing MbedTLS v0.4.3
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building MbedTLS
Using system libraries...
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of HTTP
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("HTTP")' log
Julia Version 0.6.0-dev.2896
Commit d168287 (2017-02-22 00:17 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (427.07421875 MB free)
Uptime: 42964.0 sec
Load Avg:  0.998046875  1.02734375  1.04296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz    1601586 s       4918 s     195885 s    2109326 s         86 s
#2  3492 MHz     569222 s       1704 s     116249 s    3488397 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - HTTP                          0.4.0
 - JSON                          0.8.3
9 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - CompilerTools                 0.2.1
 - DataStructures                0.5.2
 - DocOpt                        0.2.0
 - MbedTLS                       0.4.3
 - ParallelAccelerator           0.2.2              6da2e374 (dirty)
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing HTTP

WARNING: deprecated syntax "abstract Scheme" at /home/vagrant/.julia/v0.6/HTTP/src/types.jl:2.
Use "abstract type Scheme end" instead.

WARNING: deprecated syntax "typealias Headers Dict{String,String}" at /home/vagrant/.julia/v0.6/HTTP/src/types.jl:14.
Use "const Headers = Dict{String,String}" instead.

WARNING: deprecated syntax "inner constructor Server(...) around /home/vagrant/.julia/v0.6/HTTP/src/server.jl:74".
Use "Server{T,I}(...) where {T,I}" instead.
TEST - sniff.jl: Empty
TEST - sniff.jl: Binary
TEST - sniff.jl: HTML document #1
TEST - sniff.jl: HTML document #2
TEST - sniff.jl: HTML document #3 (leading whitespace)
TEST - sniff.jl: HTML document #4 (leading CRLF)
TEST - sniff.jl: Plain text
TEST - sniff.jl: XML
TEST - sniff.jl: GIF 87a
TEST - sniff.jl: GIF 89a
TEST - sniff.jl: MIDI audio
TEST - sniff.jl: MP3 audio/MPEG audio
TEST - sniff.jl: WAV audio #1
TEST - sniff.jl: WAV audio #2
TEST - sniff.jl: AIFF audio #1
TEST - sniff.jl: OGG audio
TEST - sniff.jl: MP4 video
TEST - sniff.jl: AVI video #1
TEST - sniff.jl: AVI video #2
TEST - uri.jl: proxy request
TEST - uri.jl: proxy request with port
TEST - uri.jl: CONNECT request
TEST - uri.jl: proxy ipv6 request
TEST - uri.jl: proxy ipv6 request with port
TEST - uri.jl: CONNECT ipv6 address
TEST - uri.jl: ipv4 in ipv6 address
TEST - uri.jl: extra ? in query string
TEST - uri.jl: space URL encoded
TEST - uri.jl: URL fragment
TEST - uri.jl: complex URL fragment
TEST - uri.jl: complex URL from node js url parser doc
TEST - uri.jl: complex URL with basic auth from node js url parser doc
TEST - uri.jl: double @
TEST - uri.jl: proxy empty host
TEST - uri.jl: proxy empty port
TEST - uri.jl: CONNECT with basic auth
TEST - uri.jl: CONNECT empty host
TEST - uri.jl: CONNECT empty port
TEST - uri.jl: CONNECT with extra bits
TEST - uri.jl: space in URL
TEST - uri.jl: proxy basic auth with space url encoded
TEST - uri.jl: carriage return in URL
TEST - uri.jl: proxy double : in URL
TEST - uri.jl: proxy basic auth with double :
TEST - uri.jl: line feed in URL
TEST - uri.jl: proxy empty basic auth
TEST - uri.jl: proxy line feed in hostname
TEST - uri.jl: proxy % in hostname
TEST - uri.jl: proxy ; in hostname
TEST - uri.jl: proxy basic auth with unreservedchars
TEST - uri.jl: proxy only empty basic auth
TEST - uri.jl: proxy only basic auth
TEST - uri.jl: proxy = in URL
TEST - uri.jl: ipv6 address with Zone ID
TEST - uri.jl: ipv6 address with Zone ID, but '%' is not percent-encoded
TEST - uri.jl: ipv6 address ending with '%'
TEST - uri.jl: ipv6 address with Zone ID including bad character
TEST - uri.jl: just ipv6 Zone ID
TEST - uri.jl: tab in URL
TEST - uri.jl: form feed in URL
TEST - parser.jl - Request: curl get
TEST - parser.jl - Request: firefox get
TEST - parser.jl - Request: dumbfuck
TEST - parser.jl - Request: fragment in url
TEST - parser.jl - Request: get no headers no body
TEST - parser.jl - Request: get one header no body
TEST - parser.jl - Request: get funky content length body hello
TEST - parser.jl - Request: post identity body world
TEST - parser.jl - Request: post - chunked body: all your base are belong to us
TEST - parser.jl - Request: two chunks ; triple zero ending
TEST - parser.jl - Request: chunked with trailing headers. blech.
TEST - parser.jl - Request: with bullshit after the length
TEST - parser.jl - Request: with quotes
TEST - parser.jl - Request: apachebench get
TEST - parser.jl - Request: query url with question mark
TEST - parser.jl - Request: newline prefix get
TEST - parser.jl - Request: upgrade request
TEST - parser.jl - Request: connect request
TEST - parser.jl - Request: report request
TEST - parser.jl - Request: request with no http version
TEST - parser.jl - Request: m-search request
TEST - parser.jl - Request: host terminated by a query string
TEST - parser.jl - Request: host:port terminated by a query string
TEST - parser.jl - Request: host:port terminated by a space
TEST - parser.jl - Request: PATCH request
TEST - parser.jl - Request: connect caps request
TEST - parser.jl - Request: utf-8 path request
TEST - parser.jl - Request: hostname underscore
TEST - parser.jl - Request: eat CRLF between requests, no "Connection: close" header
TEST - parser.jl - Request: eat CRLF between requests even if "Connection: close" is set
TEST - parser.jl - Request: PURGE request
TEST - parser.jl - Request: SEARCH request
TEST - parser.jl - Request: host:port and basic_auth
TEST - parser.jl - Request: upgrade post request
TEST - parser.jl - Request: connect with body request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: multiple connection header values with folding
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Response: google 301
TEST - parser.jl - Response: no content-length response
TEST - parser.jl - Response: 404 no headers no body
TEST - parser.jl - Response: 301 no response phrase
TEST - parser.jl - Response: 200 trailing space on chunked body
TEST - parser.jl - Response: no carriage ret
TEST - parser.jl - Response: proxy connection
TEST - parser.jl - Response: underscore header key
TEST - parser.jl - Response: bonjourmadame.fr
TEST - parser.jl - Response: field underscore
TEST - parser.jl - Response: non-ASCII in status line
TEST - parser.jl - Response: http version 0.9
TEST - parser.jl - Response: neither content-length nor transfer-encoding response
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and a 204 status
TEST - parser.jl - Response: HTTP/1.1 with an EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status and keep-alive disabled
TEST - parser.jl - Response: HTTP/1.1 with chunked endocing and a 200 response
TEST - parser.jl - Response: field space
TEST - parser.jl - Response: amazon.com
TEST - parser.jl - Response: empty reason phrase after space
TEST - parser.jl - Response: Content-Length-X
WARNING: takebuf_array is deprecated, use take! instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] takebuf_array(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::Vararg{Base.AbstractIOBuffer{Array{UInt8,1}},N} where N) at ./deprecated.jl:31
 [3] readavailable(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.6/MbedTLS/src/ssl.jl:225
 [4] macro expansion at /home/vagrant/.julia/v0.6/HTTP/src/client.jl:238 [inlined]
 [5] (::HTTP.##39#41{HTTP.Client{Base.PipeEndpoint},HTTP.Connection{MbedTLS.SSLContext},HTTP.RequestOptions,String,HTTP.Method,HTTP.Response,Base.RefValue{Float64},Bool,Bool,HTTP.Parser})() at ./task.jl:335
while loading /home/vagrant/.julia/v0.6/HTTP/test/client.jl, in expression starting on line 1
WARNING: The empty constructor Channel() is deprecated. The channel size needs to be specified explictly. Defaulting to Channel{Any}(32).
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Channel{Any}() at ./channels.jl:48
 [3] #Server#88(::String, ::String, ::Array{Any,1}, ::Type{T} where T, ::Function, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.6/HTTP/src/server.jl:270
 [4] HTTP.Server(::Function, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.6/HTTP/src/server.jl:267
 [5] macro expansion at /home/vagrant/.julia/v0.6/HTTP/test/server.jl:4 [inlined]
 [6] macro expansion at ./test.jl:853 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/HTTP/test/runtests.jl:23 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/HTTP/test/server.jl, in expression starting on line 1
[HTTP]: starting server to listen on: 127.0.0.1:8081
WARNING: takebuf_array is deprecated, use take! instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] takebuf_array(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::Vararg{Base.AbstractIOBuffer{Array{UInt8,1}},N} where N) at ./deprecated.jl:31
 [3] readavailable(::MbedTLS.SSLContext) at /home/vagrant/.julia/v0.6/MbedTLS/src/ssl.jl:225
 [4] macro expansion at /home/vagrant/.julia/v0.6/HTTP/src/client.jl:238 [inlined]
 [5] (::HTTP.##39#41{HTTP.Client{Base.PipeEndpoint},HTTP.Connection{MbedTLS.SSLContext},HTTP.RequestOptions,String,HTTP.Method,HTTP.Response,Base.RefValue{Float64},Bool,Bool,HTTP.Parser})() at ./task.jl:335
while loading /home/vagrant/.julia/v0.6/HTTP/test/server.jl, in expression starting on line 1
[HTTP]: server TCPServer is closed, shutting down...
WARNING: The empty constructor Channel() is deprecated. The channel size needs to be specified explictly. Defaulting to Channel{Any}(32).
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Channel{Any}() at ./channels.jl:48
 [3] #Server#88(::String, ::String, ::Array{Any,1}, ::Type{T} where T, ::Function, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.6/HTTP/src/server.jl:270
 [4] HTTP.Server(::Function, ::Base.PipeEndpoint) at /home/vagrant/.julia/v0.6/HTTP/src/server.jl:267
 [5] macro expansion at /home/vagrant/.julia/v0.6/HTTP/test/server.jl:14 [inlined]
 [6] macro expansion at ./test.jl:853 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/HTTP/test/runtests.jl:23 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/HTTP/test/server.jl, in expression starting on line 1
[HTTP]: starting server to listen on: 127.0.0.1:8081
[HTTP]: throttling 127.0.0.1
[HTTP]: new tcp connection accepted, reading request...
[HTTP]: processing on connection i=0...
[HTTP]: throttling on connection i=0
[HTTP]: reading request bytes with readtimeout=180.0
[HTTP]: received request on connection i=0
HTTP.Request:
"""
GET / HTTP/1.1
Host: 127.0.0.1:8081
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/json
User-Agent: HTTP.jl/0.0.0

"""
[HTTP]: responding with response on connection i=0
HTTP.Response:
"""
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 12
Content-Type: text/html; charset=utf-8
Date: Wed, 22 Feb 2017 17:20:06
Content-Language: en
Server: Julia/0.6.0-dev.2896

Hello World!
"""
[HTTP]: reading request bytes with readtimeout=180.0
Test Summary: |   Pass  [HTTP]: server TCPServer is closed, shutting down... Total

HTTP          | 607514  607514
INFO: HTTP tests passed

>>> End of log
