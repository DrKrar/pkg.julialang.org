>>> 'Pkg.add("ReverseDiff")' log
INFO: Cloning cache of ReverseDiff from https://github.com/JuliaDiff/ReverseDiff.jl.git
INFO: Installing DiffBase v0.0.2
INFO: Installing ForwardDiff v0.3.3
INFO: Installing NaNMath v0.2.2
INFO: Installing ReverseDiff v0.0.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ReverseDiff
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ReverseDiff")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (514.4453125 MB free)
Uptime: 25393.0 sec
Load Avg:  0.94091796875  0.9580078125  0.958984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1109173 s       5126 s     130283 s    1079965 s         60 s
#2  3499 MHz     263948 s        852 s      55152 s    2175386 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.0
 - ReverseDiff                   0.0.2
21 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.10.0
 - DiffBase                      0.0.2
 - Distributions                 0.11.1
 - ForwardDiff                   0.3.3
 - GenerativeModels              0.0.0-             master (unregistered)
 - Iterators                     0.2.0
 - LaTeXStrings                  0.2.0
 - NaNMath                       0.2.2
 - PDMats                        0.5.2
 - POMDPBounds                   0.0.0-             master (unregistered)
 - POMDPModels                   0.0.0-             master (unregistered)
 - POMDPToolbox                  0.0.0-             master (unregistered)
 - POMDPs                        0.4.0
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - TikzPictures                  0.3.5
 - URIParser                     0.1.6
INFO: Testing ReverseDiff
testing RawTape/AbstractInstructions...
done (took 1.240179154 seconds)
testing TrackedReals/TrackedArrays...
done (took 4.536766559 seconds)
testing macros (@forward, @skip, etc.)...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @forward named functions: `MacrosTests.f1`...
  testing @forward named functions: `MacrosTests.f2`...
  testing @forward named functions: `MacrosTests.f3`...
  testing @forward named functions: `MacrosTests.f4`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{Base.#-}(-)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##1#2}(MacrosTests.#1)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{MacrosTests.##3#4}(MacrosTests.#3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{MacrosTests.#f0}(MacrosTests.f0)`...
  testing @skip named functions: `MacrosTests.g1`...
  testing @skip named functions: `MacrosTests.g2`...
  testing @skip named functions: `MacrosTests.g3`...
  testing @skip named functions: `MacrosTests.g4`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##5#6}(MacrosTests.#5)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{MacrosTests.##7#8}(MacrosTests.#7)`...
done (took 4.561706596 seconds)
testing scalar derivatives (both forward and reverse passes)
  testing FORWARD_UNARY_SCALAR_FUNCS: `sqrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cbrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `inv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log10`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log1p`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `expm1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `secd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asecd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `coth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acoth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erf`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `gamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `lgamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `digamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `trigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airy`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyai`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyaiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `-`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `conj`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `*`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `/`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `+`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `-`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `^`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `atan2`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinf`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isnan`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isfinite`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `iseven`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isodd`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isreal`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinteger`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isequal`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isless`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `==`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `!=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>=`...
done (took 11.486758378 seconds)
testing linear algebra derivatives (both forward and reverse passes)
  testing Array -> Number functions: `sum`...
  testing Array -> Number functions: `det`...
  testing Array -> Number functions: `LinAlgTests.#17`...
  testing Array -> Array functions: `-`...
  testing Array -> Array functions: `inv`...
  testing (Array, Array) -> Array functions: `+`...
  testing (Array, Array) -> Array functions: `-`...
  testing A_mul_B functions: `*`...
  testing A_mul_B functions: `A_mul_Bt`...
  testing A_mul_B functions: `At_mul_B`...
  testing A_mul_B functions: `At_mul_Bt`...
  testing A_mul_B functions: `A_mul_Bc`...
  testing A_mul_B functions: `Ac_mul_B`...
  testing A_mul_B functions: `Ac_mul_Bc`...
done (took 12.767779236 seconds)
testing elementwise derivatives (both forward and reverse passes)
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_1`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_2`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_3`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_4`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_5`...
  testing DiffBase.NUMBER_TO_NUMBER_FUNCS: `DiffBase.num2num_6`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sqrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cbrt`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `inv`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log10`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `log1p`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `exp2`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `expm1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `secd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asin`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acos`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atan`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asec`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acot`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asind`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atand`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asecd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acscd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acotd`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `cosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `tanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `sech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `csch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `coth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asinh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acosh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `atanh`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `asech`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acsch`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `acoth`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erf`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfc`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `erfi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `gamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `lgamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `digamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `trigamma`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airy`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyai`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybi`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airyaiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `airybiprime`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `besselj1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely0`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `bessely1`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `-`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `abs`...
  testing FORWARD_UNARY_SCALAR_FUNCS: `conj`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `*`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `/`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `+`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `-`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `^`...
  testing FORWARD_BINARY_SCALAR_FUNCS: `atan2`...
  testing built-in broadcast functions: `.+`...
  testing built-in broadcast functions: `.-`...
  testing built-in broadcast functions: `.*`...
  testing built-in broadcast functions: `./`...
  testing built-in broadcast functions: `.\`...
  testing built-in broadcast functions: `.^`...
done (took 115.417190122 seconds)
testing Config...
done (took 0.411364985 seconds)
testing gradient/gradient!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.self_weighted_logit`...
  testing TERNARY_MATRIX_TO_NUMBER_FUNCS: `DiffBase.neural_step`...
done (took 10.886951395 seconds)
testing jacobian/jacobian!...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.chebyquad!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.brown_almost_linear!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.trigonometric!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.mutation_test_1!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffBase.mutation_test_2!`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `./`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.^`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 22.943277359 seconds)
testing nested jacobians...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffBase.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `./`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `.^`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `At_mul_Bt`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `A_mul_Bc`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_B`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `Ac_mul_Bc`...
done (took 321.338508368 seconds)
testing hessian/hessian!...
  testing MATRIX_TO_NUMBER_FUNCS: `det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffBase.mat2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffBase.self_weighted_logit`...
done (took 54.665217988 seconds)
INFO: ReverseDiff tests passed

>>> End of log
