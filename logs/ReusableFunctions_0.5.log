>>> 'Pkg.add("ReusableFunctions")' log
INFO: Installing BinDeps v0.3.20
INFO: Installing Blosc v0.1.4
INFO: Installing Docile v0.5.23
INFO: Installing FileIO v0.0.3
INFO: Installing HDF5 v0.5.8
INFO: Installing JLD v0.5.8
INFO: Installing ReusableFunctions v0.1.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.2
INFO: Building Blosc
INFO: Building HDF5
INFO: Package database updated

>>> 'Pkg.test("ReusableFunctions")' log
Julia Version 0.5.0-dev+2440
Commit 2bb94d6 (2016-02-01 02:22 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1
INFO: Testing ReusableFunctions
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/HDF5.ji for module HDF5.
WARNING: Method definition h5l_exists(Any, Any, Any) in module HDF5 at /home/vagrant/.julia/v0.5/HDF5/src/plain.jl:2049 overwritten at /home/vagrant/.julia/v0.5/HDF5/src/plain.jl:2075.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/JLD.ji for module JLD.
Testing with ints:
Should be about 1 second:
  4.638338 seconds (2.81 M allocations: 131.946 MB, 0.78% gc time)
Should be about 9 seconds:
  9.034815 seconds (3.97 k allocations: 211.469 KB)
Should be less than a second:
  0.004561 seconds (1.82 k allocations: 92.359 KB)

testing with Dict's
Should be about 1 second:
WARNING: fieldoffsets is deprecated. use `map(idx->fieldoffset(x, idx), 1:nfields(x))` instead
 in depwarn(Base.#depwarn, ASCIIString, Symbol) at ./deprecated.jl:64
 in fieldoffsets(Base.#fieldoffsets, DataType) at ./deprecated.jl:969
 in _gen_jlconvert_immutable(JLD.#_gen_jlconvert_immutable, JLD.JldTypeInfo, Any) at /home/vagrant/.julia/v0.5/JLD/src/jld_types.jl:447
 in gen_jlconvert(JLD.#gen_jlconvert, JLD.JldTypeInfo, Any) at /home/vagrant/.julia/v0.5/JLD/src/jld_types.jl:545
 in jldatatype(JLD.#jldatatype, JLD.JldFile, HDF5.HDF5Datatype) at /home/vagrant/.julia/v0.5/JLD/src/jld_types.jl:684
 in read(Base.#read, JLD.JldDataset) at /home/vagrant/.julia/v0.5/JLD/src/JLD.jl:370
 in read(Base.#read, JLD.JldFile, ASCIIString) at /home/vagrant/.julia/v0.5/JLD/src/JLD.jl:346
 in #jldopen#6(JLD.##jldopen#6, Array{Any,1}, Any, JLD.##30#31{ASCIIString}, UTF8String, Vararg{Any}) at /home/vagrant/.julia/v0.5/JLD/src/JLD.jl:245
 [inlined code] from ./boot.jl:331
 in load(FileIO.#load, FileIO.File{FileIO.DataFormat{:JLD}}, ASCIIString) at /home/vagrant/.julia/v0.5/JLD/src/JLD.jl:1191
 [inlined code] from ./boot.jl:331
 in #load#13(FileIO.##load#13, Array{Any,1}, Any, ASCIIString, ASCIIString, Vararg{ASCIIString}) at /home/vagrant/.julia/v0.5/FileIO/src/loadsave.jl:42
 in r3f(ReusableFunctions.#r3f#1{#f,ASCIIString}, Dict{Int64,Int64}) at /home/vagrant/.julia/v0.5/ReusableFunctions/src/ReusableFunctions.jl:46
 [inlined code] from /home/vagrant/.julia/v0.5/ReusableFunctions/test/runtests.jl:32
 in anonymous at ./no file:4294967295
 in include at ./boot.jl:264
 in include_from_node1 at ./loading.jl:417
 in process_options at ./client.jl:244
 in _start at ./client.jl:300
while loading /home/vagrant/.julia/v0.5/ReusableFunctions/test/runtests.jl, in expression starting on line 10
  2.902615 seconds (1.59 M allocations: 74.893 MB, 0.79% gc time)
Should be about 9 seconds:
  9.042176 seconds (6.30 k allocations: 314.016 KB)
Should be less than a second:
  0.009929 seconds (2.76 k allocations: 135.844 KB)

testing with Float64 arrays
Should be about 1 second:
  1.329010 seconds (215.38 k allocations: 10.230 MB)
Should be about 9 seconds:
 10.038699 seconds (4.23 k allocations: 227.891 KB)
Should be less than a second:
  0.005521 seconds (1.86 k allocations: 94.766 KB)

Testing with ints:
Should be about 1 second:
  1.024450 seconds (5.32 k allocations: 277.588 KB)
Should be about 9 seconds:
  9.019843 seconds (81 allocations: 4.078 KB)
Should be less than a second:
  0.000054 seconds

testing with Dict's
Should be about 1 second:
  1.288964 seconds (359.13 k allocations: 17.478 MB, 0.52% gc time)
Should be about 9 seconds:
  9.023437 seconds (735 allocations: 44.381 KB)
Should be less than a second:
  0.000070 seconds (90 allocations: 7.500 KB)

testing with Float64 arrays
Should be about 1 second:
  1.139568 seconds (117.73 k allocations: 5.654 MB)
Should be about 9 seconds:
 10.025828 seconds (675 allocations: 39.725 KB)
Should be less than a second:
  0.000147 seconds (20 allocations: 2.813 KB)

INFO: ReusableFunctions tests passed

>>> End of log
