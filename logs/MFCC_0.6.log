>>> 'Pkg.add("MFCC")' log
INFO: Cloning cache of DSP from https://github.com/JuliaDSP/DSP.jl.git
INFO: Cloning cache of MFCC from https://github.com/davidavdav/MFCC.jl.git
INFO: Cloning cache of WAV from https://github.com/dancasimiro/WAV.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing DSP v0.1.1
INFO: Installing FileIO v0.2.0
INFO: Installing HDF5 v0.7.0
INFO: Installing JLD v0.6.6
INFO: Installing LegacyStrings v0.1.1
INFO: Installing MFCC v0.1.1
INFO: Installing Polynomials v0.1.1
INFO: Installing Reexport v0.0.3
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Installing WAV v0.8.1
INFO: Building Blosc
INFO: Building HDF5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/HDF5/deps/build.jl, in expression starting on line 27
INFO: Package database updated

>>> 'Pkg.test("MFCC")' log
Julia Version 0.6.0-dev.1297
Commit 416f5f2 (2016-11-23 13:12 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (572.0234375 MB free)
Uptime: 2855.0 sec
Load Avg:  0.9970703125  1.0146484375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     159150 s        152 s      23344 s      68789 s          5 s
#2  3499 MHz      40610 s         41 s      10731 s     225699 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - MFCC                          0.1.1
13 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Compat                        0.9.4
 - DSP                           0.1.1
 - FileIO                        0.2.0
 - HDF5                          0.7.0
 - JLD                           0.6.6
 - LegacyStrings                 0.1.1
 - Polynomials                   0.1.1
 - Reexport                      0.0.3
 - SHA                           0.3.0
 - URIParser                     0.1.6
 - WAV                           0.8.1
INFO: Testing MFCC
WARNING: `x $ y` is deprecated.  use `xor(x, y)` or `x ‚äª y` instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in $ at ./deprecated.jl:1028 [inlined]
 in read_pcm_samples(::IOStream, ::WAV.WAVFormat, ::UnitRange{UInt64}) at /home/vagrant/.julia/v0.6/WAV/src/WAV.jl:238
 in read_data(::IOStream, ::UInt32, ::WAV.WAVFormat, ::String, ::Type{T}) at /home/vagrant/.julia/v0.6/WAV/src/WAV.jl:501
 in #wavread#9(::Type{T}, ::String, ::Function, ::IOStream) at /home/vagrant/.julia/v0.6/WAV/src/WAV.jl:616
 in (::WAV.#kw##wavread)(::Array{Any,1}, ::WAV.#wavread, ::IOStream) at ./<missing>:0
 in open(::WAV.##11#12{DataType,String}, ::String, ::String) at ./iostream.jl:152
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:13
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in log(::Array{Float64,1}) at ./deprecated.jl:50
 in hz2mel(::Array{Float64,1}, ::Bool) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:116
 in hz2mel at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:120 [inlined]
 in #fft2melmx#4(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:78
 in (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 in #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 in (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in exp(::Array{Float64,1}) at ./deprecated.jl:50
 in mel2hz(::Array{Float64,1}, ::Bool) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:134
 in #fft2melmx#4(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:80
 in (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 in #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 in (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: min{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use min.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in min(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 in #fft2melmx#4(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:91
 in (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 in #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 in (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: max{T1 <: Real}(x::Real,y::AbstractArray{T1}) is deprecated, use max.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in max(::Int64, ::Array{Float64,2}) at ./deprecated.jl:50
 in #fft2melmx#4(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:91
 in (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 in #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 in (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in cos(::Array{Float64,1}) at ./deprecated.jl:50
 in spec2cep(::Array{Float64,2}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:206
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:33
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in log(::Array{Float64,2}) at ./deprecated.jl:50
 in spec2cep(::Array{Float64,2}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:224
 in #mfcc#5(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:33
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 in #mfcc#11(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 in (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 in #feacalc#15(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 in #feacalc#14(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 in (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
ERROR: LoadError: MethodError: no method matching erfinv(::Array{Float64,1})
Closest candidates are:
  erfinv(!Matched::Float32) at special/erf.jl:96
  erfinv(!Matched::Float64) at special/erf.jl:28
  erfinv(!Matched::Integer) at special/erf.jl:138
 in warpstats(::Array{Float32,2}, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:85
 in warp(::Array{Float32,2}, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:114 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 14
================================[ ERROR: MFCC ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: MFCC had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
