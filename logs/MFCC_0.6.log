>>> 'Pkg.add("MFCC")' log
INFO: Cloning cache of DSP from https://github.com/JuliaDSP/DSP.jl.git
INFO: Cloning cache of MFCC from https://github.com/davidavdav/MFCC.jl.git
INFO: Cloning cache of WAV from https://github.com/dancasimiro/WAV.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing DSP v0.1.1
INFO: Installing FileIO v0.2.1
INFO: Installing HDF5 v0.7.2
INFO: Installing JLD v0.6.8
INFO: Installing LegacyStrings v0.2.0
INFO: Installing MFCC v0.1.1
INFO: Installing Polynomials v0.1.2
INFO: Installing Reexport v0.0.3
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Installing WAV v0.8.3
INFO: Building Blosc
INFO: Building HDF5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 [3] macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::SubString{String}) at ./sysimg.jl:14
 [7] evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 [8] cd(::##2#4, ::String) at ./file.jl:69
 [9] (::##1#3)(::IOStream) at ./none:13
 [10] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [11] eval(::Module, ::Any) at ./boot.jl:236
 [12] process_options(::Base.JLOptions) at ./client.jl:285
 [13] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/HDF5/deps/build.jl, in expression starting on line 27
INFO: Package database updated

>>> 'Pkg.test("MFCC")' log
Julia Version 0.6.0-dev.1946
Commit f550489 (2017-01-06 00:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (642.5625 MB free)
Uptime: 3168.0 sec
Load Avg:  0.95458984375  1.0166015625  0.982421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     160869 s         65 s      19479 s     104688 s          7 s
#2  3499 MHz      50531 s        104 s      10172 s     248709 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - MFCC                          0.1.1
13 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Compat                        0.10.0
 - DSP                           0.1.1
 - FileIO                        0.2.1
 - HDF5                          0.7.2
 - JLD                           0.6.8
 - LegacyStrings                 0.2.0
 - Polynomials                   0.1.2
 - Reexport                      0.0.3
 - SHA                           0.3.0
 - URIParser                     0.1.6
 - WAV                           0.8.3
INFO: Testing MFCC

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.
WARNING: sumabs2(x) is deprecated, use sum(abs2,x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sumabs2(::Array{Float64,1}) at ./deprecated.jl:50
 [3] compute_window(::Array{Float64,1}, ::Int64) at /home/vagrant/.julia/v0.6/DSP/src/periodograms.jl:175
 [4] #stft#6(::Bool, ::Int64, ::Float64, ::Array{Float64,1}, ::Function, ::Array{Float64,1}, ::Int64, ::Int64, ::DSP.Periodograms.PSDOnly) at /home/vagrant/.julia/v0.6/DSP/src/periodograms.jl:383
 [5] (::DSP.Periodograms.#kw##stft)(::Array{Any,1}, ::DSP.Periodograms.#stft, ::Array{Float64,1}, ::Int64, ::Int64, ::DSP.Periodograms.PSDOnly) at ./<missing>:0
 [6] #spectrogram#5(::Bool, ::Int64, ::Float64, ::Array{Float64,1}, ::Function, ::Array{Float64,1}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/DSP/src/periodograms.jl:367
 [7] (::DSP.Periodograms.#kw##spectrogram)(::Array{Any,1}, ::DSP.Periodograms.#spectrogram, ::Array{Float64,1}, ::Int64, ::Int64) at ./<missing>:0
 [8] #powspec#1(::Float64, ::Float64, ::Bool, ::Function, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:18
 [9] (::MFCC.#kw##powspec)(::Array{Any,1}, ::MFCC.#powspec, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [10] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:18
 [11] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [12] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [13] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [14] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [15] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [16] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [17] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [18] include_from_node1(::String) at ./loading.jl:532
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:308
 [21] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: sumabs2(x) is deprecated, use sum(abs2,x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sumabs2(::Array{Float64,1}) at ./deprecated.jl:50
 [3] #powspec#1(::Float64, ::Float64, ::Bool, ::Function, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:21
 [4] (::MFCC.#kw##powspec)(::Array{Any,1}, ::MFCC.#powspec, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [5] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:18
 [6] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [7] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [8] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [9] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [10] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [11] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [12] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:308
 [16] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] hz2mel(::Array{Float64,1}, ::Bool) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:116
 [4] hz2mel at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:120 [inlined]
 [5] #fft2melmx#8(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:78
 [6] (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 [7] #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 [8] (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 [9] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 [10] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [11] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [12] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [13] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [14] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [15] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [16] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [17] include_from_node1(::String) at ./loading.jl:532
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:308
 [20] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] exp(::Array{Float64,1}) at ./deprecated.jl:50
 [3] mel2hz(::Array{Float64,1}, ::Bool) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:134
 [4] #fft2melmx#8(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:80
 [5] (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 [6] #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 [7] (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 [8] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 [9] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [10] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [11] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [12] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [13] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [14] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [15] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [16] include_from_node1(::String) at ./loading.jl:532
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:308
 [19] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: min{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use min.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] min(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #fft2melmx#8(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:91
 [4] (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 [5] #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 [6] (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 [7] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 [8] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [9] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [10] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [11] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [12] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [13] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [14] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:308
 [18] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: max{T1 <: Real}(x::Real,y::AbstractArray{T1}) is deprecated, use max.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Int64, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #fft2melmx#8(::Float64, ::Float64, ::Float64, ::Float64, ::Bool, ::Bool, ::Function, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:91
 [4] (::MFCC.#kw##fft2melmx)(::Array{Any,1}, ::MFCC.#fft2melmx, ::Int64, ::Int64) at ./<missing>:0
 [5] #audspec#2(::Int64, ::Symbol, ::Float64, ::Float64, ::Bool, ::Float64, ::Function, ::Array{Float64,2}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:34
 [6] (::MFCC.#kw##audspec)(::Array{Any,1}, ::MFCC.#audspec, ::Array{Float64,2}, ::Float64) at ./<missing>:0
 [7] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:19
 [8] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [9] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [10] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [11] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [12] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [13] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [14] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:308
 [18] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::Array{Float64,1}) at ./deprecated.jl:50
 [3] spec2cep(::Array{Float64,2}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:206
 [4] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:33
 [5] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [6] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [7] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [8] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [9] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [10] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [11] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:308
 [15] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,2}) at ./deprecated.jl:50
 [3] spec2cep(::Array{Float64,2}, ::Int64, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/rasta.jl:224
 [4] #mfcc#23(::Float64, ::Float64, ::Int64, ::Float64, ::Bool, ::Float64, ::Bool, ::Float64, ::Float64, ::Int64, ::Float64, ::Int64, ::Symbol, ::Bool, ::Int64, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:33
 [5] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64) at ./<missing>:0
 [6] #mfcc#29(::Array{Any,1}, ::Function, ::Array{Float64,1}, ::Float64, ::Symbol) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:51
 [7] (::MFCC.#kw##mfcc)(::Array{Any,1}, ::MFCC.#mfcc, ::Array{Float64,1}, ::Float64, ::Symbol) at ./<missing>:0
 [8] #feacalc#35(::Symbol, ::Symbol, ::Symbol, ::Float64, ::Int64, ::Symbol, ::Float64, ::String, ::Symbol, ::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:51
 [9] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::Array{Float64,2}) at ./<missing>:0
 [10] #feacalc#34(::Symbol, ::Array{Any,1}, ::Function, ::String) at /home/vagrant/.julia/v0.6/MFCC/src/feacalc.jl:20
 [11] (::MFCC.#kw##feacalc)(::Array{Any,1}, ::MFCC.#feacalc, ::String) at ./<missing>:0
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:308
 [15] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 9
ERROR: LoadError: MethodError: no method matching erfinv(::Array{Float64,1})
Closest candidates are:
  erfinv(!Matched::Float32) at special/erf.jl:96
  erfinv(!Matched::Float64) at special/erf.jl:28
  erfinv(!Matched::Integer) at special/erf.jl:138
Stacktrace:
 [1] warpstats(::Array{Float32,2}, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:85
 [2] warp(::Array{Float32,2}, ::Int64) at /home/vagrant/.julia/v0.6/MFCC/src/mfccs.jl:114 (repeats 2 times)
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] process_options(::Base.JLOptions) at ./client.jl:308
 [6] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl, in expression starting on line 14
================================[ ERROR: MFCC ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MFCC/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: MFCC had test errors
Stacktrace:
 [1] #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:754
 [2] (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 [3] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 [4] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 [5] #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 [6] (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 [7] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261
 [8] test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261

>>> End of log
