>>> 'Pkg.add("ClusterDicts")' log
INFO: Cloning cache of ClusterDicts from https://github.com/amitmurthy/ClusterDicts.jl.git
INFO: Installing ClusterDicts v0.1.0
INFO: Package database updated

>>> 'Pkg.test("ClusterDicts")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (349.3515625 MB free)
Uptime: 11006.0 sec
Load Avg:  1.19091796875  1.1162109375  1.134765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     680639 s       2683 s      65036 s     282521 s         16 s
#2  3499 MHz     145314 s       4204 s      39767 s     874161 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - ClusterDicts                  0.1.0
 - JSON                          0.7.1
1 additional packages:
 - Compat                        0.9.2
INFO: Testing ClusterDicts
ERROR: LoadError: write: broken pipe (EPIPE)
 in yieldto(::Task, ::ANY) at ./event.jl:136
 in wait() at ./event.jl:169
 in stream_wait(::Task) at ./stream.jl:44
 in uv_write(::Base.PipeEndpoint, ::Ptr{UInt8}, ::UInt64) at ./stream.jl:820
 in unsafe_write(::Base.PipeEndpoint, ::Ptr{UInt8}, ::UInt64) at ./stream.jl:830
 in unsafe_write(::Base.PipeEndpoint, ::Base.RefValue{UInt8}, ::Int64) at ./io.jl:155
 in serialize_type(::SerializationState{Pipe}, ::DataType) at ./serialize.jl:495
 in serialize_any(::SerializationState{Pipe}, ::Any) at ./serialize.jl:522
 in serialize(::SerializationState{Pipe}, ::Any) at ./serialize.jl:508
 in serialize(::SerializationState{Pipe}, ::Expr) at ./serialize.jl:284 (repeats 3 times)
 in create_expr_cache(::String, ::String, ::Array{Any,1}) at ./loading.jl:527
 in compilecache(::String) at ./loading.jl:592
 in require(::Symbol) at ./loading.jl:422
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ClusterDicts/test/runtests.jl, in expression starting on line 2
WARNING: Forcibly interrupting busy workers
CompositeException(Any[CapturedException(KeyError(4),Any[( in getindex at dict.jl:688 [inlined],1),( in interrupt(::Int64) at multi.jl:2136,1),( in (::Base.##680#682)() at task.jl:360,1)])])
============================[ ERROR: ClusterDicts ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/ClusterDicts/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ClusterDicts had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
