>>> 'Pkg.add("Benchmark")' log
INFO: Installing ArrayViews v0.6.4
INFO: Installing Benchmark v0.1.0
INFO: Installing DataArrays v0.2.20
INFO: Installing DataFrames v0.6.10
INFO: Installing Docile v0.5.23
INFO: Installing GZip v0.2.18
INFO: Installing Reexport v0.0.3
INFO: Installing SortingAlgorithms v0.0.6
INFO: Installing StatsBase v0.8.0
INFO: Installing StatsFuns v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Benchmark
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Benchmark")' log
Julia Version 0.5.0-dev+3184
Commit fb283c6 (2016-03-17 08:49 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing Benchmark
WARNING: New definition 
    write(GZip.GZipStream, Array{#T<:Any, N<:Any}) at /home/vagrant/.julia/v0.5/GZip/src/GZip.jl:456
is ambiguous with: 
    write(Base.IO, Array{UInt8, N<:Any}) at io.jl:154.
To fix, define 
    write(GZip.GZipStream, Array{UInt8, N<:Any})
before the new definition.
WARNING: Base.String is deprecated, use AbstractString instead.
  likely near /home/vagrant/.julia/v0.5/Benchmark/src/benchmarks.jl:13
WARNING: Base.String is deprecated, use AbstractString instead.
  likely near /home/vagrant/.julia/v0.5/Benchmark/src/benchmarks.jl:13
WARNING: Base.String is deprecated, use AbstractString instead.
  likely near /home/vagrant/.julia/v0.5/Benchmark/src/benchmarks.jl:41

WARNING: deprecated syntax "{a,b, ...}" at /home/vagrant/.julia/v0.5/Benchmark/src/compare.jl:23.
Use "Any[a,b, ...]" instead.
Running tests:

WARNING: deprecated syntax "{a,b, ...}" at /home/vagrant/.julia/v0.5/Benchmark/test/benchmarks.jl:8.
Use "Any[a,b, ...]" instead.

WARNING: deprecated syntax "{a,b, ...}" at /home/vagrant/.julia/v0.5/Benchmark/test/benchmarks.jl:9.
Use "Any[a,b, ...]" instead.

WARNING: deprecated syntax "{a,b, ...}" at /home/vagrant/.julia/v0.5/Benchmark/test/benchmarks.jl:10.
Use "Any[a,b, ...]" instead.
WARNING: int(x::AbstractFloat) is deprecated, use round(Int,x) instead.
 [inlined code] from ./error.jl:26
 in depwarn(::ASCIIString, ::Symbol) at ./deprecated.jl:64
 in int(::Float64) at ./deprecated.jl:50
 in benchmark(::Any, ::ASCIIString, ::ASCIIString, ::Int64) at /home/vagrant/.julia/v0.5/Benchmark/src/benchmarks.jl:28
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::ASCIIString) at ./loading.jl:417
 [inlined code] from /home/vagrant/.julia/v0.5/Benchmark/test/runtests.jl:8
 in start(::Array{ASCIIString,1}) at ./<no file>:4294967295
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::UTF8String) at ./loading.jl:417
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Benchmark/test/benchmarks.jl, in expression starting on line 4
WARNING: strftime is deprecated, use Libc.strftime instead.
 [inlined code] from ./error.jl:26
 in depwarn(::ASCIIString, ::Symbol) at ./deprecated.jl:64
 [inlined code] from ./strings/io.jl:73
 in strftime(::ASCIIString, ::Vararg{Any}) at ./deprecated.jl:30
 in benchmark(::Any, ::ASCIIString, ::ASCIIString, ::Int64) at /home/vagrant/.julia/v0.5/Benchmark/src/benchmarks.jl:28
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::ASCIIString) at ./loading.jl:417
 [inlined code] from /home/vagrant/.julia/v0.5/Benchmark/test/runtests.jl:8
 in start(::Array{ASCIIString,1}) at ./<no file>:4294967295
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::UTF8String) at ./loading.jl:417
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Benchmark/test/benchmarks.jl, in expression starting on line 4
 * benchmarks.jl
 * compare.jl
ERROR: LoadError: LoadError: MethodError: no method matching compare(::Array{TestConsistency.#f1,1}, ::Int64)
Closest candidates are:
  compare(!Matched::Array{Function,1}, ::Integer)
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::ASCIIString) at ./loading.jl:417
 [inlined code] from /home/vagrant/.julia/v0.5/Benchmark/test/runtests.jl:8
 in start(::Array{ASCIIString,1}) at ./<no file>:4294967295
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::UTF8String) at ./loading.jl:417
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Benchmark/test/consistency.jl, in expression starting on line 13
while loading /home/vagrant/.julia/v0.5/Benchmark/test/runtests.jl, in expression starting on line 7
==============================[ ERROR: Benchmark ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/Benchmark/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Base.Pkg.PkgError("Benchmark had test errors")
 in #test#55(::Bool, ::Any, ::Array{AbstractString,1}) at ./pkg/entry.jl:671
 [inlined code] from ./boot.jl:331
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::ASCIIString) at ./file.jl:48
 in #cd#1(::Array{Any,1}, ::Any, ::Any, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1}}) at ./pkg/dir.jl:31
 [inlined code] from ./boot.jl:331
 in #test#3(::Bool, ::Any, ::ASCIIString, ::Vararg{ASCIIString}) at ./pkg.jl:228
 in eval(::Module, ::Any) at ./boot.jl:267
 [inlined code] from ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
