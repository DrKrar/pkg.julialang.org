>>> 'Pkg.add("JuMP")' log
INFO: Installing Calculus v0.2.2
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.1.0
INFO: Installing ForwardDiff v0.4.1
INFO: Installing JuMP v0.16.2
INFO: Installing Lazy v0.11.5
INFO: Installing MacroTools v0.3.6
INFO: Installing MathProgBase v0.6.3
INFO: Installing NaNMath v0.2.4
INFO: Installing ReverseDiffSparse v0.7.1
INFO: Installing SpecialFunctions v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of JuMP
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("JuMP")' log
Julia Version 0.6.0-pre.alpha.300
Commit 06e096f (2017-03-29 02:23 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1495.76953125 MB free)
Uptime: 60189.0 sec
Load Avg:  0.98779296875  0.5947265625  0.28173828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2485182 s       6659 s     215036 s    2809562 s        147 s
#2  3500 MHz    1178493 s        290 s     143733 s    4549789 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.3
 - JuMP                          0.16.2
12 additional packages:
 - Calculus                      0.2.2
 - Compat                        0.21.0
 - DataStructures                0.5.3
 - DiffBase                      0.1.0
 - ForwardDiff                   0.4.1
 - Lazy                          0.11.5
 - MacroTools                    0.3.6
 - MathProgBase                  0.6.3
 - NaNMath                       0.2.4
 - ReverseDiffSparse             0.7.1
 - SpecialFunctions              0.1.1
 - tmp                           0.0.0-             non-repo (unregistered)
INFO: Computing test dependencies for JuMP...
INFO: Installing BinDeps v0.4.7
INFO: Installing Cbc v0.3.1
INFO: Installing Clp v0.3.0
INFO: Installing ECOS v0.7.0
INFO: Installing GLPK v0.4.2
INFO: Installing GLPKMathProgInterface v0.3.2
INFO: Installing Ipopt v0.2.6
INFO: Installing OffsetArrays v0.2.14
INFO: Installing SCS v0.3.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building Cbc
INFO: Building ECOS
INFO: Building GLPK
INFO: Building Ipopt
INFO: Building SCS
INFO: Testing JuMP

WARNING: deprecated syntax "abstract GLPKMathProgModel<:AbstractLinearQuadraticModel" at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceBase.jl:32.
Use "abstract type GLPKMathProgModel<:AbstractLinearQuadraticModel end" instead.
WARNING: Variable value not defined for __anon__. Check that the model was properly solved.
WARNING: Variable value not defined for __anon__. Check that the model was properly solved.
Test Summary: | Pass  Total
Printing      |  214    214
WARNING: Expression d["bar"] should not be used as a variable name. Use the "anonymous" syntax d["bar"] = @variable(m, ...) instead.
WARNING: A variable named lbonly is already attached to this model. If creating variables programmatically, consider using the anonymous variable syntax x = @variable(m, [1:N], ...).
WARNING: Variable value not defined for component of x. Check that the model was properly solved.
WARNING: Variable value not defined for component of z. Check that the model was properly solved.
Test Summary: | Pass  Total
Variables     |   88     88
Test Summary: | Pass  Total
Expressions   |   16     16
Test Summary:      | Pass  Total
Operator overloads |  467    467
WARNING: The curly syntax (sum{},prod{},norm2{}) is deprecated in favor of the new generator syntax (sum(),prod(),norm()).
WARNING: Replace sum{C[i, j] * x[i, j], i in 1:2, j = 2:3} with sum(C[i, j] * x[i, j] for i in 1:2 for j = 2:3).
WARNING: Replace sum{C[i, j] * x[i, j], i = 1:3, j in 1:3; i != j} with sum(C[i, j] * x[i, j] for i = 1:3 for j in 1:3 if i != j).
WARNING: Replace sum{C[i, j] * x[i, j], i = 1:3, j = 1:i} with sum(C[i, j] * x[i, j] for i = 1:3 for j = 1:i).
WARNING: Replace sum{0 * x[i, 1], i = 1:3} with sum(0 * x[i, 1] for i = 1:3).
WARNING: Replace sum{0 * x[i, 1] + y, i = 1:3} with sum(0 * x[i, 1] + y for i = 1:3).
WARNING: Replace norm2{x[i, j], i in 1:2, j = 1:2} with norm(x[i, j] for i in 1:2 for j = 1:2).
WARNING: Replace norm2{x[i, j], i = 1:2, j in 1:2; iseven(i + j)} with norm(x[i, j] for i = 1:2 for j in 1:2 if iseven(i + j)).
WARNING: Replace norm2{x[i, 1], i in 1:2} with norm(x[i, 1] for i in 1:2).
WARNING: Replace norm2{x[i, j], i = 1:2, j = 1:2} with norm(x[i, j] for i = 1:2 for j = 1:2).
Test Summary: | Pass  Total
Macros        |  409    409
Test Summary:      | Pass  Total
Fuzzing the macros |  100    100
WARNING: Expression x[1] should not be used as a variable name. Use the "anonymous" syntax x[1] = @variable(m, ...) instead.
WARNING: Variable value not defined for errVar. Check that the model was properly solved.
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
WARNING: Variable value not defined for x. Check that the model was properly solved.
WARNING: The addition operator has been used on JuMP expressions a large number of times. This warning is safe to ignore but may indicate that model generation is slower than necessary. For performance reasons, you should not add expressions in a loop. Instead of x += y, use append!(x,y) to modify x in place. If y is a single variable, you may also use push!(x, coef, y) in place of x += coef*y.
Warning, MPS does not support maximization sense. Flipping objective coefficients.

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Int64}, ::Int64) at ./deprecated.jl:51
 [3] loadproblem!(::ECOS.ECOSMathProgModel, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Tuple{Symbol,UnitRange{Int64}},1}) at /home/vagrant/.julia/v0.6/ECOS/src/ECOSSolverInterface.jl:167
 [4] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:231
 [5] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
 [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
 [7] macro expansion at ./test.jl:914 [inlined]
 [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Int64}, ::Int64) at ./deprecated.jl:51
 [3] loadproblem!(::ECOS.ECOSMathProgModel, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Tuple{Symbol,UnitRange{Int64}},1}) at /home/vagrant/.julia/v0.6/ECOS/src/ECOSSolverInterface.jl:168
 [4] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:231
 [5] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
 [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
 [7] macro expansion at ./test.jl:914 [inlined]
 [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Symbol}, ::Int64) at ./deprecated.jl:51
 [3] loadproblem!(::ECOS.ECOSMathProgModel, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Tuple{Symbol,UnitRange{Int64}},1}) at /home/vagrant/.julia/v0.6/ECOS/src/ECOSSolverInterface.jl:169
 [4] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:231
 [5] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
 [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
 [7] macro expansion at ./test.jl:914 [inlined]
 [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Symbol}, ::Int64) at ./deprecated.jl:51
 [3] loadproblem!(::ECOS.ECOSMathProgModel, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Tuple{Symbol,UnitRange{Int64}},1}) at /home/vagrant/.julia/v0.6/ECOS/src/ECOSSolverInterface.jl:170
 [4] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:231
 [5] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
 [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
 [7] macro expansion at ./test.jl:914 [inlined]
 [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] Array(::Type{Symbol}, ::Int64) at ./deprecated.jl:51
 [3] loadproblem!(::ECOS.ECOSMathProgModel, ::Array{Float64,1}, ::SparseMatrixCSC{Float64,Int64}, ::Array{Float64,1}, ::Array{Any,1}, ::Array{Tuple{Symbol,UnitRange{Int64}},1}) at /home/vagrant/.julia/v0.6/ECOS/src/ECOSSolverInterface.jl:192
 [4] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:231
 [5] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
 [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
 [7] macro expansion at ./test.jl:914 [inlined]
 [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [9] macro expansion at ./test.jl:853 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] include_from_node1(::String) at ./loading.jl:539
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:305
 [16] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(modA) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getobjectivevalue(modA), -5.8446115, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:324 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(x), 0.9774436, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:325 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for y. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(y), 1.0225563, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:326 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z), 4.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:327 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[3], 0.5112781, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:328 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[4], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:329 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[5], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:330 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[6], 6.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:331 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(x), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:334 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(y), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:335 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(z), -1.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:336 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[3], 0.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:337 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[4], 1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:338 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[5], 1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:339 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[6], -0.03759398, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:340 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[1], 0.333333, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:343 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[2], -1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:344 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[3], -0.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:345 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(modA) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:323 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getobjectivevalue(modA), -5.8446115, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:324 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(x), 0.9774436, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:325 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for y. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(y), 1.0225563, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:326 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z), 4.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:327 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[3], 0.5112781, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:328 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[4], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:329 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[5], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:330 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[6], 6.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:331 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(x), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:334 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(y), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:335 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(z), -1.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:336 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[3], 0.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:337 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[4], 1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:338 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[5], 1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:339 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[6], -0.03759398, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:340 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[1], 0.333333, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:343 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[2], -1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:344 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[3], -0.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:345 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(modA) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:361 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getobjectivevalue(modA), 5.8446115, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:362 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(x), 0.9774436, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:363 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for y. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(y), 1.0225563, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:364 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z), 4.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:365 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[3], 0.5112781, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:366 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[4], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:367 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[5], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:368 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getvalue(r))[6], 6.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:369 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(x), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:372 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(y), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:373 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getdual(z), 1.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:374 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[3], 0.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:375 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[4], -1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:376 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[5], -1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:377 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[6], 0.03759398, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:378 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[1], -0.333333, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:381 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[2], 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:382 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox((getdual(cons))[3], 0.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:383 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(modA) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:361 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getobjectivevalue(modA), 5.8446115, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:362 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(x), 0.9774436, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:363 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for y. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(y), 1.0225563, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:364 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z), 4.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:365 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[3], 0.5112781, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:366 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[4], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:367 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[5], 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:368 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for r. Check that the model was properly solved.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getvalue(r))[6], 6.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:369 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(x), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:372 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(y), 0.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:373 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable bound duals (reduced costs) not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getdual(z), 1.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:374 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[3], 0.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:375 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[4], -1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:376 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[5], -1.0, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:377 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type BoundsError
  Expression: isapprox((getdual(r))[6], 0.03759398, atol=TOL)
  BoundsError: attempt to access 0-element Array{Float64,1} at index [4]
  Stacktrace:
   [1] _mapInner(::JuMP.#_getDual, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:137
   [2] _map(::Function, ::JuMP.JuMPArray{JuMP.Variable,1,Tuple{UnitRange{Int64}}}) at /home/vagrant/.julia/v0.6/JuMP/src/JuMPContainer.jl:153
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:378 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[1], -0.333333, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:381 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[2], 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:382 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
WARNING: Dual solution not available. Check that the model was properly solved and no integer variables are present.
Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox((getdual(cons))[3], 0.0714286, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:383 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: A variable named x is already attached to this model. If creating variables programmatically, consider using the anonymous variable syntax x = @variable(m, [1:N], ...).
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:551 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:552 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:553 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:570 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:571 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:572 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:587 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:588 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:589 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:551 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:552 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:553 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:570 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:571 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:572 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(mod) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:587 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
WARNING: Variable value not defined for z1. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z1), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:588 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
WARNING: Variable value not defined for z2. Check that the model was properly solved.
Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(z2), 1.0, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:589 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] anonymous at ./<missing>:?
Warning, MPS does not support maximization sense. Flipping objective coefficients.
WARNING: Solver does not appear to support providing initial feasible solutions.
Test fixed variables don't leak through MPB with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:641 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] include_from_node1(::String) at ./loading.jl:539
   [11] include(::String) at ./sysimg.jl:14
   [12] process_options(::Base.JLOptions) at ./client.jl:305
   [13] _start() at ./client.jl:371
Test fixed variables don't leak through MPB with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Got an exception of type MethodError outside of a @test
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:641 [inlined]
   [4] macro expansion at ./test.jl:914 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] include_from_node1(::String) at ./loading.jl:539
   [11] include(::String) at ./sysimg.jl:14
   [12] process_options(::Base.JLOptions) at ./client.jl:305
   [13] _start() at ./client.jl:371
WARNING: Ignoring partial starting solution. Cbc requires a feasible value to be specified for all variables.
Cbc3007W No integer variables - nothing to do
Cbc3007W No integer variables - nothing to do
Test setsolver: Error During Test
  Test threw an exception of type MethodError
  Expression: solve(m) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] solve(::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:148
   [4] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:777 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
Test setsolver: Error During Test
  Test threw an exception of type MethodError
  Expression: solve(m) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] solve(::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:148
   [4] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:777 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
with ECOS.ECOSSolver(Any[(:verbose, false)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(m, relaxation=true) == :Optimal
  MethodError: no method matching setvartype!(::ECOS.ECOSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] (::JuMP.#kw##solve)(::Array{Any,1}, ::JuMP.#solve, ::JuMP.Model) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:898 [inlined]
   [5] macro expansion at ./test.jl:914 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
with ECOS.ECOSSolver(Any[(:verbose, false)]): Test Failed
  Expression: isapprox(getvalue(x), 0.5, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:899 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [6] macro expansion at ./test.jl:853 [inlined]
 [7] anonymous at ./<missing>:?
with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Error During Test
  Test threw an exception of type MethodError
  Expression: solve(m, relaxation=true) == :Optimal
  MethodError: no method matching setvartype!(::SCS.SCSMathProgModel, ::Array{Symbol,1})
  Closest candidates are:
    setvartype!(!Matched::GLPKMathProgInterface.GLPKInterfaceMIP.GLPKMathProgModelMIP, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/GLPKMathProgInterface/src/GLPKInterfaceMIP.jl:444
    setvartype!(!Matched::Clp.ClpMathProgSolverInterface.ClpMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Clp/src/ClpSolverInterface.jl:233
    setvartype!(!Matched::Cbc.CbcMathProgSolverInterface.CbcMathProgModel, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/Cbc/src/CbcSolverInterface.jl:137
    ...
  Stacktrace:
   [1] optimize!(::MathProgBase.SolverInterface.ConicToLPQPBridge) at /home/vagrant/.julia/v0.6/MathProgBase/src/SolverInterface/conic_to_lpqp.jl:233
   [2] #solve#111(::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::Function, ::JuMP.Model) at /home/vagrant/.julia/v0.6/JuMP/src/solvers.jl:173
   [3] (::JuMP.#kw##solve)(::Array{Any,1}, ::JuMP.#solve, ::JuMP.Model) at ./<missing>:0
   [4] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:898 [inlined]
   [5] macro expansion at ./test.jl:914 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] anonymous at ./<missing>:?
WARNING: Variable value not defined for x. Check that the model was properly solved.
with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)]): Test Failed
  Expression: isapprox(getvalue(x), 0.5, atol=TOL)
Stacktrace:
 [1] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:899 [inlined]
 [2] macro expansion at ./test.jl:914 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:0 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.6/JuMP/test/model.jl:530 [inlined]
 [6] macro expansion at ./test.jl:853 [inlined]
 [7] anonymous at ./<missing>:?
Test Summary:                                                                                                                 | Pass  Fail  Error  Total
Models                                                                                                                        |  416    70     32    518
  Check error cases                                                                                                           |    7                   7
  Warning on non-symbol variable names                                                                                        |                    No tests
  Performance warnings                                                                                                        |                    No tests
  Test printing a model                                                                                                       |   84                  84
  Quadratic MPS writer                                                                                                        |   21                  21
  Solving a MILP with Cbc.CbcMathProgSolverInterface.CbcSolver(Any[(:logLevel, 0)])                                           |   11                  11
  Solving a MILP with GLPKMathProgInterface.GLPKInterfaceMIP.GLPKSolverMIP(false, Any[])                                      |   11                  11
  Solving an LP (Min) with Clp.ClpMathProgSolverInterface.ClpSolver(Any[])                                                    |   19                  19
  Solving an LP (Min) with GLPKMathProgInterface.GLPKInterfaceLP.GLPKSolverLP(false, :Simplex, Any[])                         |   19                  19
  Solving an LP (Min) with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                                          |   19                  19
  Solving an LP (Min) with ECOS.ECOSSolver(Any[(:verbose, false)])                                                            |         14      5     19
  Solving an LP (Min) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)])                                                  |         14      5     19
  Test solving an LP (Max) with Clp.ClpMathProgSolverInterface.ClpSolver(Any[])                                               |   19                  19
  Test solving an LP (Max) with GLPKMathProgInterface.GLPKInterfaceLP.GLPKSolverLP(false, :Simplex, Any[])                    |   19                  19
  Test solving an LP (Max) with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                                     |   19                  19
  Test solving an LP (Max) with ECOS.ECOSSolver(Any[(:verbose, false)])                                                       |         14      5     19
  Test solving an LP (Max) with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)])                                             |         14      5     19
  Test binary variable handling with Cbc.CbcMathProgSolverInterface.CbcSolver(Any[(:logLevel, 0)])                            |    2                   2
  Test binary variable handling with GLPKMathProgInterface.GLPKInterfaceMIP.GLPKSolverMIP(false, Any[])                       |    2                   2
  Test model copying                                                                                                          |   30                  30
  Test extension copy                                                                                                         |    3                   3
  Test variable/model 'hygiene'                                                                                               |    5                   5
  Test NaN checking                                                                                                           |    3                   3
  Test column-wise modeling with Clp.ClpMathProgSolverInterface.ClpSolver(Any[])                                              |    9                   9
  Test column-wise modeling with GLPKMathProgInterface.GLPKInterfaceLP.GLPKSolverLP(false, :Simplex, Any[])                   |    9                   9
  Test column-wise modeling with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                                    |    9                   9
  Test column-wise modeling with ECOS.ECOSSolver(Any[(:verbose, false)])                                                      |          6      3      9
  Test column-wise modeling with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)])                                            |          6      3      9
  [model] Test all MPS paths                                                                                                  |                    No tests
  Test all LP paths                                                                                                           |    1                   1
  Test fixed variables don't leak through MPB with Clp.ClpMathProgSolverInterface.ClpSolver(Any[])                            |    5                   5
  Test fixed variables don't leak through MPB with GLPKMathProgInterface.GLPKInterfaceLP.GLPKSolverLP(false, :Simplex, Any[]) |    5                   5
  Test fixed variables don't leak through MPB with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                  |    5                   5
  Test fixed variables don't leak through MPB with ECOS.ECOSSolver(Any[(:verbose, false)])                                    |                 1      1
  Test fixed variables don't leak through MPB with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)])                          |                 1      1
  Fixed variables with Cbc.CbcMathProgSolverInterface.CbcSolver(Any[(:logLevel, 0)])                                          |    1                   1
  Fixed variables with GLPKMathProgInterface.GLPKInterfaceMIP.GLPKSolverMIP(false, Any[])                                     |    1                   1
  Test SOS constraints with Cbc.CbcMathProgSolverInterface.CbcSolver(Any[])                                                   |   11                  11
  Test vectorized model creation                                                                                              |    3                   3
  Test MIQP vectorization                                                                                                     |    2                   2
  Test setsolver                                                                                                              |   23            2     25
  [model] Setting solve hook                                                                                                  |    2                   2
  Setting print hook                                                                                                          |    1                   1
  Test linearindex                                                                                                            |    5                   5
  Test LinearConstraint from ConstraintRef                                                                                    |    1                   1
  Test getvalue on OneIndexedArrays                                                                                           |    2                   2
  Relaxation keyword argument to solve (w/ SOS constraints) with Cbc.CbcMathProgSolverInterface.CbcSolver(Any[])              |    8                   8
  Unrecognized keyword argument to solve                                                                                      |    1                   1
  Solve MIP relaxation with continuous solvers                                                                                |    8     2      2     12
    with Clp.ClpMathProgSolverInterface.ClpSolver(Any[])                                                                      |    2                   2
    with GLPKMathProgInterface.GLPKInterfaceLP.GLPKSolverLP(false, :Simplex, Any[])                                           |    2                   2
    with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                                                            |    2                   2
    with ECOS.ECOSSolver(Any[(:verbose, false)])                                                                              |          1      1      2
    with SCS.SCSSolver(Any[(:eps, 1.0e-6), (:verbose, 0)])                                                                    |          1      1      2
    with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                                                            |    2                   2
  Nonliteral exponents in @constraint                                                                                         |    4                   4
  sets used as indexsets in JuMPArray                                                                                         |    1                   1
  [model] .^ broadcasting                                                                                                     |    1                   1
  Quadratic constraints with zero coefficients with Ipopt.IpoptSolver(Any[(:print_level, 0)])                                 |    2                   2
  Constraints with non-Array AbstractArrays                                                                                   |    3                   3
ERROR: LoadError: LoadError: Some tests did not pass: 416 passed, 70 failed, 32 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/JuMP/test/model.jl, in expression starting on line 34
while loading /home/vagrant/.julia/v0.6/JuMP/test/runtests.jl, in expression starting on line 30
================================[ ERROR: JuMP ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/JuMP/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BinDeps v0.4.7
INFO: Removing Cbc v0.3.1
INFO: Removing Clp v0.3.0
INFO: Removing ECOS v0.7.0
INFO: Removing GLPK v0.4.2
INFO: Removing GLPKMathProgInterface v0.3.2
INFO: Removing Ipopt v0.2.6
INFO: Removing OffsetArrays v0.2.14
INFO: Removing SCS v0.3.1
INFO: Removing SHA v0.3.2
INFO: Removing URIParser v0.1.8
ERROR: JuMP had test errors

>>> End of log
