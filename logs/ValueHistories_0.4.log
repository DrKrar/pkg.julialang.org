>>> 'Pkg.add("ValueHistories")' log
INFO: Cloning cache of ValueHistories from git://github.com/JuliaML/ValueHistories.jl.git
INFO: Installing DataStructures v0.4.5
INFO: Installing ValueHistories v0.0.3
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ValueHistories
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ValueHistories")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (622.02734375 MB free)
Uptime: 29745.0 sec
Load Avg:  0.98779296875  0.9599609375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1284025 s       3383 s     120790 s    1197989 s         68 s
#2  3499 MHz     871106 s       2401 s     100143 s    1850287 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ValueHistories                0.0.3
2 additional packages:
 - Compat                        0.8.6
 - DataStructures                0.4.5
INFO: Testing ValueHistories
[->] tst_stat_uv_history.jl
   --> VectorUnivalueHistory: Basic functions
VectorUnivalueHistory
  * types: Int64, Float64
  * length: 100
   --> VectorUnivalueHistory: Storing arbitrary types
VectorUnivalueHistory
  * types: UInt8, ASCIIString
  * length: 100
   --> QueueUnivalueHistory: Basic functions
QueueUnivalueHistory
    types: Int64, Float64
    length: 100
   --> QueueUnivalueHistory: Storing arbitrary types
QueueUnivalueHistory
    types: UInt8, ASCIIString
    length: 100
[OK] tst_stat_uv_history.jl
====================================================================
[->] tst_dyn_mv_history.jl
   --> DynMultivalueHistory: Basic functions
DynMultivalueHistory{ValueHistories.QueueUnivalueHistory{I,V}}
  :myf =>: 56 elements {Int64,Int64}
  :myint =>: 5 elements {Int64,Int64}
   --> DynMultivalueHistory: Storing arbitrary types
[OK] tst_dyn_mv_history.jl
====================================================================
[->] bm_history.jl
   --> Baseline: 100 loops that accumulates a Float64
  0.003776 seconds (1.54 k allocations: 74.259 KB)
  0.000040 seconds (305 allocations: 6.438 KB)
   --> VectorUnivalueHistory: 100 loops tracking accumulator of accumulator as Float64
  0.005675 seconds (1.52 k allocations: 71.026 KB)
  0.000341 seconds (413 allocations: 12.219 KB)
   --> VectorUnivalueHistory: Converting result into arrays
  0.000015 seconds (3 allocations: 96 bytes)
  0.000109 seconds (3 allocations: 96 bytes)
   --> QueueUnivalueHistory: 100 loops tracking accumulator of accumulator as Float64
  0.000189 seconds (403 allocations: 7.938 KB)
  0.000085 seconds (401 allocations: 7.844 KB)
   --> QueueUnivalueHistory: Converting result into arrays
  0.000360 seconds (908 allocations: 25.344 KB)
  0.000431 seconds (908 allocations: 25.344 KB)
   --> DynMultivalueHistory: 100 loops tracking accumulator as Float64 and String
  0.337336 seconds (496.48 k allocations: 19.865 MB, 1.65% gc time)
  0.000234 seconds (1.53 k allocations: 57.438 KB)
   --> DynMultivalueHistory: Converting result into arrays
  0.032118 seconds (14.86 k allocations: 689.153 KB)
  0.000183 seconds (411 allocations: 14.563 KB)
[OK] bm_history.jl
====================================================================
INFO: ValueHistories tests passed

>>> End of log
