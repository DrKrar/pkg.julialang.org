>>> 'Pkg.add("GeneralizedMetropolisHastings")' log
INFO: Cloning cache of GeneralizedMetropolisHastings from https://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.12
INFO: Installing Colors v0.6.9
INFO: Installing Conda v0.4.0
INFO: Installing DataStructures v0.4.6
INFO: Installing DiffEqBase v0.4.1
INFO: Installing Distributions v0.11.1
INFO: Installing FileIO v0.2.1
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing GeneralizedMetropolisHastings v0.1.1
INFO: Installing HDF5 v0.7.2
INFO: Installing IJulia v1.3.3
INFO: Installing JLD v0.6.8
INFO: Installing LaTeXStrings v0.2.0
INFO: Installing LegacyStrings v0.1.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Nettle v0.2.4
INFO: Installing PDMats v0.5.2
INFO: Installing Parameters v0.5.0
INFO: Installing PyCall v1.7.2
INFO: Installing PyPlot v2.2.4
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.1.2
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.5
INFO: Installing SHA v0.3.0
INFO: Installing SimpleTraits v0.2.0
INFO: Installing StatsBase v0.11.1
INFO: Installing StatsFuns v0.3.1
INFO: Installing Sundials v0.6.0
INFO: Installing URIParser v0.1.6
INFO: Installing ZMQ v0.4.0
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
INFO: Building Nettle
INFO: Building ZMQ
INFO: Building IJulia
INFO: Installing Jupyter via the Conda package.
Fetching package metadata .........
Solving package specifications: ..........

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
jupyter                   1.0.0                    py27_3  
INFO: Found Jupyter version 4.2.1: /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/jupyter
Writing IJulia kernelspec to /home/vagrant/.julia/v0.5/IJulia/deps/julia-0.5/kernel.json ...
Installing julia kernelspec julia-0.5
[InstallKernelSpec] Removing existing kernelspec in /home/vagrant/.local/share/jupyter/kernels/julia-0.5
[InstallKernelSpec] Installed kernelspec julia-0.5 in /home/vagrant/.local/share/jupyter/kernels/julia-0.5
INFO: Building PyCall
INFO: No system-wide Python was found; got the following error:
could not spawn `'' -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('VERSION'))"`: no such file or directory (ENOENT)
using the Python distribution in the Conda package
Fetching package metadata .........
Solving package specifications: ..........

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.11.2                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: Building Sundials
WARNING: Base.WORD_SIZE is deprecated.
  likely near /home/vagrant/.julia/v0.5/Sundials/deps/build.jl:21
INFO: Building HDF5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of GeneralizedMetropolisHastings
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("GeneralizedMetropolisHastings")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1701.41015625 MB free)
Uptime: 29864.0 sec
Load Avg:  0.98583984375  1.06640625  1.04931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz    1781058 s       6006 s     157103 s     671428 s         81 s
#2  3504 MHz     638532 s        838 s      92652 s    2163955 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - GeneralizedMetropolisHastings 0.1.1
 - JSON                          0.8.0
35 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Calculus                      0.1.15
 - ColorTypes                    0.2.12
 - Colors                        0.6.9
 - Compat                        0.10.0
 - Conda                         0.4.0
 - DataStructures                0.4.6
 - DiffEqBase                    0.4.1
 - Distributions                 0.11.1
 - FileIO                        0.2.1
 - FixedPointNumbers             0.2.1
 - HDF5                          0.7.2
 - IJulia                        1.3.3
 - JLD                           0.6.8
 - LaTeXStrings                  0.2.0
 - LegacyStrings                 0.1.1
 - MacroTools                    0.3.4
 - Nettle                        0.2.4
 - PDMats                        0.5.2
 - Parameters                    0.5.0
 - PyCall                        1.7.2
 - PyPlot                        2.2.4
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.1.2
 - Reexport                      0.0.3
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - SimpleTraits                  0.2.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - Sundials                      0.6.0
 - URIParser                     0.1.6
 - ZMQ                           0.4.0
INFO: Testing GeneralizedMetropolisHastings

===========================================
+++++++++++++++++++++++++++++++++++++++++++
Running all tests with 1 process
+++++++++++++++++++++++++++++++++++++++++++
===========================================

==================
Running all tests:
==================
  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit.jl *
===================
Running unit tests:
===================
  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/policies.jl *
====================
Test show() function
MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64

MHRuntimePolicy with traits:
  runner = standard
  initialize = default
  propose = indicator
  indicator = cyclical
  jobsegments = none
  chain = gradient
  store = all
  sampletype = Int64
  calculationtype = Float32

End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/parameters.jl *
====================
Test show() function

ParameterDefault
 key: d
 default: 3.0
ParameterDefault
 key: param
 default: 3.0
ParameterUnivariate
 key: p
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 3.0
ParameterUnivariate
 key: p
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 5.5
ParameterUnivariate
 key: p
 prior: Distributions.DiscreteUniform(a=0, b=9)
 default: 4
Array{AbstractParameter} with
[1] ParameterUnivariate
 key: param
 prior: Distributions.Uniform{Float64}(a=1.0, b=3.0)
 default: 2.0
[2] ParameterDefault
 key: param
 default: 2.0
[3] ParameterUnivariate
 key: param
 prior: Distributions.DiscreteUniform(a=1, b=3)
 default: 2
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: param
 prior: Distributions.Uniform{Float64}(a=1.0, b=3.0)
 default: 2.0
[2] ParameterUnivariate
 key: param
 prior: Distributions.DiscreteUniform(a=1, b=3)
 default: 2
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Uniform{Float64}(a=0.0, b=6.0)
 default: 3.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=5.0, b=10.0)
 default: 7.5
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
[3] ParameterUnivariate
 key: d1
 prior: Distributions.Uniform{Float64}(a=0.0, b=6.0)
 default: 3.0
[4] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=5.0, b=10.0)
 default: 7.5
Array{AbstractParameter} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
[3] ParameterDefault
 key: param
 default: 3.0
[4] ParameterDefault
 key: param
 default: 7.5

End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/distributions.jl *
Testing multivariate normal copying behaviour
Testing multivariate lognormal copying behaviour
Testing multivariate normal copying behaviour
Testing multivariate normal (zero mean) copying behaviour

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/data.jl *

====================
Test show() function
DataArray with 2 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
DataFunction with 2 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: #f1
 args:(0.0:0.1:1.0,6.283185307179586)
DataFunction with 3 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: #f2!
 args:(1.0,0.1)
DataFunction with 3 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: Base.Random.#rand!
 args: Tuple{}
Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/samples.jl *

====================
Test show() function
BaseSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
GradientSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,2}
 gradlogprior: Array{Float64,2}
TensorSample with 2 parameters and 3 samples
 values: Array{Float32,2}
 loglikelihood: Array{Float32,1}
 logprior: Array{Float32,1}
 gradloglikelihood: Array{Float32,2}
 gradlogprior: Array{Float32,2}
 tensorloglikelihood: Array{Float32,3}
 tensorlogprior: Array{Float32,3}
TangentTensorSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,2}
 gradlogprior: Array{Float64,2}
 tensorloglikelihood: Array{Float64,3}
 tensorlogprior: Array{Float64,3}
 tangentvectors: Array{Float64,3}
BaseSample with 2 parameters and 1 sample
 values: Array{Int64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
GradientSample with 2 parameters and 1 sample
 values: Array{Float32,1}
 loglikelihood: Array{Float32,1}
 logprior: Array{Float32,1}
 gradloglikelihood: Array{Float32,1}
 gradlogprior: Array{Float32,1}
TensorSample with 2 parameters and 1 sample
 values: Array{Float64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,1}
 gradlogprior: Array{Float64,1}
 tensorloglikelihood: Array{Float64,2}
 tensorlogprior: Array{Float64,2}
TangentTensorSample with 2 parameters and 1 sample
 values: Array{Float64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,1}
 gradlogprior: Array{Float64,1}
 tensorloglikelihood: Array{Float64,2}
 tensorlogprior: Array{Float64,2}
 tangentvectors: Array{Float64,2}
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/proposals.jl *
======================
Tests of NormalDensity
======================
Testing NormalDensity with Float64
Testing NormalDensity with Float32
=========================
Tests of LogNormalDensity
=========================
====================================
Tests of CompoundDistributionWrapper
====================================
(:uniform,())
(:laplace,())
(:triangular,())
(:bactrian,(:normal,0.95))
(:bactrian,(:laplace,0.9))

====================
Test show() function
====================
DistributionWrapper with fields:
  distribution: Distributions.MvNormal{Float32,PDMats.PDMat{Float32,Array{Float32,2}},Array{Float32,1}}(
dim: 2
μ: Float32[3.0,3.0]
Σ: Float32[3.0 0.0; 0.0 3.0]
)

DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [1.09861,1.09861]
Σ: [3.0 0.0; 0.0 3.0]
)

====================
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/samplers.jl *
Test show() function for normal
Scalable Metropolis-Hastings Sampler with fields:
  Symbol[:density,:initialscalefactor,:scaleparameters,:extraargs]
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.1,0.2]
Σ: [0.04 0.0; 0.0 0.04]
)


Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.1,0.2]
Σ: [0.0025 0.0; 0.0 0.0025]
)


======================================
Test show() function for lognormal
Scalable Metropolis-Hastings Sampler with fields:
  Symbol[:density,:initialscalefactor,:scaleparameters,:extraargs]
Metropolis-Hastings SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Metropolis-Hastings SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [-2.30259,-1.60944]
Σ: [0.04 0.0; 0.0 0.04]
)


Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [-2.30259,-1.60944]
Σ: [0.0025 0.0; 0.0 0.0025]
)


======================================
Test show() function for adaptive
Adaptive Normal Metropolis Sampler with fields:
  Symbol[:initialscalefactor,:nparas]
Adaptive Normal Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance,:runningstate]
Adaptive Normal Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance,:runningstate]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 2
μ: [0.0,0.0]
Σ: [1.185 2.35; 2.35 4.71]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 5
  runningmean: [2.1,4.2]
  runningcov: [1.175 2.35; 2.35 4.7]
  scale: 0.2
)
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 2
μ: [0.0,0.0]
Σ: [1.185 2.35; 2.35 4.71]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}()
======================================
Test show() function for smmala standard full
Simplified mMALA Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:tr]
Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.989808,1.00981]
Σ: [0.0269231 -0.0230769; -0.0230769 0.0269231]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.989808,1.00981]
Σ: [0.0269231 -0.0230769; -0.0230769 0.0269231]
)

 ["scale"]: 0.1
======================================
Test show() function for smmala tr full
Trust Region Simplified mMALA Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:tr]
Trust Region Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Trust Region Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
======================================
Test show() function for smmala tr tangent
Trust Region Simplified mMALA with Tangent Tensor Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:ntangents]
Trust Region Simplified mMALA with Tangent Tensor SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Trust Region Simplified mMALA with Tangent Tensor SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
======================================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/indicators.jl *

====================
Test show() function
====================
IndicatorStationary with 1 proposal and 1 sample
 Fields: :stationary, :samples
IndicatorStationary with 4 proposals and 2 samples
 Fields: :stationary, :samples
IndicatorStationary with 10 proposals and 10 samples
 Fields: :stationary, :samples
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/models.jl *

====================
Test show() function
====================
TargetModel Test
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: targetsin
Additional target function arguments: 
(linspace(0.0,10.0,100),)
TargetModel Test!
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: targetsin!
Additional target function arguments: 
(linspace(0.0,10.0,100),)
ODEModel Test
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
ode: odesin
initial: [0.0]
numstates: 1
observed: [1]
abstol: 1.0e-6
reltol: 1.0e-6
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/tuners.jl *
A warning should be printed below this line
WARNING: TunerState is full. Additional tuning steps cannot be stored

====================
Test show() function
====================
MonitorTuner: period = 10, verbose = true
ScaleTuner: period = 4, verbose = true ,targetrate = 0.7
            score = GeneralizedMetropolisHastings.tunelogistic, scoreargs = (7.0,)
ScaleTuner: period = 4, verbose = true ,targetrate = 0.5
            score = GeneralizedMetropolisHastings.tuneerf, scoreargs = (3.0,)
MonitorTunerState: 
 accepted = [8,3,0,0,0,0,0,0,0,0]
 proposed = [10,5,0,0,0,0,0,0,0,0]
 acceptance rate = [0.8,0.6,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 15
ScaleTunerState: 
 accepted = [25,4,0,0,0,0,0,0]
 proposed = [40,4,0,0,0,0,0,0]
 scalefactor = [0.934,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
 acceptance rate = [0.625,1.0,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 44
ScaleTunerState: 
 accepted = [11,0,0,0,0,0,0,0,0]
 proposed = [20,10,0,0,0,0,0,0,0]
 scalefactor = Float32[1.081,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
 acceptance rate = [0.55,0.0,NaN,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 30
  accepted/proposed = 3/5
  acceptance rate = 0.6
  accepted/proposed = 0/10
  acceptance rate = 0.0
  scalefactor = 0.0
  cummulative scaling = 0.0
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/chains.jl *
Two warnings should be printed below this line
WARNING: Chain is full. Additional results cannot be stored
WARNING: Chain is full. Additional results cannot be stored

====================
Test show() function
ChainStandard with numparas = 1 and numsamples = 10
Samples proposed = 3, samples accepted = 3, acceptance rate = 1.0
Total runtime = 0.0
Additional fields: :values, :loglikelihood
ChainStandard with numparas = 3 and numsamples = 4
Samples proposed = 4, samples accepted = 3, acceptance rate = 0.75
Total runtime = 0.0
Additional fields: :values, :loglikelihood
ChainGradient with numparas = 2 and numsamples = 3
Samples proposed = 3, samples accepted = 1, acceptance rate = 0.3333333333333333
Total runtime = 0.0
Additional fields: :values, :loglikelihood, :gradloglikelihood
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/jobsegments.jl *
==================
Testing GMHSegment
==================

====================
Test show() function
GMHSegment with: 
model:
TargetModel JobSegmentsTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #13
Additional target function arguments: 
(linspace(0.0,10.0,100),)

samplerstate:
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]

End  show() function
====================

======================
Testing RemoteSegments
======================

====================
Test show() function
RemoteSegments with 2 segments and 3 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
Array of sampler state variables:
Sampler state variables for [1]:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.0]
Σ: [0.0025]
)


Sampler state variables for [2]:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.0]
Σ: [0.0025]
)



End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/runners.jl *

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/mhrunner.jl *

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/smhrunner.jl *
============================
Testing of iterate! function
============================
=========================
Testing of tune! function
=========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 0/1
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
========================
Testing of run! function
========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 1/1
  acceptance rate = 1.0
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
  accepted/proposed = 1/2
  acceptance rate = 0.5
  scalefactor = 1.0
  cummulative scaling = 1.0
Iteration 2/4
Iteration 4/4
==============================
Testing of SMHRunner completed
==============================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl *
++++++++++++++++++++++++++++++++
Testing GMHRunner with 1 processes
++++++++++++++++++++++++++++++++
Testing GMHRunner with 2 proposals and 1 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 1 segment and 2 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.93155]
Σ: [0.01]
)


==================================
Results of the run!
[2.889 2.889 2.904 2.904 2.92 2.92 2.932 2.932]
[-852.194,-852.194,-610.045,-610.045,-378.346,-378.346,-245.711,-245.711]
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.93155]
Σ: [0.01]
)


==================================
Results of the run!
[2.877 2.877 2.877 2.877 2.877 2.889 2.889 2.904 2.904 2.92 2.92 2.932 2.932]
[-1074.07,-1074.07,-1074.07,-1074.07,-1074.07,-852.194,-852.194,-610.045,-610.045,-378.346,-378.346,-245.711,-245.711]
====================
Test show() function
Generalized Metropolis-Hastings runner with:
 numburnin: 2
 numiterations: 4
 numproposals: 2
 numindicatorsamples: 2
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


End  show() function
====================

==============================
Testing of GMHRunner completed
==============================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/performance.jl *
==========================
Running performance tests:
==========================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/functionality.jl *
============================
Running functionality tests:
============================
  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/functionality/sintest1.jl *
TargetModel SineTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=2.0, b=4.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #23
Additional target function arguments: 
(linspace(0.0,10.0,100),)
Generalized Metropolis-Hastings runner with:
 numburnin: 100
 numiterations: 100
 numproposals: 30
 numindicatorsamples: 30
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


RemoteSegments with 1 segment and 30 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 176/300
  acceptance rate = 0.587
  scalefactor = 1.134
  cummulative scaling = 1.134
  accepted/proposed = 262/300
  acceptance rate = 0.873
  scalefactor = 1.374
  cummulative scaling = 1.558
  accepted/proposed = 217/300
  acceptance rate = 0.723
  scalefactor = 1.287
  cummulative scaling = 2.006
  accepted/proposed = 168/300
  acceptance rate = 0.56
  scalefactor = 1.096
  cummulative scaling = 2.198
  accepted/proposed = 225/300
  acceptance rate = 0.75
  scalefactor = 1.308
  cummulative scaling = 2.875
  accepted/proposed = 104/300
  acceptance rate = 0.347
  scalefactor = 0.87
  cummulative scaling = 2.503
  accepted/proposed = 163/300
  acceptance rate = 0.543
  scalefactor = 1.07
  cummulative scaling = 2.679
  accepted/proposed = 176/300
  acceptance rate = 0.587
  scalefactor = 1.134
  cummulative scaling = 3.039
  accepted/proposed = 103/300
  acceptance rate = 0.343
  scalefactor = 0.868
  cummulative scaling = 2.637
  accepted/proposed = 120/300
  acceptance rate = 0.4
  scalefactor = 0.914
  cummulative scaling = 2.411
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77578]
Σ: [0.0581265]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77578]
Σ: [0.0581265]
)


==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77605]
Σ: [0.0581265]
)


==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1745, acceptance rate = 0.5816666666666667
Total runtime = 0.271261475
Additional fields: :values, :loglikelihood
RemoteSegments with 1 segment and 30 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.0001]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 0
  runningmean: [0.0]
  runningcov: [0.0]
  scale: 0.01
)
==================================
  accepted/proposed = 43/300
  acceptance rate = 0.143
  accepted/proposed = 84/300
  acceptance rate = 0.28
  accepted/proposed = 69/300
  acceptance rate = 0.23
  accepted/proposed = 135/300
  acceptance rate = 0.45
  accepted/proposed = 101/300
  acceptance rate = 0.337
  accepted/proposed = 115/300
  acceptance rate = 0.383
  accepted/proposed = 152/300
  acceptance rate = 0.507
  accepted/proposed = 145/300
  acceptance rate = 0.483
  accepted/proposed = 131/300
  acceptance rate = 0.437
  accepted/proposed = 147/300
  acceptance rate = 0.49
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00241616]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [2.99518]
  runningcov: [0.00231616]
  scale: 0.01
)
==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00241616]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [2.99518]
  runningcov: [0.00231616]
  scale: 0.01
)
==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00126845]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 201
  runningmean: [2.99761]
  runningcov: [0.00116845]
  scale: 0.01
)
==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1471, acceptance rate = 0.49033333333333334
Total runtime = 0.678205001
Additional fields: :values, :loglikelihood



================================================
++++++++++++++++++++++++++++++++++++++++++++++++
Running the multiprocess code tests with 3 processes
++++++++++++++++++++++++++++++++++++++++++++++++
================================================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/jobsegments.jl *
==================
Testing GMHSegment
==================

====================
Test show() function
GMHSegment with: 
model:
TargetModel JobSegmentsTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #25
Additional target function arguments: 
(linspace(0.0,10.0,100),)

samplerstate:
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]

End  show() function
====================

======================
Testing RemoteSegments
======================

====================
Test show() function
RemoteSegments with 2 segments and 3 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
End  show() function
====================


  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/runners.jl *

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/mhrunner.jl *

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/smhrunner.jl *
============================
Testing of iterate! function
============================
=========================
Testing of tune! function
=========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 0/1
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
========================
Testing of run! function
========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 1/1
  acceptance rate = 1.0
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
  accepted/proposed = 1/2
  acceptance rate = 0.5
  scalefactor = 1.0
  cummulative scaling = 1.0
Iteration 2/4
Iteration 4/4
==============================
Testing of SMHRunner completed
==============================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl *
++++++++++++++++++++++++++++++++
Testing GMHRunner with 3 processes
++++++++++++++++++++++++++++++++
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 1/2
  acceptance rate = 0.5
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.88035]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.88035]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.90785]
Σ: [0.01]
)


==================================
Results of the run!
[2.88 2.88 2.894 2.894 2.901 2.901 2.908 2.908]
[-1006.07,-1006.07,-771.005,-771.005,-656.552,-656.552,-552.512,-552.512]
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 1/2
  acceptance rate = 0.5
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.91714]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.91714]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.96567]
Σ: [0.01]
)


==================================
Results of the run!
[2.877 2.888 2.888 2.917 2.917 2.93 2.93 2.942 2.942 2.961 2.961 2.966 2.966]
[-1074.07,-873.23,-873.23,-422.265,-422.265,-264.338,-264.338,-139.444,-139.444,15.656,15.656,41.714,41.714]
====================
Test show() function
Generalized Metropolis-Hastings runner with:
 numburnin: 2
 numiterations: 4
 numproposals: 2
 numindicatorsamples: 2
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


End  show() function
====================

==============================
Testing of GMHRunner completed
==============================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/unit/multiprocess.jl *
===============================================
Multi-process tests with 3 processes
===============================================
Local process: 1
Remote process: 2
========================================
Multi-process tests of random generators
========================================
==============================================
Multi-process tests of sampler state functions
==============================================
================================================
Multi-process tests of remote segement functions
================================================
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.40302,3.70095]
Indicator state acceptance: [606.505]
Segment state acceptance: [1262.9,-23.4339,2681.36,-1090.33,2187.39]
Stationary indicator: [0.0,0.0,1.0,0.0,2.98408e-215,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [1262.9,-23.4339,2681.36,-1090.33,2187.39]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.38743,3.83311]
    loglikelihood: Array{Float64}((1,)) [-7744.91]
    logprior: Array{Float64}((1,)) [-0.843453]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.38743,3.83311]
Indicator state proposals new: [3.40302,3.70095]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.41977,3.71257]
Indicator state acceptance: [745.584]
Segment state acceptance: [345.174,-1015.55,1338.23,-265.657,40.4879]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [345.174,-1015.55,1338.23,-265.657,40.4879]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.33558,3.74709]
    loglikelihood: Array{Float64}((1,)) [-8948.98]
    logprior: Array{Float64}((1,)) [-0.826163]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.33558,3.74709]
Indicator state proposals new: [3.41977,3.71257]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.2498,3.71547]
Indicator state acceptance: [3121.85]
Segment state acceptance: [2751.81,2244.67,-874.558,929.84,2589.15]
Stationary indicator: [1.0,5.65439e-221,0.0,0.0,2.28354e-71,0.0]
Indicator samples: [6,1,1,1,1,1]
Remote segment acceptances: [2751.81,2244.67,-874.558,929.84,2589.15]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.07051,3.67392]
    loglikelihood: Array{Float64}((1,)) [-5159.95]
    logprior: Array{Float64}((1,)) [-0.0102498]
Remote segment prop2collected: 
Dict(1=>(1,1))
Indicator state from new: [3.07051,3.67392]
Indicator state proposals new: [3.2498,3.71547]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.56375,3.55836]
Indicator state acceptance: [-193.085]
Segment state acceptance: [195.474,146.173,282.503,406.5,1288.15]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [195.474,146.173,282.503,406.5,1288.15]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.65554,3.64155]
    loglikelihood: Array{Float64}((1,)) [-9932.95]
    logprior: Array{Float64}((1,)) [-5.59674]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.65554,3.64155]
Indicator state proposals new: [3.56375,3.55836]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.49048,3.642]
Indicator state acceptance: [-158.946]
Segment state acceptance: [900.22,1714.14,552.69,1476.4,2276.89]
Stationary indicator: [0.0,3.96243e-245,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [900.22,1714.14,552.69,1476.4,2276.89]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.45165,3.78417]
    loglikelihood: Array{Float64}((1,)) [-8913.92]
    logprior: Array{Float64}((1,)) [-1.75115]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.45165,3.78417]
Indicator state proposals new: [3.49048,3.642]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.32882,3.72235]
Indicator state acceptance: [1719.15]
Segment state acceptance: [-133.67,-2022.25,3082.01,345.197,1146.35]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [-133.67,-2022.25,3082.01,345.197,1146.35]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.23282,3.78248]
    loglikelihood: Array{Float64}((1,)) [-6232.57]
    logprior: Array{Float64}((1,)) [0.111984]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.23282,3.78248]
Indicator state proposals new: [3.32882,3.72235]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.30636,3.55961]
Indicator state acceptance: [341.281]
Segment state acceptance: [482.385,1217.05,-1109.43,666.561,311.1]
Stationary indicator: [8.7005e-320,1.0,0.0,8.44205e-240,0.0,0.0]
Indicator samples: [6,2,2,2,2,2]
Remote segment acceptances: [482.385,1217.05,-1109.43,666.561,311.1]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.30967,3.69462]
    loglikelihood: Array{Float64}((1,)) [-9474.3]
    logprior: Array{Float64}((1,)) [-0.983399]
Remote segment prop2collected: 
Dict(2=>(1,1))
Indicator state from new: [3.30967,3.69462]
Indicator state proposals new: [3.30636,3.55961]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.41459,3.56726]
Indicator state acceptance: [-799.506]
Segment state acceptance: [2235.42,486.827,1065.51,945.56,3533.39]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [2235.42,486.827,1065.51,945.56,3533.39]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.64709,3.74864]
    loglikelihood: Array{Float64}((1,)) [-8295.08]
    logprior: Array{Float64}((1,)) [-4.64285]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.64709,3.74864]
Indicator state proposals new: [3.41459,3.56726]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.30641,3.75229]
Indicator state acceptance: [2656.67]
Segment state acceptance: [1062.76,-2598.28,-2930.79,3010.59,5369.58]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [1062.76,-2598.28,-2930.79,3010.59,5369.58]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.18346,3.89039]
    loglikelihood: Array{Float64}((1,)) [-3008.18]
    logprior: Array{Float64}((1,)) [0.810124]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.18346,3.89039]
Indicator state proposals new: [3.30641,3.75229]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.494,3.58598]
Indicator state acceptance: [-599.937]
Segment state acceptance: [1000.87,817.428,1823.91,-122.633,913.332]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [1000.87,817.428,1823.91,-122.633,913.332]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.54675,3.71119]
    loglikelihood: Array{Float64}((1,)) [-9806.25]
    logprior: Array{Float64}((1,)) [-3.3983]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.54675,3.71119]
Indicator state proposals new: [3.494,3.58598]
==========================
Multi-process tests passed
==========================

  * /home/vagrant/.julia/v0.5/GeneralizedMetropolisHastings/test/functionality/sintest1.jl *
TargetModel SineTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=2.0, b=4.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #37
Additional target function arguments: 
(linspace(0.0,10.0,100),)
Generalized Metropolis-Hastings runner with:
 numburnin: 100
 numiterations: 100
 numproposals: 30
 numindicatorsamples: 30
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


RemoteSegments with 2 segments and 15 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 63/300
  acceptance rate = 0.21
  scalefactor = 0.781
  cummulative scaling = 0.781
  accepted/proposed = 274/300
  acceptance rate = 0.913
  scalefactor = 1.386
  cummulative scaling = 1.082
  accepted/proposed = 250/300
  acceptance rate = 0.833
  scalefactor = 1.357
  cummulative scaling = 1.468
  accepted/proposed = 226/300
  acceptance rate = 0.753
  scalefactor = 1.311
  cummulative scaling = 1.924
  accepted/proposed = 191/300
  acceptance rate = 0.637
  scalefactor = 1.199
  cummulative scaling = 2.308
  accepted/proposed = 190/300
  acceptance rate = 0.633
  scalefactor = 1.195
  cummulative scaling = 2.758
  accepted/proposed = 82/300
  acceptance rate = 0.273
  scalefactor = 0.817
  cummulative scaling = 2.254
  accepted/proposed = 160/300
  acceptance rate = 0.533
  scalefactor = 1.055
  cummulative scaling = 2.378
  accepted/proposed = 148/300
  acceptance rate = 0.493
  scalefactor = 0.994
  cummulative scaling = 2.364
  accepted/proposed = 163/300
  acceptance rate = 0.543
  scalefactor = 1.07
  cummulative scaling = 2.531
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.247]
Σ: [0.0640516]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.247]
Σ: [0.0640516]
)


==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.24756]
Σ: [0.0640516]
)


==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1446, acceptance rate = 0.482
Total runtime = 1.682374784
Additional fields: :values, :loglikelihood
RemoteSegments with 2 segments and 15 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.0001]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 0
  runningmean: [0.0]
  runningcov: [0.0]
  scale: 0.01
)
==================================
  accepted/proposed = 49/300
  acceptance rate = 0.163
  accepted/proposed = 57/300
  acceptance rate = 0.19
  accepted/proposed = 137/300
  acceptance rate = 0.457
  accepted/proposed = 51/300
  acceptance rate = 0.17
  accepted/proposed = 105/300
  acceptance rate = 0.35
  accepted/proposed = 105/300
  acceptance rate = 0.35
  accepted/proposed = 171/300
  acceptance rate = 0.57
  accepted/proposed = 102/300
  acceptance rate = 0.34
  accepted/proposed = 58/300
  acceptance rate = 0.193
  accepted/proposed = 144/300
  acceptance rate = 0.48
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00325129]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [3.00706]
  runningcov: [0.00315129]
  scale: 0.01
)
==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00325129]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [3.00706]
  runningcov: [0.00315129]
  scale: 0.01
)
==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00169058]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 201
  runningmean: [3.00352]
  runningcov: [0.00159058]
  scale: 0.01
)
==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1522, acceptance rate = 0.5073333333333333
Total runtime = 2.541919114
Additional fields: :values, :loglikelihood

INFO: GeneralizedMetropolisHastings tests passed

>>> End of log
