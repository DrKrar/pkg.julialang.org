>>> 'Pkg.add("BenchmarkTools")' log
INFO: Cloning cache of BenchmarkTools from https://github.com/JuliaCI/BenchmarkTools.jl.git
INFO: Installing BenchmarkTools v0.0.6
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing FileIO v0.2.0
INFO: Installing HDF5 v0.7.0
INFO: Installing JLD v0.6.6
INFO: Installing LegacyStrings v0.1.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building Blosc
INFO: Building HDF5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/HDF5/deps/build.jl, in expression starting on line 27
INFO: Package database updated

>>> 'Pkg.test("BenchmarkTools")' log
Julia Version 0.6.0-dev.1321
Commit a4612cc (2016-11-27 23:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (472.11328125 MB free)
Uptime: 5086.0 sec
Load Avg:  0.94091796875  1.08935546875  1.04296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz     241260 s       4568 s      39209 s     175378 s          6 s
#2  3511 MHz     109528 s       1817 s      22633 s     359431 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - BenchmarkTools                0.0.6
 - JSON                          0.8.0
9 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Compat                        0.9.4
 - FileIO                        0.2.0
 - HDF5                          0.7.0
 - JLD                           0.6.6
 - LegacyStrings                 0.1.1
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing BenchmarkTools
Testing Parameters...done (took 0.906365026 seconds)
Testing Trial/TrialEstimate/TrialRatio/TrialJudgement...done (took 1.514130092 seconds)
Testing BenchmarkGroup...done (took 6.482129616 seconds)
Testing execution...(1/3) tuning 10...
done (took 0.193131296 seconds)
(2/3) tuning 5...
done (took 0.246166467 seconds)
(3/3) tuning 20...
done (took 0.254189762 seconds)
(1/3) tuning "sum"...
  (1/3) tuning 10...
  done (took 0.712122285 seconds)
  (2/3) tuning 5...
  done (took 0.537274357 seconds)
  (3/3) tuning 20...
  done (took 0.676091313 seconds)
done (took 2.287600864 seconds)
(2/3) tuning "special"...
  (1/5) tuning "comprehension"...
  done (took 5.470727307 seconds)
  (2/5) tuning "macro"...
  done (took 0.692843476 seconds)
  (3/5) tuning "kwargs"...
  done (took 5.495444611 seconds)
  (4/5) tuning "block"...
  done (took 0.498396816 seconds)
  (5/5) tuning "nothing"...
  done (took 0.417029952 seconds)
done (took 12.991140745 seconds)
(3/3) tuning "sin"...
  (1/3) tuning 10...
  done (took 0.028744838 seconds)
  (2/3) tuning 5...
  done (took 0.02934084 seconds)
  (3/3) tuning 20...
  done (took 0.028399096 seconds)
done (took 0.50400202 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.484831945 seconds)
  (2/3) benchmarking 5...
  done (took 0.759270848 seconds)
  (3/3) benchmarking 20...
  done (took 3.387675894 seconds)
done (took 6.021304952 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 1.710137057 seconds)
  (2/5) benchmarking "macro"...
  done (took 3.8080378 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 2.906022749 seconds)
  (4/5) benchmarking "block"...
  done (took 1.261335051 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.427622412 seconds)
done (took 10.398422437 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.188470576 seconds)
  (2/3) benchmarking 5...
  done (took 0.179825755 seconds)
  (3/3) benchmarking 20...
  done (took 0.184049348 seconds)
done (took 0.92763864 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.015230757 seconds)
  (2/3) benchmarking 5...
  done (took 0.308334311 seconds)
  (3/3) benchmarking 20...
  done (took 1.00656442 seconds)
done (took 2.644709905 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 0.860124986 seconds)
  (2/5) benchmarking "macro"...
  done (took 1.009603776 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 1.010600457 seconds)
  (4/5) benchmarking "block"...
  done (took 0.507069912 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.067241043 seconds)
done (took 3.795067491 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.185763272 seconds)
  (2/3) benchmarking 5...
  done (took 0.174698192 seconds)
  (3/3) benchmarking 20...
  done (took 0.184014715 seconds)
done (took 0.827965977 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 0.017354385 seconds)
  (2/3) benchmarking 5...
  done (took 0.011891837 seconds)
  (3/3) benchmarking 20...
  done (took 0.011688826 seconds)
done (took 0.323054364 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 0.010650094 seconds)
  (2/5) benchmarking "macro"...
  done (took 0.01089083 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 0.011574 seconds)
  (4/5) benchmarking "block"...
  done (took 0.011709802 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.010349711 seconds)
done (took 0.337178755 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.013765278 seconds)
  (2/3) benchmarking 5...
  done (took 0.011323961 seconds)
  (3/3) benchmarking 20...
  done (took 0.011820812 seconds)
done (took 0.405201705 seconds)
(1/3) benchmarking 10...
done (took 0.187115481 seconds)
(2/3) benchmarking 5...
done (took 0.260997621 seconds)
(3/3) benchmarking 20...
done (took 0.257651683 seconds)
(1/3) benchmarking 10...
done (took 0.189346091 seconds)
(2/3) benchmarking 5...
done (took 0.244668845 seconds)
(3/3) benchmarking 20...
done (took 0.258597015 seconds)
(1/3) benchmarking 10...
done (took 0.010512591 seconds)
(2/3) benchmarking 5...
done (took 0.015589954 seconds)
(3/3) benchmarking 20...
done (took 0.014736539 seconds)
done (took 76.555576574 seconds)
Testing serialization...WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in #jldopen#9(::Bool, ::Bool, ::Bool, ::Function, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:198
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at ./<missing>:0
 in #jldopen#10(::Bool, ::Bool, ::Bool, ::Function, ::String, ::String) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:253
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::String) at ./<missing>:0
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:263
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in commit_datatype(::JLD.JldFile, ::HDF5.HDF5Datatype, ::DataType) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:71
 in h5type(::JLD.JldFile, ::Any, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:377
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::JLD.AssociativeWrapper{String,String,Dict{String,String}}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:710
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Dict{String,String}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1219
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in _write(::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:577
 in write_ref(::JLD.JldFile, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:672
 in macro expansion at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:669 [inlined]
 in h5convert!(::Ptr{UInt8}, ::JLD.JldFile, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:685
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:714
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in write(::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1221
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
done (took 6.769135966 seconds)
INFO: BenchmarkTools tests passed

>>> End of log
