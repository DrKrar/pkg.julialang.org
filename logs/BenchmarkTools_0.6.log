>>> 'Pkg.add("BenchmarkTools")' log
INFO: Cloning cache of BenchmarkTools from https://github.com/JuliaCI/BenchmarkTools.jl.git
INFO: Installing BenchmarkTools v0.0.6
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing FileIO v0.2.0
INFO: Installing HDF5 v0.7.0
INFO: Installing JLD v0.6.6
INFO: Installing LegacyStrings v0.1.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building Blosc
INFO: Building HDF5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/HDF5/deps/build.jl, in expression starting on line 27
INFO: Package database updated

>>> 'Pkg.test("BenchmarkTools")' log
Julia Version 0.6.0-dev.1297
Commit 416f5f2 (2016-11-23 13:12 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (719.59375 MB free)
Uptime: 5256.0 sec
Load Avg:  0.830078125  0.9833984375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     247114 s       1891 s      46246 s     180500 s          8 s
#2  3504 MHz     108074 s       4655 s      26078 s     368120 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - BenchmarkTools                0.0.6
 - JSON                          0.8.0
9 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Compat                        0.9.4
 - FileIO                        0.2.0
 - HDF5                          0.7.0
 - JLD                           0.6.6
 - LegacyStrings                 0.1.1
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing BenchmarkTools
Testing Parameters...done (took 1.365096363 seconds)
Testing Trial/TrialEstimate/TrialRatio/TrialJudgement...done (took 1.427380871 seconds)
Testing BenchmarkGroup...done (took 6.73908513 seconds)
Testing execution...(1/3) tuning 10...
done (took 0.296190146 seconds)
(2/3) tuning 5...
done (took 0.244918859 seconds)
(3/3) tuning 20...
done (took 0.16320284 seconds)
(1/3) tuning "sum"...
  (1/3) tuning 10...
  done (took 0.642127867 seconds)
  (2/3) tuning 5...
  done (took 0.714878605 seconds)
  (3/3) tuning 20...
  done (took 0.729040358 seconds)
done (took 2.39156862 seconds)
(2/3) tuning "special"...
  (1/5) tuning "comprehension"...
  done (took 5.380688449 seconds)
  (2/5) tuning "macro"...
  done (took 0.699900855 seconds)
  (3/5) tuning "kwargs"...
  done (took 5.490790438 seconds)
  (4/5) tuning "block"...
  done (took 0.510351709 seconds)
  (5/5) tuning "nothing"...
  done (took 0.448911518 seconds)
done (took 12.847914726 seconds)
(3/3) tuning "sin"...
  (1/3) tuning 10...
  done (took 0.021203123 seconds)
  (2/3) tuning 5...
  done (took 0.019141119 seconds)
  (3/3) tuning 20...
  done (took 0.019911547 seconds)
done (took 0.447388473 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.445339242 seconds)
  (2/3) benchmarking 5...
  done (took 0.737197149 seconds)
  (3/3) benchmarking 20...
  done (took 3.309605682 seconds)
done (took 5.796488793 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 1.568459829 seconds)
  (2/5) benchmarking "macro"...
  done (took 4.572271995 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 3.472728108 seconds)
  (4/5) benchmarking "block"...
  done (took 1.147722852 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.483426616 seconds)
done (took 11.537836961 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.308099264 seconds)
  (2/3) benchmarking 5...
  done (took 0.26030436 seconds)
  (3/3) benchmarking 20...
  done (took 0.277383691 seconds)
done (took 1.294057775 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.022990711 seconds)
  (2/3) benchmarking 5...
  done (took 0.413994259 seconds)
  (3/3) benchmarking 20...
  done (took 1.010797108 seconds)
done (took 2.791014325 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 0.917955462 seconds)
  (2/5) benchmarking "macro"...
  done (took 1.010815766 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 1.009129002 seconds)
  (4/5) benchmarking "block"...
  done (took 0.693010202 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.073410591 seconds)
done (took 4.134855131 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.279945039 seconds)
  (2/3) benchmarking 5...
  done (took 0.289498287 seconds)
  (3/3) benchmarking 20...
  done (took 0.301999647 seconds)
done (took 1.292166808 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 0.017215269 seconds)
  (2/3) benchmarking 5...
  done (took 0.01165009 seconds)
  (3/3) benchmarking 20...
  done (took 0.012198469 seconds)
done (took 0.379714471 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 0.021642663 seconds)
  (2/5) benchmarking "macro"...
  done (took 0.011980581 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 0.01607008 seconds)
  (4/5) benchmarking "block"...
  done (took 0.018381876 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.012173376 seconds)
done (took 0.383888307 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.011487073 seconds)
  (2/3) benchmarking 5...
  done (took 0.010841634 seconds)
  (3/3) benchmarking 20...
  done (took 0.011507674 seconds)
done (took 0.412786866 seconds)
(1/3) benchmarking 10...
done (took 0.290438943 seconds)
(2/3) benchmarking 5...
done (took 0.242430786 seconds)
(3/3) benchmarking 20...
done (took 0.242866484 seconds)
(1/3) benchmarking 10...
done (took 0.252551625 seconds)
(2/3) benchmarking 5...
done (took 0.213133149 seconds)
(3/3) benchmarking 20...
done (took 0.301910369 seconds)
(1/3) benchmarking 10...
done (took 0.01863876 seconds)
(2/3) benchmarking 5...
done (took 0.016840403 seconds)
(3/3) benchmarking 20...
done (took 0.021750447 seconds)
done (took 83.378052032 seconds)
Testing serialization...WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in #jldopen#9(::Bool, ::Bool, ::Bool, ::Function, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:198
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at ./<missing>:0
 in #jldopen#10(::Bool, ::Bool, ::Bool, ::Function, ::String, ::String) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:253
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::String) at ./<missing>:0
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:263
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in commit_datatype(::JLD.JldFile, ::HDF5.HDF5Datatype, ::DataType) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:71
 in h5type(::JLD.JldFile, ::Any, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:377
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::JLD.AssociativeWrapper{String,String,Dict{String,String}}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:710
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Dict{String,String}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1219
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in _write(::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:577
 in write_ref(::JLD.JldFile, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:672
 in macro expansion at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:669 [inlined]
 in h5convert!(::Ptr{UInt8}, ::JLD.JldFile, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:685
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:714
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in write(::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1221
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
done (took 8.781484434 seconds)
INFO: BenchmarkTools tests passed

>>> End of log
