>>> 'Pkg.add("BenchmarkTools")' log
INFO: Cloning cache of BenchmarkTools from https://github.com/JuliaCI/BenchmarkTools.jl.git
INFO: Installing BenchmarkTools v0.0.6
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing FileIO v0.2.0
INFO: Installing HDF5 v0.7.0
INFO: Installing JLD v0.6.6
INFO: Installing LegacyStrings v0.1.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building Blosc
INFO: Building HDF5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/HDF5/deps/build.jl, in expression starting on line 27
INFO: Package database updated

>>> 'Pkg.test("BenchmarkTools")' log
Julia Version 0.6.0-dev.1320
Commit 8dd8ea9 (2016-11-26 22:03 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (717.41015625 MB free)
Uptime: 5423.0 sec
Load Avg:  0.9814453125  0.970703125  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     245528 s       6526 s      40114 s     199534 s         12 s
#2  3500 MHz     109011 s         80 s      24566 s     390230 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - BenchmarkTools                0.0.6
 - JSON                          0.8.0
9 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Compat                        0.9.4
 - FileIO                        0.2.0
 - HDF5                          0.7.0
 - JLD                           0.6.6
 - LegacyStrings                 0.1.1
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing BenchmarkTools
Testing Parameters...done (took 1.407362052 seconds)
Testing Trial/TrialEstimate/TrialRatio/TrialJudgement...done (took 1.310243385 seconds)
Testing BenchmarkGroup...done (took 5.053994803 seconds)
Testing execution...(1/3) tuning 10...
done (took 0.190246366 seconds)
(2/3) tuning 5...
done (took 0.250785637 seconds)
(3/3) tuning 20...
done (took 0.255099857 seconds)
(1/3) tuning "sum"...
  (1/3) tuning 10...
  done (took 0.60160668 seconds)
  (2/3) tuning 5...
  done (took 0.490183949 seconds)
  (3/3) tuning 20...
  done (took 0.699091055 seconds)
done (took 2.207279725 seconds)
(2/3) tuning "special"...
  (1/5) tuning "comprehension"...
  done (took 5.40258903 seconds)
  (2/5) tuning "macro"...
  done (took 0.662825753 seconds)
  (3/5) tuning "kwargs"...
  done (took 5.471461119 seconds)
  (4/5) tuning "block"...
  done (took 0.487353056 seconds)
  (5/5) tuning "nothing"...
  done (took 0.455017652 seconds)
done (took 12.772600777 seconds)
(3/3) tuning "sin"...
  (1/3) tuning 10...
  done (took 0.029059417 seconds)
  (2/3) tuning 5...
  done (took 0.028797945 seconds)
  (3/3) tuning 20...
  done (took 0.029852128 seconds)
done (took 0.501243405 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.499395212 seconds)
  (2/3) benchmarking 5...
  done (took 0.793365689 seconds)
  (3/3) benchmarking 20...
  done (took 3.431915643 seconds)
done (took 6.136819191 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 1.204410471 seconds)
  (2/5) benchmarking "macro"...
  done (took 4.451464096 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 3.394649897 seconds)
  (4/5) benchmarking "block"...
  done (took 1.252033715 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.497699935 seconds)
done (took 11.106598657 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.287769804 seconds)
  (2/3) benchmarking 5...
  done (took 0.208409661 seconds)
  (3/3) benchmarking 20...
  done (took 0.303044159 seconds)
done (took 1.210542763 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 1.014548443 seconds)
  (2/3) benchmarking 5...
  done (took 0.262381335 seconds)
  (3/3) benchmarking 20...
  done (took 1.008925819 seconds)
done (took 2.692402358 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 1.011575921 seconds)
  (2/5) benchmarking "macro"...
  done (took 1.010944245 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 1.010841457 seconds)
  (4/5) benchmarking "block"...
  done (took 0.822178446 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.083021995 seconds)
done (took 4.36503861 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.224137226 seconds)
  (2/3) benchmarking 5...
  done (took 0.178709604 seconds)
  (3/3) benchmarking 20...
  done (took 0.248195314 seconds)
done (took 1.083553285 seconds)
(1/3) benchmarking "sum"...
  (1/3) benchmarking 10...
  done (took 0.031658395 seconds)
  (2/3) benchmarking 5...
  done (took 0.019819201 seconds)
  (3/3) benchmarking 20...
  done (took 0.020784144 seconds)
done (took 0.508032133 seconds)
(2/3) benchmarking "special"...
  (1/5) benchmarking "comprehension"...
  done (took 0.019363554 seconds)
  (2/5) benchmarking "macro"...
  done (took 0.017881497 seconds)
  (3/5) benchmarking "kwargs"...
  done (took 0.018011078 seconds)
  (4/5) benchmarking "block"...
  done (took 0.021790449 seconds)
  (5/5) benchmarking "nothing"...
  done (took 0.016191471 seconds)
done (took 0.521319583 seconds)
(3/3) benchmarking "sin"...
  (1/3) benchmarking 10...
  done (took 0.017401185 seconds)
  (2/3) benchmarking 5...
  done (took 0.016652179 seconds)
  (3/3) benchmarking 20...
  done (took 0.01855541 seconds)
done (took 0.473354844 seconds)
(1/3) benchmarking 10...
done (took 0.200409604 seconds)
(2/3) benchmarking 5...
done (took 0.286649946 seconds)
(3/3) benchmarking 20...
done (took 0.291770424 seconds)
(1/3) benchmarking 10...
done (took 0.296870197 seconds)
(2/3) benchmarking 5...
done (took 0.289528094 seconds)
(3/3) benchmarking 20...
done (took 0.300492809 seconds)
(1/3) benchmarking 10...
done (took 0.019150278 seconds)
(2/3) benchmarking 5...
done (took 0.01785278 seconds)
(3/3) benchmarking 20...
done (took 0.016293456 seconds)
done (took 81.200466691 seconds)
Testing serialization...WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in #jldopen#9(::Bool, ::Bool, ::Bool, ::Function, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:198
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool) at ./<missing>:0
 in #jldopen#10(::Bool, ::Bool, ::Bool, ::Function, ::String, ::String) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:253
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::String, ::String) at ./<missing>:0
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:263
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in commit_datatype(::JLD.JldFile, ::HDF5.HDF5Datatype, ::DataType) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:71
 in h5type(::JLD.JldFile, ::Any, ::Bool) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:377
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::JLD.AssociativeWrapper{String,String,Dict{String,String}}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:710
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::Dict{String,String}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1219
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in #_write#17(::Array{Any,1}, ::Function, ::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:587
 in _write(::JLD.JldGroup, ::String, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:577
 in write_ref(::JLD.JldFile, ::Array{Any,1}, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:672
 in macro expansion at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:669 [inlined]
 in h5convert!(::Ptr{UInt8}, ::JLD.JldFile, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/jld_types.jl:685
 in #write_compound#21(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:714
 in #write#14(::Array{Any,1}, ::Function, ::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in write(::JLD.JldFile, ::String, ::BenchmarkTools.BenchmarkGroup, ::JLD.JldWriteSession) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:529
 in (::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}})(::JLD.JldFile) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1221
 in #jldopen#11(::Array{Any,1}, ::Function, ::JLD.##34#35{String,Dict{String,String},Tuple{String,BenchmarkTools.BenchmarkGroup}}, ::String, ::Vararg{String,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:265
 in (::JLD.#kw##jldopen)(::Array{Any,1}, ::JLD.#jldopen, ::Function, ::String, ::String) at ./<missing>:0
 in #save#33(::Bool, ::Bool, ::Function, ::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1217
 in save(::FileIO.File{FileIO.DataFormat{:JLD}}, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/JLD/src/JLD.jl:1214
 in #save#14(::Array{Any,1}, ::Function, ::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Dict{String,String}, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/FileIO/src/loadsave.jl:54
 in save(::String, ::String, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/BenchmarkTools/src/serialization.jl:36
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/BenchmarkTools/test/SerializationTests.jl, in expression starting on line 7
done (took 7.187172524 seconds)
INFO: BenchmarkTools tests passed

>>> End of log
