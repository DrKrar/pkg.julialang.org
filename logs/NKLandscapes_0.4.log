>>> 'Pkg.add("NKLandscapes")' log
INFO: Cloning cache of NKLandscapes from git://github.com/glesica/NKLandscapes.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.1.15
INFO: Installing DataStructures v0.4.6
INFO: Installing Distributions v0.11.1
INFO: Installing FactCheck v0.4.3
INFO: Installing NKLandscapes v0.3.0
INFO: Installing PDMats v0.5.2
INFO: Installing Rmath v0.1.5
INFO: Installing SHA v0.3.0
INFO: Installing StatsBase v0.11.1
INFO: Installing StatsFuns v0.3.1
INFO: Installing URIParser v0.1.6
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of NKLandscapes
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("NKLandscapes")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (459.50390625 MB free)
Uptime: 9893.0 sec
Load Avg:  0.9970703125  0.88623046875  1.0908203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     460588 s         56 s      42088 s     389029 s         11 s
#2  3500 MHz     285392 s         89 s      37486 s     634472 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NKLandscapes                  0.3.0
12 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Distributions                 0.11.1
 - FactCheck                     0.4.3
 - PDMats                        0.5.2
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - URIParser                     0.1.6
INFO: Testing NKLandscapes
NKLandscapes
  > genotype.jl
    > NKLandscape(4, 1)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
    > NKqLandscape(4, 1, 2)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
    > NKpLandscape(4, 1, 0.9)
      > Genotype
      > fitness(...)
      > rand(::Type{Genotype}, ...)
      > zeros(::Type{Genotype}, ...)
  > landscape.jl
    > NKLandscape
      > when near=true
    > NKqLandscape
      > when near=true
    > NKpLandscape
      > when near=true
  > metapopulation.jl
    > NKLandscape(4, 1)
      > popsize(...)
      > popct(...)
      > popfits(...)
    > NKqLandscape(4, 1, 2)
      > popsize(...)
      > popct(...)
      > popfits(...)
    > NKpLandscape(4, 1, 0.9)
      > popsize(...)
      > popct(...)
      > popfits(...)
  > migration.jl
    > NKLandscape(96, 1)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
    > NKqLandscape(96, 1, 2)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
    > NKpLandscape(96, 1, 0.9)
      > migrate(...)
        > should respect migration probability
        > should respect migration count
      > linmigrate(...)
        > should respect migration probability
        > should respect migration count
        > should only migrate left and right
  > mutation.jl
    > NKLandscape(4, 1)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
    > NKqLandscape(4, 1, 2)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
    > NKpLandscape(4, 1, 0.9)
      > bwmutate(...)
      > bwmutate(::Genotype)
      > bsmutate(...)
      > bsmutate(::Genotype)
      > bsmutate!(::Genotype)
  > neighbors.jl
    > NKLandscape(4, 1)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
    > NKqLandscape(4, 1, 2)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
    > NKpLandscape(4, 1, 0.9)
      > number_neighbors(...)
      > all_neighbors(...)
      > random_neighbor(...)
      > neutral_neighbors(...)
      > fitter_neighbors(...)
      > fitness_range_neighbors(...)
      > fittest_neighbors(...)
      > fittest_neighbor(...)
  > population.jl
    > NKLandscape(4, 1)
      > popsize(...)
      > popfits(...)
    > NKqLandscape(4, 1, 2)
      > popsize(...)
      > popfits(...)
    > NKpLandscape(4, 1, 0.9)
      > popsize(...)
      > popfits(...)
  > walks.jl
    > NKLandscape(4, 1)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
    > NKqLandscape(4, 1, 2)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
    > NKpLandscape(4, 1, 0.9)
      > Adaptive walks
        > Random adaptive walk should terminate and move uphill
        > Greedy adaptive walk should terminate and move uphill
        > Reluctant adaptive walk should terminate and move uphill
      > Neutral walks
        > Neutral walk should terminate and move sideways
  > Fast functional tests
    > NK.fitness(...)
    > NK.popfits(...)
    > NK.propsel(...)
    > NK.tournsel(...)
    > NK.moransel(...)
    > NK.elitesel(...)
    > NK.bwmutate(...)
    > NK.bsmutate(...)
  > Fast neighbors, walks, and neutral net tests
    > NK.neighbors(...)
    > NK.walks(...)
    > NK.netcounts(...)
547 facts verified.
INFO: NKLandscapes tests passed

>>> End of log
