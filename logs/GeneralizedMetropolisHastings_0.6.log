>>> 'Pkg.add("GeneralizedMetropolisHastings")' log
INFO: Cloning cache of GeneralizedMetropolisHastings from https://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Blosc v0.1.7
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.12
INFO: Installing Colors v0.6.9
INFO: Installing Conda v0.4.0
INFO: Installing DataStructures v0.4.6
INFO: Installing DiffEqBase v0.3.2
INFO: Installing Distributions v0.11.1
INFO: Installing FileIO v0.2.1
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing GeneralizedMetropolisHastings v0.1.1
INFO: Installing HDF5 v0.7.2
INFO: Installing IJulia v1.3.3
INFO: Installing JLD v0.6.8
INFO: Installing LaTeXStrings v0.2.0
INFO: Installing LegacyStrings v0.1.1
INFO: Installing MacroTools v0.3.4
INFO: Installing Nettle v0.2.4
INFO: Installing PDMats v0.5.2
INFO: Installing Parameters v0.5.0
INFO: Installing PyCall v1.7.2
INFO: Installing PyPlot v2.2.4
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.1.2
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.5
INFO: Installing SHA v0.3.0
INFO: Installing SimpleTraits v0.2.0
INFO: Installing StatsBase v0.11.1
INFO: Installing StatsFuns v0.3.1
INFO: Installing Sundials v0.6.0
INFO: Installing URIParser v0.1.6
INFO: Installing ZMQ v0.4.0
INFO: Building Blosc
INFO: Building Conda
INFO: Building Rmath
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 [3] macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::SubString{String}) at ./sysimg.jl:14
 [7] evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 [8] cd(::##2#4, ::String) at ./file.jl:69
 [9] (::##1#3)(::IOStream) at ./none:13
 [10] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [11] eval(::Module, ::Any) at ./boot.jl:236
 [12] process_options(::Base.JLOptions) at ./client.jl:275
 [13] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 39
INFO: Building Nettle
INFO: Building ZMQ
INFO: Building IJulia
INFO: Installing Jupyter via the Conda package.
Fetching package metadata .........
Solving package specifications: ..........

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.6/Conda/deps/usr:
#
jupyter                   1.0.0                    py27_3  
INFO: Found Jupyter version 4.2.1: /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/jupyter
Writing IJulia kernelspec to /home/vagrant/.julia/v0.6/IJulia/deps/julia-0.6/kernel.json ...
Installing julia kernelspec julia-0.6
[InstallKernelSpec] Removing existing kernelspec in /home/vagrant/.local/share/jupyter/kernels/julia-0.6
[InstallKernelSpec] Installed kernelspec julia-0.6 in /home/vagrant/.local/share/jupyter/kernels/julia-0.6
INFO: Building PyCall
INFO: No system-wide Python was found; got the following error:
could not spawn `'' -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('VERSION'))"`: no such file or directory (ENOENT)
using the Python distribution in the Conda package
Fetching package metadata .........
Solving package specifications: ..........

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.6/Conda/deps/usr:
#
numpy                     1.11.2                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python (Python 2.7.13) at /home/vagrant/.julia/v0.6/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.6/Conda/deps/usr/lib/libpython2.7
INFO: Building Sundials
WARNING: Base.WORD_SIZE is deprecated.
  likely near /home/vagrant/.julia/v0.6/Sundials/deps/build.jl:21
INFO: Building HDF5
INFO: Package database updated

>>> 'Pkg.test("GeneralizedMetropolisHastings")' log
Julia Version 0.6.0-dev.1836
Commit 1539061 (2017-01-01 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1708.91796875 MB free)
Uptime: 27953.0 sec
Load Avg:  1.201171875  1.10986328125  1.013671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1415882 s       6552 s     166000 s     924986 s         75 s
#2  3500 MHz     628201 s       2270 s     112612 s    1969077 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - GeneralizedMetropolisHastings 0.1.1
 - JSON                          0.8.0
35 additional packages:
 - BinDeps                       0.4.5
 - Blosc                         0.1.7
 - Calculus                      0.1.15
 - ColorTypes                    0.2.12
 - Colors                        0.6.9
 - Compat                        0.10.0
 - Conda                         0.4.0
 - DataStructures                0.4.6
 - DiffEqBase                    0.3.2
 - Distributions                 0.11.1
 - FileIO                        0.2.1
 - FixedPointNumbers             0.2.1
 - HDF5                          0.7.2
 - IJulia                        1.3.3
 - JLD                           0.6.8
 - LaTeXStrings                  0.2.0
 - LegacyStrings                 0.1.1
 - MacroTools                    0.3.4
 - Nettle                        0.2.4
 - PDMats                        0.5.2
 - Parameters                    0.5.0
 - PyCall                        1.7.2
 - PyPlot                        2.2.4
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.1.2
 - Reexport                      0.0.3
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - SimpleTraits                  0.2.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - Sundials                      0.6.0
 - URIParser                     0.1.6
 - ZMQ                           0.4.0
INFO: Testing GeneralizedMetropolisHastings

===========================================
+++++++++++++++++++++++++++++++++++++++++++
Running all tests with 1 process
+++++++++++++++++++++++++++++++++++++++++++
===========================================

==================
Running all tests:
==================
  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl *
===================
Running unit tests:
===================
  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/policies.jl *
====================
Test show() function
MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64

MHRuntimePolicy with traits:
  runner = standard
  initialize = default
  propose = indicator
  indicator = cyclical
  jobsegments = none
  chain = gradient
  store = all
  sampletype = Int64
  calculationtype = Float32

End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/parameters.jl *
====================
Test show() function

ParameterDefault
 key: d
 default: 3.0
ParameterDefault
 key: param
 default: 3.0
ParameterUnivariate
 key: p
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 3.0
ParameterUnivariate
 key: p
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 5.5
ParameterUnivariate
 key: p
 prior: Distributions.DiscreteUniform(a=0, b=9)
 default: 4
Array{AbstractParameter} with
[1] ParameterUnivariate
 key: param
 prior: Distributions.Uniform{Float64}(a=1.0, b=3.0)
 default: 2.0
[2] ParameterDefault
 key: param
 default: 2.0
[3] ParameterUnivariate
 key: param
 prior: Distributions.DiscreteUniform(a=1, b=3)
 default: 2
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: param
 prior: Distributions.Uniform{Float64}(a=1.0, b=3.0)
 default: 2.0
[2] ParameterUnivariate
 key: param
 prior: Distributions.DiscreteUniform(a=1, b=3)
 default: 2
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Uniform{Float64}(a=0.0, b=6.0)
 default: 3.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=5.0, b=10.0)
 default: 7.5
Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
[3] ParameterUnivariate
 key: d1
 prior: Distributions.Uniform{Float64}(a=0.0, b=6.0)
 default: 3.0
[4] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=5.0, b=10.0)
 default: 7.5
Array{AbstractParameter} with
[1] ParameterUnivariate
 key: d1
 prior: Distributions.Normal{Float64}(μ=0.0, σ=1.0)
 default: 0.0
[2] ParameterUnivariate
 key: d2
 prior: Distributions.Uniform{Float64}(a=0.0, b=11.0)
 default: 2.0
[3] ParameterDefault
 key: param
 default: 3.0
[4] ParameterDefault
 key: param
 default: 7.5

End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl *
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution(::Type{Val{:lognormal}}, ::Array{Float64,1}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13
 [4] #distribution#9(::Array{Any,1}, ::Function, ::Symbol, ::Array{Float64,1}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:2
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl:41 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 37
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl:42 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:298
 [16] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 37
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13 [inlined]
 [4] update(::Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}, ::Array{Float64,1}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:51
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl:48 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 37
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution(::Type{Val{:lognormal}}, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13
 [4] #distribution#9(::Array{Any,1}, ::Function, ::Symbol, ::Array{Float64,1}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:2
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl:41 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 37
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13 [inlined]
 [4] update(::Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Array{Float64,1}}, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:51
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl:48 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 37
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] anonymous at ./<missing>:?
 [4] include_from_node1(::String) at ./loading.jl:532
 [5] include(::String) at ./sysimg.jl:14
 [6] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:532
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:298
 [15] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/distributions.jl, in expression starting on line 118
Testing multivariate normal copying behaviour
Testing multivariate lognormal copying behaviour
Testing multivariate normal copying behaviour
Testing multivariate normal (zero mean) copying behaviour

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl *
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::FloatRange{Float64}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 18
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::FloatRange{Float64}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 18
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::FloatRange{Float64}) at ./deprecated.jl:50
 [3] f1(::FloatRange{Float64}, ::Float64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl:14
 [4] _data(::Type{Val{:function}}, ::FloatRange{Float64}, ::Function, ::FloatRange{Float64}, ::Float64, ::Vararg{Float64,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/data/DataFunction.jl:16
 [5] data(::Symbol, ::FloatRange{Float64}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/data/data.jl:3
 [6] include_from_node1(::String) at ./loading.jl:532
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 22
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::FloatRange{Float64}) at ./deprecated.jl:50
 [3] f1(::FloatRange{Float64}, ::Float64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl:14
 [4] _data(::Type{Val{:function}}, ::FloatRange{Float64}, ::Function, ::FloatRange{Float64}, ::Float64, ::Vararg{Float64,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/data/DataFunction.jl:16
 [5] data(::Symbol, ::FloatRange{Float64}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/data/data.jl:3
 [6] include_from_node1(::String) at ./loading.jl:532
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 22
WARNING: sqrt{T <: Number}(x::AbstractArray{T}) is deprecated, use sqrt.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sqrt(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _noise(::Type{Val{:gaussian}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/noise/NoiseModelGaussian.jl:7
 [4] noise(::Symbol, ::Array{Float64,1}, ::Vararg{Array{Float64,1},N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/noise/noise.jl:3
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:298
 [16] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 44
WARNING: sqrt{T <: Number}(x::AbstractArray{T}) is deprecated, use sqrt.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sqrt(::Array{Float64,1}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/data.jl, in expression starting on line 56

====================
Test show() function
DataArray with 2 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
DataFunction with 2 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: #f1
 args:(0.0:0.1:1.0,6.283185307179586)
DataFunction with 3 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: #f2!
 args:(1.0,0.1)
DataFunction with 3 variables and 11 values
 index: Array{Float64,1}
 values: Array{Float64,2}
 modifyvalues: Bool
 generator: Base.Random.#rand!
 args: Tuple{}
Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/samples.jl *

====================
Test show() function
BaseSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
GradientSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,2}
 gradlogprior: Array{Float64,2}
TensorSample with 2 parameters and 3 samples
 values: Array{Float32,2}
 loglikelihood: Array{Float32,1}
 logprior: Array{Float32,1}
 gradloglikelihood: Array{Float32,2}
 gradlogprior: Array{Float32,2}
 tensorloglikelihood: Array{Float32,3}
 tensorlogprior: Array{Float32,3}
TangentTensorSample with 2 parameters and 3 samples
 values: Array{Float64,2}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,2}
 gradlogprior: Array{Float64,2}
 tensorloglikelihood: Array{Float64,3}
 tensorlogprior: Array{Float64,3}
 tangentvectors: Array{Float64,3}
BaseSample with 2 parameters and 1 sample
 values: Array{Int64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
GradientSample with 2 parameters and 1 sample
 values: Array{Float32,1}
 loglikelihood: Array{Float32,1}
 logprior: Array{Float32,1}
 gradloglikelihood: Array{Float32,1}
 gradlogprior: Array{Float32,1}
TensorSample with 2 parameters and 1 sample
 values: Array{Float64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,1}
 gradlogprior: Array{Float64,1}
 tensorloglikelihood: Array{Float64,2}
 tensorlogprior: Array{Float64,2}
TangentTensorSample with 2 parameters and 1 sample
 values: Array{Float64,1}
 loglikelihood: Array{Float64,1}
 logprior: Array{Float64,1}
 gradloglikelihood: Array{Float64,1}
 gradlogprior: Array{Float64,1}
 tensorloglikelihood: Array{Float64,2}
 tensorlogprior: Array{Float64,2}
 tangentvectors: Array{Float64,2}
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/proposals.jl *
======================
Tests of NormalDensity
======================
Testing NormalDensity with Float64
Testing NormalDensity with Float32
=========================
Tests of LogNormalDensity
=========================
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13 [inlined]
 [4] _density(::Type{Val{:lognormal}}, ::Array{Float64,1}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/proposals/DistributionWrapper.jl:35
 [5] #density#13(::Array{Any,1}, ::Function, ::Symbol, ::Array{Float64,1}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/proposals/proposals.jl:10
 [6] density(::Symbol, ::Array{Float64,1}, ::Vararg{Any,N}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/proposals/proposals.jl:10
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/proposals.jl, in expression starting on line 63
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13 [inlined]
 [4] update at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:51 [inlined]
 [5] update!(::GeneralizedMetropolisHastings.SingleASymmetricDistributionWrapper{Distributions.MvLogNormal}, ::Array{Float64,1}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/proposals/DistributionWrapper.jl:75
 [6] include_from_node1(::String) at ./loading.jl:532
 [7] include(::String) at ./sysimg.jl:14
 [8] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [9] anonymous at ./<missing>:?
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/proposals.jl, in expression starting on line 81
====================================
Tests of CompoundDistributionWrapper
====================================
(:uniform,())
(:laplace,())
(:triangular,())
(:bactrian,(:normal,0.95))
(:bactrian,(:laplace,0.9))

====================
Test show() function
====================
DistributionWrapper with fields:
  distribution: Distributions.MvNormal{Float32,PDMats.PDMat{Float32,Array{Float32,2}},Array{Float32,1}}(
dim: 2
μ: Float32[3.0,3.0]
Σ: Float32[3.0 0.0; 0.0 3.0]
)

DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [1.09861,1.09861]
Σ: [3.0 0.0; 0.0 3.0]
)

====================
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/samplers.jl *
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float64,1}) at ./deprecated.jl:50
 [3] _distribution at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/distributions/distributions.jl:13 [inlined]
 [4] _density(::Type{Val{:lognormal}}, ::Array{Float64,1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/proposals/DistributionWrapper.jl:35
 [5] _samplerstate at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/samplers/MetropolisHastings.jl:42 [inlined]
 [6] samplerstate(::GeneralizedMetropolisHastings.ScalableMetropolisHastingsSampler{Float64,Array{Float64,1}}, ::Int64, ::Type{Float64}, ::Type{Float64}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/samplers/samplers.jl:13 (repeats 2 times)
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/samplers.jl:13 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [16] anonymous at ./<missing>:?
 [17] include_from_node1(::String) at ./loading.jl:532
 [18] include(::String) at ./sysimg.jl:14
 [19] process_options(::Base.JLOptions) at ./client.jl:298
 [20] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/samplers.jl, in expression starting on line 8
Test show() function for normal
Scalable Metropolis-Hastings Sampler with fields:
  Symbol[:density,:initialscalefactor,:scaleparameters,:extraargs]
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.1,0.2]
Σ: [0.04 0.0; 0.0 0.04]
)


Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.1,0.2]
Σ: [0.0025 0.0; 0.0 0.0025]
)


======================================
Test show() function for lognormal
Scalable Metropolis-Hastings Sampler with fields:
  Symbol[:density,:initialscalefactor,:scaleparameters,:extraargs]
Metropolis-Hastings SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Metropolis-Hastings SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [-2.30259,-1.60944]
Σ: [0.04 0.0; 0.0 0.04]
)


Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}}(
dim: 2
μ: [-2.30259,-1.60944]
Σ: [0.0025 0.0; 0.0 0.0025]
)


======================================
Test show() function for adaptive
Adaptive Normal Metropolis Sampler with fields:
  Symbol[:initialscalefactor,:nparas]
Adaptive Normal Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance,:runningstate]
Adaptive Normal Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance,:runningstate]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 2
μ: [0.0,0.0]
Σ: [1.185 2.35; 2.35 4.71]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 5
  runningmean: [2.1,4.2]
  runningcov: [1.175 2.35; 2.35 4.7]
  scale: 0.2
)
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 2
μ: [0.0,0.0]
Σ: [1.185 2.35; 2.35 4.71]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}()
======================================
Test show() function for smmala standard full
Simplified mMALA Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:tr]
Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.989808,1.00981]
Σ: [0.0269231 -0.0230769; -0.0230769 0.0269231]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.989808,1.00981]
Σ: [0.0269231 -0.0230769; -0.0230769 0.0269231]
)

 ["scale"]: 0.1
======================================
Test show() function for smmala tr full
Trust Region Simplified mMALA Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:tr]
Trust Region Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Trust Region Simplified mMALA SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
======================================
Test show() function for smmala tr tangent
Trust Region Simplified mMALA with Tangent Tensor Sampler with fields:
  Symbol[:initialscalefactor,:nparas,:ntangents]
Trust Region Simplified mMALA with Tangent Tensor SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Trust Region Simplified mMALA with Tangent Tensor SamplerState with fields: 
  Symbol[:policy,:density,:from,:proposals,:acceptance,:scale]
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
Sampler state variables:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 2
μ: [0.952848,1.03128]
Σ: [0.0887021 -0.00933707; -0.00933707 0.0887021]
)

 ["scale"]: 0.1
======================================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/indicators.jl *
WARNING: log{T <: Number}(x::AbstractArray{T}) is deprecated, use log.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] log(::Array{Float32,1}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/indicators.jl, in expression starting on line 9
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] exp(::Array{Float64,1}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/indicators.jl, in expression starting on line 24
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] exp(::Array{Float32,1}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/indicators.jl, in expression starting on line 26

====================
Test show() function
====================
IndicatorStationary with 1 proposal and 1 sample
 Fields: :stationary, :samples
IndicatorStationary with 4 proposals and 2 samples
 Fields: :stationary, :samples
IndicatorStationary with 10 proposals and 10 samples
 Fields: :stationary, :samples
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/models.jl *

====================
Test show() function
====================
TargetModel Test
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: targetsin
Additional target function arguments: 
(linspace(0.0,10.0,100),)
TargetModel Test!
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: targetsin!
Additional target function arguments: 
(linspace(0.0,10.0,100),)
ODEModel Test
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataFunction with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
 modifyvalues: Bool
 generator: #targetsin
 args:([3.0],linspace(0.0,10.0,100))
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
ode: odesin
initial: [0.0]
numstates: 1
observed: [1]
abstol: 1.0e-6
reltol: 1.0e-6
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/tuners.jl *
WARNING: isnan{T <: Number}(x::AbstractArray{T}) is deprecated, use isnan.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] isnan(::Array{Float64,1}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/tuners.jl, in expression starting on line 29
A warning should be printed below this line
WARNING: TunerState is full. Additional tuning steps cannot be stored

====================
Test show() function
====================
MonitorTuner: period = 10, verbose = true
ScaleTuner: period = 4, verbose = true ,targetrate = 0.7
            score = GeneralizedMetropolisHastings.tunelogistic, scoreargs = (7.0,)
ScaleTuner: period = 4, verbose = true ,targetrate = 0.5
            score = GeneralizedMetropolisHastings.tuneerf, scoreargs = (3.0,)
MonitorTunerState: 
 accepted = [8,3,0,0,0,0,0,0,0,0]
 proposed = [10,5,0,0,0,0,0,0,0,0]
WARNING: round(x::AbstractArray,digits::Integer,base::Integer=10) is deprecated, use round.(x,digits,base) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Array{Float64,1}, ::Int64, ::Int64) at ./deprecated.jl:50 (repeats 2 times)
 [3] show(::Base.PipeEndpoint, ::GeneralizedMetropolisHastings.MonitorTunerState) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/tuners/MonitorTuner.jl:42
 [4] show(::GeneralizedMetropolisHastings.MonitorTunerState) at ./coreio.jl:3
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:298
 [16] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/tuners.jl, in expression starting on line 73
 acceptance rate = [0.8,0.6,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 15
ScaleTunerState: 
 accepted = [25,4,0,0,0,0,0,0]
 proposed = [40,4,0,0,0,0,0,0]
 scalefactor = [0.934,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
 acceptance rate = [0.625,1.0,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 44
ScaleTunerState: 
 accepted = [11,0,0,0,0,0,0,0,0]
 proposed = [20,10,0,0,0,0,0,0,0]
WARNING: round(x::AbstractArray,digits::Integer,base::Integer=10) is deprecated, use round.(x,digits,base) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Array{Float32,1}, ::Int64, ::Int64) at ./deprecated.jl:50 (repeats 2 times)
 [3] show(::Base.PipeEndpoint, ::GeneralizedMetropolisHastings.ScaleTunerState{Float32}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/tuners/ScaleTuner.jl:57
 [4] show(::GeneralizedMetropolisHastings.ScaleTunerState{Float32}) at ./coreio.jl:3
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:298
 [16] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/tuners.jl, in expression starting on line 75
 scalefactor = Float32[1.081,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
 acceptance rate = [0.55,0.0,NaN,NaN,NaN,NaN,NaN,NaN,NaN]
 total proposed = 30
  accepted/proposed = 3/5
  acceptance rate = 0.6
  accepted/proposed = 0/10
  acceptance rate = 0.0
  scalefactor = 0.0
  cummulative scaling = 0.0
====================
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/chains.jl *
Two warnings should be printed below this line
WARNING: Chain is full. Additional results cannot be stored
WARNING: Chain is full. Additional results cannot be stored

====================
Test show() function
ChainStandard with numparas = 1 and numsamples = 10
Samples proposed = 3, samples accepted = 3, acceptance rate = 1.0
Total runtime = 0.0
Additional fields: :values, :loglikelihood
ChainStandard with numparas = 3 and numsamples = 4
Samples proposed = 4, samples accepted = 3, acceptance rate = 0.75
Total runtime = 0.0
Additional fields: :values, :loglikelihood
ChainGradient with numparas = 2 and numsamples = 3
Samples proposed = 3, samples accepted = 1, acceptance rate = 0.3333333333333333
Total runtime = 0.0
Additional fields: :values, :loglikelihood, :gradloglikelihood
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl *
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl, in expression starting on line 4
==================
Testing GMHSegment
==================
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##13#14)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:6
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [14] anonymous at ./<missing>:?
 [15] include_from_node1(::String) at ./loading.jl:532
 [16] include(::String) at ./sysimg.jl:14
 [17] process_options(::Base.JLOptions) at ./client.jl:298
 [18] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl, in expression starting on line 26

====================
Test show() function
GMHSegment with: 
model:
TargetModel JobSegmentsTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #13
Additional target function arguments: 
(linspace(0.0,10.0,100),)

samplerstate:
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]

End  show() function
====================

======================
Testing RemoteSegments
======================
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:77

====================
Test show() function
RemoteSegments with 2 segments and 3 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
Array of sampler state variables:
Sampler state variables for [1]:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.0]
Σ: [0.0025]
)


Sampler state variables for [2]:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.0]
Σ: [0.0025]
)



End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl *

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/mhrunner.jl *
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##19#20)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl:15
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GMHRunnersTest.TestMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] include_from_node1(::String) at ./loading.jl:532
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:532
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:298
 [19] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/mhrunner.jl, in expression starting on line 45

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/smhrunner.jl *
============================
Testing of iterate! function
============================
=========================
Testing of tune! function
=========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 0/1
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
========================
Testing of run! function
========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 1/1
  acceptance rate = 1.0
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
  accepted/proposed = 1/2
  acceptance rate = 0.5
  scalefactor = 1.0
  cummulative scaling = 1.0
Iteration 2/4
Iteration 4/4
==============================
Testing of SMHRunner completed
==============================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl *
++++++++++++++++++++++++++++++++
Testing GMHRunner with 1 processes
++++++++++++++++++++++++++++++++
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.cycle is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
WARNING: Base.take is deprecated.
  likely near /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:19
Testing GMHRunner with 2 proposals and 1 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 1 segment and 2 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.93155]
Σ: [0.01]
)


==================================
Results of the run!
WARNING: round(x::AbstractArray,digits::Integer,base::Integer=10) is deprecated, use round.(x,digits,base) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] round(::Array{Float64,2}, ::Int64, ::Int64) at ./deprecated.jl:50 (repeats 2 times)
 [3] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl:105 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit.jl:28 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [12] anonymous at ./<missing>:?
 [13] include_from_node1(::String) at ./loading.jl:532
 [14] include(::String) at ./sysimg.jl:14
 [15] process_options(::Base.JLOptions) at ./client.jl:298
 [16] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl, in expression starting on line 19
[2.889 2.889 2.904 2.904 2.92 2.92 2.932 2.932]
[-852.194,-852.194,-610.045,-610.045,-378.346,-378.346,-245.711,-245.711]
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.87665]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.93155]
Σ: [0.01]
)


==================================
Results of the run!
[2.877 2.877 2.877 2.877 2.877 2.889 2.889 2.904 2.904 2.92 2.92 2.932 2.932]
[-1074.07,-1074.07,-1074.07,-1074.07,-1074.07,-852.194,-852.194,-610.045,-610.045,-378.346,-378.346,-245.711,-245.711]
====================
Test show() function
Generalized Metropolis-Hastings runner with:
 numburnin: 2
 numiterations: 4
 numproposals: 2
 numindicatorsamples: 2
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


End  show() function
====================

==============================
Testing of GMHRunner completed
==============================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/performance.jl *
==========================
Running performance tests:
==========================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality.jl *
============================
Running functionality tests:
============================
  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl *
TargetModel SineTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=2.0, b=4.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #23
Additional target function arguments: 
(linspace(0.0,10.0,100),)
Generalized Metropolis-Hastings runner with:
 numburnin: 100
 numiterations: 100
 numproposals: 30
 numindicatorsamples: 30
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


RemoteSegments with 1 segment and 30 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##23#24)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl:28
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] burnin!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.ScalableMetropolisHastingsSampler{Float64,Array{Float64,2}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.MHRemoteSegments{Float64}, ::GeneralizedMetropolisHastings.ScaleTuner, ::GeneralizedMetropolisHastings.ScaleTunerState{Float64}, ::GeneralizedMetropolisHastings.IndicatorStationary{Float64}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/GMHRunner.jl:39
 [9] run!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.ScalableMetropolisHastingsSampler{Float64,Array{Float64,2}}, ::GeneralizedMetropolisHastings.ScaleTuner) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/GMHRunner.jl:24
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality.jl:14 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:39 [inlined]
 [17] anonymous at ./<missing>:?
 [18] include_from_node1(::String) at ./loading.jl:532
 [19] include(::String) at ./sysimg.jl:14
 [20] process_options(::Base.JLOptions) at ./client.jl:298
 [21] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl, in expression starting on line 46
  accepted/proposed = 176/300
  acceptance rate = 0.587
  scalefactor = 1.134
  cummulative scaling = 1.134
  accepted/proposed = 262/300
  acceptance rate = 0.873
  scalefactor = 1.374
  cummulative scaling = 1.558
  accepted/proposed = 217/300
  acceptance rate = 0.723
  scalefactor = 1.287
  cummulative scaling = 2.006
  accepted/proposed = 168/300
  acceptance rate = 0.56
  scalefactor = 1.096
  cummulative scaling = 2.198
  accepted/proposed = 225/300
  acceptance rate = 0.75
  scalefactor = 1.308
  cummulative scaling = 2.875
  accepted/proposed = 104/300
  acceptance rate = 0.347
  scalefactor = 0.87
  cummulative scaling = 2.503
  accepted/proposed = 163/300
  acceptance rate = 0.543
  scalefactor = 1.07
  cummulative scaling = 2.679
  accepted/proposed = 176/300
  acceptance rate = 0.587
  scalefactor = 1.134
  cummulative scaling = 3.039
  accepted/proposed = 103/300
  acceptance rate = 0.343
  scalefactor = 0.868
  cummulative scaling = 2.637
  accepted/proposed = 120/300
  acceptance rate = 0.4
  scalefactor = 0.914
  cummulative scaling = 2.411
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77578]
Σ: [0.0581265]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77578]
Σ: [0.0581265]
)


==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [3.77605]
Σ: [0.0581265]
)


==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1745, acceptance rate = 0.5816666666666667
Total runtime = 2.612282536
Additional fields: :values, :loglikelihood
RemoteSegments with 1 segment and 30 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.0001]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 0
  runningmean: [0.0]
  runningcov: [0.0]
  scale: 0.01
)
==================================
  accepted/proposed = 43/300
  acceptance rate = 0.143
  accepted/proposed = 84/300
  acceptance rate = 0.28
  accepted/proposed = 69/300
  acceptance rate = 0.23
  accepted/proposed = 135/300
  acceptance rate = 0.45
  accepted/proposed = 101/300
  acceptance rate = 0.337
  accepted/proposed = 115/300
  acceptance rate = 0.383
  accepted/proposed = 152/300
  acceptance rate = 0.507
  accepted/proposed = 145/300
  acceptance rate = 0.483
  accepted/proposed = 131/300
  acceptance rate = 0.437
  accepted/proposed = 147/300
  acceptance rate = 0.49
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00241616]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [2.99518]
  runningcov: [0.00231616]
  scale: 0.01
)
==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00241616]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [2.99518]
  runningcov: [0.00231616]
  scale: 0.01
)
==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00126845]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 201
  runningmean: [2.99761]
  runningcov: [0.00116845]
  scale: 0.01
)
==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1471, acceptance rate = 0.49033333333333334
Total runtime = 2.564759178
Additional fields: :values, :loglikelihood



================================================
++++++++++++++++++++++++++++++++++++++++++++++++
Running the multiprocess code tests with 3 processes
++++++++++++++++++++++++++++++++++++++++++++++++
================================================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl *
==================
Testing GMHSegment
==================
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##25#26)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:6
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [10] anonymous at ./<missing>:?
 [11] include_from_node1(::String) at ./loading.jl:532
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:298
 [14] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl, in expression starting on line 26

====================
Test show() function
GMHSegment with: 
model:
TargetModel JobSegmentsTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=1.0, b=5.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #25
Additional target function arguments: 
(linspace(0.0,10.0,100),)

samplerstate:
Metropolis SamplerState with fields: 
  Symbol[:density,:from,:proposals,:acceptance]

End  show() function
====================

======================
Testing RemoteSegments
======================
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(
:: [1] String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{depwarn(::Float64}) at ./deprecated.jl:50
 [3] String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{(::Base.Serializer.__deserialized_types__.##25#26)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:6
 [4] _evaluate(::Type{Val{false}}, ::Float64}) at ./deprecated.jl:50
 [3] GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] (::Base.Serializer.__deserialized_types__.##25#26)(::Array{Float64,run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/jobsegments.jl:6
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0

====================
Test show() function
RemoteSegments with 2 segments and 3 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
End  show() function
====================


  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl *

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/mhrunner.jl *
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##31#32)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl:15
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GMHRunnersTest.TestMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] include_from_node1(::String) at ./loading.jl:532
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:298
 [15] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/mhrunner.jl, in expression starting on line 45

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/smhrunner.jl *
============================
Testing of iterate! function
============================
=========================
Testing of tune! function
=========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 0/1
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
========================
Testing of run! function
========================
  accepted/proposed = 0/1
  acceptance rate = 0.0
  accepted/proposed = 1/1
  acceptance rate = 1.0
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
  accepted/proposed = 1/2
  acceptance rate = 0.5
  scalefactor = 1.0
  cummulative scaling = 1.0
Iteration 2/4
Iteration 4/4
==============================
Testing of SMHRunner completed
==============================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/gmhrunner.jl *
++++++++++++++++++++++++++++++++
Testing GMHRunner with 3 processes
++++++++++++++++++++++++++++++++
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::Base.Serializer.__deserialized_types__.##31#32)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl:15
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::Base.Serializer.__deserialized_types__.##31#32)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/runners.jl:15
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
Testing of tune! function
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 1/2
  acceptance rate = 0.5
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.90968]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.90968]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.94224]
Σ: [0.01]
)


==================================
Results of the run!
[2.91 2.91 2.925 2.925 2.939 2.939 2.942 2.942]
[-525.755,-525.755,-319.935,-319.935,-162.539,-162.539,-135.512,-135.512]
Testing GMHRunner with 2 proposals and 2 segments
Testing of preparenext! function
Testing of store! function
Testing of auxiliary! function
Testing of iterate! function
Testing of tune! function
  accepted/proposed = 0/2
  acceptance rate = 0.0
  accepted/proposed = 0/2
  acceptance rate = 0.0
  scalefactor = 0.728
  cummulative scaling = 0.728
Testing of run! function
RemoteSegments with 2 segments and 1 proposal per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
  accepted/proposed = 1/2
  acceptance rate = 0.5
  accepted/proposed = 1/2
  acceptance rate = 0.5
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.89661]
Σ: [0.01]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.89661]
Σ: [0.01]
)


==================================
Iteration 1/4
Iteration 2/4
Iteration 3/4
Iteration 4/4
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.94963]
Σ: [0.01]
)


==================================
Results of the run!
[2.877 2.879 2.879 2.897 2.897 2.908 2.908 2.927 2.927 2.946 2.946 2.95 2.95]
[-1074.07,-1028.12,-1028.12,-726.122,-726.122,-546.981,-546.981,-297.812,-297.812,-101.898,-101.898,-69.998,-69.998]
====================
Test show() function
Generalized Metropolis-Hastings runner with:
 numburnin: 2
 numiterations: 4
 numproposals: 2
 numindicatorsamples: 2
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


End  show() function
====================

==============================
Testing of GMHRunner completed
==============================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl *
===============================================
Multi-process tests with 3 processes
===============================================
Local process: 1
Remote process: 2
========================================
Multi-process tests of random generators
========================================
==============================================
Multi-process tests of sampler state functions
==============================================
================================================
Multi-process tests of remote segement functions
================================================
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::String) at ./sysimg.jl:14
 [5] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [6] anonymous at ./<missing>:?
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl, in expression starting on line 99
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##35#36)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl:101
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] include_from_node1(::String) at ./loading.jl:532
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:298
 [15] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl, in expression starting on line 115
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##35#36)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl:101
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] include_from_node1(::String) at ./loading.jl:532
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [11] anonymous at ./<missing>:?
 [12] include_from_node1(::String) at ./loading.jl:532
 [13] include(::String) at ./sysimg.jl:14
 [14] process_options(::Base.JLOptions) at ./client.jl:298
 [15] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl, in expression starting on line 115
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::Base.Serializer.__deserialized_types__.##35#36)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl:101
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] cos(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::Base.Serializer.__deserialized_types__.##35#36)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/unit/multiprocess.jl:101
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Normal{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,2}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.40302,3.70095]
Indicator state acceptance: [606.505]
Segment state acceptance: [1262.9,-23.4339,2681.36,-1090.33,2187.39]
Stationary indicator: [0.0,0.0,1.0,0.0,2.98408e-215,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [1262.9,-23.4339,2681.36,-1090.33,2187.39]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.38743,3.83311]
    loglikelihood: Array{Float64}((1,)) [-7744.91]
    logprior: Array{Float64}((1,)) [-0.843453]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.38743,3.83311]
Indicator state proposals new: [3.40302,3.70095]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.41977,3.71257]
Indicator state acceptance: [745.584]
Segment state acceptance: [345.174,-1015.55,1338.23,-265.657,40.4879]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [345.174,-1015.55,1338.23,-265.657,40.4879]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.33558,3.74709]
    loglikelihood: Array{Float64}((1,)) [-8948.98]
    logprior: Array{Float64}((1,)) [-0.826163]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.33558,3.74709]
Indicator state proposals new: [3.41977,3.71257]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.2498,3.71547]
Indicator state acceptance: [3121.85]
Segment state acceptance: [2751.81,2244.67,-874.558,929.84,2589.15]
Stationary indicator: [1.0,5.65439e-221,0.0,0.0,2.28354e-71,0.0]
Indicator samples: [6,1,1,1,1,1]
Remote segment acceptances: [2751.81,2244.67,-874.558,929.84,2589.15]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.07051,3.67392]
    loglikelihood: Array{Float64}((1,)) [-5159.95]
    logprior: Array{Float64}((1,)) [-0.0102498]
Remote segment prop2collected: 
Dict(1=>(1,1))
Indicator state from new: [3.07051,3.67392]
Indicator state proposals new: [3.2498,3.71547]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.56375,3.55836]
Indicator state acceptance: [-193.085]
Segment state acceptance: [195.474,146.173,282.503,406.5,1288.15]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [195.474,146.173,282.503,406.5,1288.15]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.65554,3.64155]
    loglikelihood: Array{Float64}((1,)) [-9932.95]
    logprior: Array{Float64}((1,)) [-5.59674]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.65554,3.64155]
Indicator state proposals new: [3.56375,3.55836]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.49048,3.642]
Indicator state acceptance: [-158.946]
Segment state acceptance: [900.22,1714.14,552.69,1476.4,2276.89]
Stationary indicator: [0.0,3.96243e-245,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [900.22,1714.14,552.69,1476.4,2276.89]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.45165,3.78417]
    loglikelihood: Array{Float64}((1,)) [-8913.92]
    logprior: Array{Float64}((1,)) [-1.75115]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.45165,3.78417]
Indicator state proposals new: [3.49048,3.642]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.32882,3.72235]
Indicator state acceptance: [1719.15]
Segment state acceptance: [-133.67,-2022.25,3082.01,345.197,1146.35]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [-133.67,-2022.25,3082.01,345.197,1146.35]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.23282,3.78248]
    loglikelihood: Array{Float64}((1,)) [-6232.57]
    logprior: Array{Float64}((1,)) [0.111984]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.23282,3.78248]
Indicator state proposals new: [3.32882,3.72235]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.30636,3.55961]
Indicator state acceptance: [341.281]
Segment state acceptance: [482.385,1217.05,-1109.43,666.561,311.1]
Stationary indicator: [8.7005e-320,1.0,0.0,8.44205e-240,0.0,0.0]
Indicator samples: [6,2,2,2,2,2]
Remote segment acceptances: [482.385,1217.05,-1109.43,666.561,311.1]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.30967,3.69462]
    loglikelihood: Array{Float64}((1,)) [-9474.3]
    logprior: Array{Float64}((1,)) [-0.983399]
Remote segment prop2collected: 
Dict(2=>(1,1))
Indicator state from new: [3.30967,3.69462]
Indicator state proposals new: [3.30636,3.55961]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.41459,3.56726]
Indicator state acceptance: [-799.506]
Segment state acceptance: [2235.42,486.827,1065.51,945.56,3533.39]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [2235.42,486.827,1065.51,945.56,3533.39]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.64709,3.74864]
    loglikelihood: Array{Float64}((1,)) [-8295.08]
    logprior: Array{Float64}((1,)) [-4.64285]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.64709,3.74864]
Indicator state proposals new: [3.41459,3.56726]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.30641,3.75229]
Indicator state acceptance: [2656.67]
Segment state acceptance: [1062.76,-2598.28,-2930.79,3010.59,5369.58]
Stationary indicator: [0.0,0.0,0.0,0.0,1.0,0.0]
Indicator samples: [6,5,5,5,5,5]
Remote segment acceptances: [1062.76,-2598.28,-2930.79,3010.59,5369.58]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.18346,3.89039]
    loglikelihood: Array{Float64}((1,)) [-3008.18]
    logprior: Array{Float64}((1,)) [0.810124]
Remote segment prop2collected: 
Dict(5=>(1,1))
Indicator state from new: [3.18346,3.89039]
Indicator state proposals new: [3.30641,3.75229]
Indicator state from: [3.37125,3.64224]
Indicator state proposals: [3.494,3.58598]
Indicator state acceptance: [-599.937]
Segment state acceptance: [1000.87,817.428,1823.91,-122.633,913.332]
Stationary indicator: [0.0,0.0,1.0,0.0,0.0,0.0]
Indicator samples: [6,3,3,3,3,3]
Remote segment acceptances: [1000.87,817.428,1823.91,-122.633,913.332]
Remote segment collected samples: 
Array{GeneralizedMetropolisHastings.AbstractSample{O<:GeneralizedMetropolisHastings.DerivativeOrder}}((1,))
  1: GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}
    values: Array{Float64}((2,)) [3.54675,3.71119]
    loglikelihood: Array{Float64}((1,)) [-9806.25]
    logprior: Array{Float64}((1,)) [-3.3983]
Remote segment prop2collected: 
Dict(3=>(1,1))
Indicator state from new: [3.54675,3.71119]
Indicator state proposals new: [3.494,3.58598]
==========================
Multi-process tests passed
==========================

  * /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl *
TargetModel SineTestModel
parameters: Array{ParameterUnivariate} with
[1] ParameterUnivariate
 key: a
 prior: Distributions.Uniform{Float64}(a=2.0, b=4.0)
 default: 3.0
measurements: DataArray with 1 variable and 100 values
 index: Array{Float64,1}
 values: Array{Float64,1}
noisemodel: Gaussian Noise Model
 variance: Array{Float64,1}
 distributions: Array{Distributions.Normal{Float64},1}
target: #37
Additional target function arguments: 
(linspace(0.0,10.0,100),)
Generalized Metropolis-Hastings runner with:
 numburnin: 100
 numiterations: 100
 numproposals: 30
 numindicatorsamples: 30
 policy: MHRuntimePolicy with traits:
  runner = generalized
  initialize = prior
  propose = auxiliary
  indicator = stationary
  jobsegments = workers
  chain = standard
  store = main
  sampletype = Float64
  calculationtype = Float64


RemoteSegments with 2 segments and 15 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [0.0]
Σ: [0.01]
)


==================================
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::##37#38)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl:28
 [4] _evaluate(::Type{Val{false}}, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,1}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] initialize!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}, ::Bool) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/MHRunner.jl:28
 [8] burnin!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.ScalableMetropolisHastingsSampler{Float64,Array{Float64,2}}, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}, ::GeneralizedMetropolisHastings.MHRemoteSegments{Float64}, ::GeneralizedMetropolisHastings.ScaleTuner, ::GeneralizedMetropolisHastings.ScaleTunerState{Float64}, ::GeneralizedMetropolisHastings.IndicatorStationary{Float64}, ::GeneralizedMetropolisHastings.ChainStandard{Float64,Float64,Array{T,1},Array}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/GMHRunner.jl:39
 [9] run!(::GeneralizedMetropolisHastings.GMHRunner, ::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.ScalableMetropolisHastingsSampler{Float64,Array{Float64,2}}, ::GeneralizedMetropolisHastings.ScaleTuner) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/runners/GMHRunner.jl:24
 [10] include_from_node1(::String) at ./loading.jl:532
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion; at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/runtests.jl:71 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:532
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:298
 [17] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl, in expression starting on line 46
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
WARNING: sin{T <: Number}(x::AbstractArray{T}) is deprecated, use sin.(x) instead. [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50
 [3] (::Base.Serializer.__deserialized_types__.##37#38)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl:28
Stacktrace:
 [4] _evaluate(::Type{
Val [1] {false}depwarn}, ::(::GeneralizedMetropolisHastings.TargetModelString{, ::GeneralizedMetropolisHastings.SymbolParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{) at ./deprecated.jl:64
 [2] sin(::LinSpace{Float64}) at ./deprecated.jl:50Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [3] (::Base.Serializer.__deserialized_types__.##37#38)(::Array{Float64,1}, ::LinSpace{Float64}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/test/functionality/sintest1.jl:28
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings
. [4] MetropolisHastingsSamplerState{_evaluate(GeneralizedMetropolisHastings.::SingleSymmetricDistributionWrapper{Type{Distributions.ValMvNormal{}}false}}),  at ::/home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions
.Uniform [9] {Float64},Float64}(::Base.##487#488{Base.CallMsg{:call}}),(GeneralizedMetropolisHastings.)DataArray at {./multi.jl:1471Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.
NoiseModelGaussian [10] {Float64run_work_thunk,Array({::Float64,1Base}}.##487#488}{, ::BaseArray.{CallMsg{Float64,:call1}}}),  at ::/home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/TargetModel.jl:38Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [5] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},
GeneralizedMetropolisHastings. [12] NoiseModelGaussian{Float64,Array{Float64,1}}(::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})}, (::) at GeneralizedMetropolisHastings../event.jl:66BaseSample
while loading no file, in expression starting on line 0{
Float64,Float64,Array{Float64,1},Array{Float64,2}}, ::Int64) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:33
 [6] geometry!(::GeneralizedMetropolisHastings.TargetModel{GeneralizedMetropolisHastings.ParameterUnivariate{Distributions.Uniform{Float64},Float64},GeneralizedMetropolisHastings.DataArray{Float64,Float64,Array{Float64,1}},GeneralizedMetropolisHastings.NoiseModelGaussian{Float64,Array{Float64,1}}}, ::GeneralizedMetropolisHastings.BaseSample{Float64,Float64,Array{Float64,1},Array{Float64,2}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/models/geometry.jl:22
 [7] iterate!(::GeneralizedMetropolisHastings.GMHSegment, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/GMHSegment.jl:18
 [8] iterate!(::Future, ::GeneralizedMetropolisHastings.MetropolisHastingsSamplerState{GeneralizedMetropolisHastings.SingleSymmetricDistributionWrapper{Distributions.MvNormal}}) at /home/vagrant/.julia/v0.6/GeneralizedMetropolisHastings/src/jobsegments/jobsegments.jl:19
 [9] (::Base.##487#488{Base.CallMsg{:call}})() at ./multi.jl:1471
 [10] run_work_thunk(::Base.##487#488{Base.CallMsg{:call}}, ::Bool) at ./multi.jl:1024
 [11] run_work_thunk at ./multi.jl:1033 [inlined]
 [12] (::Base.##462#464{Base.RemoteValue,Base.##487#488{Base.CallMsg{:call}}})() at ./event.jl:66
while loading no file, in expression starting on line 0
  accepted/proposed = 59/300
  acceptance rate = 0.197
  scalefactor = 0.774
  cummulative scaling = 0.774
  accepted/proposed = 250/300
  acceptance rate = 0.833
  scalefactor = 1.357
  cummulative scaling = 1.051
  accepted/proposed = 245/300
  acceptance rate = 0.817
  scalefactor = 1.349
  cummulative scaling = 1.418
  accepted/proposed = 231/300
  acceptance rate = 0.77
  scalefactor = 1.322
  cummulative scaling = 1.874
  accepted/proposed = 217/300
  acceptance rate = 0.723
  scalefactor = 1.287
  cummulative scaling = 2.413
  accepted/proposed = 174/300
  acceptance rate = 0.58
  scalefactor = 1.125
  cummulative scaling = 2.714
  accepted/proposed = 44/300
  acceptance rate = 0.147
  scalefactor = 0.753
  cummulative scaling = 2.044
  accepted/proposed = 178/300
  acceptance rate = 0.593
  scalefactor = 1.144
  cummulative scaling = 2.337
  accepted/proposed = 126/300
  acceptance rate = 0.42
  scalefactor = 0.931
  cummulative scaling = 2.176
  accepted/proposed = 169/300
  acceptance rate = 0.563
  scalefactor = 1.101
  cummulative scaling = 2.396
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.24597]
Σ: [0.0574039]
)


==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.24597]
Σ: [0.0574039]
)


==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: FullNormal(
dim: 1
μ: [2.24745]
Σ: [0.0574039]
)


==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1532, acceptance rate = 0.5106666666666667
Total runtime = 3.621600766
Additional fields: :values, :loglikelihood
RemoteSegments with 2 segments and 15 proposals per segment.
Additional fields: :remote, :acceptances, :collectedsamples, :prop2collected
==============
Burnin started
==============
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.0001]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 0
  runningmean: [0.0]
  runningcov: [0.0]
  scale: 0.01
)
==================================
  accepted/proposed = 80/300
  acceptance rate = 0.267
  accepted/proposed = 58/300
  acceptance rate = 0.193
  accepted/proposed = 118/300
  acceptance rate = 0.393
  accepted/proposed = 45/300
  acceptance rate = 0.15
  accepted/proposed = 136/300
  acceptance rate = 0.453
  accepted/proposed = 110/300
  acceptance rate = 0.367
  accepted/proposed = 177/300
  acceptance rate = 0.59
  accepted/proposed = 118/300
  acceptance rate = 0.393
  accepted/proposed = 84/300
  acceptance rate = 0.28
  accepted/proposed = 128/300
  acceptance rate = 0.427
================
Burnin completed
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00324772]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [3.00724]
  runningcov: [0.00314772]
  scale: 0.01
)
==================================
================
Main run started
================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00324772]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 101
  runningmean: [3.00724]
  runningcov: [0.00314772]
  scale: 0.01
)
==================================
Iteration 10/100
Iteration 20/100
Iteration 30/100
Iteration 40/100
Iteration 50/100
Iteration 60/100
Iteration 70/100
Iteration 80/100
Iteration 90/100
Iteration 100/100
==================
Main run completed
==================
Sampler state variables for indicator state:
 ["density"]: DistributionWrapper with fields:
  distribution: ZeroMeanFullNormal(
dim: 1
μ: [0.0]
Σ: [0.00168646]
)

 ["runningstate"]: Nullable{GeneralizedMetropolisHastings.NormalRunningState{Float64}}(NormalRunningState with fields:
  iteration: 201
  runningmean: [3.00412]
  runningcov: [0.00158646]
  scale: 0.01
)
==================================
ChainStandard with numparas = 1 and numsamples = 3000
Samples proposed = 3000, samples accepted = 1439, acceptance rate = 0.4796666666666667
Total runtime = 4.462406894
Additional fields: :values, :loglikelihood

INFO: GeneralizedMetropolisHastings tests passed

>>> End of log
