>>> 'Pkg.add("LARS")' log
INFO: Installing ArrayViews v0.6.4
INFO: Installing BinDeps v0.4.2
INFO: Installing Calculus v0.1.15
INFO: Installing Distributions v0.10.0
INFO: Installing LARS v0.0.3
INFO: Installing PDMats v0.4.2
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing StatsBase v0.9.0
INFO: Installing StatsFuns v0.3.0
INFO: Installing URIParser v0.1.5
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("LARS")' log
Julia Version 0.5.0-rc0+187
Commit 1eeb773 (2016-08-04 02:23 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1430.921875 MB free)
Uptime: 31759.0 sec
Load Avg:  0.9287109375  0.94482421875  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1660516 s       5448 s     253008 s     827942 s         85 s
#2  3500 MHz     544652 s         60 s     111822 s    2376993 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - LARS                          0.0.3
11 additional packages:
 - ArrayViews                    0.6.4
 - BinDeps                       0.4.2
 - Calculus                      0.1.15
 - Compat                        0.8.6
 - Distributions                 0.10.0
 - PDMats                        0.4.2
 - Rmath                         0.1.2
 - SHA                           0.2.0
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.0
 - URIParser                     0.1.5
INFO: Testing LARS
WARNING: error while reinitializing value MethodTable(name=:addrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{1}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{2}}, Type{ArrayViews.ContRank{4}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#addrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.addrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#addrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:minrank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{0}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{1}}, Type{ArrayViews.ContRank{4}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{2}}, Type{ArrayViews.ContRank{1}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{3}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{4}}, Type{ArrayViews.ContRank{0}}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#M<:Any}}, Type{ArrayViews.ContRank{#N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#minrank, Type{ArrayViews.ContRank{#N<:Any}}, Type{ArrayViews.ContRank{0}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.minrank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#minrank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:restrict_crank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{3}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#M<:Any}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#N<:Any}}, Tuple{}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#restrict_crank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Rmath.ji for module Rmath.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsFuns.ji for module StatsFuns.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Distributions.ji for module Distributions.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsBase.ji for module StatsBase.

WARNING: deprecated syntax "x::Float64".
Use "local x::Float64" instead.

WARNING: deprecated syntax "r::Float64".
Use "local r::Float64" instead.

WARNING: deprecated syntax "rmin::Float64".
Use "local rmin::Float64" instead.

WARNING: deprecated syntax "rmax::Float64".
Use "local rmax::Float64" instead.
WARNING: both ArrayViews and Base export "view"; uses of it in module LARS must be qualified
ERROR: LoadError: UndefVarError: view not defined
 in #3 at /home/vagrant/.julia/v0.5/LARS/src/lar.jl:142 [inlined]
 in next at ./generator.jl:26 [inlined]
 in collect(::Base.Generator{UnitRange{Int64},LARS.##3#4{Float64,Array{Float64,2}}}) at ./array.jl:274
 in standardize!(::Array{Float64,2}) at /home/vagrant/.julia/v0.5/LARS/src/lar.jl:141
 in #lars#5(::Symbol, ::Bool, ::Bool, ::Float64, ::Int64, ::Float64, ::Bool, ::Bool, ::LARS.#lars, ::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/LARS/src/lar.jl:166
 in lars(::Array{Float64,2}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/LARS/src/lar.jl:156
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/LARS/test/runtests.jl, in expression starting on line 24
================================[ ERROR: LARS ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/LARS/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: LARS had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
