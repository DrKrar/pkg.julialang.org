>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.6.0-dev.1378
Commit 1e0e793 (2016-12-03 13:48 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (537.24609375 MB free)
Uptime: 3786.0 sec
Load Avg:  0.95849609375  0.955078125  0.900390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     127681 s        110 s      27521 s     197863 s          7 s
#2  3504 MHz      87571 s         50 s      19355 s     260100 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.8.0
2 additional packages:
 - Compat                        0.9.5
 - DoubleDouble                  0.2.0
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.0522289 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.935321; 0.0 0.904149 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.96325; 0.0 0.0 0.0936875 0.0 0.0 0.0 0.0 0.0 0.0 0.23962; 0.0 0.0 0.0 0.216155 0.0 0.0 0.0 0.0 0.0 0.173865; 0.0 0.0 0.0 0.0 0.928118 0.0 0.0 0.0 0.0 0.763253; 0.0 0.0 0.0 0.0 0.0 0.206345 0.0 0.0 0.0 0.723645; 0.0 0.0 0.0 0.0 0.0 0.0 0.851395 0.0 0.0 0.676683; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0464385 0.0 0.147693; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.127921 0.27422; 0.935321 0.96325 0.23962 0.173865 0.763253 0.723645 0.676683 0.147693 0.27422 0.738583]
(U,Lambda) = eig(full(A)) = ([-1.29154,0.0465732,0.0899134,0.118216,0.154198,0.215656,0.480929,0.86588,0.919614,2.56558],
[-0.467048 0.149174 -0.359928 -0.413742 0.449931 -0.0160023 -0.430635 0.0210918 -0.00982833 0.264953; -0.29437 0.00101318 0.0171556 0.0357748 -0.0630028 0.00391189 0.449236 -0.461821 -0.567722 0.41278; -0.116072 0.00458765 0.920712 -0.285158 0.194243 -0.00549314 -0.122136 0.00569362 -0.00264431 0.0690168; -0.0773791 0.000924813 0.0199723 0.051818 -0.137651 0.975898 -0.12961 0.00490991 -0.0022527 0.052688; -0.230732 0.000780989 0.0132049 0.0275081 -0.0483756 0.0029954 0.336884 -0.225011 0.818064 0.331863; -0.32417 0.00408551 0.0901308 0.239679 -0.680696 -0.217289 -0.520178 0.0201316 -0.00924704 0.218382; -0.211886 0.000758414 0.0128868 0.0269401 -0.0476084 0.00297614 0.360528 0.8572 -0.0904095 0.281054; -0.0740692 -0.988785 -0.0492651 -0.0600621 0.0672294 -0.0024404 -0.0670939 0.003307 -0.00154167 0.0417417; -0.129629 0.0030407 0.104627 0.824711 0.511893 -0.0087392 -0.153327 0.00681803 -0.00315699 0.0800919; 0.671002 -0.000902029 -0.0145017 -0.0291894 0.0490517 -0.00279606 -0.19738 0.0183481 -0.00911446 0.711969])
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in bisect(::Arrowhead.SymArrow{Float64}, ::Char) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:557
 in aheig(::Arrowhead.SymArrow{Float64}, ::Int64, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:341
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:528
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
Remedy 3 
Remedy 3 
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:373 [inlined]
 in macro expansion at ./cartesian.jl:62 [inlined]
 in macro expansion at ./multidimensional.jl:370 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:363 [inlined]
 in macro expansion at ./multidimensional.jl:321 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:314
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
