>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.6.0-dev.787
Commit c71f205 (2016-09-26 16:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (495.77734375 MB free)
Uptime: 4079.0 sec
Load Avg:  1.009765625  1.03564453125  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz     145177 s         97 s      25284 s     208108 s          5 s
#2  3511 MHz      68729 s         46 s      18916 s     308780 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.8.0
2 additional packages:
 - Compat                        0.9.2
 - DoubleDouble                  0.2.0
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.275778 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.742079; 0.0 0.453806 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.567852; 0.0 0.0 0.732556 0.0 0.0 0.0 0.0 0.0 0.0 0.0893452; 0.0 0.0 0.0 0.295003 0.0 0.0 0.0 0.0 0.0 0.0943292; 0.0 0.0 0.0 0.0 0.253875 0.0 0.0 0.0 0.0 0.194807; 0.0 0.0 0.0 0.0 0.0 0.264195 0.0 0.0 0.0 0.306116; 0.0 0.0 0.0 0.0 0.0 0.0 0.599356 0.0 0.0 0.277035; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.986834 0.0 0.151063; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.557405 0.416212; 0.742079 0.567852 0.0893452 0.0943292 0.194807 0.306116 0.277035 0.151063 0.416212 0.540309]
(U,Lambda) = eig(full(A)) = ([-0.683941,0.254854,0.265894,0.29471,0.386877,0.528063,0.591254,0.730552,0.974328,1.61653],
[-0.524316 -0.173227 0.383071 -0.120876 0.575271 0.173703 0.0641157 -0.0364262 -0.086398 -0.399648; -0.338436 -0.0139409 0.015419 0.0110067 -0.73073 0.45159 0.11261 -0.0458049 -0.0887252 -0.352642; -0.0427703 -0.00091352 0.000976889 0.00062926 -0.0222603 -0.0258013 -0.0172347 0.995229 -0.030055 -0.0729807; -0.0653395 -0.0114757 0.0165345 0.991994 0.0884273 0.0239016 0.00867894 -0.00483468 -0.0112933 -0.0515402; -0.140855 0.971576 -0.0827031 -0.0147114 0.126147 0.0419569 0.0157386 -0.00912301 -0.0219912 -0.103227; -0.218929 -0.160064 -0.919678 -0.0309357 0.214901 0.0685091 0.0255118 -0.014653 -0.0350589 -0.163447; -0.146384 -0.00392779 0.00423902 0.00280427 -0.112293 -0.229477 -0.932069 -0.047138 -0.0600879 -0.19666; -0.0613096 -0.00100801 0.00106915 0.000673064 -0.0216857 -0.0194452 -0.0104089 0.0131583 0.982396 -0.173223; -0.227357 -0.00671923 0.0072851 0.00488588 -0.210209 -0.837662 0.335161 -0.053661 -0.0811914 -0.283755; 0.67809 0.00488432 -0.00510243 -0.00308376 0.0861259 0.0590539 0.0272572 -0.0223233 -0.08133 -0.722062])
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in bisect(::Arrowhead.SymArrow{Float64}, ::Char) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:557
 in aheig(::Arrowhead.SymArrow{Float64}, ::Int64, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:341
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:528
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:268
 in _start() at ./client.jl:332
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:372 [inlined]
 in macro expansion at ./cartesian.jl:62 [inlined]
 in macro expansion at ./multidimensional.jl:369 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:362 [inlined]
 in macro expansion at ./multidimensional.jl:320 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:313
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:268
 in _start() at ./client.jl:332
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:245
 in _start() at ./client.jl:332

>>> End of log
