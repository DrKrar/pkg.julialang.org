>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.6.0-dev.787
Commit c71f205 (2016-09-26 16:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (518.171875 MB free)
Uptime: 3725.0 sec
Load Avg:  0.90673828125  0.94140625  0.89697265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     143830 s         57 s      26250 s     168272 s          7 s
#2  3503 MHz      62547 s         91 s      18335 s     277519 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.7.1
2 additional packages:
 - Compat                        0.9.2
 - DoubleDouble                  0.2.0
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.166638 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.705071; 0.0 0.615041 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.551023; 0.0 0.0 0.0962621 0.0 0.0 0.0 0.0 0.0 0.0 0.0666115; 0.0 0.0 0.0 0.0191792 0.0 0.0 0.0 0.0 0.0 0.560324; 0.0 0.0 0.0 0.0 0.475488 0.0 0.0 0.0 0.0 0.138867; 0.0 0.0 0.0 0.0 0.0 0.465507 0.0 0.0 0.0 0.282966; 0.0 0.0 0.0 0.0 0.0 0.0 0.0330145 0.0 0.0 0.0844599; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.975277 0.0 0.101788; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.718013 0.495479; 0.705071 0.551023 0.0666115 0.560324 0.138867 0.282966 0.0844599 0.101788 0.495479 0.328247]
(U,Lambda) = eig(full(A)) = ([-0.91042,0.0326337,0.070628,0.0973499,0.380303,0.473389,0.512086,0.679013,0.970849,1.58683],
[-0.453624 -0.0233084 0.536179 0.162741 0.555717 0.030468 0.212448 -0.0885332 -0.0378271 -0.339937; -0.250306 -0.00419124 0.0738986 0.0170225 -0.395311 -0.0515635 -0.55709 -0.554165 -0.066818 -0.388248; -0.0458521 -0.00463765 0.189726 -0.979304 0.0394932 0.00234131 0.0166741 -0.00735406 -0.00328614 -0.0305992; -0.417682 0.18449 -0.795168 -0.114636 0.261298 0.0163523 0.118325 -0.0546343 -0.0254034 -0.244739; -0.069433 -0.00138911 0.0250431 0.00587316 -0.245687 -0.876798 0.394949 -0.0438976 -0.0120953 -0.0855583; -0.142509 -0.00289584 0.0523198 0.0122921 -0.55928 0.475872 0.632326 -0.0852677 -0.0241595 -0.172789; -0.0620356 -0.982518 -0.163946 -0.0209954 0.0409556 0.00254229 0.0183507 -0.00841163 -0.00388565 -0.0372189; -0.0374047 -0.000478353 0.00821506 0.00185422 -0.0288105 -0.00268835 -0.0228738 0.0221044 0.991813 -0.113965; -0.210842 -0.00320254 0.0558801 0.0127671 -0.247078 -0.0268487 -0.250447 0.817391 -0.0845523 -0.390488; 0.69295 0.00442996 -0.0730121 -0.0159928 0.168404 0.0132555 0.104088 -0.0643371 -0.0431459 -0.684721])
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in bisect(::Arrowhead.SymArrow{Float64}, ::Char) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:557
 in aheig(::Arrowhead.SymArrow{Float64}, ::Int64, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:341
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:528
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:268
 in _start() at ./client.jl:332
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:372 [inlined]
 in macro expansion at ./cartesian.jl:62 [inlined]
 in macro expansion at ./multidimensional.jl:369 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:362 [inlined]
 in macro expansion at ./multidimensional.jl:320 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:313
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:268
 in _start() at ./client.jl:332
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:245
 in _start() at ./client.jl:332

>>> End of log
