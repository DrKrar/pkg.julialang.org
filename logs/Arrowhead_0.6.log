>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.6.0-dev.1321
Commit a4612cc (2016-11-27 23:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (541.1328125 MB free)
Uptime: 3374.0 sec
Load Avg:  1.0458984375  1.05517578125  0.9609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz     131194 s         57 s      26359 s     150881 s          4 s
#2  3511 MHz      84916 s         91 s      17664 s     223727 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.8.0
2 additional packages:
 - Compat                        0.9.4
 - DoubleDouble                  0.2.0
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.242327 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.935306; 0.0 0.782754 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.133581; 0.0 0.0 0.801811 0.0 0.0 0.0 0.0 0.0 0.0 0.966661; 0.0 0.0 0.0 0.358085 0.0 0.0 0.0 0.0 0.0 0.835731; 0.0 0.0 0.0 0.0 0.581408 0.0 0.0 0.0 0.0 0.344478; 0.0 0.0 0.0 0.0 0.0 0.846025 0.0 0.0 0.0 0.663905; 0.0 0.0 0.0 0.0 0.0 0.0 0.283312 0.0 0.0 0.0407553; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.848002 0.0 0.745462; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.964821 0.0157295; 0.935306 0.133581 0.966661 0.835731 0.344478 0.663905 0.0407553 0.745462 0.0157295 0.249264]
(U,Lambda) = eig(full(A)) = ([-1.51339,0.283107,0.298057,0.506834,0.608913,0.783041,0.824606,0.846922,0.964806,2.35492],
[-0.389839 0.114443 -0.756112 0.381254 -0.172505 -0.00370085 0.0260801 0.00152874 -0.00125245 -0.295657; -0.0425729 -0.00133402 0.0124163 -0.0521988 0.0519538 -0.993327 0.0518212 0.00205715 -0.000709874 -0.056741; -0.305543 -0.00929898 0.0864517 -0.353332 0.33882 0.110187 0.688518 0.0211755 -0.00573763 -0.415645; -0.32679 -0.0556177 0.627232 0.605773 -0.225276 -0.00420764 0.0290858 0.00168945 -0.00133263 -0.279495; -0.120339 -0.00576219 0.0547714 -0.498048 -0.846796 -0.00365523 0.0229979 0.00128209 -0.000869248 -0.129711; -0.205915 -0.00588494 0.0545844 -0.211038 0.189311 0.0225526 -0.503281 0.730783 -0.00540742 -0.29383; -0.0165995 -0.991759 -0.124528 0.019659 -0.00846295 -0.000174488 0.00122247 7.14576e-5 -5.78568e-5 -0.0131379; -0.231017 -0.00658474 0.0610695 -0.235589 0.210809 0.0245522 -0.517341 -0.682272 -0.00617448 -0.330359; -0.00464477 -0.000115132 0.00106282 -0.00370306 0.00298814 0.000185134 -0.00182142 -0.000131841 0.999947 -0.0075565; 0.73179 0.00498977 -0.0450524 0.10782 -0.0676119 -0.00213952 0.0162363 0.000988197 -0.000967458 -0.667804])
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in bisect(::Arrowhead.SymArrow{Float64}, ::Char) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:557
 in aheig(::Arrowhead.SymArrow{Float64}, ::Int64, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:341
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:528
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:373 [inlined]
 in macro expansion at ./cartesian.jl:62 [inlined]
 in macro expansion at ./multidimensional.jl:370 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:363 [inlined]
 in macro expansion at ./multidimensional.jl:321 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:314
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl, in expression starting on line 229
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
