>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.6.0-dev.1847
Commit 8f9036a (2017-01-02 23:39 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1748.3203125 MB free)
Uptime: 15697.0 sec
Load Avg:  0.9541015625  1.0703125  1.14306640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3508 MHz     764598 s       6404 s      75816 s     576001 s         11 s
#2  3508 MHz     288368 s         93 s      51042 s    1200939 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DifferentialDynamicProgramming 0.0.1
 - JSON                          0.8.0
2 additional packages:
 - Compat                        0.10.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:376 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.6/Requires/src/require.jl:12.
WARNING: Method definition back_pass(Any, Any, Array{#T<:Any, 2}, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any) in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:532 overwritten at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:633.
INFO: Compile time is high for this package, this is expected and is not an error.
WARNING: min{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use min.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] min(::Array{Float64,2}, ::Array{Float64,1}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:59
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
WARNING: max{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use max.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:59
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
WARNING: isfinite{T <: Number}(x::AbstractArray{T}) is deprecated, use isfinite.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] isfinite(::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:61
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
==========
Starting box-QP, dimension 500, initial value: 62421.204   
WARNING: min{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use min.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] min(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:141
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
WARNING: max{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use max.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:141
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
WARNING: min{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use min.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] min(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:146
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
WARNING: max{T1 <: Real,T2 <: Real}(x::AbstractArray{T1},y::AbstractArray{T2}) is deprecated, use max.(x,y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,2}, ::Array{Float64,2}) at ./deprecated.jl:50
 [3] #boxQP#1(::Int64, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Int64, ::Function, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:146
 [4] (::DifferentialDynamicProgramming.#kw##boxQP)(::Array{Any,1}, ::DifferentialDynamicProgramming.#boxQP, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demoQP() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/boxQP.jl:198
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 6
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 3.02568e-12  final value -32.8665      factorizations 15
  3.820379 seconds (1.41 M allocations: 126.210 MB, 0.87% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl
WARNING: isnan{T <: Number}(x::AbstractArray{T}) is deprecated, use isnan.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] isnan(::Array{Float64,1}) at ./deprecated.jl:50
 [3] (::DifferentialDynamicProgramming.#lin_dyn_f#45)(::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:56
 [4] forward_pass(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Int64, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::Array{Any,1}, ::Array{Any,1}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:420
 [5] #iLQG#3(::Array{Any,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Array{Any,1}, ::Int64, ::Int64, ::DifferentialDynamicProgramming.##40#50, ::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:168
 [6] (::DifferentialDynamicProgramming.#kw##iLQG)(::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::Function, ::Function, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [7] macro expansion at ./util.jl:194 [inlined]
 [8] demo_linear() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:298
 [12] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 7
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] abs(::Array{Float64,1}) at ./deprecated.jl:50
 [3] #iLQG#3(::Array{Any,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Array{Any,1}, ::Int64, ::Int64, ::DifferentialDynamicProgramming.##40#50, ::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:170
 [4] (::DifferentialDynamicProgramming.#kw##iLQG)(::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::Function, ::Function, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demo_linear() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 7

=========== begin iLQG ===========
WARNING: isnan{T <: Number}(x::AbstractArray{T}) is deprecated, use isnan.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] isnan(::Array{Float64,2}) at ./deprecated.jl:50
 [3] (::NTuple{5,Array{Float64,2}})(::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:49
 [4] (::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}})(::Array{Float64,2}, ::Array{Float64,2}, ::UnitRange{Int64}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [5] #iLQG#3(::Array{Any,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Array{Any,1}, ::Int64, ::Int64, ::DifferentialDynamicProgramming.##40#50, ::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:218
 [6] (::DifferentialDynamicProgramming.#kw##iLQG)(::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::Function, ::Function, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [7] macro expansion at ./util.jl:194 [inlined]
 [8] demo_linear() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [9] include_from_node1(::String) at ./loading.jl:532
 [10] include(::String) at ./sysimg.jl:14
 [11] process_options(::Base.JLOptions) at ./client.jl:298
 [12] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 7
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] abs(::Array{Float64,2}) at ./deprecated.jl:50
 [3] #iLQG#3(::Array{Any,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Array{Any,1}, ::Int64, ::Int64, ::DifferentialDynamicProgramming.##40#50, ::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:248
 [4] (::DifferentialDynamicProgramming.#kw##iLQG)(::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::Function, ::Function, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [5] macro expansion at ./util.jl:194 [inlined]
 [6] demo_linear() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [7] include_from_node1(::String) at ./loading.jl:532
 [8] include(::String) at ./sysimg.jl:14
 [9] process_options(::Base.JLOptions) at ./client.jl:298
 [10] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 7
iteration     cost    reduction     expected    gradient    log10(lambda)
1           NO STEP     0           0           1.56e-16    13.5        

EXIT: lambda > lambdaMax
ERROR: LoadError: Failure: no iterations completed, something is wrong.
Stacktrace:
 [1] #iLQG#3(::Array{Any,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::Int64, ::Int64, ::Array{Any,1}, ::Int64, ::Int64, ::DifferentialDynamicProgramming.##40#50, ::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::DifferentialDynamicProgramming.#f#47{Array{Float64,2},Array{Float64,2},Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_f#45}, ::DifferentialDynamicProgramming.#fT#48{Array{Float64,2},DifferentialDynamicProgramming.#lin_dyn_fT#46}, ::DifferentialDynamicProgramming.#df#49{Array{Float64,2},Array{Float64,2},NTuple{5,Array{Float64,2}}}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/iLQG.jl:381
 [2] (::DifferentialDynamicProgramming.#kw##iLQG)(::Array{Any,1}, ::DifferentialDynamicProgramming.#iLQG, ::Function, ::Function, ::Function, ::Array{Float64,2}, ::Array{Float64,2}) at ./<missing>:0
 [3] macro expansion at ./util.jl:194 [inlined]
 [4] demo_linear() at /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/src/demo_linear.jl:69
 [5] include_from_node1(::String) at ./loading.jl:532
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:298
 [8] _start() at ./client.jl:364
while loading /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl, in expression starting on line 7
===================[ ERROR: DifferentialDynamicProgramming ]====================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/DifferentialDynamicProgramming/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: DifferentialDynamicProgramming had test errors
Stacktrace:
 [1] #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:754
 [2] (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 [3] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 [4] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 [5] #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 [6] (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 [7] #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261
 [8] test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:261
 [9] eval(::Module, ::Any) at ./boot.jl:236
 [10] process_options(::Base.JLOptions) at ./client.jl:275
 [11] _start() at ./client.jl:364

>>> End of log
