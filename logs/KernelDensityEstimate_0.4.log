>>> 'Pkg.add("KernelDensityEstimate")' log
INFO: Cloning cache of KernelDensityEstimate from git://github.com/dehann/KernelDensityEstimate.jl.git
INFO: Installing Cairo v0.2.31
INFO: Installing Calculus v0.1.14
INFO: Installing ColorTypes v0.2.2
INFO: Installing Colors v0.6.4
INFO: Installing Compose v0.4.2
INFO: Installing Contour v0.1.0
INFO: Installing DataStructures v0.4.4
INFO: Installing Dates v0.4.4
INFO: Installing Distances v0.3.1
INFO: Installing Distributions v0.9.0
INFO: Installing DualNumbers v0.2.2
INFO: Installing FixedPointNumbers v0.1.3
INFO: Installing FixedSizeArrays v0.2.1
INFO: Installing Fontconfig v0.0.2
INFO: Installing Gadfly v0.4.2
INFO: Installing Graphics v0.1.3
INFO: Installing Grid v0.4.0
INFO: Installing Hexagons v0.0.4
INFO: Installing Iterators v0.1.9
INFO: Installing KernelDensity v0.1.2
INFO: Installing KernelDensityEstimate v0.0.4
INFO: Installing Loess v0.0.6
INFO: Installing Measures v0.0.2
INFO: Installing NaNMath v0.2.1
INFO: Installing Optim v0.5.0
INFO: Installing PDMats v0.4.1
INFO: Installing PositiveFactorizations v0.0.1
INFO: Installing Showoff v0.0.7
INFO: Installing WoodburyMatrices v0.1.5
INFO: Building Cairo
INFO: Package database updated

>>> 'Pkg.test("KernelDensityEstimate")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing KernelDensityEstimate
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/Cairo.ji for module Cairo.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/Gadfly.ji for module Gadfly.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/Compose.ji for module Compose.
Running UnitTest1D01...Success
Running UnitTest1Dlcv01...Success
Running UnitTest2D01...Success
Running UnitTest2Dvar01...Success
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,true,true,true,true,true,true]
passt = passt && rangeTestProds(D=2,M=2) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,true,true,true,true,true,true]
passt = passt && rangeTestProds(D=2,M=4) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,true,true,true,true,false,true]
passt = passt && rangeTestProds(D=2,M=6) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,false,true,true,true,false,false]
passt = passt && rangeTestProds(D=3,M=6,MCMC=10) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[false,false,false,true,true,true,false,false,true,true]
passt = passt && rangeTestProds(D=4,M=6,MCMC=10) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,true,true,true,true,true,true]
passt = passt && rangeTestProds(D=3,M=5,N=300) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,false,true,true,true,true,true,true,true,true]
passt = passt && rangeTestProds(D=2,M=7,n=300) = true
v = [testProds(D=D,M=M,N=N,n=n,dev=dev,MCMC=MCMC) for i = 1:10] = Any[true,true,true,true,true,true,true,true,true,true]
passt = passt && rangeTestProds(D=3,M=2,MCMC=100) = true
a = intgAppxGaussianOffs(offs=0.0,dim=1) = 0.24316193920090548
testflag = testflag && 0.2 < a < 0.35 = true
a = intgAppxGaussianOffs(offs=1.0,dim=1,N=1000) = 0.19689874702420562
testflag = testflag && 0.1 < a < 0.3 = true
a = intgAppxGaussianOffs(offs=-2.0,dim=1,N=1000) = 0.11849157834325533
testflag = testflag && 0.01 < a < 0.15 = true
a = intgAppxGaussianOffs(offs=0.0,dim=2) = 0.06661198566036249
testflag = testflag && 0.05 < a < 0.12 = true
INFO: KernelDensityEstimate tests passed

>>> End of log
