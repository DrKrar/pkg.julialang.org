>>> 'Pkg.add("Coverage")' log
INFO: Cloning cache of Coverage from https://github.com/JuliaCI/Coverage.jl.git
INFO: Cloning cache of Git from https://github.com/JuliaPackaging/Git.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing BufferedStreams v0.2.0
INFO: Installing Codecs v0.2.0
INFO: Installing Coverage v0.3.2
INFO: Installing Git v0.1.0
INFO: Installing HttpCommon v0.2.6
INFO: Installing HttpParser v0.2.0
INFO: Installing Libz v0.2.1
INFO: Installing MbedTLS v0.4.2
INFO: Installing Requests v0.3.11
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building Git
INFO: Using git version 1.9.1 found on path at `/usr/bin/git`
INFO: Building HttpParser
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in macro expansion; at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:269
 in _start() at ./client.jl:356
while loading /home/vagrant/.julia/v0.6/HttpParser/deps/build.jl, in expression starting on line 71
INFO: Building MbedTLS
Using system libraries...
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Coverage
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Coverage")' log
Julia Version 0.6.0-dev.1653
Commit 66ab171 (2016-12-22 07:36 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (707.2421875 MB free)
Uptime: 11659.0 sec
Load Avg:  1.0244140625  1.0341796875  1.08837890625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     627818 s        112 s      86084 s     346737 s         29 s
#2  3504 MHz     215096 s         51 s      47210 s     870416 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Coverage                      0.3.2
 - JSON                          0.8.0
12 additional packages:
 - BinDeps                       0.4.5
 - BufferedStreams               0.2.0
 - Codecs                        0.2.0
 - Compat                        0.9.5
 - Git                           0.1.0
 - HttpCommon                    0.2.6
 - HttpParser                    0.2.0
 - Libz                          0.2.1
 - MbedTLS                       0.4.2
 - Requests                      0.3.11
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Computing test dependencies for Coverage...
INFO: Installing Docile v0.5.23
INFO: Testing Coverage
Coverage.MallocInfo[]
Coverage.process_file: Detecting coverage for test/data/Coverage.jl
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 in (::##2#6{Base.AbstractIOBuffer{Array{UInt8,1}}})(::IOStream) at /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl:37
 in open(::##2#6{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::String) at ./iostream.jl:152
 in (::##1#5)() at /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl:36
 in cd(::##1#5, ::String) at ./file.jl:69
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:292
 in _start() at ./client.jl:356
while loading /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl, in expression starting on line 27
Coverage.process_file: Detecting coverage for test/data/testparser.jl
Coverage.process_folder: Searching test/data for .jl files...
Coverage.process_file: Detecting coverage for test/data/Coverage.jl
Coverage.process_folder: Skipping Coverage.jl.cov, not a .jl file
Coverage.process_folder: Skipping expected.info, not a .jl file
Coverage.process_file: Detecting coverage for test/data/testparser.jl
Coverage.process_folder: Skipping testparser.jl.13882.cov, not a .jl file
Coverage.process_cov: Coverage file(s) for fakefile do not exist.
Assuming file has no coverage.
ERROR: LoadError: UndefVarError: write_body not defined
 in #do_stream_request#23(::Dict{String,String}, ::Void, ::Void, ::Dict{String,Dict{Any,Any}}, ::Array{Requests.FileParam,1}, ::Void, ::Dict{Any,Any}, ::Bool, ::Int64, ::Array{HttpCommon.Response,1}, ::MbedTLS.SSLConfig, ::Bool, ::Bool, ::Bool, ::Nullable{URIParser.URI}, ::Nullable{URIParser.URI}, ::Requests.#do_stream_request, ::URIParser.URI, ::String) at /home/vagrant/.julia/v0.6/Requests/src/Requests.jl:283
 in (::Requests.#kw##do_stream_request)(::Array{Any,1}, ::Requests.#do_stream_request, ::URIParser.URI, ::String) at ./<missing>:0
 in #do_request#22(::Array{Any,1}, ::Function, ::URIParser.URI, ::String) at /home/vagrant/.julia/v0.6/Requests/src/Requests.jl:290
 in (::Requests.#kw##do_request)(::Array{Any,1}, ::Requests.#do_request, ::URIParser.URI, ::String) at ./<missing>:0
 in #post#35(::Array{Any,1}, ::Function, ::URIParser.URI) at /home/vagrant/.julia/v0.6/Requests/src/Requests.jl:423
 in (::Requests.#kw##post)(::Array{Any,1}, ::Requests.#post, ::URIParser.URI) at ./<missing>:0
 in #submit_generic#6(::Array{Any,1}, ::Function, ::Array{Coverage.FileCoverage,1}) at /home/vagrant/.julia/v0.6/Coverage/src/codecovio.jl:157
 in (::Coverage.Codecov.#kw##submit_generic)(::Array{Any,1}, ::Coverage.Codecov.#submit_generic, ::Array{Coverage.FileCoverage,1}) at ./<missing>:0
 in #submit_local#5(::Array{Any,1}, ::Function, ::Array{Coverage.FileCoverage,1}) at /home/vagrant/.julia/v0.6/Coverage/src/codecovio.jl:103
 in submit_local(::Array{Coverage.FileCoverage,1}) at /home/vagrant/.julia/v0.6/Coverage/src/codecovio.jl:93
 in extract_codecov_url(::##11#28) at /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl:82
 in (::##9#26)() at /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl:137
 in withenv(::##9#26, ::Pair{String,Void}, ::Vararg{Pair{String,Void},N}) at ./env.jl:157
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:292
 in _start() at ./client.jl:356
while loading /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl, in expression starting on line 116
==============================[ ERROR: Coverage ]===============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Coverage/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Docile v0.5.23
ERROR: Coverage had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:269
 in _start() at ./client.jl:356

>>> End of log
