>>> 'Pkg.add("BackpropNeuralNet")' log
INFO: Cloning cache of BackpropNeuralNet from https://github.com/compressed/BackpropNeuralNet.jl.git
INFO: Installing BackpropNeuralNet v0.1.0

signal (15): Terminated
while loading no file, in expression starting on line 0
Allocations: 0 (Pool: 0; Big: 0); GC: 0
ERROR: GitError(Code:ENOTFOUND, Class:Tree, the path 'REQUIRE' does not exist in the given tree)
 in macro expansion at ./libgit2/error.jl:99 [inlined]
 in Base.LibGit2.GitUnknownObject(::Base.LibGit2.GitRepo, ::String) at ./libgit2/repository.jl:100
 in revparseid(::Base.LibGit2.GitRepo, ::String) at ./libgit2/repository.jl:128
 in (::Base.Pkg.Read.##5#6{String})(::Base.LibGit2.GitRepo) at ./pkg/read.jl:185
 in with(::Base.Pkg.Read.##5#6{String}, ::Base.LibGit2.GitRepo) at ./libgit2/types.jl:577
 in requires_path(::String, ::Dict{VersionNumber,Base.Pkg.Types.Available}) at ./pkg/read.jl:182
 in requires_list at ./pkg/read.jl:196 [inlined] (repeats 2 times)
 in build!(::Array{String,1}, ::Pipe, ::Set{Any}) at ./pkg/entry.jl:588
 in build!(::Array{String,1}, ::Dict{Any,Any}, ::Set{Any}) at ./pkg/entry.jl:634
 in build(::Array{String,1}) at ./pkg/entry.jl:656
 in resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}, ::Dict{String,VersionNumber}, ::Set{String}) at ./pkg/entry.jl:571
 in edit(::Function, ::String, ::Base.Pkg.Types.VersionSet, ::Vararg{Base.Pkg.Types.VersionSet,N} where N) at ./pkg/entry.jl:30
 in (::Base.Pkg.Entry.##1#3{String,Base.Pkg.Types.VersionSet})() at ./task.jl:335
Stacktrace:
 [1] sync_end() at ./task.jl:287
 [2] macro expansion at ./task.jl:303 [inlined]
 [3] add(::String, ::Base.Pkg.Types.VersionSet) at ./pkg/entry.jl:50
 [4] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}})() at ./pkg/dir.jl:31
 [5] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}}, ::String) at ./file.jl:69
 [6] #cd#1(::Array{Any,1}, ::Function, ::Function, ::String, ::Vararg{Any,N} where N) at ./pkg/dir.jl:31
 [7] add(::String) at ./pkg/pkg.jl:102

>>> 'Pkg.test("BackpropNeuralNet")' log
Julia Version 0.6.0-dev.2543
Commit fc00ad1 (2017-02-03 02:53 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (636.00390625 MB free)
Uptime: 3880.0 sec
Load Avg:  0.90966796875  0.9833984375  0.951171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     174079 s        108 s      23147 s     154711 s          7 s
#2  3500 MHz      58462 s         58 s      13278 s     306919 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
ERROR: GitError(Code:ENOTFOUND, Class:Tree, the path 'REQUIRE' does not exist in the given tree)
Stacktrace:
 [1] macro expansion at ./libgit2/error.jl:99 [inlined]
 [2] Base.LibGit2.GitUnknownObject(::Base.LibGit2.GitRepo, ::String) at ./libgit2/repository.jl:100
 [3] revparseid at ./libgit2/repository.jl:128 [inlined]
 [4] isfixed(::String, ::Base.LibGit2.GitRepo, ::Dict{VersionNumber,Base.Pkg.Types.Available}) at ./pkg/read.jl:67
 [5] #7 at ./pkg/read.jl:210 [inlined]
 [6] with(::Base.Pkg.Read.##7#8{Dict{String,Tuple{VersionNumber,Bool}}}, ::Base.LibGit2.GitRepo) at ./libgit2/types.jl:577
 [7] with(::Function, ::Type{Base.LibGit2.GitRepo}, ::String, ::Vararg{String,N} where N) at ./libgit2/types.jl:583
 [8] installed(::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}) at ./pkg/read.jl:208
 [9] #status#9(::String, ::Function, ::Base.PipeEndpoint) at ./pkg/entry.jl:130
 [10] (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#status,Tuple{Base.PipeEndpoint}})() at ./pkg/dir.jl:31
 [11] cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#status,Tuple{Base.PipeEndpoint}}, ::String) at ./file.jl:69
 [12] #cd#1(::Array{Any,1}, ::Function, ::Function, ::Base.PipeEndpoint, ::Vararg{Base.PipeEndpoint,N} where N) at ./pkg/dir.jl:31
 [13] versioninfo(::Base.PipeEndpoint, ::Bool) at ./interactiveutil.jl:302
 [14] versioninfo(::Bool) at ./interactiveutil.jl:305

>>> End of log
