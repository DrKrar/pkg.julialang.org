>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.6/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.6/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.6/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::ANY) at ./deprecated.jl:490
 in include_from_node1(::String) at ./loading.jl:532
 in include(::SubString{String}) at ./sysimg.jl:14
 in evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:69
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:152
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.6.0-dev.1178
Commit 421f079 (2016-11-02 19:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (824.76171875 MB free)
Uptime: 11860.0 sec
Load Avg:  1.0029296875  1.0146484375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz     651883 s       5100 s      85564 s     316141 s         22 s
#2  3492 MHz     236304 s       1307 s      41046 s     878310 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1755	 ParSpMatVec=0.0156	 speedup=11.2420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1755	 ParSpMatVec=0.0088	 speedup=19.8845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1755	 ParSpMatVec=0.0121	 speedup=14.4912
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1755	 ParSpMatVec=0.0090	 speedup=19.5295
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1755	 ParSpMatVec=0.0101	 speedup=17.3534
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1355	 ParSpMatVec=0.0441	 speedup=3.0748
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1355	 ParSpMatVec=0.0120	 speedup=11.2834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1355	 ParSpMatVec=0.0150	 speedup=9.0381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1355	 ParSpMatVec=0.0131	 speedup=10.3475
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1355	 ParSpMatVec=0.0140	 speedup=9.6570

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0642	 ParSpMatVec=0.0300	 speedup=2.1409
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0642	 ParSpMatVec=0.0128	 speedup=5.0125
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0642	 ParSpMatVec=0.0141	 speedup=4.5661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0642	 ParSpMatVec=0.0117	 speedup=5.4734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0642	 ParSpMatVec=0.0135	 speedup=4.7401

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0691	 ParSpMatVec=0.0363	 speedup=1.9035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0691	 ParSpMatVec=0.0022	 speedup=30.7725
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0691	 ParSpMatVec=0.0022	 speedup=31.8138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0691	 ParSpMatVec=0.0017	 speedup=41.1204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0691	 ParSpMatVec=0.0017	 speedup=39.6911

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0071	 ParSpMatVec=0.0452	 speedup=0.1570
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0071	 ParSpMatVec=0.0042	 speedup=1.6866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0071	 ParSpMatVec=0.0021	 speedup=3.3164
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0071	 ParSpMatVec=0.0029	 speedup=2.4352
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0071	 ParSpMatVec=0.0036	 speedup=1.9489

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0506	 speedup=0.9379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0035	 speedup=13.3988
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0027	 speedup=17.8262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0033	 speedup=14.3776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0026	 speedup=18.4460

INFO: ParSpMatVec tests passed

>>> End of log
