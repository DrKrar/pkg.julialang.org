>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.6/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.6/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.6/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @unix_only(::ANY) at ./deprecated.jl:470
 [3] include_from_node1(::String) at ./loading.jl:532
 [4] include(::SubString{String}) at ./sysimg.jl:14
 [5] evalfile(::SubString{String}, ::Array{String,1}) at ./loading.jl:572 (repeats 2 times)
 [6] cd(::##2#4, ::String) at ./file.jl:69
 [7] (::##1#3)(::IOStream) at ./none:13
 [8] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [9] eval(::Module, ::Any) at ./boot.jl:236
 [10] process_options(::Base.JLOptions) at ./client.jl:285
 [11] _start() at ./client.jl:374
while loading /home/vagrant/.julia/v0.6/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.6.0-dev.1973
Commit f4ed16b (2017-01-06 23:58 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (910.4296875 MB free)
Uptime: 10225.0 sec
Load Avg:  1.048828125  1.068359375  1.03271484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     632801 s       6625 s      64068 s     198521 s         17 s
#2  3500 MHz     186303 s        270 s      33529 s     779957 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2954	 ParSpMatVec=0.0192	 speedup=15.3974
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2954	 ParSpMatVec=0.0089	 speedup=33.1117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2954	 ParSpMatVec=0.0092	 speedup=32.1733
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2954	 ParSpMatVec=0.0076	 speedup=38.7800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2954	 ParSpMatVec=0.0088	 speedup=33.5794
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.3525	 ParSpMatVec=0.0330	 speedup=10.6809
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.3525	 ParSpMatVec=0.0131	 speedup=26.9357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.3525	 ParSpMatVec=0.0090	 speedup=39.2183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.3525	 ParSpMatVec=0.0096	 speedup=36.7612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.3525	 ParSpMatVec=0.0078	 speedup=44.9970

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0830	 ParSpMatVec=0.0213	 speedup=3.8977
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0830	 ParSpMatVec=0.0126	 speedup=6.5676
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0830	 ParSpMatVec=0.0077	 speedup=10.7170
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0830	 ParSpMatVec=0.0088	 speedup=9.4026
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0830	 ParSpMatVec=0.0102	 speedup=8.1685

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0807	 ParSpMatVec=0.0589	 speedup=1.3708
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0807	 ParSpMatVec=0.0019	 speedup=43.4210
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0807	 ParSpMatVec=0.0011	 speedup=72.9142
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0807	 ParSpMatVec=0.0027	 speedup=30.3740
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0807	 ParSpMatVec=0.0014	 speedup=59.6675

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0780	 speedup=0.1085
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0031	 speedup=2.7291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0020	 speedup=4.2044
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0032	 speedup=2.6333
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0017	 speedup=4.8989

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0636	 ParSpMatVec=0.0515	 speedup=1.2354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0636	 ParSpMatVec=0.0030	 speedup=21.0226
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0636	 ParSpMatVec=0.0018	 speedup=34.6122
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0636	 ParSpMatVec=0.0070	 speedup=9.1345
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0636	 ParSpMatVec=0.0240	 speedup=2.6512

INFO: ParSpMatVec tests passed

>>> End of log
