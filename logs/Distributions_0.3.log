>>> 'Pkg.add("Distributions")' log
INFO: Installing ArrayViews v0.6.4
INFO: Installing Distributions v0.8.10
INFO: Installing PDMats v0.4.2
INFO: Installing StatsBase v0.7.4
INFO: Installing StatsFuns v0.2.2
INFO: Package database updated

>>> 'Pkg.test("Distributions")' log
Julia Version 0.3.12
Commit 80aa779 (2015-10-26 12:41 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (689.91015625 MB free)
Uptime: 10817.0 sec
Load Avg:  0.9599609375  1.07470703125  1.09765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     419593 s       7340 s      56955 s     472314 s         47 s
#2  3499 MHz     274166 s         83 s      48948 s     687530 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.3
4 required packages:
 - Distributions                 0.8.10
 - HttpParser                    0.0.13
 - JSON                          0.6.0
 - Markdown                      0.3.0
12 additional packages:
 - ArrayViews                    0.6.4
 - BinDeps                       0.3.21
 - Compat                        0.8.6
 - Dates                         0.3.2
 - HttpCommon                    0.1.2
 - Lazy                          0.10.1
 - MacroTools                    0.2.0
 - PDMats                        0.4.2
 - SHA                           0.2.0
 - StatsBase                     0.7.4
 - StatsFuns                     0.2.2
 - URIParser                     0.0.7
INFO: Computing test dependencies for Distributions...
INFO: No packages to install, update or remove
INFO: Testing Distributions
Running tests:
* types.jl
* utils.jl
* samplers.jl
    testing CategoricalDirectSampler
    testing AliasTable
    testing BinomialGeomSampler
    testing BinomialTPESampler
    testing BinomialPolySampler
    testing BinomialAliasSampler
    testing PoissonCountSampler
    testing PoissonADSampler
    testing PoissBinAliasSampler
    testing ExponentialSampler
    testing GammaGDSampler
    testing GammaMTSampler
    testing GammaGSSampler
    testing GammaIPSampler{S<:Sampleable{Univariate,Continuous}}
* categorical.jl
    testing Categorical(K=2, p=[0.5,0.5])
    testing Categorical(K=4, p=[0.1,0.3,0.2,0.4])
    testing Categorical(K=3, p=[0.15,0.25,0.6])
* univariates.jl
    [Discrete]
    ------------
    testing Bernoulli()
    testing Bernoulli(0.25)
    testing Bernoulli(0.75)
    testing BetaBinomial(2, 0.2, 0.25)
    testing Binomial()
    testing Binomial(3)
    testing Binomial(5, 0.4)
    testing Binomial(6, 0.8)
    testing Binomial(100, 0.1)
    testing Binomial(100, 0.9)
    testing DiscreteUniform(6)
    testing DiscreteUniform(0, 4)
    testing DiscreteUniform(2, 8)
    testing Geometric()
    testing Geometric(0.02)
    testing Geometric(0.1)
    testing Geometric(0.5)
    testing Geometric(0.9)
    testing Hypergeometric(2, 2, 2)
    testing Hypergeometric(3, 2, 2)
    testing Hypergeometric(3, 2, 0)
    testing Hypergeometric(3, 2, 5)
    testing Hypergeometric(4, 5, 6)
    testing Hypergeometric(60, 80, 100)
    testing NegativeBinomial()
    testing NegativeBinomial(6)
    testing NegativeBinomial(1, 0.5)
    testing NegativeBinomial(5, 0.6)
    testing NegativeBinomial(0.5, 0.5)
    testing Poisson()
    testing Poisson(0.0)
    testing Poisson(0.5)
    testing Poisson(2.0)
    testing Poisson(10.0)
    testing Poisson(80.0)

    [Continuous]
    ------------
    testing Arcsine()
    testing Arcsine(2.0)
    testing Arcsine(1.0, 2.5)
    testing Beta(2.0, 2.0)
    testing Beta(3.0, 4.0)
    testing Beta(17.0, 13.0)
    testing BetaPrime(3.0, 3.0)
    testing BetaPrime(3.0, 5.0)
    testing BetaPrime(5.0, 3.0)
    testing Cauchy()
    testing Cauchy(2.0)
    testing Cauchy(0.0, 1.0)
    testing Cauchy(10.0, 1.0)
    testing Cauchy(2.0, 10.0)
    testing Chi(1)
    testing Chi(2)
    testing Chi(3)
    testing Chi(12)
    testing Chisq(1)
    testing Chisq(8)
    testing Chisq(20)
    testing Cosine()
    testing Cosine(1.5)
    testing Cosine(2.0, 2.8)
    testing Erlang(1, 1.0)
    testing Erlang(3, 1.0)
    testing Erlang(5, 2.0)
    testing Exponential()
    testing Exponential(2.0)
    testing Exponential(6.5)
    testing FDist(6.0, 8.0)
    testing FDist(8.0, 6.0)
    testing Gamma()
    testing Gamma(2.0)
    testing Gamma(1.0, 1.0)
    testing Gamma(3.0, 1.0)
    testing Gamma(3.0, 2.0)
    testing GeneralizedPareto()
    testing GeneralizedPareto(1.0, 1.0)
    testing GeneralizedPareto(1.0, 1.0, 1.0)
    testing GeneralizedPareto(0.1, 2.0, 0.0)
    testing GeneralizedPareto(-1.5, 0.5, 2.0)
    testing Gumbel()
    testing Gumbel(3.0)
    testing Gumbel(3.0, 5.0)
    testing Gumbel(5.0, 3.0)
    testing InverseGamma()
    testing InverseGamma(2.0)
    testing InverseGamma(1.0, 1.0)
    testing InverseGamma(1.0, 2.0)
    testing InverseGamma(2.0, 1.0)
    testing InverseGamma(2.0, 3.0)
    testing InverseGaussian()
    testing InverseGaussian(0.8)
    testing InverseGaussian(2.0)
    testing Laplace()
    testing Laplace(2.0)
    testing Laplace(0.0, 1.0)
    testing Laplace(5.0, 1.0)
    testing Laplace(5.0, 1.5)
    testing Logistic()
    testing Logistic(2.0)
    testing Logistic(0.0, 1.0)
    testing Logistic(5.0, 1.0)
    testing Logistic(5.0, 1.5)
    testing LogNormal()
    testing LogNormal(0.0)
    testing LogNormal(0.0, 2.0)
    testing Normal(0.0, 1.0)
    testing Normal(-3.0, 2.0)
    testing Normal(1.0, 10.0)
    testing NormalCanon(0.0, 1.0)
    testing NormalCanon(-1.0, 2.5)
    testing NormalCanon(2.0, 0.8)
    testing Pareto()
    testing Pareto(2.0)
    testing Pareto(2.0, 1.5)
    testing Pareto(3.0, 2.0)
    testing Rayleigh()
    testing Rayleigh(3.0)
    testing Rayleigh(8.0)
    testing SymTriangularDist()
    testing SymTriangularDist(3.0)
    testing SymTriangularDist(3.0, 0.5)
    testing SymTriangularDist(3.0, 2.0)
    testing SymTriangularDist(10.0, 8.0)
    testing TDist(1.2)
    testing TDist(5.0)
    testing TDist(28.0)
    testing TriangularDist(0, 5)
    testing TriangularDist(-7, 2)
    testing TriangularDist(-4, 14, 3)
    testing TriangularDist(2, 2000, 500)
    testing TriangularDist(1, 3, 2)
    testing TruncatedNormal(0, 1, -2, 2)
    testing TruncatedNormal(3, 10, 7, 8)
    testing TruncatedNormal(27, 3, 0, Inf)
    testing TruncatedNormal(-5, 1, -Inf, -10)
    testing TruncatedNormal(1.8, 1.2, -Inf, 0)
    testing Uniform(0.0, 1.0)
    testing Uniform(3.0, 17.0)
    testing Uniform(3.0, 3.1)
    testing Weibull()
    testing Weibull(0.5)
    testing Weibull(5.0)
    testing Weibull(20.0, 1.0)
    testing Weibull(1.0, 2.0)
    testing Weibull(5.0, 2.0)

* continuous.jl
    -----
    testing Biweight(μ=0.0, σ=1.0)
    testing Biweight(μ=1.0, σ=3.0)
    testing Epanechnikov(μ=0.0, σ=1.0)
    testing Epanechnikov(μ=1.0, σ=3.0)
    testing Frechet(α=0.5, θ=1.0)
    testing Frechet(α=3.0, θ=1.0)
    testing Frechet(α=20.0, θ=1.0)
    testing Frechet(α=120.0, θ=1.0)
    testing Frechet(α=0.5, θ=2.0)
    testing Frechet(α=3.0, θ=2.0)
    testing GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
    testing GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
    testing GeneralizedPareto(ξ=1.0, σ=1.0, μ=1.0)
    testing GeneralizedPareto(ξ=0.1, σ=2.0, μ=0.0)
    testing GeneralizedPareto(ξ=0.0, σ=0.5, μ=0.0)
    testing GeneralizedPareto(ξ=-1.5, σ=0.5, μ=2.0)
    testing InverseGaussian(μ=1.0, λ=1.0)
    testing InverseGaussian(μ=2.0, λ=7.0)
    testing Levy(μ=0.0, σ=1.0)
    testing Levy(μ=2.0, σ=8.0)
    testing Levy(μ=3.0, σ=3.0)
    testing LogNormal(μ=0.0, σ=1.0)
    testing LogNormal(μ=0.0, σ=2.0)
    testing LogNormal(μ=3.0, σ=0.5)
    testing LogNormal(μ=3.0, σ=1.0)
    testing LogNormal(μ=3.0, σ=2.0)
    testing NoncentralBeta(α=2.0, β=2.0, λ=0.0)
    testing NoncentralBeta(α=2.0, β=6.0, λ=5.0)
    testing NoncentralChisq(ν=2.0, λ=2.0)
    testing NoncentralChisq(ν=2.0, λ=5.0)
    testing NoncentralF(ν1=2.0, ν2=2.0, λ=2.0)
    testing NoncentralF(ν1=8.0, ν2=10.0, λ=5.0)
    testing NoncentralT(ν=2.0, λ=2.0)
    testing NoncentralT(ν=10.0, λ=2.0)
    testing Triweight(μ=0.0, σ=1.0)
    testing Triweight(μ=1.0, σ=3.0)
* fit.jl
* multinomial.jl
* binomial.jl
* poissonbinomial.jl
   testing PoissonBinomial p=0.8, n=6
   testing PoissonBinomial p=0.5, n=10
   testing PoissonBinomial p=0.04, n=20
   testing PoissonBinomial [10 × 0.1, 10 × 0.5, 10 × 0.9]
   testing PoissonBinomial [1 × 0.99, 10 × 0.1, 100 × 0.05]
   testing PoissonBinomial [5 × 0.01, 1 × 0.99, 3 × 0.999]
   testing PoissonBinomial [10 × 0.0, 7 × 0.9, 10 × 0.5]
* dirichlet.jl
* mvnormal.jl
    testing IsoNormal
    testing ZeroMeanIsoNormal
    testing DiagNormal
    testing ZeroMeanDiagNormal
    testing FullNormal
    testing ZeroMeanFullNormal
    testing IsoNormalCanon
    testing ZeroMeanIsoNormalCanon
    testing DiagNormalCanon
    testing ZeroMeanDiagormalCanon
    testing FullNormalCanon
    testing ZeroMeanFullNormalCanon
    testing fit_mle
* mvlognormal.jl
    comparing results from MvLogNormal with univariate LogNormal
    testing MvLogNormal with normal distribution FullNormal
    testing MvLogNormal with normal distribution ZeroMeanDiagNormal
    testing MvLogNormal with normal distribution IsoNormal
    testing MvLogNormal with normal distribution ZeroMeanIsoNormal
    testing MvLogNormal with normal distribution DiagNormal
    testing MvLogNormal with normal distribution ZeroMeanDiagNormal
    testing MvLogNormal with normal distribution FullNormal
    testing MvLogNormal with normal distribution ZeroMeanFullNormal
* mvtdist.jl
* normalinversegaussian.jl
* kolmogorov.jl
* edgeworth.jl
* matrix.jl
* noncentralhypergeometric.jl
* vonmisesfisher.jl
* conversion.jl
* mixture.jl
    testing UnivariateMixture
    testing MultivariateMixture
* gradlogpdf.jl
* truncate.jl
    [Discrete]
    ------------
    testing Truncated(Bernoulli(),3,5)
    testing Truncated(Bernoulli(0.25),3,5)
    testing Truncated(Bernoulli(0.75),3,5)
    testing Truncated(BetaBinomial(2, 0.2, 0.25),3,5)
    testing Truncated(Binomial(),3,5)
    testing Truncated(Binomial(3),3,5)
    testing Truncated(Binomial(5, 0.4),3,5)
    testing Truncated(Binomial(6, 0.8),3,5)
    testing Truncated(Binomial(100, 0.1),3,5)
    testing Truncated(Binomial(100, 0.9),3,5)
    testing Truncated(DiscreteUniform(6),3,5)
    testing Truncated(DiscreteUniform(0, 4),3,5)
    testing Truncated(DiscreteUniform(2, 8),3,5)
    testing Truncated(Geometric(),3,5)
    testing Truncated(Geometric(0.02),3,5)
    testing Truncated(Geometric(0.1),3,5)
    testing Truncated(Geometric(0.5),3,5)
    testing Truncated(Geometric(0.9),3,5)
    testing Truncated(Hypergeometric(2, 2, 2),3,5)
    testing Truncated(Hypergeometric(3, 2, 2),3,5)
    testing Truncated(Hypergeometric(3, 2, 0),3,5)
    testing Truncated(Hypergeometric(3, 2, 5),3,5)
    testing Truncated(Hypergeometric(4, 5, 6),3,5)
    testing Truncated(Hypergeometric(60, 80, 100),3,5)
    testing Truncated(NegativeBinomial(),3,5)
    testing Truncated(NegativeBinomial(6),3,5)
    testing Truncated(NegativeBinomial(1, 0.5),3,5)
    testing Truncated(NegativeBinomial(5, 0.6),3,5)
    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
    testing Truncated(Poisson(),3,5)
    testing Truncated(Poisson(0.0),3,5)
    testing Truncated(Poisson(0.5),3,5)
    testing Truncated(Poisson(2.0),3,5)
    testing Truncated(Poisson(10.0),3,5)
    testing Truncated(Poisson(80.0),3,5)

    [Continuous]
    ------------
    testing Truncated(Arcsine(),3,5)
    testing Truncated(Arcsine(2.0),3,5)
    testing Truncated(Arcsine(1.0, 2.5),3,5)
    testing Truncated(Beta(2.0, 2.0),3,5)
    testing Truncated(Beta(3.0, 4.0),3,5)
    testing Truncated(Beta(17.0, 13.0),3,5)
    testing Truncated(BetaPrime(3.0, 3.0),3,5)
    testing Truncated(BetaPrime(3.0, 5.0),3,5)
    testing Truncated(BetaPrime(5.0, 3.0),3,5)
    testing Truncated(Cauchy(),3,5)
    testing Truncated(Cauchy(2.0),3,5)
    testing Truncated(Cauchy(0.0, 1.0),3,5)
    testing Truncated(Cauchy(10.0, 1.0),3,5)
    testing Truncated(Cauchy(2.0, 10.0),3,5)
    testing Truncated(Chi(1),3,5)
    testing Truncated(Chi(2),3,5)
    testing Truncated(Chi(3),3,5)
    testing Truncated(Chi(12),3,5)
    testing Truncated(Chisq(1),3,5)
    testing Truncated(Chisq(8),3,5)
    testing Truncated(Chisq(20),3,5)
    testing Truncated(Cosine(),3,5)
    testing Truncated(Cosine(1.5),3,5)
    testing Truncated(Cosine(2.0, 2.8),3,5)
    testing Truncated(Erlang(1, 1.0),3,5)
    testing Truncated(Erlang(3, 1.0),3,5)
    testing Truncated(Erlang(5, 2.0),3,5)
    testing Truncated(Exponential(),3,5)
    testing Truncated(Exponential(2.0),3,5)
    testing Truncated(Exponential(6.5),3,5)
    testing Truncated(FDist(6.0, 8.0),3,5)
    testing Truncated(FDist(8.0, 6.0),3,5)
    testing Truncated(Gamma(),3,5)
    testing Truncated(Gamma(2.0),3,5)
    testing Truncated(Gamma(1.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 1.0),3,5)
    testing Truncated(Gamma(3.0, 2.0),3,5)
    testing Truncated(GeneralizedPareto(),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
    testing Truncated(GeneralizedPareto(0.1, 2.0, 0.0),3,5)
    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
    testing Truncated(Gumbel(),3,5)
    testing Truncated(Gumbel(3.0),3,5)
    testing Truncated(Gumbel(3.0, 5.0),3,5)
    testing Truncated(Gumbel(5.0, 3.0),3,5)
    testing Truncated(InverseGamma(),3,5)
    testing Truncated(InverseGamma(2.0),3,5)
    testing Truncated(InverseGamma(1.0, 1.0),3,5)
    testing Truncated(InverseGamma(1.0, 2.0),3,5)
    testing Truncated(InverseGamma(2.0, 1.0),3,5)
    testing Truncated(InverseGamma(2.0, 3.0),3,5)
    testing Truncated(InverseGaussian(),3,5)
    testing Truncated(InverseGaussian(0.8),3,5)
    testing Truncated(InverseGaussian(2.0),3,5)
    testing Truncated(Laplace(),3,5)
    testing Truncated(Laplace(2.0),3,5)
    testing Truncated(Laplace(0.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.0),3,5)
    testing Truncated(Laplace(5.0, 1.5),3,5)
    testing Truncated(Logistic(),3,5)
    testing Truncated(Logistic(2.0),3,5)
    testing Truncated(Logistic(0.0, 1.0),3,5)
    testing Truncated(Logistic(5.0, 1.0),3,5)
    testing Truncated(Logistic(5.0, 1.5),3,5)
    testing Truncated(LogNormal(),3,5)
    testing Truncated(LogNormal(0.0),3,5)
    testing Truncated(LogNormal(0.0, 2.0),3,5)
    testing Truncated(Normal(0.0, 1.0),3,5)
    testing Truncated(Normal(-3.0, 2.0),3,5)
    testing Truncated(Normal(1.0, 10.0),3,5)
    testing Truncated(NormalCanon(0.0, 1.0),3,5)
    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
    testing Truncated(NormalCanon(2.0, 0.8),3,5)
    testing Truncated(Pareto(),3,5)
    testing Truncated(Pareto(2.0),3,5)
    testing Truncated(Pareto(2.0, 1.5),3,5)
    testing Truncated(Pareto(3.0, 2.0),3,5)
    testing Truncated(Rayleigh(),3,5)
    testing Truncated(Rayleigh(3.0),3,5)
    testing Truncated(Rayleigh(8.0),3,5)
    testing Truncated(SymTriangularDist(),3,5)
    testing Truncated(SymTriangularDist(3.0),3,5)
    testing Truncated(SymTriangularDist(3.0, 0.5),3,5)
    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
    testing Truncated(TDist(1.2),3,5)
    testing Truncated(TDist(5.0),3,5)
    testing Truncated(TDist(28.0),3,5)
    testing Truncated(TriangularDist(0, 5),3,5)
    testing Truncated(TriangularDist(-7, 2),3,5)
    testing Truncated(TriangularDist(-4, 14, 3),3,5)
    testing Truncated(TriangularDist(2, 2000, 500),3,5)
    testing Truncated(TriangularDist(1, 3, 2),3,5)
    testing Truncated(TruncatedNormal(0, 1, -2, 2),3,5)
    testing Truncated(TruncatedNormal(3, 10, 7, 8),3,5)
    testing Truncated(TruncatedNormal(27, 3, 0, Inf),3,5)
    testing Truncated(TruncatedNormal(-5, 1, -Inf, -10),3,5)
    testing Truncated(TruncatedNormal(1.8, 1.2, -Inf, 0),3,5)
    testing Truncated(Uniform(0.0, 1.0),3,5)
    testing Truncated(Uniform(3.0, 17.0),3,5)
    testing Truncated(Uniform(3.0, 3.1),3,5)
    testing Truncated(Weibull(),3,5)
    testing Truncated(Weibull(0.5),3,5)
    testing Truncated(Weibull(5.0),3,5)
    testing Truncated(Weibull(20.0, 1.0),3,5)
    testing Truncated(Weibull(1.0, 2.0),3,5)
    testing Truncated(Weibull(5.0, 2.0),3,5)

* generalizedextremevalue.jl
INFO: Distributions tests passed
INFO: No packages to install, update or remove

>>> End of log
