>>> 'Pkg.add("ControlSystems")' log
INFO: Cloning cache of ControlSystems from https://github.com/JuliaControl/ControlSystems.jl.git
INFO: Installing ColorTypes v0.2.5
INFO: Installing Colors v0.6.6
INFO: Installing ControlSystems v0.1.4
INFO: Installing FixedPointNumbers v0.1.4
INFO: Installing FixedSizeArrays v0.2.2
INFO: Installing Iterators v0.1.10
INFO: Installing Measures v0.0.3
INFO: Installing PlotUtils v0.0.4
INFO: Installing Plots v0.9.0
INFO: Installing Polynomials v0.0.5
INFO: Installing RecipesBase v0.0.6
INFO: Installing Reexport v0.0.3
INFO: Installing Showoff v0.0.7
INFO: Building Plots
INFO: Package database updated

>>> 'Pkg.test("ControlSystems")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1857.88671875 MB free)
Uptime: 10805.0 sec
Load Avg:  1.021484375  0.96826171875  0.95947265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     529078 s       3792 s      77382 s     322678 s         21 s
#2  3499 MHz     168136 s       2432 s      40044 s     825571 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - ControlSystems                0.1.4
 - JSON                          0.6.0
13 additional packages:
 - ColorTypes                    0.2.5
 - Colors                        0.6.6
 - Compat                        0.8.6
 - FixedPointNumbers             0.1.4
 - FixedSizeArrays               0.2.2
 - Iterators                     0.1.10
 - Measures                      0.0.3
 - PlotUtils                     0.0.4
 - Plots                         0.9.0
 - Polynomials                   0.0.5
 - RecipesBase                   0.0.6
 - Reexport                      0.0.3
 - Showoff                       0.0.7
INFO: Computing test dependencies for ControlSystems...
INFO: Cloning cache of VisualRegressionTests from https://github.com/tbreloff/VisualRegressionTests.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ColorVectorSpace v0.1.5
INFO: Installing Conda v0.2.3
INFO: Installing FactCheck v0.4.3
INFO: Installing FileIO v0.1.0
INFO: Installing Graphics v0.1.3
INFO: Installing ImageMagick v0.1.7
INFO: Installing Images v0.5.7
INFO: Installing LaTeXStrings v0.2.0
INFO: Installing MacroTools v0.3.0
INFO: Installing PyCall v1.7.0
INFO: Installing PyPlot v2.2.1
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing SIUnits v0.0.6
INFO: Installing StatsBase v0.9.0
INFO: Installing StatsFuns v0.3.0
INFO: Installing TexExtensions v0.0.3
INFO: Installing URIParser v0.1.5
INFO: Installing VisualRegressionTests v0.0.5
INFO: Installing Zlib v0.1.12
INFO: Building Rmath
INFO: Building ImageMagick
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::Type{T}, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in satisfy!(::BinDeps.LibraryDependency, ::Array{DataType,1}) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:781 (repeats 2 times)
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:836 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ImageMagick/deps/build.jl, in expression starting on line 98
INFO: Building PyCall
WARNING: `@windows` is deprecated, use `@static is_windows()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @windows(::Any, ::Any) at ./deprecated.jl:473
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/PyCall/deps/build.jl, in expression starting on line 17
INFO: No system-wide Python was found; got the following error:
could not spawn `'' -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('VERSION'))"`: no such file or directory (ENOENT)
using the Python distribution in the Conda package
Fetching package metadata .........
Solving package specifications: ..........

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.11.1                   py27_0  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.12) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7.so
INFO: Testing ControlSystems
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Plots.ji for module Plots.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/PlotUtils.ji for module PlotUtils.
WARNING: Method definition cgrad(Any, Any) in module PlotUtils at /home/vagrant/.julia/v0.5/PlotUtils/src/color_gradients.jl:82 overwritten at /home/vagrant/.julia/v0.5/PlotUtils/src/color_gradients.jl:99.
WARNING: Method definition #cgrad(Array{Any, 1}, PlotUtils.#cgrad, Any, Any) in module PlotUtils overwritten.
WARNING: error while reinitializing value MethodTable(name=:add_format, defs=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Any, Any, Any, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Any, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Union{AbstractArray{T<:Any, 1}, Tuple, String}, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Tuple{Vararg{#T<:Array{UInt8, 1}, #N<:Any}}, Any}, tvars=svec(#sym<:Any, #T<:Array{UInt8, 1}, #N<:Any), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), any=nothing, key=#<null>), max_args=4, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_format(...):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:add_saver, defs=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{#sym<:Any}}, Symbol}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ICO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ICO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WMF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WMF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol), isleafsig=false, issimplesig=true, va=false)], list=nothing, any=nothing, key=#<null>), max_args=3, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_saver(...):
OutOfMemoryError()
ERROR: LoadError: LoadError: LoadError: Failed to precompile Plots to /home/vagrant/.julia/lib/v0.5/Plots.ji
 in compilecache(::String) at ./loading.jl:505
 in recompile_stale(::Symbol, ::String) at ./loading.jl:581
 in _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:173
 in _require_from_serialized(::Int64, ::Symbol, ::Bool) at ./loading.jl:202
 in require(::Symbol) at ./loading.jl:332
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ControlSystems/src/ControlSystems.jl, in expression starting on line 65
while loading /home/vagrant/.julia/v0.5/ControlSystems/test/framework.jl, in expression starting on line 2
while loading /home/vagrant/.julia/v0.5/ControlSystems/test/runtests.jl, in expression starting on line 1
===========================[ ERROR: ControlSystems ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/ControlSystems/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BinDeps v0.4.2
INFO: Removing ColorVectorSpace v0.1.5
INFO: Removing Conda v0.2.3
INFO: Removing FactCheck v0.4.3
INFO: Removing FileIO v0.1.0
INFO: Removing Graphics v0.1.3
INFO: Removing ImageMagick v0.1.7
INFO: Removing Images v0.5.7
INFO: Removing LaTeXStrings v0.2.0
INFO: Removing MacroTools v0.3.0
INFO: Removing PyCall v1.7.0
INFO: Removing PyPlot v2.2.1
INFO: Removing Rmath v0.1.2
INFO: Removing SHA v0.2.0
INFO: Removing SIUnits v0.0.6
INFO: Removing StatsBase v0.9.0
INFO: Removing StatsFuns v0.3.0
INFO: Removing TexExtensions v0.0.3
INFO: Removing URIParser v0.1.5
INFO: Removing VisualRegressionTests v0.0.5
INFO: Removing Zlib v0.1.12
ERROR: ControlSystems had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
