>>> 'Pkg.add("SymPy")' log
INFO: Cloning cache of SymPy from https://github.com/JuliaPy/SymPy.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Conda v0.5.1
INFO: Installing MacroTools v0.3.4
INFO: Installing PyCall v1.10.0
INFO: Installing RecipesBase v0.1.0
INFO: Installing SHA v0.3.0
INFO: Installing SymPy v0.4.0
INFO: Installing URIParser v0.1.8
INFO: Building Conda
INFO: Building PyCall
INFO: Using the Python distribution in the Conda package by default.
To use a different Python version, set ENV["PYTHON"]="pythoncommand" and re-run Pkg.build("PyCall").
Fetching package metadata ...........
Solving package specifications: .

# All requested packages already installed.
# packages in environment at /home/vagrant/.julia/v0.5/Conda/deps/usr:
#
numpy                     1.10.4                   py27_2  
INFO: PyCall is using /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python (Python 2.7.12) at /home/vagrant/.julia/v0.5/Conda/deps/usr/bin/python, libpython = /home/vagrant/.julia/v0.5/Conda/deps/usr/lib/libpython2.7
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/deps.jl has not changed
INFO: /home/vagrant/.julia/v0.5/PyCall/deps/PYTHON has not changed
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of SymPy
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SymPy")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (996.875 MB free)
Uptime: 32218.0 sec
Load Avg:  1.07421875  1.021484375  0.99755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1928935 s       1216 s     176891 s     713077 s         74 s
#2  3499 MHz     568509 s       5727 s      86932 s    2478688 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.2
 - SymPy                         0.4.0
8 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.15.0
 - Conda                         0.5.1
 - MacroTools                    0.3.4
 - PyCall                        1.10.0
 - RecipesBase                   0.1.0
 - SHA                           0.3.0
 - URIParser                     0.1.8
INFO: Testing SymPy
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142
 in convert(::Type{Function}, ::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/types.jl:168
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in string(::SymPy.Sym) at ./strings/io.jl:68
 in macro expansion; at /home/vagrant/.julia/v0.5/SymPy/test/tests.jl:102 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 98
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in string(::SymPy.Sym) at ./strings/io.jl:68
 in macro expansion; at /home/vagrant/.julia/v0.5/SymPy/test/tests.jl:102 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 98
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in string(::SymPy.Sym) at ./strings/io.jl:68
 in macro expansion; at /home/vagrant/.julia/v0.5/SymPy/test/tests.jl:102 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 98
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in string(::SymPy.Sym) at ./strings/io.jl:68
 in macro expansion; at /home/vagrant/.julia/v0.5/SymPy/test/tests.jl:102 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 98
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"f(x)"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in even(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/assumptions.jl:134
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 397
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"f(x)"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in even(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/assumptions.jl:134
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 398
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"f(x)"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in nonzero(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/assumptions.jl:134
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 399
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 422
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 423
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 424
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 428
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 430
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in collect_to!(::Array{Symbol,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Int64, ::Int64) at ./array.jl:340
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:321
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 430
WARNING: pyeval is deprecated.  Use py"str(x)" instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{PyCall.PyAny}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in jprint(::SymPy.Sym) at /home/vagrant/.julia/v0.5/SymPy/src/display.jl:21
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::SymPy.Sym) at ./strings/io.jl:8
 in #print_to_string#305(::Void, ::Function, ::SymPy.Sym, ::Vararg{SymPy.Sym,N}) at ./strings/io.jl:61
 in Type at ./sysimg.jl:67 [inlined]
 in next at ./generator.jl:26 [inlined]
 in _collect(::Array{SymPy.Sym,1}, ::Base.Generator{Array{SymPy.Sym,1},Type{Symbol}}, ::Base.EltypeUnknown, ::Base.HasShape) at ./array.jl:320
 in #lambdify#382(::Dict{Any,Any}, ::Dict{Any,Any}, ::Function, ::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:148
 in lambdify(::SymPy.Sym, ::Array{SymPy.Sym,1}) at /home/vagrant/.julia/v0.5/SymPy/src/lambdify.jl:142 (repeats 2 times)
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/tests.jl, in expression starting on line 433
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in inverse(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:104
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 19
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in inverse(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:104
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 19
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in inverse(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:104
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 19
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in inverse(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:104
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 19
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in |>(::SymPy.SymMatrix, ::##9#10) at ./operators.jl:350
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 20
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in |>(::SymPy.SymMatrix, ::##9#10) at ./operators.jl:350
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 20
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in |>(::SymPy.SymMatrix, ::##9#10) at ./operators.jl:350
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 20
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in |>(::SymPy.SymMatrix, ::##9#10) at ./operators.jl:350
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 20
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #adjoint#304(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in adjoint(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 22
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #adjoint#304(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in adjoint(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 22
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #adjoint#304(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in adjoint(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 22
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #adjoint#304(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in adjoint(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 22
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #dual#320(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in dual(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 23
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #dual#320(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in dual(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 23
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #dual#320(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in dual(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 23
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #dual#320(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in dual(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 23
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #cholesky#308(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in cholesky(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 24
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #cholesky#308(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in cholesky(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 24
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #cholesky#308(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in cholesky(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 24
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:248
 in call_matrix_meth(::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:245
 in #cholesky#308(::Array{Any,1}, ::Function, ::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in cholesky(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:186
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 24
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in map(::SymPy.##651#658, ::Tuple{SymPy.SymMatrix,SymPy.SymMatrix}) at ./tuple.jl:93
 in (::SymPy.##call_matrix_meth#650#657)(::Array{Any,1}, ::Function, ::SymPy.SymMatrix, ::Symbol) at /home/vagrant/.julia/v0.5/SymPy/src/SymPy.jl:252
 in #QRdecomposition#299(::Array{Any,1}, ::Function, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in QRdecomposition(::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:184
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 27
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##362#364}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:308
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##362#364}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:308
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##362#364}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:308
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:307
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##361#363}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:308
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##361#363}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:308
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:10
 in convert(::Type{Array{SymPy.Sym,N}}, ::SymPy.SymMatrix) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:42
 in collect(::Base.Generator{Array{Any,1},SymPy.##362#364}) at ./array.jl:307
 in (::SymPy.##361#363)(::Tuple{SymPy.Sym,Int64,Array{Any,1}}) at ./<missing>:0
 in collect_to!(::Array{Array{SymPy.Sym,2},1}, ::Base.Generator{Array{Any,1},SymPy.##361#363}, ::Int64, ::Int64) at ./array.jl:340
 in collect(::Base.Generator{Array{Any,1},SymPy.##361#363}) at ./array.jl:308
 in eigvecs(::Array{SymPy.Sym,2}) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:220
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 38
WARNING: pyeval is deprecated.  Use SymPy.Sym(py"x[i]"o) instead.  Use $ interpolation to substitute Julia variables and expressions into Python.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in #pyeval#72(::Array{Any,1}, ::Function, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at /home/vagrant/.julia/v0.5/PyCall/src/pyeval.jl:58
 in (::PyCall.#kw##pyeval)(::Array{Any,1}, ::PyCall.#pyeval, ::String, ::Type{SymPy.Sym}, ::PyCall.PyDict{AbstractString,PyCall.PyObject,true}, ::Int64) at ./<missing>:0
 in getindex(::SymPy.SymMatrix, ::Int64) at /home/vagrant/.julia/v0.5/SymPy/src/matrix.jl:11
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/SymPy/test/test-matrix.jl, in expression starting on line 42
INFO: SymPy tests passed

>>> End of log
