>>> 'Pkg.add("MLLabelUtils")' log
INFO: Cloning cache of LearnBase from https://github.com/JuliaML/LearnBase.jl.git
INFO: Cloning cache of MLLabelUtils from https://github.com/JuliaML/MLLabelUtils.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.2.0
INFO: Installing DataStructures v0.5.2
INFO: Installing Distributions v0.12.0
INFO: Installing LearnBase v0.1.2
INFO: Installing MLLabelUtils v0.0.1
INFO: Installing MappedArrays v0.0.5
INFO: Installing PDMats v0.5.5
INFO: Installing QuadGK v0.1.1
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.1
INFO: Installing StatsBase v0.13.0
INFO: Installing StatsFuns v0.4.0
INFO: Installing URIParser v0.1.8
INFO: Building Rmath
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] Array(::Type{Tuple{BinDeps.DependencyProvider,Dict{Symbol,Any}}}, ::Int64) at ./deprecated.jl:50
 [3] #_library_dependency#21(::Array{Any,1}, ::Function, ::BinDeps.PackageContext, ::String) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:60
 [4] (::BinDeps.#kw##_library_dependency)(::Array{Any,1}, ::BinDeps.#_library_dependency, ::BinDeps.PackageContext, ::String) at ./<missing>:0
 [5] #library_dependency#1(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N} where N) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:86
 [6] (::__anon__.#kw##library_dependency)(::Array{Any,1}, ::__anon__.#library_dependency, ::String, ::Vararg{String,N} where N) at ./<missing>:0
 [7] include_from_node1(::String) at ./loading.jl:539
 [8] include(::String) at ./sysimg.jl:14
 [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [10] cd(::##2#4, ::String) at ./file.jl:69
 [11] (::##1#3)(::IOStream) at ./none:12
 [12] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [13] eval(::Module, ::Any) at ./boot.jl:236
 [14] process_options(::Base.JLOptions) at ./client.jl:281
 [15] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 5
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] Array(::Type{Tuple{BinDeps.DependencyHelper,Dict{Symbol,Any}}}, ::Int64) at ./deprecated.jl:50
 [3] #_library_dependency#21(::Array{Any,1}, ::Function, ::BinDeps.PackageContext, ::String) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:60
 [4] (::BinDeps.#kw##_library_dependency)(::Array{Any,1}, ::BinDeps.#_library_dependency, ::BinDeps.PackageContext, ::String) at ./<missing>:0
 [5] #library_dependency#1(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N} where N) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:86
 [6] (::__anon__.#kw##library_dependency)(::Array{Any,1}, ::__anon__.#library_dependency, ::String, ::Vararg{String,N} where N) at ./<missing>:0
 [7] include_from_node1(::String) at ./loading.jl:539
 [8] include(::String) at ./sysimg.jl:14
 [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [10] cd(::##2#4, ::String) at ./file.jl:69
 [11] (::##1#3)(::IOStream) at ./none:12
 [12] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [13] eval(::Module, ::Any) at ./boot.jl:236
 [14] process_options(::Base.JLOptions) at ./client.jl:281
 [15] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 [3] macro expansion at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [8] cd(::##2#4, ::String) at ./file.jl:69
 [9] (::##1#3)(::IOStream) at ./none:12
 [10] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [11] eval(::Module, ::Any) at ./boot.jl:236
 [12] process_options(::Base.JLOptions) at ./client.jl:281
 [13] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 43
INFO: Package database updated

>>> 'Pkg.test("MLLabelUtils")' log
Julia Version 0.6.0-dev.2635
Commit dc2459d (2017-02-13 07:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (455.828125 MB free)
Uptime: 3790.0 sec
Load Avg:  0.9208984375  0.951171875  0.94970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     194382 s         56 s      22998 s     124271 s          4 s
#2  3499 MHz      51136 s         94 s      13220 s     303986 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.3
 - MLLabelUtils                  0.0.1
14 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.2.0
 - Compat                        0.18.0
 - DataStructures                0.5.2
 - Distributions                 0.12.0
 - LearnBase                     0.1.2
 - MappedArrays                  0.0.5
 - PDMats                        0.5.5
 - QuadGK                        0.1.1
 - Rmath                         0.1.6
 - SHA                           0.3.1
 - StatsBase                     0.13.0
 - StatsFuns                     0.4.0
 - URIParser                     0.1.8
INFO: Testing MLLabelUtils
WARNING: The number of distinct floating point numbers (including at least one that is non-integer!) in the label vector is quite large. Are you sure you want to perform classification and not regression?
Test Summary:        | Pass  Total
tst_labelencoding.jl | 1467   1467
Test Summary:   | Pass  Total
tst_classify.jl |  441    441
(MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:300
   [16] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:300
   [16] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:300
   [16] _start() at ./client.jl:366
WARNING: `x $ y` is deprecated.  use `xor(x, y)` or `x ⊻ y` instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] $ at ./deprecated.jl:372 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:138 [inlined]
 [4] macro expansion at ./test.jl:852 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
 [6] macro expansion at ./test.jl:852 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
 [11] macro expansion at ./test.jl:852 [inlined]
 [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:300
 [17] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl, in expression starting on line 89
(MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:54
   [3] convertlabel(::Type{T} where T, ::Array{Bool,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,2} does not match inferred return type Array{Int32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,2} does not match inferred return type Array{Int32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:300
   [16] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:852 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:300
   [17] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:852 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:852 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:300
   [15] _start() at ./client.jl:366
Test Summary:                                                                                                                                                                                                                                                                                                        | Pass  Error  Total
tst_convertlabel.jl                                                                                                                                                                                                                                                                                                  | 3550    129   3679
  convertlabelview binary                                                                                                                                                                                                                                                                                            |  956           956
  convertlabelview multiclass                                                                                                                                                                                                                                                                                        |   63            63
  convert binary                                                                                                                                                                                                                                                                                                     | 1259    109   1368
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                           |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                 |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                                 |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                 |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                       |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                           |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                               |    4             4
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                 |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]                                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                      |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                   |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                          |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                     |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]                                                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                          |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                       |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                              |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                     |    4             4
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                           |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                          |    2             2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                             |    3             3
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                             |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                              |    4             4
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                                                 |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                                               |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                                                |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                                                 |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                        |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                          |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                                         |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                       |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                              |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                                            |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                                    |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                                 |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                                              |    3             3
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                              |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                                               |    4             4
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                                     |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                                           |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                   |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                             |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                           |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne) Int8[1, 0, 1, 0, 0, 1]                                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased) Int8[1, -1, 1, -1, -1, 1]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices) Int8[1, 2, 1, 2, 2, 1]                                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                       |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK) Int8[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                     |    5             5
  convert multiclass                                                                                                                                                                                                                                                                                                 |  214     20    234
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                                             |    4             4
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                               |    4             4
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                            |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                         |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                |    4             4
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                 |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                               |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:c=>3,:a=>1,:b=>2))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                             |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                                        |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                                                |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                             |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                                        |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                                                       |    4             4
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                                                                    |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                                        |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                                      |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                    |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices) Int8[1, 2, 3, 2, 3, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                      |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                   |    5             5
  binary OneOfK with and without ObsDim                                                                                                                                                                                                                                                                              |  834           834
  multiclass OneOfK with and without ObsDim                                                                                                                                                                                                                                                                          |  224           224
ERROR: LoadError: Some tests did not pass: 3550 passed, 0 failed, 129 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl, in expression starting on line 11
============================[ ERROR: MLLabelUtils ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: MLLabelUtils had test errors

>>> End of log
