>>> 'Pkg.add("MLLabelUtils")' log
INFO: Cloning cache of LearnBase from https://github.com/JuliaML/LearnBase.jl.git
INFO: Cloning cache of MLLabelUtils from https://github.com/JuliaML/MLLabelUtils.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing Calculus v0.2.0
INFO: Installing DataStructures v0.5.3
INFO: Installing Distributions v0.12.1
INFO: Installing LearnBase v0.1.2
INFO: Installing MLLabelUtils v0.0.1
INFO: Installing MappedArrays v0.0.6
INFO: Installing PDMats v0.5.6
INFO: Installing QuadGK v0.1.1
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.1
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StatsBase v0.13.1
INFO: Installing StatsFuns v0.4.0
INFO: Installing URIParser v0.1.8
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of MLLabelUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("MLLabelUtils")' log
Julia Version 0.6.0-dev.2995
Commit d3de8cc (2017-02-27 22:04 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (467.19140625 MB free)
Uptime: 4113.0 sec
Load Avg:  1.01806640625  0.984375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     209076 s        107 s      21446 s     138640 s          9 s
#2  3500 MHz      59024 s         40 s      11014 s     333362 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.3
 - MLLabelUtils                  0.0.1
15 additional packages:
 - BinDeps                       0.4.7
 - Calculus                      0.2.0
 - Compat                        0.19.0
 - DataStructures                0.5.3
 - Distributions                 0.12.1
 - LearnBase                     0.1.2
 - MappedArrays                  0.0.6
 - PDMats                        0.5.6
 - QuadGK                        0.1.1
 - Rmath                         0.1.6
 - SHA                           0.3.1
 - SpecialFunctions              0.1.1
 - StatsBase                     0.13.1
 - StatsFuns                     0.4.0
 - URIParser                     0.1.8
INFO: Testing MLLabelUtils

WARNING: deprecated syntax "abstract Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:22.
Use "abstract type Cost end" instead.

WARNING: deprecated syntax "abstract Loss<:Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:29.
Use "abstract type Loss<:Cost end" instead.

WARNING: deprecated syntax "abstract SupervisedLoss<:Loss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:37.
Use "abstract type SupervisedLoss<:Loss end" instead.

WARNING: deprecated syntax "abstract MarginLoss<:SupervisedLoss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:44.
Use "abstract type MarginLoss<:SupervisedLoss end" instead.

WARNING: deprecated syntax "abstract DistanceLoss<:SupervisedLoss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:52.
Use "abstract type DistanceLoss<:SupervisedLoss end" instead.

WARNING: deprecated syntax "abstract UnsupervisedLoss<:Loss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:60.
Use "abstract type UnsupervisedLoss<:Loss end" instead.

WARNING: deprecated syntax "abstract Penalty<:Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:62.
Use "abstract type Penalty<:Cost end" instead.

WARNING: deprecated syntax "abstract Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:114.
Use "abstract type Transformation end" instead.

WARNING: deprecated syntax "abstract StochasticTransformation<:Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:115.
Use "abstract type StochasticTransformation<:Transformation end" instead.

WARNING: deprecated syntax "abstract Learnable<:Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:116.
Use "abstract type Learnable<:Transformation end" instead.

WARNING: deprecated syntax "abstract Minimizable<:Learnable" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:127.
Use "abstract type Minimizable<:Learnable end" instead.

WARNING: deprecated syntax "abstract ObsDimension" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:197.
Use "abstract type ObsDimension end" instead.

WARNING: deprecated syntax "typealias First Constant{1}" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:240.
Use "const First = Constant{1}" instead.

WARNING: deprecated syntax "abstract Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:22.
Use "abstract type Cost end" instead.

WARNING: deprecated syntax "abstract Loss<:Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:29.
Use "abstract type Loss<:Cost end" instead.

WARNING: deprecated syntax "abstract SupervisedLoss<:Loss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:37.
Use "abstract type SupervisedLoss<:Loss end" instead.

WARNING: deprecated syntax "abstract MarginLoss<:SupervisedLoss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:44.
Use "abstract type MarginLoss<:SupervisedLoss end" instead.

WARNING: deprecated syntax "abstract DistanceLoss<:SupervisedLoss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:52.
Use "abstract type DistanceLoss<:SupervisedLoss end" instead.

WARNING: deprecated syntax "abstract UnsupervisedLoss<:Loss" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:60.
Use "abstract type UnsupervisedLoss<:Loss end" instead.

WARNING: deprecated syntax "abstract Penalty<:Cost" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:62.
Use "abstract type Penalty<:Cost end" instead.

WARNING: deprecated syntax "abstract Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:114.
Use "abstract type Transformation end" instead.

WARNING: deprecated syntax "abstract StochasticTransformation<:Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:115.
Use "abstract type StochasticTransformation<:Transformation end" instead.

WARNING: deprecated syntax "abstract Learnable<:Transformation" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:116.
Use "abstract type Learnable<:Transformation end" instead.

WARNING: deprecated syntax "abstract Minimizable<:Learnable" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:127.
Use "abstract type Minimizable<:Learnable end" instead.

WARNING: deprecated syntax "abstract ObsDimension" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:197.
Use "abstract type ObsDimension end" instead.

WARNING: deprecated syntax "typealias First Constant{1}" at /home/vagrant/.julia/v0.6/LearnBase/src/LearnBase.jl:240.
Use "const First = Constant{1}" instead.

WARNING: deprecated syntax "abstract LabelEncoding{T,K,M}" at /home/vagrant/.julia/v0.6/MLLabelUtils/src/learnbase.jl:4.
Use "abstract type LabelEncoding{T,K,M} end" instead.

WARNING: deprecated syntax "typealias BinaryLabelEncoding{T,M} LabelEncoding{T,2,M}" at /home/vagrant/.julia/v0.6/MLLabelUtils/src/learnbase.jl:5.
Use "BinaryLabelEncoding{T,M} = LabelEncoding{T,2,M}" instead.

WARNING: deprecated syntax "typealias VectorLabelEncoding{T,K} LabelEncoding{T,K,1}" at /home/vagrant/.julia/v0.6/MLLabelUtils/src/learnbase.jl:6.
Use "VectorLabelEncoding{T,K} = LabelEncoding{T,K,1}" instead.

WARNING: deprecated syntax "typealias MatrixLabelEncoding{T,K} LabelEncoding{T,K,2}" at /home/vagrant/.julia/v0.6/MLLabelUtils/src/learnbase.jl:7.
Use "MatrixLabelEncoding{T,K} = LabelEncoding{T,K,2}" instead.

WARNING: deprecated syntax "inner constructor ZeroOne(...) around /home/vagrant/.julia/v0.6/MLLabelUtils/src/labelencoding.jl:42".
Use "ZeroOne{T,R}(...) where {T,R}" instead.

WARNING: deprecated syntax "inner constructor Indices(...) around /home/vagrant/.julia/v0.6/MLLabelUtils/src/labelencoding.jl:97".
Use "Indices{T,K}(...) where {T,K}" instead.

WARNING: deprecated syntax "inner constructor OneOfK(...) around /home/vagrant/.julia/v0.6/MLLabelUtils/src/labelencoding.jl:117".
Use "OneOfK{T,K}(...) where {T,K}" instead.

WARNING: deprecated syntax "inner constructor NativeLabels(...) around /home/vagrant/.julia/v0.6/MLLabelUtils/src/labelencoding.jl:143".
Use "NativeLabels{T,K}(...) where {T,K}" instead.
WARNING: The number of distinct floating point numbers (including at least one that is non-integer!) in the label vector is quite large. Are you sure you want to perform classification and not regression?
Test Summary:        | Pass  Total
tst_labelencoding.jl | 1467   1467
Test Summary:   | Pass  Total
tst_classify.jl |  441    441
(MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Any,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:853 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:853 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:305
   [16] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:853 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:853 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:305
   [16] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.FuzzyBinary) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:853 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:853 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:305
   [16] _start() at ./client.jl:371
WARNING: `x $ y` is deprecated.  use `xor(x, y)` or `x âŠ» y` instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] $ at ./deprecated.jl:363 [inlined]
 [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:138 [inlined]
 [4] macro expansion at ./test.jl:853 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
 [6] macro expansion at ./test.jl:853 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl, in expression starting on line 89
(MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:54
   [3] convertlabel(::Type{T} where T, ::Array{Bool,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}, ::MLLabelUtils.LabelEnc.TrueFalse) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Bool,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,2} does not match inferred return type Array{Int32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float32,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int32,2} does not match inferred return type Array{Int32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Int64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Int64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float32}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float32,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.MarginBased{Float64}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}, ::MLLabelUtils.LabelEnc.Indices{Float64,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.OneVsRest{Symbol}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:155 [inlined]
   [3] macro expansion at ./test.jl:853 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] anonymous at ./<missing>:?
   [7] include_from_node1(::String) at ./loading.jl:539
   [8] include(::String) at ./sysimg.jl:14
   [9] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [10] macro expansion at ./test.jl:853 [inlined]
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] process_options(::Base.JLOptions) at ./client.jl:305
   [16] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::Type{MLLabelUtils.LabelEnc.TrueFalse}, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:58
   [3] convertlabel(::Type{T} where T, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:69
   [4] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:140 [inlined]
   [5] macro expansion at ./test.jl:853 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [7] macro expansion at ./test.jl:853 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [12] macro expansion at ./test.jl:853 [inlined]
   [13] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [14] anonymous at ./<missing>:?
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:305
   [18] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]: Error During Test
  Got an exception of type TypeError outside of a @test
  TypeError: convertlabel: in typeassert, expected Array{Bool,1}, got BitArray{1}
  Stacktrace:
   [1] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}, ::MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:48
   [2] convertlabel(::MLLabelUtils.LabelEnc.TrueFalse, ::Array{Symbol,1}) at /home/vagrant/.julia/v0.6/MLLabelUtils/src/convertlabel.jl:66
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [6] macro expansion at ./test.jl:853 [inlined]
   [7] anonymous at ./<missing>:?
   [8] include_from_node1(::String) at ./loading.jl:539
   [9] include(::String) at ./sysimg.jl:14
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [11] macro expansion at ./test.jl:853 [inlined]
   [12] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [13] anonymous at ./<missing>:?
   [14] include_from_node1(::String) at ./loading.jl:539
   [15] include(::String) at ./sysimg.jl:14
   [16] process_options(::Base.JLOptions) at ./client.jl:305
   [17] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:142 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:134 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float64,2} does not match inferred return type Array{Float64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,1} does not match inferred return type Any
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Int64,2} does not match inferred return type Array{Int64,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{UInt8,2} does not match inferred return type Array{UInt8,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
(Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]: Error During Test
  Got an exception of type ErrorException outside of a @test
  return type Array{Float32,2} does not match inferred return type Array{Float32,N} where N
  Stacktrace:
   [1] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:192 [inlined]
   [2] macro expansion at ./test.jl:853 [inlined]
   [3] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/tst_convertlabel.jl:185 [inlined]
   [4] macro expansion at ./test.jl:853 [inlined]
   [5] anonymous at ./<missing>:?
   [6] include_from_node1(::String) at ./loading.jl:539
   [7] include(::String) at ./sysimg.jl:14
   [8] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:13 [inlined]
   [9] macro expansion at ./test.jl:853 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl:0 [inlined]
   [11] anonymous at ./<missing>:?
   [12] include_from_node1(::String) at ./loading.jl:539
   [13] include(::String) at ./sysimg.jl:14
   [14] process_options(::Base.JLOptions) at ./client.jl:305
   [15] _start() at ./client.jl:371
Test Summary:                                                                                                                                                                                                                                                                                                        | Pass  Error  Total
tst_convertlabel.jl                                                                                                                                                                                                                                                                                                  | 3550    129   3679
  convertlabelview binary                                                                                                                                                                                                                                                                                            |  956           956
  convertlabelview multiclass                                                                                                                                                                                                                                                                                        |   63            63
  convert binary                                                                                                                                                                                                                                                                                                     | 1259    109   1368
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                           |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                 |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Any[true, 0, 1, -1, false, 3] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                          |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                                 |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                 |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                       |    2             2
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                           |    3             3
    (MLLabelUtils.LabelEnc.FuzzyBinary()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                               |    4             4
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                 |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Int32[1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]                                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                      |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1, 0, 1, 0, 0, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                   |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                          |    4             4
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) Int32[1, 0, 1, 0, 0, 1]                                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) Int32[1, -1, 1, -1, -1, 1]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) Int32[1, 2, 1, 2, 2, 1]                                                                                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                     |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) Int32[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Int32[1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased) [1, -1, 1, -1, -1, 1]                                                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                          |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1, -1, 1, -1, -1, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) Float32[1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                       |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                             |    3             3
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                              |    4             4
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                       |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                     |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                     |    4             4
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1.0, 2.0, 1.0, 2.0, 2.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                           |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                   |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                     |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                    |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                  |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                               |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                       |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                         |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                          |    2             2
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                              |    3             3
    (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :no, :yes, :maybe, :no, :yes] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                        |    3             3
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                               |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                           |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                   |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                             |    3             3
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                             |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                              |    4             4
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                  |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                                                 |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                                               |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                                                |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                                                 |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                                        |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                                          |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                                         |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                       |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                                              |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                                            |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                                                    |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                                                 |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                                            |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                                              |    3             3
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                              |    5             5
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                                               |    4             4
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                                                     |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                                           |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                                                   |    1      1      2
    (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 1, 2, 2, 1]                                                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                            |    3             3
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                             |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                           |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.TrueFalse) Bool[true, false, true, false, false, true]                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.TrueFalse()) Bool[true, false, true, false, false, true]                                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne) Int8[1, 0, 1, 0, 0, 1]                                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{UInt8,Float64}(0.5)) UInt8[0x01, 0x00, 0x01, 0x00, 0x00, 0x01]                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{Int64,Float64}(0.5)) [1, 0, 1, 0, 0, 1]                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.ZeroOne{Float64,Float64}(0.5)) [1.0, 0.0, 1.0, 0.0, 0.0, 1.0]                                                                                                                                                  |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased) Int8[1, -1, 1, -1, -1, 1]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Float32}()) Float32[1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Int64}()) [1, -1, 1, -1, -1, 1]                                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.MarginBased{Float64}()) [1.0, -1.0, 1.0, -1.0, -1.0, 1.0]                                                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices) Int8[1, 2, 1, 2, 2, 1]                                                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x01, 0x02, 0x02, 0x01]                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{Int64,2}()) [1, 2, 1, 2, 2, 1]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.Indices{Float32,2}()) Float32[1.0, 2.0, 1.0, 2.0, 2.0, 1.0]                                                                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneVsRest{Symbol}(:yes, :not_yes)) Symbol[:yes, :not_yes, :yes, :not_yes, :not_yes, :yes]                                                                                                                      |    3             3
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,2}(Symbol[:a, :b], Dict(:a=>1,:b=>2))) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (Symbol[:a, :b]) Symbol[:a, :b, :a, :b, :b, :a]                                                                                                                                                                                       |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK) Int8[1 0 1 0 0 1; 0 1 0 1 1 0]                                                                                                                                                                         |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x01 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x01 0x00]                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 1.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 1.0 0.0]                                                                                                                           |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,2}()) Int8[1 0 1 0 0 1; 0 1 0 1 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,2}()) Bool[true false true false false true; false true false true true false]                                                                                                                     |    5             5
  convert multiclass                                                                                                                                                                                                                                                                                                 |  214     20    234
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                                      |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                              |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                                             |    4             4
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                                                          |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                            |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                                    |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                        |    5             5
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                               |    4             4
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK) [1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                                        |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                              |    1      1      2
    (MLLabelUtils.LabelEnc.Indices{Float64,3}()) [1.0, 2.0, 3.0, 2.0, 3.0, 1.0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                            |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                 |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                         |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                      |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                         |    5             5
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                |    4             4
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                             |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                 |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                               |    1      1      2
    (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:a, :b, :c], Dict(:a=>1,:b=>2,:c=>3))) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                             |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                                        |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                                                                |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                                                             |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                                                        |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                |    5             5
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                                                       |    4             4
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                                                                    |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                                                        |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                                                      |    1      1      2
    (Symbol[:a, :b, :c]) Symbol[:a, :b, :c, :b, :c, :a] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                                                    |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices) [1, 2, 3, 2, 3, 1]                                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                          |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                             |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                    |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK) [1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                 |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false] |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices) Int8[1, 2, 3, 2, 3, 1]                                                                                                                                                                   |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{UInt8,K} where K) UInt8[0x01, 0x02, 0x03, 0x02, 0x03, 0x01]                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{Int64,3}()) [1, 2, 3, 2, 3, 1]                                                                                                                                                            |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.Indices{Float32,3}()) Float32[1.0, 2.0, 3.0, 2.0, 3.0, 1.0]                                                                                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.NativeLabels{Symbol,3}(Symbol[:x, :y, :z], Dict(:y=>2,:z=>3,:x=>1))) Symbol[:x, :y, :z, :y, :z, :x]                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (Symbol[:x, :y, :z]) Symbol[:x, :y, :z, :y, :z, :x]                                                                                                                                                                      |    4             4
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0]                                                                                                                                               |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{UInt8,K} where K) UInt8[0x01 0x00 0x00 0x00 0x00 0x01; 0x00 0x01 0x00 0x01 0x00 0x00; 0x00 0x00 0x01 0x00 0x01 0x00]                                                                       |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Float32,K} where K) Float32[1.0 0.0 0.0 0.0 0.0 1.0; 0.0 1.0 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0 1.0 0.0]                                                                                     |    5             5
    (MLLabelUtils.LabelEnc.OneOfK{Int8,3}()) Int8[1 0 0 0 0 1; 0 1 0 1 0 0; 0 0 1 0 1 0] -> (MLLabelUtils.LabelEnc.OneOfK{Bool,3}()) Bool[true false false false false true; false true false true false false; false false true false true false]                                                                   |    5             5
  binary OneOfK with and without ObsDim                                                                                                                                                                                                                                                                              |  834           834
  multiclass OneOfK with and without ObsDim                                                                                                                                                                                                                                                                          |  224           224
ERROR: LoadError: Some tests did not pass: 3550 passed, 0 failed, 129 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl, in expression starting on line 11
============================[ ERROR: MLLabelUtils ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/MLLabelUtils/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: MLLabelUtils had test errors

>>> End of log
