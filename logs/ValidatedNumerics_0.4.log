>>> 'Pkg.add("ValidatedNumerics")' log
INFO: Cloning cache of CRlibm from git://github.com/dpsanders/CRlibm.jl.git
INFO: Cloning cache of ValidatedNumerics from git://github.com/dpsanders/ValidatedNumerics.jl.git
INFO: Installing CRlibm v0.2.3
INFO: Installing Calculus v0.1.15
INFO: Installing FixedSizeArrays v0.2.3
INFO: Installing ForwardDiff v0.2.5
INFO: Installing NaNMath v0.2.1
INFO: Installing ValidatedNumerics v0.5.0
INFO: Building CRlibm
Downloading the library files from http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src
--2016-09-01 20:42:02--  http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Resolving lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)... 140.77.166.31
Connecting to lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)|140.77.166.31|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2368435 (2.3M) [application/binary]
Saving to: ‘crlibm-1.0beta4.tar.gz’

     0K .......... .......... .......... .......... ..........  2%  264K 9s
    50K .......... .......... .......... .......... ..........  4%  268K 8s
   100K .......... .......... .......... .......... ..........  6% 20.6M 5s
   150K .......... .......... .......... .......... ..........  8%  269K 6s
   200K .......... .......... .......... .......... .......... 10% 53.1M 5s
   250K .......... .......... .......... .......... .......... 12%  508K 4s
   300K .......... .......... .......... .......... .......... 15%  560K 4s
   350K .......... .......... .......... .......... .......... 17%  541K 4s
   400K .......... .......... .......... .......... .......... 19% 11.3M 4s
   450K .......... .......... .......... .......... .......... 21%  555K 3s
   500K .......... .......... .......... .......... .......... 23% 28.1M 3s
   550K .......... .......... .......... .......... .......... 25%  522K 3s
   600K .......... .......... .......... .......... .......... 28%  213M 3s
   650K .......... .......... .......... .......... .......... 30% 43.8M 2s
   700K .......... .......... .......... .......... .......... 32%  557K 2s
   750K .......... .......... .......... .......... .......... 34% 35.0M 2s
   800K .......... .......... .......... .......... .......... 36%  546K 2s
   850K .......... .......... .......... .......... .......... 38% 30.7M 2s
   900K .......... .......... .......... .......... .......... 41% 34.8M 2s
   950K .......... .......... .......... .......... .......... 43% 48.0M 2s
  1000K .......... .......... .......... .......... .......... 45%  552K 2s
  1050K .......... .......... .......... .......... .......... 47% 27.3M 1s
  1100K .......... .......... .......... .......... .......... 49% 50.4M 1s
  1150K .......... .......... .......... .......... .......... 51% 76.8M 1s
  1200K .......... .......... .......... .......... .......... 54%  539K 1s
  1250K .......... .......... .......... .......... .......... 56% 42.0M 1s
  1300K .......... .......... .......... .......... .......... 58% 52.1M 1s
  1350K .......... .......... .......... .......... .......... 60% 79.8M 1s
  1400K .......... .......... .......... .......... .......... 62%  571K 1s
  1450K .......... .......... .......... .......... .......... 64% 8.27M 1s
  1500K .......... .......... .......... .......... .......... 67% 42.7M 1s
  1550K .......... .......... .......... .......... .......... 69% 48.5M 1s
  1600K .......... .......... .......... .......... .......... 71%  270M 1s
  1650K .......... .......... .......... .......... .......... 73%  584K 1s
  1700K .......... .......... .......... .......... .......... 75% 12.8M 1s
  1750K .......... .......... .......... .......... .......... 77% 44.2M 0s
  1800K .......... .......... .......... .......... .......... 79% 43.4M 0s
  1850K .......... .......... .......... .......... .......... 82% 38.2M 0s
  1900K .......... .......... .......... .......... .......... 84%  571K 0s
  1950K .......... .......... .......... .......... .......... 86% 11.0M 0s
  2000K .......... .......... .......... .......... .......... 88% 4.90M 0s
  2050K .......... .......... .......... .......... .......... 90%  213M 0s
  2100K .......... .......... .......... .......... .......... 92%  257M 0s
  2150K .......... .......... .......... .......... .......... 95%  607K 0s
  2200K .......... .......... .......... .......... .......... 97% 18.0M 0s
  2250K .......... .......... .......... .......... .......... 99%  234M 0s
  2300K .......... ..                                         100% 2.65M=1.8s

2016-09-01 20:42:04 (1.26 MB/s) - ‘crlibm-1.0beta4.tar.gz’ saved [2368435/2368435]

Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Making all in scs_lib
Making all in .
log-de.c: In function ‘log_rn’:
log-de.c:109:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log-de.c: In function ‘log_rd’:
log-de.c:243:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log-de.c: In function ‘log_ru’:
log-de.c:370:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log10-td.c: In function ‘log10_rn’:
log10-td.c:206:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_ru’:
log10-td.c:391:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_rd’:
log10-td.c:571:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_rz’:
log10-td.c:749:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rn’:
log2-td.c:188:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_ru’:
log2-td.c:374:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rd’:
log2-td.c:571:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rz’:
log2-td.c:766:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
asincos.c: In function ‘asinpi_rd’:
asincos.c:3450:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
asincos.c: In function ‘asinpi_ru’:
asincos.c:3804:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
asincos.c: In function ‘asinpi_rz’:
asincos.c:4157:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
Making all in tests
test_val.c: In function ‘main’:
test_val.c:85:7: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
       sscanf(argv[4],"%llx", &input.l);
       ^
test_val.c:99:5: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
     sscanf(argv[4],"%llx", &input.l);
     ^
test_val.c:100:5: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
     sscanf(argv[5],"%llx", &input2.l);
     ^
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of ValidatedNumerics
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ValidatedNumerics")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (515.59765625 MB free)
Uptime: 26862.0 sec
Load Avg:  1.00439453125  1.04296875  1.04443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz    1243346 s         85 s     122648 s     977599 s         74 s
#2  3503 MHz     766991 s         71 s     103156 s    1675399 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ValidatedNumerics             0.5.0
6 additional packages:
 - CRlibm                        0.2.3
 - Calculus                      0.1.15
 - Compat                        0.8.8
 - FixedSizeArrays               0.2.3
 - ForwardDiff                   0.2.5
 - NaNMath                       0.2.1
INFO: Computing test dependencies for ValidatedNumerics...
INFO: Installing FactCheck v0.4.3
INFO: Installing Polynomials v0.1.0
INFO: Testing ValidatedNumerics
Constructing intervals
Out of 73 total facts:
  Verified: 71
  Pending:  2
Big intervals
6 facts verified.
Complex intervals
3 facts verified.
± tests
3 facts verified.
Consistency tests
25 facts verified.
inv
12 facts verified.
fma consistency
7 facts verified.
∈ tests
5 facts verified.
Inclusion tests
11 facts verified.
Comparison tests
20 facts verified.
Intersection tests
8 facts verified.
Special interval tests
18 facts verified.
mid etc.
12 facts verified.
cancelplus tests
22 facts verified.
mid and radius
7 facts verified.
abs, min, max, sign
20 facts verified.
Precision tests
4 facts verified.
Interval rounding tests
3 facts verified.
Interval power of an interval
4 facts verified.
Numeric tests
19 facts verified.
Power tests
39 facts verified.
Exp and log tests
18 facts verified.
Comparison tests
8 facts verified.
Rational tests
7 facts verified.
Floor etc. tests
24 facts verified.
Trig tests
104 facts verified.
Hyperb tests
41 facts verified.
Tests with rational intervals
3 facts verified.
Rounding rational intervals
1 fact verified.
Tests with float intervals
4 facts verified.
Testing functions of intervals
Out of 2 total facts:
  Pending:  2
Testing conversions
Out of 2 total facts:
  Pending:  2
Linear algebra with intervals tests
2 facts verified.
Interval loop tests
12 facts verified.
Pi tests
Out of 7 total facts:
  Verified: 5
  Pending:  2
Complex interval operations
6 facts verified.
Operations on boxes
9 facts verified.
@intervalbox tests
3 facts verified.
setdiff for IntervalBox
7 facts verified.
DecoratedInterval tests
15 facts verified.
displaymode tests
  > Interval
    > 6 sig figs
    > 10 sig figs
    > 20 sig figs
    > Full
    > Midpoint
  > DecoratedInterval
  > BigFloat intervals
  > IntervalBox
31 facts verified.
Testing root finding
  > Interval rounding: wide
    > Precision: (BigFloat,53)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (BigFloat,256)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (Float64,64)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
  > Interval rounding: narrow
    > Precision: (BigFloat,53)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (BigFloat,256)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (Float64,64)
      > Method ValidatedNumerics.RootFinding.newton
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.RootFinding.krawczyk
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function (anonymous function); interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
1512 facts verified.

1 fact verified.
find_roots tests
9 facts verified.
Multiple roots
4 facts verified.
Promotion between Dual and Interval
2 facts verified.
minimal_empty_test
14 facts verified.
minimal_empty_dec_test
14 facts verified.
minimal_entire_test
14 facts verified.
minimal_entire_dec_test
16 facts verified.
minimal_nai_dec_test
15 facts verified.
minimal_equal_test
15 facts verified.
minimal_equal_dec_test
16 facts verified.
minimal_subset_test
27 facts verified.
minimal_subset_dec_test
26 facts verified.
minimal_less_test
52 facts verified.
minimal_less_dec_test
54 facts verified.
minimal_precedes_test
21 facts verified.
minimal_precedes_dec_test
22 facts verified.
minimal_interior_test
32 facts verified.
minimal_interior_dec_test
32 facts verified.
minimal_strictLess_test
14 facts verified.
minimal_strictLess_dec_test
15 facts verified.
minimal_strictPrecedes_test
14 facts verified.
minimal_strictPrecedes_dec_test
15 facts verified.
minimal_disjoint_test
10 facts verified.
minimal_disjoint_dec_test
11 facts verified.
minimal_cancelPlus_test
58 facts verified.
minimal_cancelPlus_dec_test
116 facts verified.
minimal_cancelMinus_test
63 facts verified.
minimal_cancelMinus_dec_test
126 facts verified.
minimal_pos_test
11 facts verified.
minimal_pos_dec_test
6 facts verified.
minimal_neg_test
11 facts verified.
minimal_neg_dec_test
6 facts verified.
minimal_add_test
31 facts verified.
minimal_add_dec_test
10 facts verified.
minimal_sub_test
31 facts verified.
minimal_sub_dec_test
10 facts verified.
minimal_mul_test
116 facts verified.
minimal_mul_dec_test
10 facts verified.
minimal_div_test
341 facts verified.
minimal_div_dec_test
10 facts verified.
minimal_recip_test
90 facts verified.
minimal_recip_dec_test
80 facts verified.
minimal_sqr_test
36 facts verified.
minimal_sqr_dec_test
24 facts verified.
minimal_sqrt_test
52 facts verified.
minimal_sqrt_dec_test
32 facts verified.
minimal_fma_test
564 facts verified.
minimal_fma_dec_test
6 facts verified.
minimal_pown_test
163 facts verified.
minimal_pown_dec_test
22 facts verified.
minimal_pow_test
1344 facts verified.
minimal_pow_dec_test
168 facts verified.
minimal_exp_test
19 facts verified.
minimal_exp_dec_test
4 facts verified.
minimal_exp2_test
18 facts verified.
minimal_exp2_dec_test
4 facts verified.
minimal_exp10_test
19 facts verified.
minimal_exp10_dec_test
4 facts verified.
minimal_log_test
21 facts verified.
minimal_log_dec_test
6 facts verified.
minimal_log2_test
19 facts verified.
minimal_log2_dec_test
8 facts verified.
minimal_log10_test
20 facts verified.
minimal_log10_dec_test
4 facts verified.
minimal_sin_test
52 facts verified.
minimal_sin_dec_test
6 facts verified.
minimal_cos_test
52 facts verified.
minimal_cos_dec_test
6 facts verified.
minimal_tan_test
33 facts verified.
minimal_tan_dec_test
66 facts verified.
minimal_asin_test
18 facts verified.
minimal_asin_dec_test
10 facts verified.
minimal_acos_test
18 facts verified.
minimal_acos_dec_test
10 facts verified.
minimal_atan_test
10 facts verified.
minimal_atan_dec_test
10 facts verified.
minimal_atan2_test
169 facts verified.
minimal_atan2_dec_test
336 facts verified.
minimal_sinh_test
11 facts verified.
minimal_sinh_dec_test
10 facts verified.
minimal_cosh_test
11 facts verified.
minimal_cosh_dec_test
10 facts verified.
minimal_tanh_test
11 facts verified.
minimal_tanh_dec_test
10 facts verified.
minimal_asinh_test
11 facts verified.
minimal_asinh_dec_test
10 facts verified.
minimal_acosh_test
11 facts verified.
minimal_acosh_dec_test
16 facts verified.
minimal_atanh_test
15 facts verified.
minimal_atanh_dec_test
18 facts verified.
minimal_sign_test
11 facts verified.
minimal_sign_dec_test
14 facts verified.
minimal_ceil_test
30 facts verified.
minimal_ceil_dec_test
56 facts verified.
minimal_floor_test
26 facts verified.
minimal_floor_dec_test
44 facts verified.
minimal_trunc_test
26 facts verified.
minimal_trunc_dec_test
40 facts verified.
minimal_roundTiesToEven_test
54 facts verified.
minimal_roundTiesToEven_dec_test
36 facts verified.
minimal_roundTiesToAway_test
36 facts verified.
minimal_roundTiesToAway_dec_test
28 facts verified.
minimal_abs_test
12 facts verified.
minimal_abs_dec_test
16 facts verified.
minimal_min_test
15 facts verified.
minimal_min_dec_test
8 facts verified.
minimal_max_test
15 facts verified.
minimal_max_dec_test
8 facts verified.
minimal_mulRevToPair_test
0 facts verified.
minimal_mulRevToPair_dec_test
0 facts verified.
minimal_inf_test
14 facts verified.
minimal_inf_dec_test
14 facts verified.
minimal_sup_test
14 facts verified.
minimal_sup_dec_test
14 facts verified.
minimal_mid_test
7 facts verified.
minimal_mid_dec_test
7 facts verified.
minimal_rad_test
5 facts verified.
minimal_rad_dec_test
5 facts verified.
minimal_wid_test
5 facts verified.
minimal_wid_dec_test
5 facts verified.
minimal_mag_test
7 facts verified.
minimal_mag_dec_test
7 facts verified.
minimal_mig_test
10 facts verified.
minimal_mig_dec_test
10 facts verified.
minimal_overlap_test
0 facts verified.
minimal_overlap_dec_test
0 facts verified.
minimal_isCommonInterval_test
12 facts verified.
minimal_isCommonInterval_dec_test
21 facts verified.
minimal_isSingleton_test
15 facts verified.
minimal_isSingleton_dec_test
16 facts verified.
minimal_isMember_test
58 facts verified.
minimal_isMember_dec_test
66 facts verified.
minimal_sqrRev_test
0 facts verified.
minimal_sqrRevBin_test
0 facts verified.
minimal_sqrRev_dec_test
0 facts verified.
minimal_sqrRev_dec_bin_test
0 facts verified.
minimal_absRev_test
0 facts verified.
minimal_absRevBin_test
0 facts verified.
minimal_absRev_dec_test
0 facts verified.
minimal_absRev_dec_bin_test
0 facts verified.
minimal_pownRev_test
0 facts verified.
minimal_pownRevBin_test
0 facts verified.
minimal_pownRev_dec_test
0 facts verified.
minimal_pownRev_dec_bin_test
0 facts verified.
minimal_sinRev_test
0 facts verified.
minimal_sinRevBin_test
0 facts verified.
minimal_sinRev_dec_test
0 facts verified.
minimal_sinRev_dec_bin_test
0 facts verified.
minimal_cosRev_test
0 facts verified.
minimal_cosRevBin_test
0 facts verified.
minimal_cosRev_dec_test
0 facts verified.
minimal_cosRev_dec_bin_test
0 facts verified.
minimal_tanRev_test
0 facts verified.
minimal_tanRevBin_test
0 facts verified.
minimal_tanRev_dec_test
0 facts verified.
minimal_tanRev_dec_bin_test
0 facts verified.
minimal_coshRev_test
0 facts verified.
minimal_coshRevBin_test
0 facts verified.
minimal_coshRev_dec_test
0 facts verified.
minimal_coshRev_dec_bin_test
0 facts verified.
minimal_mulRev_test
0 facts verified.
minimal_mulRevTen_test
0 facts verified.
minimal_mulRev_dec_test
0 facts verified.
minimal_mulRev_dec_ten_test
0 facts verified.
minimal_intersection_test
10 facts verified.
minimal_intersection_dec_test
20 facts verified.
minimal_convexHull_test
10 facts verified.
minimal_convexHull_dec_test
20 facts verified.
INFO: ValidatedNumerics tests passed
INFO: Removing FactCheck v0.4.3
INFO: Removing Polynomials v0.1.0

>>> End of log
