>>> 'Pkg.add("HTTP")' log
INFO: Cloning cache of HTTP from https://github.com/JuliaWeb/HTTP.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing HTTP v0.4.1
INFO: Installing MbedTLS v0.4.4
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building MbedTLS
Using system libraries...
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of HTTP
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("HTTP")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (700.046875 MB free)
Uptime: 41371.0 sec
Load Avg:  0.97607421875  1.08349609375  1.310546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2422682 s       3788 s     239273 s    1028127 s        173 s
#2  3499 MHz    1069406 s       3238 s     147284 s    2754074 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - HTTP                          0.4.1
 - JSON                          0.8.3
9 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - CompilerTools                 0.2.1
 - DataStructures                0.5.3
 - DocOpt                        0.2.1
 - MbedTLS                       0.4.4
 - ParallelAccelerator           0.2.2              6da2e374 (dirty)
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing HTTP
TEST - sniff.jl: Empty
TEST - sniff.jl: Binary
TEST - sniff.jl: HTML document #1
TEST - sniff.jl: HTML document #2
TEST - sniff.jl: HTML document #3 (leading whitespace)
TEST - sniff.jl: HTML document #4 (leading CRLF)
TEST - sniff.jl: Plain text
TEST - sniff.jl: XML
TEST - sniff.jl: GIF 87a
TEST - sniff.jl: GIF 89a
TEST - sniff.jl: MIDI audio
TEST - sniff.jl: MP3 audio/MPEG audio
TEST - sniff.jl: WAV audio #1
TEST - sniff.jl: WAV audio #2
TEST - sniff.jl: AIFF audio #1
TEST - sniff.jl: OGG audio
TEST - sniff.jl: MP4 video
TEST - sniff.jl: AVI video #1
TEST - sniff.jl: AVI video #2
TEST - uri.jl: proxy request
TEST - uri.jl: proxy request with port
TEST - uri.jl: CONNECT request
TEST - uri.jl: proxy ipv6 request
TEST - uri.jl: proxy ipv6 request with port
TEST - uri.jl: CONNECT ipv6 address
TEST - uri.jl: ipv4 in ipv6 address
TEST - uri.jl: extra ? in query string
TEST - uri.jl: space URL encoded
TEST - uri.jl: URL fragment
TEST - uri.jl: complex URL fragment
TEST - uri.jl: complex URL from node js url parser doc
TEST - uri.jl: complex URL with basic auth from node js url parser doc
TEST - uri.jl: double @
TEST - uri.jl: proxy empty host
TEST - uri.jl: proxy empty port
TEST - uri.jl: CONNECT with basic auth
TEST - uri.jl: CONNECT empty host
TEST - uri.jl: CONNECT empty port
TEST - uri.jl: CONNECT with extra bits
TEST - uri.jl: space in URL
TEST - uri.jl: proxy basic auth with space url encoded
TEST - uri.jl: carriage return in URL
TEST - uri.jl: proxy double : in URL
TEST - uri.jl: proxy basic auth with double :
TEST - uri.jl: line feed in URL
TEST - uri.jl: proxy empty basic auth
TEST - uri.jl: proxy line feed in hostname
TEST - uri.jl: proxy % in hostname
TEST - uri.jl: proxy ; in hostname
TEST - uri.jl: proxy basic auth with unreservedchars
TEST - uri.jl: proxy only empty basic auth
TEST - uri.jl: proxy only basic auth
TEST - uri.jl: proxy = in URL
TEST - uri.jl: ipv6 address with Zone ID
TEST - uri.jl: ipv6 address with Zone ID, but '%' is not percent-encoded
TEST - uri.jl: ipv6 address ending with '%'
TEST - uri.jl: ipv6 address with Zone ID including bad character
TEST - uri.jl: just ipv6 Zone ID
TEST - uri.jl: tab in URL
TEST - uri.jl: form feed in URL
TEST - parser.jl - Request: curl get
TEST - parser.jl - Request: firefox get
TEST - parser.jl - Request: dumbfuck
TEST - parser.jl - Request: fragment in url
TEST - parser.jl - Request: get no headers no body
TEST - parser.jl - Request: get one header no body
TEST - parser.jl - Request: get funky content length body hello
TEST - parser.jl - Request: post identity body world
TEST - parser.jl - Request: post - chunked body: all your base are belong to us
TEST - parser.jl - Request: two chunks ; triple zero ending
TEST - parser.jl - Request: chunked with trailing headers. blech.
TEST - parser.jl - Request: with bullshit after the length
TEST - parser.jl - Request: with quotes
TEST - parser.jl - Request: apachebench get
TEST - parser.jl - Request: query url with question mark
TEST - parser.jl - Request: newline prefix get
TEST - parser.jl - Request: upgrade request
TEST - parser.jl - Request: connect request
TEST - parser.jl - Request: report request
TEST - parser.jl - Request: request with no http version
TEST - parser.jl - Request: m-search request
TEST - parser.jl - Request: host terminated by a query string
TEST - parser.jl - Request: host:port terminated by a query string
TEST - parser.jl - Request: host:port terminated by a space
TEST - parser.jl - Request: PATCH request
TEST - parser.jl - Request: connect caps request
TEST - parser.jl - Request: utf-8 path request
TEST - parser.jl - Request: hostname underscore
TEST - parser.jl - Request: eat CRLF between requests, no "Connection: close" header
TEST - parser.jl - Request: eat CRLF between requests even if "Connection: close" is set
TEST - parser.jl - Request: PURGE request
TEST - parser.jl - Request: SEARCH request
TEST - parser.jl - Request: host:port and basic_auth
TEST - parser.jl - Request: upgrade post request
TEST - parser.jl - Request: connect with body request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: link request
TEST - parser.jl - Request: multiple connection header values with folding
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: multiple connection header values with folding and lws
TEST - parser.jl - Request: line folding in header value
TEST - parser.jl - Response: google 301
TEST - parser.jl - Response: no content-length response
TEST - parser.jl - Response: 404 no headers no body
TEST - parser.jl - Response: 301 no response phrase
TEST - parser.jl - Response: 200 trailing space on chunked body
TEST - parser.jl - Response: no carriage ret
TEST - parser.jl - Response: proxy connection
TEST - parser.jl - Response: underscore header key
TEST - parser.jl - Response: bonjourmadame.fr
TEST - parser.jl - Response: field underscore
TEST - parser.jl - Response: non-ASCII in status line
TEST - parser.jl - Response: http version 0.9
TEST - parser.jl - Response: neither content-length nor transfer-encoding response
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.0 with keep-alive and a 204 status
TEST - parser.jl - Response: HTTP/1.1 with an EOF-terminated 200 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status
TEST - parser.jl - Response: HTTP/1.1 with a 204 status and keep-alive disabled
TEST - parser.jl - Response: HTTP/1.1 with chunked endocing and a 200 response
TEST - parser.jl - Response: field space
TEST - parser.jl - Response: amazon.com
TEST - parser.jl - Response: empty reason phrase after space
TEST - parser.jl - Response: Content-Length-X
HTTP.Client: Error During Test
  Test threw an exception of type KeyError
  Expression: (HTTP.headers(HTTP.get("$(sch)://httpbin.org/response-headers"; query=Dict("hey" => "dude"))))["hey"] == "dude"
  KeyError: key "hey" not found
   in getindex; at ./dict.jl:697 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:34 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
HTTP.Client: Test Failed
  Expression: startswith(string(r),"{\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {}, \n  \"form\": {\n    \"hey\": \"there\"\n  }")
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:99 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
HTTP.Client: Test Failed
  Expression: startswith(string(r),"{\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {\n    \"iostream\": \"hey\"\n  }, \n  \"form\": {\n    \"hey\": \"there\"\n  }")
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:107 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
HTTP.Client: Error During Test
  Test threw an exception of type KeyError
  Expression: (HTTP.headers(HTTP.get("$(sch)://httpbin.org/response-headers"; query=Dict("hey" => "dude"))))["hey"] == "dude"
  KeyError: key "hey" not found
   in getindex; at ./dict.jl:697 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:34 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
   in macro expansion; at ./test.jl:674 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488
   in process_options(::Base.JLOptions) at ./client.jl:265
   in _start() at ./client.jl:321
HTTP.Client: Test Failed
  Expression: startswith(string(r),"{\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {}, \n  \"form\": {\n    \"hey\": \"there\"\n  }")
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:99 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
HTTP.Client: Test Failed
  Expression: startswith(string(r),"{\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {\n    \"iostream\": \"hey\"\n  }, \n  \"form\": {\n    \"hey\": \"there\"\n  }")
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:431
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/client.jl:107 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in macro expansion; at /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl:19 [inlined]
 in macro expansion; at ./test.jl:674 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
[HTTP - 2017-03-18T15:52:11.464]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2017-03-18T15:52:12.083]: server TCPServer is closed, shutting down...
[HTTP - 2017-03-18T15:52:12.248]: starting server to listen on: 127.0.0.1:8081
[HTTP - 2017-03-18T15:52:13.365]: throttling 127.0.0.1
[HTTP - 2017-03-18T15:52:13.373]: new tcp connection accepted, reading request...
[HTTP - 2017-03-18T15:52:13.544]: processing on connection i=0...
[HTTP - 2017-03-18T15:52:13.847]: throttling on connection i=0
[HTTP - 2017-03-18T15:52:13.848]: reading request bytes with readtimeout=180.0
[HTTP - 2017-03-18T15:52:13.853]: received request on connection i=0
HTTP.Request:
"""
GET / HTTP/1.1
Host: 127.0.0.1:8081
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/json
User-Agent: HTTP.jl/0.0.0

"""
[HTTP - 2017-03-18T15:52:13.894]: responding with response on connection i=0
HTTP.Response:
"""
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 12
Content-Type: text/html; charset=utf-8
Date: Sat, 18 Mar 2017 15:52:13
Content-Language: en
Server: Julia/0.5.1

Hello World!"""
[HTTP - 2017-03-18T15:52:13.935]: reading request bytes with readtimeout=180.0
Test Summary:       |   Pass  [HTTP - 2017-03-18T15:52:14.016]: server TCPServer is closed, shutting down...Fail  
Error   Total
  HTTP              | 607520     4      2  607526
  utils.jl          |    150                  150
  FIFOBuffer        |     90                   90
  HTTP.sniff        |     20                   20
  HTTP.isjson       |     27                   27
  HTTP.URI          |    108                  108
  Cookies           |     57                   57
  HTTP.parse        | 606943               606943
  types.jl          |     13                   13
  HTTP.Client       |    110     4      2     116
  HTTP.Connection   |      6                    6
  HTTP.serve        |      2                    2
ERROR: LoadError: Some tests did not pass: 607520 passed, 4 failed, 2 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:498
 in macro expansion; at ./test.jl:681 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:265
 in _start() at ./client.jl:321
while loading /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl, in expression starting on line 11
================================[ ERROR: HTTP ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/HTTP/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: HTTP had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:242
 in _start() at ./client.jl:321

>>> End of log
