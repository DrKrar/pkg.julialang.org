>>> 'Pkg.add("FixedSizeArrays")' log
INFO: Installing FixedSizeArrays v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of FixedSizeArrays
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("FixedSizeArrays")' log
Julia Version 0.5.0-dev+4846
Commit 59b2530* (2016-06-17 21:46 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for FixedSizeArrays...
INFO: Installing FactCheck v0.4.3
INFO: Testing FixedSizeArrays
FixedSizeArrays
  > type inference
  > fsa macro
  > core
    > ndims
    > size_or
    > eltype_or
    > ndims_or
    > similar_type
    > construct_similar
  > Array of FixedArrays
    > reduce
    > array ops
    > Show
FixedSizeArrays.Mat{4,4,Float64}[FixedSizeArrays.Mat{4,4,Float64}(
    0.39730347045217296 0.9116010387030262 0.09488455083252023 0.7209567872941294
    0.2052259816737203 0.41481689152527723 0.3911054743957658 0.7284057931488013
    0.4419751642614165 0.0681558497128616 0.7582720078298766 0.07768086910355798
    0.7561559130344377 0.17188086728123575 0.6133927128909511 0.37359747518659736
)
,FixedSizeArrays.Mat{4,4,Float64}(
    0.6909791684651583 0.27493273338380564 0.15696681134477153 0.8610374992007432
    0.38928655652524813 0.04775558135967528 0.000765049228480752 0.5664590173532111
    0.8586359863744049 0.9781063948535584 0.8821067634949709 0.5947819012766007
    0.356410242015623 0.11305375262407136 0.15870360332638445 0.5655185369995557
)
]
2-elementArray{FSAtesting.RGB{Float32},1}:
 RGB(0.3467828,0.9579444,0.67488706)
 RGB(0.08826971,0.66403186,0.9827508)

2-elementArray{FixedSizeArrays.Vec{3,Float32},1}:
 Vec(0.15127826,0.4238211,0.66913986)
 Vec(0.41567183,0.49711204,0.81454265)

Point(1,2,3)  > Constructor FixedVectorNoTuple
    > Float32
    > Float64
    > Int64
    > UInt64
    > UInt32
    > UInt8
  > Constructor 
    > Rand
    > Randn
    > Zero
    > eye
    > one
    > unit
    > construction, conversion, 1
    > construction, conversion, 10
  > Constructors
    > FixedVector: unary, from FixedVector
  > map
    > Vec and AbstractVector
    > FixedVectorNoTuple
    > Mat and AbstractMatrix
    > Size checking
    > Broadcast of scalars
  > Complex Ops
    > dot product
  > Destructure
  > Indexing
    > FixedVector
    > FixedMatrix
    > fslice
      > getindex
      > setindex
  > Ops
    > Negation
    > Addition
    > Subtraction
    > Multiplication
    > Mixed Type Multiplication
    > Division
    > Relational
    > Scalar
    > vector norm+cross product
    > hypot
    > normalize
    > reduce
  > Promotion
  > Conversion 2
  > Conversion to Vec{N,UInt64}
    > single value conversion
    > conversion from vararg, tuple & array
    > conversion from too many args should fail
    > conversion from too few args should fail
  > Conversion to Vec{N,Int64}
    > single value conversion
    > conversion from vararg, tuple & array
    > conversion from too many args should fail
    > conversion from too few args should fail
  > Conversion to Vec{N,Float32}
    > single value conversion
    > conversion from vararg, tuple & array
    > conversion from too many args should fail
    > conversion from too few args should fail
  > Conversion to Vec{N,Float64}
    > single value conversion
    > conversion from vararg, tuple & array
    > conversion from too many args should fail
    > conversion from too few args should fail
  > Matrix
  > Matrix Math
    > Matrix{1, 1} * Vector{1}
    > Matrix{1, 1} * Matrix{1, 1}
    > Matrix{1, 1}*(2I)
    > Matrix{1, 1, T} * Vector{1, U}
    > Matrix{1, 1, T} * Matrix{1, 1, U}
    > (2*I + I*M)\v
    > det(M)
    > trace(M)
    > inv(M)
    > expm(M)
    > lyap(M,M2*M2')
    > chol(M2*M2')
ERROR: LoadError: MethodError: no method matching isreal(::FixedSizeArrays.Mat{1,1,Float64})
 in Hermitian{T,S<:AbstractArray{T,2}}(::Array{FixedSizeArrays.Mat{1,1,Float64},2}, ::Symbol) at ./linalg/symmetric.jl:50
 in chol(::Array{FixedSizeArrays.Mat{1,1,Float64},2}) at ./linalg/cholesky.jl:157
 in (::FSAtesting.##827#1752)() at /home/vagrant/.julia/v0.5/FixedSizeArrays/test/runtests.jl:987
 in context(::FSAtesting.##827#1752, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::FSAtesting.##777#1702)() at /home/vagrant/.julia/v0.5/FixedSizeArrays/test/runtests.jl:985
 in context(::FSAtesting.##777#1702, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::FSAtesting.##1#926)() at /home/vagrant/.julia/v0.5/FixedSizeArrays/test/runtests.jl:900
 in facts(::FSAtesting.##1#926, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/FixedSizeArrays/test/runtests.jl, in expression starting on line 50
===========================[ ERROR: FixedSizeArrays ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/FixedSizeArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing FactCheck v0.4.3
ERROR: FixedSizeArrays had test errors
 in #test#49(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:694
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./null:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./null:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:245
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:245
 in eval(::Module, ::Any) at ./boot.jl:231
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
