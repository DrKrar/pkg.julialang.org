>>> 'Pkg.add("RingArrays")' log
INFO: Cloning cache of RingArrays from https://github.com/invenia/RingArrays.jl.git
INFO: Cloning cache of VirtualArrays from https://github.com/invenia/VirtualArrays.jl.git
INFO: Installing RingArrays v0.1.0
INFO: Installing VirtualArrays v0.1.1
INFO: Package database updated

>>> 'Pkg.test("RingArrays")' log
Julia Version 0.5.0-dev+5456
Commit a1fbb84 (2016-07-16 21:33 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for RingArrays...
INFO: Installing BaseTestNext v0.2.1
INFO: Installing FactCheck v0.4.3
INFO: Testing RingArrays
About creating RingArray
  > bad curly braces
  > without curly braces
  > passing a size
  > passing a block size
  > passing nothing
  > passing 0 for size
  > passing a negative for size
  > having a multi dimensional array
  > having a multi dimensional array and passing data size
  > creating a RingArray of dimension of the RingArray different form the block size
49 facts verified.
Getting values from RingArray
  > getting the first value
WARNING: sub is deprecated, use view instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in sub(::RingArrays.RingArray{Int64,1}, ::Vararg{Any,N}) at ./deprecated.jl:30
 in get_view(::RingArrays.RingArray{Int64,1}, ::UnitRange{Int64}, ::Vararg{UnitRange{Int64},N}) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:241
 in do_fact(::##222#330{RingArrays.RingArray{Int64,1}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
 in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
 in (::##212#320)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:139
 in context(::##212#320, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##211#319)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:122
 in facts(::##211#319, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl, in expression starting on line 121
  > getting the first value without loading
  > getting a value in the first block
  > getting a value in the second block after getting a value in the first block
  > getting a value in the second block first
  > getting a value in the second block first while only loading the first block
  > getting a value in any block first
  > getting value from 2 d array
  > getting value from 2 d array like a 1 d array
  > getting value from 2 d array like a 1 d array after overflow
  > getting value from N d array like a 1 d array after overflow
    Error :: (line:272) :: getting value from N d array like a 1 d array after overflow
      Expression: test[index_overflow] --> expected[index_overflow]
      RingArrayBoundsError: Cannot index (125,1,2), outside of range (106:130,1,1)
       in checkbounds(::RingArrays.RingArray{Int64,3}, ::Int64, ::Int64, ::Int64, ::Vararg{Int64,N}) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:123
       in getindex(::RingArrays.RingArray{Int64,3}, ::Int64) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:134
       in do_fact(::##301#409, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##297#405)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:368
       in context(::##297#405, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##211#319)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:342
       in facts(::##211#319, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:262
       in _start() at ./client.jl:318
    Error :: (line:272) :: getting value from N d array like a 1 d array after overflow
      Expression: test[index_overflow] --> test[index,2]
      RingArrayBoundsError: Cannot index (125,1,2), outside of range (106:130,1,1)
       in checkbounds(::RingArrays.RingArray{Int64,3}, ::Int64, ::Int64, ::Int64, ::Vararg{Int64,N}) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:123
       in getindex(::RingArrays.RingArray{Int64,3}, ::Int64) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:134
       in do_fact(::##303#411, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##297#405)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:369
       in context(::##297#405, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##211#319)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:342
       in facts(::##211#319, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:262
       in _start() at ./client.jl:318
    Error :: (line:272) :: getting value from N d array like a 1 d array after overflow
      Expression: test[index_overflow] --> expected[index,2]
      RingArrayBoundsError: Cannot index (125,1,2), outside of range (106:130,1,1)
       in checkbounds(::RingArrays.RingArray{Int64,3}, ::Int64, ::Int64, ::Int64, ::Vararg{Int64,N}) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:123
       in getindex(::RingArrays.RingArray{Int64,3}, ::Int64) at /home/vagrant/.julia/v0.5/RingArrays/src/RingArrays.jl:134
       in do_fact(::##305#413, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##297#405)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:370
       in context(::##297#405, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##211#319)() at /home/vagrant/.julia/v0.5/RingArrays/test/RingArrays.jl:342
       in facts(::##211#319, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:262
       in _start() at ./client.jl:318
  > getting the last value from N d array like a 1 d array after overflow
  > getting value from N d array
Out of 49 total facts:
  Verified: 46
  Errored:  3
Getting values over the length (overflow) of the RingArray
  > getting the first value after overflowing
  > getting the first value after overflowing with only before overflow
  > getting any value after overflowing
  > getting any value after any number of overflows
  > getting value from 2 d array after overflowing
  > getting value from N d array after any number of overflows
23 facts verified.
Getting data views
  > looking at a small portion of the first block
  > trying to change a value in a view
  > looking at a small portion of the first block without loading
  > looking at a the whole portion of the first block
  > looking at a small portion of any block
  > looking at a small portion of two blocks
  > looking at a portion of two blocks at overflow
  > looking at a portion of two blocks at overflow of a 2d ring array
  > looking at a portion from one block from N d array after any number of overflows
31 facts verified.
Using checkbounds
  > checking bounds before overflow without overflowing
  > checking bounds after overflow without overflowing
  > checking bounds after overflow with overflowing
  > checking bounds before overflow with overflowing
  > checking unit range bounds before overflow without overflowing
  > checking unit range bounds after overflow without overflowing
  > checking unit range bounds after overflow with overflowing
  > checking unit range bounds before overflow with overflowing
  > checking unit range bounds that exceed the length of the ring
  > checking indexing of N d RingArray
  > checking out of bounds indexing of N d RingArray
  > checking out of bounds indexing not on the first dimension of N d RingArray
  > checking range indexing of N d RingArray
  > checking out of bounds range indexing of N d RingArray
36 facts verified.
Using display
  > trying display on a typical RingArray
3-element Array{AbstractArray{Int64,1},1}:
 #undef
 #undef
 #undef1 fact verified.
Using views
  > having the RingArray overflow when no views in use
  > having the RingArray overflow when first block is in use
  > having the RingArray overflow to the first block when second block is in use
  > having a view that goes out of scope and run gc
  > having a view that goes out of scope don't run gc
  > having many views that goes out of scope don't run gc
  > having a view that stays and many views that goes out of scope don't run gc
  > having the RingArray overflow to the first block when second block is in use
Out of 66 total facts:
  Verified: 64
  Pending:  2
Loading blocks in RingArray
  > loading the first block
  > loading lots of blocks
  > loading a block of different size
  > loading a block of different dimensions
  > loading too many blocks
178 facts verified.
Testing custom errors
  > testing output of OverwriteError
  > testing output of RingArrayFullError
  > testing output of RingArrayBoundsError
3 facts verified.
Test Summary:   | Pass  Total
  RingArray Tests |   32     32
ERROR: LoadError: FactCheck finished with 3 non-successful tests.
 in exitstatus() at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:568
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/RingArrays/test/runtests.jl, in expression starting on line 13
=============================[ ERROR: RingArrays ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/RingArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.1
INFO: Removing FactCheck v0.4.3
ERROR: RingArrays had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:736
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
