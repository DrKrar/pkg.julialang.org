>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1747.6640625 MB free)
Uptime: 24433.0 sec
Load Avg:  1.03271484375  0.947265625  0.98876953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1397582 s       6278 s     135974 s     603695 s         66 s
#2  3499 MHz     460909 s         47 s      73784 s    1833020 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.21.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 64749.595   
RESULT: Gradient norm smaller than tolerance.
iterations 19  gradient 3.1089e-12  final value -38.0554      factorizations 18
  6.901229 seconds (1.65 M allocations: 156.374 MB, 0.79% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.6714     19.2        19.2        0.0961      0.0         
2           30.4549     10.7        10.7        0.0858      -0.2        
3           19.7464     6.39        6.39        0.0979      -0.6        
4           13.3547     3.52        3.52        0.129       -1.2        
5           9.831       2.11        2.11        0.206       -2.0        
6           7.72536     0.932       0.932       0.246       -3.1        
7           6.79304     0.0787      0.0787      0.0775      -4.3        
8           6.71429     0.000104    0.000104    0.00283     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.714191    

            final grad:   4.742205e-06

            final lambda: 4.4841551e-08

            time / iter:  264   ms

            total time:   2.38  seconds, of which

            derivs:     1.9 %

            back pass:  67.5%

            fwd pass:   5.5 %

            other:      25.1% (graphics etc.)
 =========== end iLQG ===========
 18.521101 seconds (6.25 M allocations: 428.842 MB, 1.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
