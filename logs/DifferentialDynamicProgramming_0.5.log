>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1751.7734375 MB free)
Uptime: 26897.0 sec
Load Avg:  0.9921875  0.96435546875  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1609837 s       2765 s     142031 s     634729 s         75 s
#2  3500 MHz     737882 s       4380 s      82709 s    1765453 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.21.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69481.495   
RESULT: Gradient norm smaller than tolerance.
iterations 16  gradient 2.90483e-12  final value -29.7262      factorizations 15
  6.362455 seconds (1.65 M allocations: 140.457 MB, 0.74% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5575     23.8        23.8        0.108       0.0         
2           26.7188     10.5        10.5        0.0848      -0.2        
3           16.175      5.69        5.69        0.0852      -0.6        
4           10.4899     3.08        3.08        0.105       -1.2        
5           7.41018     1.17        1.17        0.148       -2.0        
6           6.23645     0.169       0.169       0.151       -3.1        
7           6.0674      0.00606     0.00606     0.0482      -4.3        
8           6.06134     7.18e-06    7.18e-06    0.00192     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.061332    

            final grad:   3.252578e-06

            final lambda: 4.4841551e-08

            time / iter:  200   ms

            total time:   1.80  seconds, of which

            derivs:     3.7 %

            back pass:  68.2%

            fwd pass:   6.3 %

            other:      21.8% (graphics etc.)
 =========== end iLQG ===========
 15.677844 seconds (6.25 M allocations: 428.842 MB, 1.24% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
