>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1673.265625 MB free)
Uptime: 27189.0 sec
Load Avg:  0.99169921875  0.9677734375  1.017578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1613953 s       5794 s     145163 s     671297 s         61 s
#2  3500 MHz     724392 s       1035 s      85353 s    1816904 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.20.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 69153.035   
RESULT: Gradient norm smaller than tolerance.
iterations 12  gradient 2.87128e-12  final value -22.1147      factorizations 11
  4.855974 seconds (1.65 M allocations: 118.449 MB, 0.66% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.5918     18.7        18.7        0.0917      0.0         
2           31.9333     11.7        11.7        0.0848      -0.2        
3           20.2743     7.41        7.41        0.098       -0.6        
4           12.8641     3.77        3.77        0.119       -1.2        
5           9.09671     1.7         1.7         0.172       -2.0        
6           7.40029     0.578       0.578       0.22        -3.1        
7           6.82233     0.0497      0.0497      0.0744      -4.3        
8           6.7726      6.54e-05    6.54e-05    0.00284     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.772536    

            final grad:   4.641466e-06

            final lambda: 4.4841551e-08

            time / iter:  166   ms

            total time:   1.49  seconds, of which

            derivs:     3.1 %

            back pass:  64.4%

            fwd pass:   7.5 %

            other:      25.0% (graphics etc.)
 =========== end iLQG ===========
 11.772603 seconds (6.25 M allocations: 428.842 MB, 1.38% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
