>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1686.91796875 MB free)
Uptime: 24681.0 sec
Load Avg:  1.02001953125  1.0009765625  1.013671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1372692 s       3894 s     136216 s     663720 s         53 s
#2  3499 MHz     505356 s       3796 s      69652 s    1806476 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.19.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 63916.521   
RESULT: Gradient norm smaller than tolerance.
iterations 18  gradient 2.84533e-12  final value -22.4008      factorizations 17
  6.634498 seconds (1.66 M allocations: 151.870 MB, 0.65% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           50.2338     22.8        22.8        0.102       0.0         
2           27.4655     11.5        11.5        0.084       -0.2        
3           15.9244     6.47        6.47        0.0945      -0.6        
4           9.45315     2.8         2.8         0.117       -1.2        
5           6.64925     1.26        1.26        0.166       -2.0        
6           5.3916      0.549       0.549       0.237       -3.1        
7           4.84217     0.0293      0.0293      0.071       -4.3        
8           4.81286     2.41e-05    2.41e-05    0.00264     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   4.812836    

            final grad:   4.250438e-06

            final lambda: 4.4841551e-08

            time / iter:  217   ms

            total time:   1.95  seconds, of which

            derivs:     2.5 %

            back pass:  67.0%

            fwd pass:   8.0 %

            other:      22.5% (graphics etc.)
 =========== end iLQG ===========
 14.960783 seconds (6.94 M allocations: 444.288 MB, 1.45% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
