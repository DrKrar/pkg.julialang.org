>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.0.1
INFO: Installing MacroTools v0.3.0
INFO: Installing Requires v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of DifferentialDynamicProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.0-dev+3184
Commit fb283c6 (2016-03-17 08:49 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:308 overwritten at /home/vagrant/.julia/v0.5/Requires/src/hook.jl:17.
WARNING: Method definition back_pass(Any, Any, Array{#T<:Any, 2}, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any) in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/DifferentialDynamicProgramming/src/iLQG.jl:532 overwritten at /home/vagrant/.julia/v0.5/DifferentialDynamicProgramming/src/iLQG.jl:633.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 72474.831   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 3.14503e-12  final value -30.3266      factorizations 13
  7.588921 seconds (3.71 M allocations: 286.403 MB, 2.63% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

=========== begin iLQG ===========
iteration     cost    reduction     expected    gradient    log10(lambda)
1           51.2922     23.6        23.6        0.102       0.0         
2           27.6501     11.3        11.3        0.0845      -0.2        
3           16.3052     6.02        6.02        0.0909      -0.6        
4           10.2857     2.96        2.96        0.11        -1.2        
5           7.32163     1.2         1.2         0.16        -2.0        
6           6.12002     0.202       0.202       0.173       -3.1        
7           5.91793     0.006       0.006       0.0499      -4.3        
8           5.91193     5.49e-06    5.49e-06    0.00182     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

                     final cost:   5.911928    

                     final grad:   3.015717e-06

                     final lambda: 0.0000000e+00

                     time / iter:  1028  ms

                     total time:   9.25  seconds, of which

                     derivs:     1.1 %

                     back pass:  87.6%

                     fwd pass:   2.9 %

                     other:      8.4 % (graphics etc.)
 =========== end iLQG ===========
 20.001345 seconds (6.24 M allocations: 624.550 MB, 1.84% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
