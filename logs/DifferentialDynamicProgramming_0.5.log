>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1682.8046875 MB free)
Uptime: 26603.0 sec
Load Avg:  1.0498046875  1.02685546875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1544694 s       6314 s     128139 s     712780 s         74 s
#2  3499 MHz     785256 s         89 s      82633 s    1707734 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.20.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 55629.774   
RESULT: Gradient norm smaller than tolerance.
iterations 24  gradient 3.0285e-12  final value -19.4868      factorizations 23
  4.840598 seconds (1.66 M allocations: 184.756 MB, 0.86% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.4494     15.4        15.4        0.0851      0.0         
2           34.004      11.5        11.5        0.087       -0.2        
3           22.5399     8.88        8.88        0.112       -0.6        
4           13.6604     5.09        5.09        0.149       -1.2        
5           8.57501     1.87        1.87        0.17        -2.0        
6           6.70786     0.334       0.334       0.206       -3.1        
7           6.37392     0.0111      0.0111      0.0605      -4.3        
8           6.36283     9.95e-06    9.95e-06    0.00212     -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   6.362816    

            final grad:   3.493166e-06

            final lambda: 4.4841551e-08

            time / iter:  203   ms

            total time:   1.82  seconds, of which

            derivs:     2.4 %

            back pass:  62.9%

            fwd pass:   9.2 %

            other:      25.6% (graphics etc.)
 =========== end iLQG ===========
 15.382081 seconds (6.25 M allocations: 428.842 MB, 1.52% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
