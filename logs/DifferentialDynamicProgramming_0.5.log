>>> 'Pkg.add("DifferentialDynamicProgramming")' log
INFO: Cloning cache of DifferentialDynamicProgramming from https://github.com/baggepinnen/DifferentialDynamicProgramming.jl.git
INFO: Installing DifferentialDynamicProgramming v0.1.0
INFO: Installing Requires v0.3.0
INFO: Package database updated

>>> 'Pkg.test("DifferentialDynamicProgramming")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1672.73828125 MB free)
Uptime: 26123.0 sec
Load Avg:  1.2099609375  1.06103515625  1.05859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1643918 s       5848 s     147370 s     509762 s         81 s
#2  3499 MHz     658834 s       3476 s      83108 s    1785647 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - DifferentialDynamicProgramming 0.1.0
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.20.0
 - Requires                      0.3.0
INFO: Testing DifferentialDynamicProgramming
WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module DifferentialDynamicProgramming at /home/vagrant/.julia/v0.5/Requires/src/require.jl:12.
INFO: Compile time is high for this package, this is expected and is not an error.
==========
Starting box-QP, dimension 500, initial value: 56992.586   
RESULT: Gradient norm smaller than tolerance.
iterations 14  gradient 2.83903e-12  final value -24.8355      factorizations 13
  7.186957 seconds (1.65 M allocations: 127.950 MB, 0.59% gc time)
Running linear demo function for DifferentialDynamicProgramming.jl

---------- begin iLQG ----------
iteration     cost    reduction     expected    gradient    log10(lambda)
1           49.3349     24.8        24.8        0.115       0.0         
2           24.5249     11.5        11.5        0.0924      -0.2        
3           13.0339     5.13        5.13        0.0857      -0.6        
4           7.90154     2.62        2.62        0.0908      -1.2        
5           5.28007     1.57        1.57        0.162       -2.0        
6           3.71364     0.549       0.549       0.181       -3.1        
7           3.16423     0.0415      0.0415      0.0646      -4.3        
8           3.1227      5.33e-05    5.33e-05    0.0025      -5.7        

SUCCESS: gradient norm < tolGrad

 iterations:   9  

            final cost:   3.122644    

            final grad:   4.089199e-06

            final lambda: 4.4841551e-08

            time / iter:  256   ms

            total time:   2.31  seconds, of which

            derivs:     2.7 %

            back pass:  62.3%

            fwd pass:   7.9 %

            other:      27.1% (graphics etc.)
 =========== end iLQG ===========
 17.206063 seconds (6.25 M allocations: 428.842 MB, 1.44% gc time)
Install package Plots.jl to plot results in the end of demo_linear
INFO: DifferentialDynamicProgramming tests passed

>>> End of log
