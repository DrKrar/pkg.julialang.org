>>> 'Pkg.add("ValidatedNumerics")' log
INFO: Cloning cache of CRlibm from https://github.com/dpsanders/CRlibm.jl.git
INFO: Cloning cache of ValidatedNumerics from https://github.com/dpsanders/ValidatedNumerics.jl.git
INFO: Installing CRlibm v0.2.3
INFO: Installing FixedSizeArrays v0.2.2
INFO: Installing ValidatedNumerics v0.4.3
INFO: Building CRlibm
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/CRlibm/deps/build.jl, in expression starting on line 9
Downloading the library files from http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Working in /home/vagrant/.julia/v0.5/CRlibm/deps/src
--2016-07-08 10:53:14--  http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Resolving lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)... 140.77.166.31
Connecting to lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)|140.77.166.31|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2368435 (2.3M) [application/binary]
Saving to: ‘crlibm-1.0beta4.tar.gz’

     0K .......... .......... .......... .......... ..........  2%  290K 8s
    50K .......... .......... .......... .......... ..........  4%  290K 8s
   100K .......... .......... .......... .......... ..........  6%  578K 6s
   150K .......... .......... .......... .......... ..........  8%  579K 5s
   200K .......... .......... .......... .......... .......... 10% 36.0M 4s
   250K .......... .......... .......... .......... .......... 12%  583K 4s
   300K .......... .......... .......... .......... .......... 15%  586K 4s
   350K .......... .......... .......... .......... .......... 17% 6.08M 3s
   400K .......... .......... .......... .......... .......... 19%  619K 3s
   450K .......... .......... .......... .......... .......... 21%  215M 3s
   500K .......... .......... .......... .......... .......... 23%  601K 3s
   550K .......... .......... .......... .......... .......... 25% 35.5M 2s
   600K .......... .......... .......... .......... .......... 28% 71.7M 2s
   650K .......... .......... .......... .......... .......... 30%  591K 2s
   700K .......... .......... .......... .......... .......... 32% 27.6M 2s
   750K .......... .......... .......... .......... .......... 34% 87.1M 2s
   800K .......... .......... .......... .......... .......... 36%  609K 2s
   850K .......... .......... .......... .......... .......... 38% 12.0M 2s
   900K .......... .......... .......... .......... .......... 41% 17.0M 1s
   950K .......... .......... .......... .......... .......... 43%  436M 1s
  1000K .......... .......... .......... .......... .......... 45%  601K 1s
  1050K .......... .......... .......... .......... .......... 47% 22.1M 1s
  1100K .......... .......... .......... .......... .......... 49% 58.4M 1s
  1150K .......... .......... .......... .......... .......... 51% 65.0M 1s
  1200K .......... .......... .......... .......... .......... 54%  603K 1s
  1250K .......... .......... .......... .......... .......... 56% 23.7M 1s
  1300K .......... .......... .......... .......... .......... 58% 66.3M 1s
  1350K .......... .......... .......... .......... .......... 60% 79.0M 1s
  1400K .......... .......... .......... .......... .......... 62%  605K 1s
  1450K .......... .......... .......... .......... .......... 64% 48.2M 1s
  1500K .......... .......... .......... .......... .......... 67% 25.8M 1s
  1550K .......... .......... .......... .......... .......... 69%  108M 1s
  1600K .......... .......... .......... .......... .......... 71%  635K 1s
  1650K .......... .......... .......... .......... .......... 73% 6.85M 0s
  1700K .......... .......... .......... .......... .......... 75% 44.3M 0s
  1750K .......... .......... .......... .......... .......... 77% 64.3M 0s
  1800K .......... .......... .......... .......... .......... 79%  129M 0s
  1850K .......... .......... .......... .......... .......... 82%  632K 0s
  1900K .......... .......... .......... .......... .......... 84% 13.2M 0s
  1950K .......... .......... .......... .......... .......... 86% 22.3M 0s
  2000K .......... .......... .......... .......... .......... 88% 49.5M 0s
  2050K .......... .......... .......... .......... .......... 90% 85.8M 0s
  2100K .......... .......... .......... .......... .......... 92%  643K 0s
  2150K .......... .......... .......... .......... .......... 95% 37.8M 0s
  2200K .......... .......... .......... .......... .......... 97% 12.3M 0s
  2250K .......... .......... .......... .......... .......... 99% 47.4M 0s
  2300K .......... ..                                         100%  165M=1.6s

2016-07-08 10:53:16 (1.45 MB/s) - ‘crlibm-1.0beta4.tar.gz’ saved [2368435/2368435]

Working in /home/vagrant/.julia/v0.5/CRlibm/deps/src/crlibm-1.0beta4
Working in /home/vagrant/.julia/v0.5/CRlibm/deps/src/crlibm-1.0beta4
Making all in scs_lib
Making all in .
log-de.c: In function ‘log_rn’:
log-de.c:109:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log-de.c: In function ‘log_rd’:
log-de.c:243:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log-de.c: In function ‘log_ru’:
log-de.c:370:66: warning: division by zero [-Wdiv-by-zero]
      if (xdb.i[HI] < 0)                              return (x-x)/0;   /* log(-x) = Nan    */
                                                                  ^
log10-td.c: In function ‘log10_rn’:
log10-td.c:206:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_ru’:
log10-td.c:391:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_rd’:
log10-td.c:571:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log10-td.c: In function ‘log10_rz’:
log10-td.c:749:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rn’:
log2-td.c:188:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_ru’:
log2-td.c:374:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rd’:
log2-td.c:571:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
log2-td.c: In function ‘log2_rz’:
log2-td.c:766:20: warning: division by zero [-Wdiv-by-zero]
        return (x-x)/0;                      /* log(-x) = Nan    */
                    ^
asincos.c: In function ‘asinpi_rd’:
asincos.c:3450:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
asincos.c: In function ‘asinpi_ru’:
asincos.c:3804:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
asincos.c: In function ‘asinpi_rz’:
asincos.c:4157:29: warning: variable ‘deltal’ set but not used [-Wunused-but-set-variable]
   double deltatemp, deltah, deltal;
                             ^
Making all in tests
test_val.c: In function ‘main’:
test_val.c:85:7: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
       sscanf(argv[4],"%llx", &input.l);
       ^
test_val.c:99:5: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
     sscanf(argv[4],"%llx", &input.l);
     ^
test_val.c:100:5: warning: format ‘%llx’ expects argument of type ‘long long unsigned int *’, but argument 3 has type ‘int64_t *’ [-Wformat=]
     sscanf(argv[5],"%llx", &input2.l);
     ^
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of ValidatedNumerics
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ValidatedNumerics")' log
Julia Version 0.5.0-dev+5214
Commit 756faa6* (2016-07-07 22:38 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for ValidatedNumerics...
INFO: Installing FactCheck v0.4.3
INFO: Installing Polynomials v0.0.5
INFO: Testing ValidatedNumerics
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::SubString{String}, ::Vararg{SubString{String},N}) at ./deprecated.jl:30
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/CRlibm/src/CRlibm.jl, in expression starting on line 35
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{String,N}) at ./deprecated.jl:30
 in wrap_MPFR() at /home/vagrant/.julia/v0.5/CRlibm/src/CRlibm.jl:73
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/CRlibm/src/CRlibm.jl, in expression starting on line 149
Constructing intervals
Out of 70 total facts:
  Verified: 67
  Pending:  3
Big intervals
6 facts verified.
Complex intervals
3 facts verified.
± tests
3 facts verified.
Consistency tests
25 facts verified.
inv
12 facts verified.
fma consistency
7 facts verified.
∈ tests
5 facts verified.
Inclusion tests
11 facts verified.
Comparison tests
20 facts verified.
Intersection tests
8 facts verified.
Special interval tests
18 facts verified.
mid etc.
12 facts verified.
cancelplus tests
22 facts verified.
mid and radius
7 facts verified.
abs, min, max, sign
20 facts verified.
Precision tests
4 facts verified.
Interval rounding tests
3 facts verified.
Interval power of an interval
4 facts verified.
Numeric tests
19 facts verified.
Power tests
39 facts verified.
Exp and log tests
18 facts verified.
Comparison tests
8 facts verified.
Rational tests
7 facts verified.
Floor etc. tests
24 facts verified.
Trig tests
102 facts verified.
Hyperb tests
41 facts verified.
Tests with rational intervals
3 facts verified.
Rounding rational intervals
1 fact verified.
Tests with float intervals
4 facts verified.
Testing functions of intervals
Out of 2 total facts:
  Pending:  2
Testing conversions
Out of 2 total facts:
  Pending:  2
Linear algebra with intervals tests
2 facts verified.
Interval loop tests
12 facts verified.
Pi tests
Out of 7 total facts:
  Verified: 5
  Pending:  2
Complex interval operations
6 facts verified.
Operations on boxes
  Error :: (line:272)
    Expression: 2A --> IntervalBox(2 .. 4,6 .. 8)
    MethodError: no method matching _fill_tuples_expr(::FixedSizeArrays.##31#32{Symbol,Tuple{DataType},Tuple{Symbol}}, ::Tuple{DataType})
    Closest candidates are:
      _fill_tuples_expr(::Function, !Matched::Tuple{Int64}, !Matched::Any...)
      _fill_tuples_expr{N}(::Function, !Matched::Tuple{Vararg{Int64,N}}, !Matched::Any...)
     in unrolled_map_expr(::Symbol, ::Type{T}, ::Tuple{DataType}, ::Tuple{DataType}, ::Tuple{Symbol}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:73
     in (::Vararg{Any,N})() at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:123
     in do_fact(::##2171#2190{ValidatedNumerics.IntervalBox{2,BigFloat},##2170#2189}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:8
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: A + B --> IntervalBox(1 .. 4,6 .. 10)
    MethodError: no method matching _fill_tuples_expr(::FixedSizeArrays.##31#32{Symbol,Tuple{DataType,DataType},Tuple{Symbol,Symbol}}, ::Tuple{DataType})
    Closest candidates are:
      _fill_tuples_expr(::Function, !Matched::Tuple{Int64}, !Matched::Any...)
      _fill_tuples_expr{N}(::Function, !Matched::Tuple{Vararg{Int64,N}}, !Matched::Any...)
     in unrolled_map_expr(::Symbol, ::Type{T}, ::Tuple{DataType}, ::Tuple{DataType,DataType}, ::Tuple{Symbol,Symbol}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:73
     in (::Vararg{Any,N})() at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:113
     in do_fact(::##2173#2192{ValidatedNumerics.IntervalBox{2,BigFloat},ValidatedNumerics.IntervalBox{2,BigFloat}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:9
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: dot(A,B) --> @interval 9 28
    MethodError: no method matching _fill_tuples_expr(::FixedSizeArrays.##31#32{Symbol,Tuple{DataType,DataType},Tuple{Symbol,Symbol}}, ::Tuple{DataType})
    Closest candidates are:
      _fill_tuples_expr(::Function, !Matched::Tuple{Int64}, !Matched::Any...)
      _fill_tuples_expr{N}(::Function, !Matched::Tuple{Vararg{Int64,N}}, !Matched::Any...)
     in unrolled_map_expr(::Symbol, ::Type{T}, ::Tuple{DataType}, ::Tuple{DataType,DataType}, ::Tuple{Symbol,Symbol}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:73
     in (::Vararg{Any,N})() at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:113
     in do_fact(::##2175#2194{ValidatedNumerics.IntervalBox{2,BigFloat},ValidatedNumerics.IntervalBox{2,BigFloat}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:10
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: A ⊆ B --> true
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in issubset(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/intervalbox.jl:22
     in do_fact(::##2177#2196{ValidatedNumerics.IntervalBox{2,BigFloat},ValidatedNumerics.IntervalBox{2,BigFloat}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:12
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: isempty(X ∩ Y) --> true
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in intersect(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/intervalbox.jl:24
     in do_fact(::##2179#2198, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:17
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: length(V) --> 10
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in length(::ValidatedNumerics.IntervalBox{10,BigFloat}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/core.jl:23
     in do_fact(::##2181#2200, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:21
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: length(Y) --> 1
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in length(::ValidatedNumerics.IntervalBox{1,BigFloat}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/core.jl:23
     in do_fact(::##2185#2204, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2169#2188)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:25
     in facts(::##2169#2188, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
Out of 9 total facts:
  Verified: 2
  Errored:  7
@intervalbox tests
  Error :: (line:272)
    Expression: f(X) --> IntervalBox(3 .. 3,-1 .. -1)
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in append_any(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::Vararg{ValidatedNumerics.IntervalBox{2,BigFloat},N}) at ./essentials.jl:98
     in (::#f#2215)(::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/intervalbox_macro.jl:38
     in do_fact(::##2209#2217{ValidatedNumerics.IntervalBox{2,BigFloat},##2208#2216}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2207#2214)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:34
     in facts(::##2207#2214, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: isa(g(X),IntervalBox) --> true
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in append_any(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::Vararg{ValidatedNumerics.IntervalBox{2,BigFloat},N}) at ./essentials.jl:98
     in (::#g#2218)(::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/intervalbox_macro.jl:38
     in do_fact(::##2211#2220{ValidatedNumerics.IntervalBox{2,BigFloat}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2207#2214)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:37
     in facts(::##2207#2214, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: emptyinterval(X) --> IntervalBox(∅,∅)
    MethodError: no method matching _fill_tuples_expr(::FixedSizeArrays.##31#32{Symbol,Tuple{DataType},Tuple{Symbol}}, ::Tuple{DataType})
    Closest candidates are:
      _fill_tuples_expr(::Function, !Matched::Tuple{Int64}, !Matched::Any...)
      _fill_tuples_expr{N}(::Function, !Matched::Tuple{Vararg{Int64,N}}, !Matched::Any...)
     in unrolled_map_expr(::Symbol, ::Type{T}, ::Tuple{DataType}, ::Tuple{DataType}, ::Tuple{Symbol}) at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:73
     in (::Vararg{Any,N})() at /home/vagrant/.julia/v0.5/FixedSizeArrays/src/mapreduce.jl:123
     in do_fact(::##2213#2222{ValidatedNumerics.IntervalBox{2,BigFloat}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2207#2214)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:39
     in facts(::##2207#2214, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
Out of 3 total facts:
  Errored:  3
setdiff for IntervalBox
  Error :: (line:272)
    Expression: setdiff(X,Y) --> [IntervalBox(3 .. 4,3 .. 4),IntervalBox(2 .. 3,3 .. 5)]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2225#2240{##2224#2239}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:46
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> [IntervalBox(2 .. 5,3 .. 4),IntervalBox(2 .. 5,5 .. 6)]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2227#2242, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:52
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> [IntervalBox(4 .. 5,3 .. 4),IntervalBox(4 .. 5,5 .. 6),IntervalBox(2 .. 4,3 .. 6)]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2229#2244, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:58
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> [IntervalBox(3 .. 4,3 .. 4),IntervalBox(3 .. 4,5 .. 6),IntervalBox(2 .. 3,3 .. 6),IntervalBox(4 .. 5,3 .. 6)]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2231#2246, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:65
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> (typeof(X))[X]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2233#2248, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:73
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> (typeof(X))[]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{2,BigFloat}, ::ValidatedNumerics.IntervalBox{2,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2235#2250, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:78
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
  Error :: (line:272)
    Expression: setdiff(X,Y) --> [IntervalBox(2 .. 3,4 .. 5,7 .. 8),IntervalBox(2 .. 3,4 .. 5,9 .. 10),IntervalBox(2 .. 3,3 .. 4,7 .. 10),IntervalBox(2 .. 3,5 .. 6,7 .. 10),IntervalBox(1 .. 2,3 .. 6,7 .. 10),IntervalBox(3 .. 4,3 .. 6,7 .. 10)]
    MethodError: no method matching *(::Type{Any})
    Closest candidates are:
      *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
      *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
      *(!Matched::BigInt, !Matched::BigFloat)
      ...
     in setdiff(::ValidatedNumerics.IntervalBox{3,BigFloat}, ::ValidatedNumerics.IntervalBox{3,BigFloat}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/multidim/setdiff.jl:46
     in do_fact(::##2237#2252, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
     in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
     in (::##2223#2238)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/multidim_tests/multidim.jl:83
     in facts(::##2223#2238, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
     in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
     in process_options(::Base.JLOptions) at ./client.jl:266
     in _start() at ./client.jl:322
Out of 7 total facts:
  Errored:  7
DecoratedInterval tests
15 facts verified.
displaymode tests
  > Interval
    > 6 sig figs
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in round_string(::BigFloat, ::Int64, ::RoundingMode{:Down}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:61
 in representation(::ValidatedNumerics.Interval{Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:82
 in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.Interval{Float64}) at ./strings/io.jl:8
 in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.Interval{Float64}, ::Vararg{ValidatedNumerics.Interval{Float64},N}) at ./strings/io.jl:59
 in do_fact(::##2319#2391{ValidatedNumerics.Interval{Float64}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
 in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
 in (::##2317#2389{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}})() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:19
 in context(::##2317#2389{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}}, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2316#2388)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:16
 in context(::##2316#2388, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:9
 in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl, in expression starting on line 7
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in round_string(::BigFloat, ::Int64, ::RoundingMode{:Up}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:61
 in representation(::ValidatedNumerics.Interval{Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:83
 in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.Interval{Float64}) at ./strings/io.jl:8
 in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.Interval{Float64}, ::Vararg{ValidatedNumerics.Interval{Float64},N}) at ./strings/io.jl:59
 in do_fact(::##2319#2391{ValidatedNumerics.Interval{Float64}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
 in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
 in (::##2317#2389{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}})() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:19
 in context(::##2317#2389{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}}, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2316#2388)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:16
 in context(::##2316#2388, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:9
 in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl, in expression starting on line 7
    > 10 sig figs
    > 20 sig figs
    > Full
    > Midpoint
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in round_string(::BigFloat, ::Int64, ::RoundingMode{:Nearest}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:61
 in representation(::ValidatedNumerics.Interval{Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:93
 in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
 in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.Interval{Float64}) at ./strings/io.jl:8
 in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.Interval{Float64}, ::Vararg{ValidatedNumerics.Interval{Float64},N}) at ./strings/io.jl:59
 in do_fact(::##2355#2427{ValidatedNumerics.Interval{Float64}}, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
 in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
 in (::##2353#2425{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}})() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:55
 in context(::##2353#2425{ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64},ValidatedNumerics.Interval{Float64}}, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2316#2388)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:52
 in context(::##2316#2388, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:9
 in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl, in expression starting on line 7
  > DecoratedInterval
  > BigFloat intervals
  > IntervalBox
    Error :: (line:272) :: IntervalBox
      Expression: string(X) --> "[1, 2] × [3, 4]"
      MethodError: no method matching *(::Type{Any})
      Closest candidates are:
        *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
        *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
        *(!Matched::BigInt, !Matched::BigFloat)
        ...
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:167
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:150
       in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
       in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:8
       in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.IntervalBox{2,Float64}, ::Vararg{ValidatedNumerics.IntervalBox{2,Float64},N}) at ./strings/io.jl:59
       in string(::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:66
       in do_fact(::##2380#2452, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##2378#2450)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:111
       in context(::##2378#2450, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:106
       in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:266
       in _start() at ./client.jl:322
    Error :: (line:272) :: IntervalBox
      Expression: string(X) --> "[1.09999, 1.20001] × [2.09999, 2.20001]"
      MethodError: no method matching *(::Type{Any})
      Closest candidates are:
        *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
        *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
        *(!Matched::BigInt, !Matched::BigFloat)
        ...
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:167
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:150
       in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
       in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:8
       in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.IntervalBox{2,Float64}, ::Vararg{ValidatedNumerics.IntervalBox{2,Float64},N}) at ./strings/io.jl:59
       in string(::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:66
       in do_fact(::##2382#2454, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##2378#2450)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:114
       in context(::##2378#2450, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:106
       in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:266
       in _start() at ./client.jl:322
    Error :: (line:272) :: IntervalBox
      Expression: string(X) --> "[-∞, ∞] × [-∞, ∞]"
      MethodError: no method matching *(::Type{Any})
      Closest candidates are:
        *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
        *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
        *(!Matched::BigInt, !Matched::BigFloat)
        ...
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:167
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:150
       in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
       in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:8
       in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.IntervalBox{2,Float64}, ::Vararg{ValidatedNumerics.IntervalBox{2,Float64},N}) at ./strings/io.jl:59
       in string(::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:66
       in do_fact(::##2384#2456, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##2378#2450)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:117
       in context(::##2378#2450, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:106
       in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:266
       in _start() at ./client.jl:322
    Error :: (line:272) :: IntervalBox
      Expression: string(X) --> "IntervalBox(Interval(-Inf, Inf), Interval(-Inf, Inf))"
      MethodError: no method matching *(::Type{Any})
      Closest candidates are:
        *(::Any, !Matched::Any, !Matched::Any, !Matched::Any...)
        *(!Matched::BitArray{2}, !Matched::UniformScaling{T<:Number})
        *(!Matched::BigInt, !Matched::BigFloat)
        ...
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}, ::Void) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:159
       in representation(::ValidatedNumerics.IntervalBox{2,Float64}) at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:150
       in show at /home/vagrant/.julia/v0.5/ValidatedNumerics/src/display.jl:0 [inlined]
       in print(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:8
       in #print_to_string#140(::Void, ::Function, ::ValidatedNumerics.IntervalBox{2,Float64}, ::Vararg{ValidatedNumerics.IntervalBox{2,Float64},N}) at ./strings/io.jl:59
       in string(::ValidatedNumerics.IntervalBox{2,Float64}) at ./strings/io.jl:66
       in do_fact(::##2386#2458, ::Expr, ::Symbol, ::FactCheck.ResultMetadata) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:334
       in macro expansion at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:272 [inlined]
       in (::##2378#2450)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:120
       in context(::##2378#2450, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
       in (::##2315#2387)() at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/display_tests/display.jl:106
       in facts(::##2315#2387, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
       in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
       in process_options(::Base.JLOptions) at ./client.jl:266
       in _start() at ./client.jl:322
Out of 31 total facts:
  Verified: 27
  Errored:  4
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{String,N}) at ./deprecated.jl:30
 in macro expansion; at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/root_finding_tests/wilkinson.jl:48 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426 (repeats 3 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/root_finding_tests/wilkinson.jl, in expression starting on line 47
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::Symbol, ::Vararg{Symbol,N}) at ./deprecated.jl:30
 in Polynomials.Poly{Int64}(::Array{Int64,1}, ::Symbol) at /home/vagrant/.julia/v0.5/Polynomials/src/Polynomials.jl:71
 in poly(::Array{Int64,1}, ::Symbol) at /home/vagrant/.julia/v0.5/Polynomials/src/Polynomials.jl:100
 in generate_wilkinson_horner(::Int64) at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/root_finding_tests/wilkinson.jl:27
 in macro expansion; at /home/vagrant/.julia/v0.5/ValidatedNumerics/test/root_finding_tests/wilkinson.jl:49 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426 (repeats 3 times)
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/root_finding_tests/wilkinson.jl, in expression starting on line 47
Testing root finding
  > Interval rounding: wide
    > Precision: (BigFloat,53)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (BigFloat,256)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (Float64,64)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
  > Interval rounding: narrow
    > Precision: (BigFloat,53)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.0000000000000000, 5.0000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5000000000000000, 7.5000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.0000000000000000e+01, 1.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.0000000000000000e+01, 2.0000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0000000000000000, 1.0000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (BigFloat,256)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.000000000000000000000000000000000000000000000000000000000000000000000000000000, 5.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.500000000000000000000000000000000000000000000000000000000000000000000000000000, 7.500000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01, 2.000000000000000000000000000000000000000000000000000000000000000000000000000000e+01)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.000000000000000000000000000000000000000000000000000000000000000000000000000000, 1.000000000000000000000000000000000000000000000000000000000000000000000000000000)
          > With autodiff=false
          > With autodiff=true
    > Precision: (Float64,64)
      > Method ValidatedNumerics.newton
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
      > Method ValidatedNumerics.krawczyk
        > Function sin; interval Interval(-5.0, 5.0)
          > With autodiff=false
          > With autodiff=true
        > Function cos; interval Interval(-7.5, 7.5)
          > With autodiff=false
          > With autodiff=true
        > Function W₃; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function W₇; interval Interval(-10.0, 10.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2460; interval Interval(-20.0, 20.0)
          > With autodiff=false
          > With autodiff=true
        > Function #2462; interval Interval(0.0, 1.0)
          > With autodiff=false
          > With autodiff=true
1512 facts verified.

1 fact verified.
find_roots tests
9 facts verified.
ERROR: LoadError: FactCheck finished with 21 non-successful tests.
 in exitstatus() at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:568
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ValidatedNumerics/test/runtests.jl, in expression starting on line 31
==========================[ ERROR: ValidatedNumerics ]==========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/ValidatedNumerics/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing FactCheck v0.4.3
INFO: Removing Polynomials v0.0.5
ERROR: ValidatedNumerics had test errors
 in #test#51(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:720
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
