>>> 'Pkg.add("SampledSignals")' log
INFO: Installing SIUnits v0.0.6
INFO: Installing SampledSignals v0.0.1
INFO: Installing TexExtensions v0.0.3
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of SampledSignals
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("SampledSignals")' log
Julia Version 0.5.0-dev+4361
Commit bc56e32 (2016-05-27 12:01 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for SampledSignals...
INFO: Installing BaseTestNext v0.2.1
INFO: Installing FixedPointNumbers v0.1.3
INFO: Testing SampledSignals
Supports audio interface: Error During Test
  Test threw an exception of type InexactError
  Expression: domain(tbuf) == collect(0:63) / TEST_SR
  InexactError()
   in setindex!(::Array{SIUnits.SIQuantity{Int64,m,kg,s,A,K,mol,cd,rad,sr},1}, ::SIUnits.SIQuantity{Float64,0,0,1,0,0,0,0,0,0}, ::Int64) at ./array.jl:340
   in ./(::Array{Int64,1}, ::SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}) at ./arraymath.jl:96
   in /(::Array{Int64,1}, ::SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}) at ./abstractarraymath.jl:57
   in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:11 [inlined]
   in macro expansion; at ./test.jl:583 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:6 [inlined]
   in macro expansion; at ./test.jl:583 [inlined]
   in anonymous at ./<missing>:580
   in include_from_node1(::String) at ./loading.jl:426
   in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
   in macro expansion; at ./test.jl:583 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:426
   in process_options(::Base.JLOptions) at ./client.jl:266
   in _start() at ./client.jl:322
WARNING: writemime is deprecated, use show instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in writemime(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::String, ::SampledSignals.SampleBuf{Float64,2,SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}}) at ./deprecated.jl:30
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:229 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:221 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in anonymous at ./<missing>:580
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl, in expression starting on line 1
multichannel buf prints prettily: Test Failed
  Expression: takebuf_string(iobuf) == expected
   Evaluated: "[0.2 0.0; 0.199956 0.00420249; 0.199823 0.00840312; 0.199603 0.0126; 0.199294 0.0167914; 0.198897 0.0209754; 0.198412 0.02515; 0.19784 0.0293136; 0.19718 0.0334642; 0.196434 0.0376001; 0.1956 0.0417194; 0.194681 0.0458202; 0.193675 0.0499008; 0.192583 0.0539594; 0.191407 0.0579941; 0.190146 0.0620032; 0.188801 0.065985; 0.187373 0.0699376; 0.185862 0.0738593; 0.184269 0.0777484; 0.182595 0.0816032; 0.18084 0.085422; 0.179005 0.089203; 0.177091 0.0929446; 0.175099 0.0966452; 0.17303 0.100303; 0.170884 0.103917; 0.168663 0.107485; 0.166367 0.111005; 0.163998 0.114476; 0.161556 0.117897; 0.159043 0.121265; 0.15646 0.124581; 0.153808 0.127841; 0.151087 0.131044; 0.1483 0.13419; 0.145448 0.137277; 0.142531 0.140303; 0.139552 0.143266; 0.136511 0.146167; 0.133409 0.149003; 0.130249 0.151774; 0.127031 0.154477; 0.123757 0.157112; 0.120428 0.159678; 0.117046 0.162173; 0.113613 0.164597; 0.110129 0.166948; 0.106597 0.169225; 0.103018 0.171427; 0.0993928 0.173554; 0.095724 0.175604; 0.092013 0.177577; 0.0882614 0.179471; 0.0844707 0.181286; 0.0806428 0.183021; 0.0767793 0.184675; 0.0728819 0.186248; 0.0689523 0.187738; 0.0649922 0.189145; 0.0610034 0.190469; 0.0569877 0.191709; 0.0529469 0.192864; 0.0488826 0.193934; 0.0447968 0.194919; 0.0406912 0.195817; 0.0365676 0.196629; 0.0324279 0.197354; 0.0282739 0.197991; 0.0241073 0.198542; 0.0199302 0.199004; 0.0157442 0.199379; 0.0115513 0.199666; 0.00735324 0.199865; 0.00315197 0.199975; -0.0010507 0.199997; -0.0052529 0.199931; -0.00945278 0.199776; -0.0136485 0.199534; -0.0178382 0.199203; -0.02202 0.198784; -0.026192 0.198278; -0.0303526 0.197683; -0.0344997 0.197002; -0.0386315 0.196234; -0.0427464 0.195378; -0.0468423 0.194437; -0.0509176 0.19341; -0.0549703 0.192297; -0.0589988 0.1911; -0.0630013 0.189818; -0.0669759 0.188452; -0.070921 0.187003; -0.0748347 0.185472; -0.0787154 0.183858; -0.0825613 0.182164; -0.0863708 0.180389; -0.0901422 0.178534; -0.0938737 0.1766; -0.0975638 0.174589; -0.101211 0.1725; -0.104813 0.170336; -0.108369 0.168096; -0.111877 0.165781; -0.115336 0.163394; -0.118744 0.160934; -0.122099 0.158404; -0.125401 0.155803; -0.128647 0.153134; -0.131836 0.150397; -0.134967 0.147593; -0.138039 0.144725; -0.141049 0.141792; -0.143998 0.138797; -0.146882 0.135741; -0.149702 0.132625; -0.152456 0.12945; -0.155142 0.126218; -0.15776 0.12293; -0.160308 0.119588; -0.162786 0.116193; -0.165191 0.112747; -0.167524 0.109251; -0.169783 0.105706; -0.171966 0.102116; -0.174074 0.0984796; -0.176105 0.0948002; -0.178058 0.0910788; -0.179932 0.0873173; -0.181727 0.0835172; -0.183442 0.0796802; -0.185076 0.0758081; -0.186628 0.0719024; -0.188098 0.067965; -0.189484 0.0639976; -0.190787 0.060002; -0.192006 0.0559798; -0.19314 0.0519329; -0.194188 0.0478631; -0.195151 0.0437722; -0.196028 0.0396619; -0.196818 0.0355341; -0.197521 0.0313907; -0.198137 0.0272333; -0.198666 0.023064; -0.199106 0.0188844; -0.199459 0.0146965; -0.199724 0.0105022; -0.199901 0.00630316; -0.199989 0.00210136; -0.199989 -0.00210136; -0.199901 -0.00630316; -0.199724 -0.0105022; -0.199459 -0.0146965; -0.199106 -0.0188844; -0.198666 -0.023064; -0.198137 -0.0272333; -0.197521 -0.0313907; -0.196818 -0.0355341; -0.196028 -0.0396619; -0.195151 -0.0437722; -0.194188 -0.0478631; -0.19314 -0.0519329; -0.192006 -0.0559798; -0.190787 -0.060002; -0.189484 -0.0639976; -0.188098 -0.067965; -0.186628 -0.0719024; -0.185076 -0.0758081; -0.183442 -0.0796802; -0.181727 -0.0835172; -0.179932 -0.0873173; -0.178058 -0.0910788; -0.176105 -0.0948002; -0.174074 -0.0984796; -0.171966 -0.102116; -0.169783 -0.105706; -0.167524 -0.109251; -0.165191 -0.112747; -0.162786 -0.116193; -0.160308 -0.119588; -0.15776 -0.12293; -0.155142 -0.126218; -0.152456 -0.12945; -0.149702 -0.132625; -0.146882 -0.135741; -0.143998 -0.138797; -0.141049 -0.141792; -0.138039 -0.144725; -0.134967 -0.147593; -0.131836 -0.150397; -0.128647 -0.153134; -0.125401 -0.155803; -0.122099 -0.158404; -0.118744 -0.160934; -0.115336 -0.163394; -0.111877 -0.165781; -0.108369 -0.168096; -0.104813 -0.170336; -0.101211 -0.1725; -0.0975638 -0.174589; -0.0938737 -0.1766; -0.0901422 -0.178534; -0.0863708 -0.180389; -0.0825613 -0.182164; -0.0787154 -0.183858; -0.0748347 -0.185472; -0.070921 -0.187003; -0.0669759 -0.188452; -0.0630013 -0.189818; -0.0589988 -0.1911; -0.0549703 -0.192297; -0.0509176 -0.19341; -0.0468423 -0.194437; -0.0427464 -0.195378; -0.0386315 -0.196234; -0.0344997 -0.197002; -0.0303526 -0.197683; -0.026192 -0.198278; -0.02202 -0.198784; -0.0178382 -0.199203; -0.0136485 -0.199534; -0.00945278 -0.199776; -0.0052529 -0.199931; -0.0010507 -0.199997; 0.00315197 -0.199975; 0.00735324 -0.199865; 0.0115513 -0.199666; 0.0157442 -0.199379; 0.0199302 -0.199004; 0.0241073 -0.198542; 0.0282739 -0.197991; 0.0324279 -0.197354; 0.0365676 -0.196629; 0.0406912 -0.195817; 0.0447968 -0.194919; 0.0488826 -0.193934; 0.0529469 -0.192864; 0.0569877 -0.191709; 0.0610034 -0.190469; 0.0649922 -0.189145; 0.0689523 -0.187738; 0.0728819 -0.186248; 0.0767793 -0.184675; 0.0806428 -0.183021; 0.0844707 -0.181286; 0.0882614 -0.179471; 0.092013 -0.177577; 0.095724 -0.175604; 0.0993928 -0.173554; 0.103018 -0.171427; 0.106597 -0.169225; 0.110129 -0.166948; 0.113613 -0.164597; 0.117046 -0.162173; 0.120428 -0.159678; 0.123757 -0.157112; 0.127031 -0.154477; 0.130249 -0.151774; 0.133409 -0.149003; 0.136511 -0.146167; 0.139552 -0.143266; 0.142531 -0.140303; 0.145448 -0.137277; 0.1483 -0.13419; 0.151087 -0.131044; 0.153808 -0.127841; 0.15646 -0.124581; 0.159043 -0.121265; 0.161556 -0.117897; 0.163998 -0.114476; 0.166367 -0.111005; 0.168663 -0.107485; 0.170884 -0.103917; 0.17303 -0.100303; 0.175099 -0.0966452; 0.177091 -0.0929446; 0.179005 -0.089203; 0.18084 -0.085422; 0.182595 -0.0816032; 0.184269 -0.0777484; 0.185862 -0.0738593; 0.187373 -0.0699376; 0.188801 -0.065985; 0.190146 -0.0620032; 0.191407 -0.0579941; 0.192583 -0.0539594; 0.193675 -0.0499008; 0.194681 -0.0458202; 0.1956 -0.0417194; 0.196434 -0.0376001; 0.19718 -0.0334642; 0.19784 -0.0293136; 0.198412 -0.02515; 0.198897 -0.0209754; 0.199294 -0.0167914; 0.199603 -0.0126; 0.199823 -0.00840312; 0.199956 -0.00420249; 0.2 -4.89859e-17]" == "300-frame, 2-channel SampleBuf{Float64, 2, SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}}\n0.00625 s at 48000 s⁻¹\n▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▃▃▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▃▃▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆\n▃▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▂▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▃"
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:351
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:219
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:230 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:221 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in anonymous at ./<missing>:580
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
1D buf prints prettily: Test Failed
  Expression: takebuf_string(iobuf) == expected
   Evaluated: "[0.2,0.199956,0.199823,0.199603,0.199294,0.198897,0.198412,0.19784,0.19718,0.196434,0.1956,0.194681,0.193675,0.192583,0.191407,0.190146,0.188801,0.187373,0.185862,0.184269,0.182595,0.18084,0.179005,0.177091,0.175099,0.17303,0.170884,0.168663,0.166367,0.163998,0.161556,0.159043,0.15646,0.153808,0.151087,0.1483,0.145448,0.142531,0.139552,0.136511,0.133409,0.130249,0.127031,0.123757,0.120428,0.117046,0.113613,0.110129,0.106597,0.103018,0.0993928,0.095724,0.092013,0.0882614,0.0844707,0.0806428,0.0767793,0.0728819,0.0689523,0.0649922,0.0610034,0.0569877,0.0529469,0.0488826,0.0447968,0.0406912,0.0365676,0.0324279,0.0282739,0.0241073,0.0199302,0.0157442,0.0115513,0.00735324,0.00315197,-0.0010507,-0.0052529,-0.00945278,-0.0136485,-0.0178382,-0.02202,-0.026192,-0.0303526,-0.0344997,-0.0386315,-0.0427464,-0.0468423,-0.0509176,-0.0549703,-0.0589988,-0.0630013,-0.0669759,-0.070921,-0.0748347,-0.0787154,-0.0825613,-0.0863708,-0.0901422,-0.0938737,-0.0975638,-0.101211,-0.104813,-0.108369,-0.111877,-0.115336,-0.118744,-0.122099,-0.125401,-0.128647,-0.131836,-0.134967,-0.138039,-0.141049,-0.143998,-0.146882,-0.149702,-0.152456,-0.155142,-0.15776,-0.160308,-0.162786,-0.165191,-0.167524,-0.169783,-0.171966,-0.174074,-0.176105,-0.178058,-0.179932,-0.181727,-0.183442,-0.185076,-0.186628,-0.188098,-0.189484,-0.190787,-0.192006,-0.19314,-0.194188,-0.195151,-0.196028,-0.196818,-0.197521,-0.198137,-0.198666,-0.199106,-0.199459,-0.199724,-0.199901,-0.199989,-0.199989,-0.199901,-0.199724,-0.199459,-0.199106,-0.198666,-0.198137,-0.197521,-0.196818,-0.196028,-0.195151,-0.194188,-0.19314,-0.192006,-0.190787,-0.189484,-0.188098,-0.186628,-0.185076,-0.183442,-0.181727,-0.179932,-0.178058,-0.176105,-0.174074,-0.171966,-0.169783,-0.167524,-0.165191,-0.162786,-0.160308,-0.15776,-0.155142,-0.152456,-0.149702,-0.146882,-0.143998,-0.141049,-0.138039,-0.134967,-0.131836,-0.128647,-0.125401,-0.122099,-0.118744,-0.115336,-0.111877,-0.108369,-0.104813,-0.101211,-0.0975638,-0.0938737,-0.0901422,-0.0863708,-0.0825613,-0.0787154,-0.0748347,-0.070921,-0.0669759,-0.0630013,-0.0589988,-0.0549703,-0.0509176,-0.0468423,-0.0427464,-0.0386315,-0.0344997,-0.0303526,-0.026192,-0.02202,-0.0178382,-0.0136485,-0.00945278,-0.0052529,-0.0010507,0.00315197,0.00735324,0.0115513,0.0157442,0.0199302,0.0241073,0.0282739,0.0324279,0.0365676,0.0406912,0.0447968,0.0488826,0.0529469,0.0569877,0.0610034,0.0649922,0.0689523,0.0728819,0.0767793,0.0806428,0.0844707,0.0882614,0.092013,0.095724,0.0993928,0.103018,0.106597,0.110129,0.113613,0.117046,0.120428,0.123757,0.127031,0.130249,0.133409,0.136511,0.139552,0.142531,0.145448,0.1483,0.151087,0.153808,0.15646,0.159043,0.161556,0.163998,0.166367,0.168663,0.170884,0.17303,0.175099,0.177091,0.179005,0.18084,0.182595,0.184269,0.185862,0.187373,0.188801,0.190146,0.191407,0.192583,0.193675,0.194681,0.1956,0.196434,0.19718,0.19784,0.198412,0.198897,0.199294,0.199603,0.199823,0.199956,0.2]" == "300-frame, 1-channel SampleBuf{Float64, 1, SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}}\n0.00625 s at 48000 s⁻¹\n▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▃▃▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▄▄▃▃▄▄▅▅▅▅▅▅▆▆▆▆▆▆▆▆▆▆"
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:351
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:219
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:240 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:232 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in anonymous at ./<missing>:580
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
WARNING: writemime is deprecated, use show instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in writemime(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::String, ::SampledSignals.SampleBuf{Float64,2,SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}}) at ./deprecated.jl:30
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:247 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:242 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in anonymous at ./<missing>:580
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl, in expression starting on line 1
zero-length buf prints prettily: Test Failed
  Expression: takebuf_string(iobuf) == expected
   Evaluated: "" == "0-frame, 2-channel SampleBuf{Float64, 2, SIUnits.SIQuantity{Int64,0,0,-1,0,0,0,0,0,0}}\n0.0 s at 48000 s⁻¹"
 in record(::Base.Test.DefaultTestSet, ::Base.Test.Fail) at ./test.jl:351
 in do_test(::Base.Test.Returned, ::Expr) at ./test.jl:219
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:248 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/SampleBuf.jl:242 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in anonymous at ./<missing>:580
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:14 [inlined]
 in macro expansion; at ./test.jl:583 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl:12 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
Test Summary:                                        | Pass  Fail  Error  Total
SampledSignals Tests                                 |  132     3      1    136
  DummySampleStream Tests                            |   10                  10
  SampleBuf Tests                                    |   75     3      1     79
    Supports audio interface                         |    3            1      4
    Supports size()                                  |    1                   1
    Can get type params from contained array         |    2                   2
    supports equality                                |    5                   5
    Can be indexed with 1D indices                   |    1                   1
    Can be indexed with 2D indices                   |    1                   1
    Can be indexed with 1D ranges                    |    4                   4
    can be indexed with 2D ranges                    |    8                   8
    can be sliced in 1D                              |    4                   4
    can be indexed with Intervals                    |    8                   8
    Can be indexed with bool arrays                  |    1                   1
    Channel pointer                                  |    4                   4
    Nice syntax for creating buffers                 |    4                   4
    Can be created without units                     |    2                   2
    sub references the original instead of copying   |    2                   2
    Invalid units throw an error                     |    1                   1
    SampleBufs can be indexed in seconds             |    8                   8
    Frequency-domain SampleBufs can be indexed in Hz |    4                   4
    Supports arithmetic                              |    2                   2
    FFT of SampleBuf gives FrequencySampleBuf        |   10                  10
    multichannel buf prints prettily                 |          1             1
    1D buf prints prettily                           |          1             1
    zero-length buf prints prettily                  |          1             1
  Interval Tests                                     |   23                  23
  SampleStream Tests                                 |   20                  20
  Signal Generator Tests                             |    4                   4
===========================[ ERROR: SampledSignals ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/SampledSignals/test/runtests.jl`, ProcessExited(255)) [255]

================================================================================
INFO: Removing BaseTestNext v0.2.1
INFO: Removing FixedPointNumbers v0.1.3
ERROR: SampledSignals had test errors
 in #test#49(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:693
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./null:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./null:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg.jl:245
 in test(::String, ::Vararg{String,N}) at ./pkg.jl:245
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
