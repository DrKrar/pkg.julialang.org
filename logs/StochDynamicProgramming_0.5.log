>>> 'Pkg.add("StochDynamicProgramming")' log
INFO: Cloning cache of StochDynamicProgramming from https://github.com/JuliaOpt/StochDynamicProgramming.jl.git
INFO: Installing AxisAlgorithms v0.1.5
INFO: Installing DataStructures v0.5.0
INFO: Installing DiffBase v0.0.2
INFO: Installing ForwardDiff v0.3.3
INFO: Installing Interpolations v0.3.6
INFO: Installing JuMP v0.15.0
INFO: Installing Lazy v0.11.4
INFO: Installing MacroTools v0.3.4
INFO: Installing MathProgBase v0.5.8
INFO: Installing NaNMath v0.2.2
INFO: Installing ProgressMeter v0.3.3
INFO: Installing Ratios v0.0.4
INFO: Installing ReverseDiffSparse v0.6.0
INFO: Installing StochDynamicProgramming v0.2.2
INFO: Installing WoodburyMatrices v0.2.1
INFO: Building Rmath
INFO: Package database updated

>>> 'Pkg.test("StochDynamicProgramming")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1007.40625 MB free)
Uptime: 29678.0 sec
Load Avg:  0.8876953125  0.9521484375  0.9921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1748344 s       4297 s     162958 s     701764 s         94 s
#2  3499 MHz     595397 s       2552 s      81898 s    2201286 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.0
 - StochDynamicProgramming       0.2.2
32 additional packages:
 - AxisAlgorithms                0.1.5
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.10.0
 - DataStructures                0.5.0
 - DiffBase                      0.0.2
 - Distributions                 0.11.1
 - ForwardDiff                   0.3.3
 - GenerativeModels              0.0.0-             master (unregistered)
 - Interpolations                0.3.6
 - Iterators                     0.2.0
 - JuMP                          0.15.0
 - LaTeXStrings                  0.2.0
 - Lazy                          0.11.4
 - MacroTools                    0.3.4
 - MathProgBase                  0.5.8
 - NaNMath                       0.2.2
 - PDMats                        0.5.2
 - POMDPBounds                   0.0.0-             master (unregistered)
 - POMDPModels                   0.0.0-             master (unregistered)
 - POMDPToolbox                  0.0.0-             master (unregistered)
 - POMDPs                        0.4.0
 - ProgressMeter                 0.3.3
 - Ratios                        0.0.4
 - ReverseDiffSparse             0.6.0
 - Rmath                         0.1.6
 - SHA                           0.3.0
 - StatsBase                     0.12.0
 - StatsFuns                     0.3.1
 - TikzPictures                  0.3.5
 - URIParser                     0.1.6
 - WoodburyMatrices              0.2.1
INFO: Computing test dependencies for StochDynamicProgramming...
INFO: Installing Cbc v0.3.0
INFO: Installing Clp v0.3.0
INFO: Installing FactCheck v0.4.3
INFO: Building Cbc
INFO: Testing StochDynamicProgramming
WARNING: The curly syntax (sum{},prod{},norm2{}) is deprecated in favor of the new generator syntax (sum(),prod(),norm()).
WARNING: Replace sum{sum{(proba[t])[laws[t].supportSize * (n - 1) + k] * c[t,laws[t].supportSize * (n - 1) + k],k = 1:laws[t].supportSize},t = 1:T,n = 1:div(N[t + 1],laws[t].supportSize)} with sum(sum{(proba[t])[laws[t].supportSize * (n - 1) + k] * c[t,laws[t].supportSize * (n - 1) + k],k = 1:laws[t].supportSize} for t = 1:T for n = 1:div(N[t + 1],laws[t].supportSize)).
WARNING: Replace sum{(proba[t])[laws[t].supportSize * (n - 1) + k] * c[t,laws[t].supportSize * (n - 1) + k],k = 1:laws[t].supportSize} with sum((proba[t])[laws[t].supportSize * (n - 1) + k] * c[t,laws[t].supportSize * (n - 1) + k] for k = 1:laws[t].supportSize).
Probability functions
8 facts verified.
Utils functions
INFO: extract_vector_from_3Dmatrix is now deprecated. Use collect instead.
3 facts verified.
SDDP algorithm: 1D case
  > Linear cost
Initialize cuts
Pass nÂ° 2	Lower-bound: -1.3440e+01	Time: 0.03s
Compute final upper-bound with 1000 scenarios...

############################################################
SDDP CONVERGENCE
- Exact lower bound:          -1.3440e+01 [Gap < 0.03%]
- Estimation of upper-bound:  -1.3510e+01
- Upper-bound's s.t.d:        1.0673e+00
- Confidence interval (95%):  [-1.3576e+01 , -1.3444e+01]
############################################################
  > Value functions calculation
  > Hotstart
  > Cuts pruning
  > Quadratic regularization
  > Final cost
  > Piecewise linear cost
  > SMIP
  > Stopping criterion
  > Dump
  > Compare parameters
32 facts verified.
SDDP algorithm: 2D case
  > Linear cost
  > Dump
10 facts verified.
Indexation for SDP
6 facts verified.
SDP algorithm
  > Compare StochDynProgModel constructors
  > Solve and simulate using SDP
22 facts verified.
SDDP algorithm: 1D case
  > Extensive solving
  > Unsolvable extensive formulation
WARNING: Not solved to optimality, status: Infeasible
2 facts verified.
INFO: StochDynamicProgramming tests passed
INFO: Removing Cbc v0.3.0
INFO: Removing Clp v0.3.0
INFO: Removing FactCheck v0.4.3

>>> End of log
