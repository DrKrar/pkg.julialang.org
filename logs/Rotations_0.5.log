>>> 'Pkg.add("Rotations")' log
INFO: Installing Rotations v0.3.4
INFO: Installing StaticArrays v0.3.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Rotations
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Rotations")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1285.14453125 MB free)
Uptime: 27153.0 sec
Load Avg:  1.05419921875  1.09130859375  1.11572265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz    1538911 s       6245 s     152456 s     691402 s        119 s
#2  3496 MHz     538214 s        240 s      76404 s    2005081 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - Rotations                     0.3.4
2 additional packages:
 - Compat                        0.19.0
 - StaticArrays                  0.3.0
INFO: Computing test dependencies for Rotations...
INFO: Installing Calculus v0.2.0
INFO: Installing DiffBase v0.0.4
INFO: Installing ForwardDiff v0.3.4
INFO: Installing NaNMath v0.2.2
INFO: Testing Rotations
Skipping Base.<|
Skipping Base.>:
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping Base.cluster_manager
Skipping StaticArrays.MutableFieldVector
Skipping Base.<|
Skipping Base.>:
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping Base.cluster_manager
Test Summary: | Pass  Total
  Util        |  200    200
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:10
   in getindex(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/indexing.jl:174
   in isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:125
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:40 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:43 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:21
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:44 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:33 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Rotate Points: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:59 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:53 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Compose rotations: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:80 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:74 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:31
   in #isapprox#10(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Array{Float64,2}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Array{Float64,2}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:112 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:105 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float32,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:31
   in #isapprox#10(::Float32, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:112 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:105 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float32,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in length(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:4
   in map(...) at /home/vagrant/.julia/v0.5/StaticArrays/src/mapreduce.jl:31
   in #isapprox#10(::Float32, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:590
   in isapprox(::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:590
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:112 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:105 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
show: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
   in StaticArrays.Size{S}(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.5/StaticArrays/src/traits.jl:42
   in isassigned at /home/vagrant/.julia/v0.5/StaticArrays/src/abstractarray.jl:30 [inlined]
   in alignment(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::Rotations.RotMatrix{2,Float64,4}, ::Array{Int64,1}, ::Array{Int64,1}, ::Int64, ::Int64, ::Int64) at ./show.jl:1277
   in print_matrix(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::Rotations.RotMatrix{2,Float64,4}, ::String, ::String, ::String, ::String, ::String, ::String, ::Int64, ::Int64) at ./show.jl:1407
   in print_matrix(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::Rotations.RotMatrix{2,Float64,4}, ::String, ::String, ::String) at ./show.jl:1379
   in #showarray#5(::Bool, ::Function, ::Base.AbstractIOBuffer{Array{UInt8,1}}, ::Rotations.RotMatrix{2,Float64,4}, ::Bool) at /home/vagrant/.julia/v0.5/Rotations/src/core_types.jl:179
   in show(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::MIME{Symbol("text/plain")}, ::Rotations.RotMatrix{2,Float64,4}) at ./replutil.jl:153
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:119 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.5/Rotations/test/2d.jl:116 [inlined]
   in macro expansion; at ./test.jl:672 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
   in process_options(::Base.JLOptions) at ./client.jl:262
   in _start() at ./client.jl:318
Test Summary:              | Pass  Error  Total
  2d Rotations             |  216    306    522
  Core                     |    2             2
  Identity rotation checks |    4             4
  Testing inverse()        |  200    300    500
  Rotate Points            |           1      1
  Compose rotations        |           1      1
  Convert rotations        |    1             1
  Types and products       |    9      3     12
  show                     |           1      1
ERROR: LoadError: LoadError: Some tests did not pass: 216 passed, 0 failed, 306 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:495
 in macro expansion; at ./test.jl:679 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Rotations/test/2d.jl, in expression starting on line 3
while loading /home/vagrant/.julia/v0.5/Rotations/test/runtests.jl, in expression starting on line 13
==============================[ ERROR: Rotations ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Rotations/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.0
INFO: Removing DiffBase v0.0.4
INFO: Removing ForwardDiff v0.3.4
INFO: Removing NaNMath v0.2.2
ERROR: Rotations had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
