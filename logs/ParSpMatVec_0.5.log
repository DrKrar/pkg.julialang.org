>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:497
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4660
Commit 466da65* (2016-06-10 20:39 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2028	 ParSpMatVec=0.0177	 speedup=11.4442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2028	 ParSpMatVec=0.0096	 speedup=21.2007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2028	 ParSpMatVec=0.0107	 speedup=18.9254
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2028	 ParSpMatVec=0.0127	 speedup=15.9446
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2028	 ParSpMatVec=0.0082	 speedup=24.6947
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2761	 ParSpMatVec=0.0657	 speedup=4.2041
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2761	 ParSpMatVec=0.0142	 speedup=19.4353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2761	 ParSpMatVec=0.0142	 speedup=19.4588
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2761	 ParSpMatVec=0.0137	 speedup=20.2147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2761	 ParSpMatVec=0.0127	 speedup=21.6574

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1345	 ParSpMatVec=0.0310	 speedup=4.3324
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1345	 ParSpMatVec=0.0137	 speedup=9.8046
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1345	 ParSpMatVec=0.0169	 speedup=7.9353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1345	 ParSpMatVec=0.0132	 speedup=10.2228
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1345	 ParSpMatVec=0.0119	 speedup=11.3387

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1305	 ParSpMatVec=0.0546	 speedup=2.3893
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1305	 ParSpMatVec=0.0024	 speedup=54.2210
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1305	 ParSpMatVec=0.0021	 speedup=61.0276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1305	 ParSpMatVec=0.0019	 speedup=70.4917
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1305	 ParSpMatVec=0.0018	 speedup=72.3424

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0063	 ParSpMatVec=0.0381	 speedup=0.1645
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0063	 ParSpMatVec=0.0032	 speedup=1.9624
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0063	 ParSpMatVec=0.0021	 speedup=3.0000
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0063	 ParSpMatVec=0.0024	 speedup=2.6624
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0063	 ParSpMatVec=0.0031	 speedup=2.0224

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1445	 ParSpMatVec=0.0669	 speedup=2.1598
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1445	 ParSpMatVec=0.0042	 speedup=34.2364
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1445	 ParSpMatVec=0.0032	 speedup=44.9091
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1445	 ParSpMatVec=0.0027	 speedup=54.2180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1445	 ParSpMatVec=0.0030	 speedup=48.9165

INFO: ParSpMatVec tests passed

>>> End of log
