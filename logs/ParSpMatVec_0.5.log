>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4452
Commit c95b61b (2016-06-02 20:46 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1656	 ParSpMatVec=0.0207	 speedup=7.9873
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1656	 ParSpMatVec=0.0090	 speedup=18.4436
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1656	 ParSpMatVec=0.0122	 speedup=13.5401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1656	 ParSpMatVec=0.0079	 speedup=20.8361
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1656	 ParSpMatVec=0.0090	 speedup=18.3540
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1408	 ParSpMatVec=0.0473	 speedup=2.9788
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1408	 ParSpMatVec=0.0140	 speedup=10.0557
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1408	 ParSpMatVec=0.0155	 speedup=9.0827
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1408	 ParSpMatVec=0.0137	 speedup=10.2465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1408	 ParSpMatVec=0.0134	 speedup=10.5308

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0568	 ParSpMatVec=0.0218	 speedup=2.6051
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0568	 ParSpMatVec=0.0132	 speedup=4.3139
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0568	 ParSpMatVec=0.0118	 speedup=4.8032
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0568	 ParSpMatVec=0.0128	 speedup=4.4236
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0568	 ParSpMatVec=0.0134	 speedup=4.2546

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1166	 ParSpMatVec=0.0497	 speedup=2.3476
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1166	 ParSpMatVec=0.0027	 speedup=43.0189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1166	 ParSpMatVec=0.0021	 speedup=55.9063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1166	 ParSpMatVec=0.0015	 speedup=77.5520
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1166	 ParSpMatVec=0.0016	 speedup=74.2920

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0588	 speedup=0.1457
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0039	 speedup=2.2016
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0025	 speedup=3.4016
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0026	 speedup=3.3095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.5295

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0727	 ParSpMatVec=0.0610	 speedup=1.1914
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0727	 ParSpMatVec=0.0033	 speedup=22.2041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0727	 ParSpMatVec=0.0025	 speedup=29.3149
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0727	 ParSpMatVec=0.0020	 speedup=36.6146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0727	 ParSpMatVec=0.0029	 speedup=25.2151

INFO: ParSpMatVec tests passed

>>> End of log
