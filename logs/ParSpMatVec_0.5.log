>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:1213
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4306
Commit 0a3cf4a (2016-05-24 22:35 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2032	 ParSpMatVec=0.0229	 speedup=8.8631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2032	 ParSpMatVec=0.0094	 speedup=21.6395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2032	 ParSpMatVec=0.0118	 speedup=17.1832
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2032	 ParSpMatVec=0.0087	 speedup=23.2957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2032	 ParSpMatVec=0.0090	 speedup=22.6560
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1160	 ParSpMatVec=0.0401	 speedup=2.8908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1160	 ParSpMatVec=0.0141	 speedup=8.2378
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1160	 ParSpMatVec=0.0090	 speedup=12.9415
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1160	 ParSpMatVec=0.0078	 speedup=14.8189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1160	 ParSpMatVec=0.0106	 speedup=10.9608

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0581	 ParSpMatVec=0.0328	 speedup=1.7682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0581	 ParSpMatVec=0.0131	 speedup=4.4396
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0581	 ParSpMatVec=0.0095	 speedup=6.1213
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0581	 ParSpMatVec=0.0089	 speedup=6.5560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0581	 ParSpMatVec=0.0088	 speedup=6.5845

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1311	 ParSpMatVec=0.0539	 speedup=2.4308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1311	 ParSpMatVec=0.0023	 speedup=57.7856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1311	 ParSpMatVec=0.0013	 speedup=98.7856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1311	 ParSpMatVec=0.0027	 speedup=48.2683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1311	 ParSpMatVec=0.0019	 speedup=67.4412

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0609	 speedup=0.1222
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0056	 speedup=1.3391
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0020	 speedup=3.7874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0025	 speedup=3.0139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0023	 speedup=3.1957

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1286	 ParSpMatVec=0.0406	 speedup=3.1714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1286	 ParSpMatVec=0.0031	 speedup=40.8798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1286	 ParSpMatVec=0.0028	 speedup=46.6427
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1286	 ParSpMatVec=0.0030	 speedup=42.8324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1286	 ParSpMatVec=0.0035	 speedup=37.2342

INFO: ParSpMatVec tests passed

>>> End of log
