>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5309
Commit 0a2a9db* (2016-07-11 23:22 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2755	 ParSpMatVec=0.0179	 speedup=15.3803
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2755	 ParSpMatVec=0.0082	 speedup=33.7228
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2755	 ParSpMatVec=0.0156	 speedup=17.6683
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2755	 ParSpMatVec=0.0088	 speedup=31.1473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2755	 ParSpMatVec=0.0119	 speedup=23.1345
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1840	 ParSpMatVec=0.0551	 speedup=3.3365
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1840	 ParSpMatVec=0.0102	 speedup=17.9645
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1840	 ParSpMatVec=0.0171	 speedup=10.7792
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1840	 ParSpMatVec=0.0115	 speedup=15.9695
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1840	 ParSpMatVec=0.0157	 speedup=11.7526

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0215	 speedup=1.9070
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0133	 speedup=3.0861
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0142	 speedup=2.8747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0172	 speedup=2.3774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0126	 speedup=3.2585

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0601	 ParSpMatVec=0.0404	 speedup=1.4873
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0601	 ParSpMatVec=0.0026	 speedup=22.8727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0601	 ParSpMatVec=0.0024	 speedup=25.4310
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0601	 ParSpMatVec=0.0015	 speedup=39.9519
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0601	 ParSpMatVec=0.0082	 speedup=7.3527

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0093	 ParSpMatVec=0.0699	 speedup=0.1327
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0093	 ParSpMatVec=0.0041	 speedup=2.2710
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0093	 ParSpMatVec=0.0022	 speedup=4.1366
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0093	 ParSpMatVec=0.0042	 speedup=2.2208
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0093	 ParSpMatVec=0.0024	 speedup=3.8282

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0917	 ParSpMatVec=0.0633	 speedup=1.4481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0917	 ParSpMatVec=0.0024	 speedup=38.2987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0917	 ParSpMatVec=0.0020	 speedup=46.5996
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0917	 ParSpMatVec=0.0028	 speedup=32.3570
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0917	 ParSpMatVec=0.0022	 speedup=42.3401

INFO: ParSpMatVec tests passed

>>> End of log
