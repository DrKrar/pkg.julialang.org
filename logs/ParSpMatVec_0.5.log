>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4951
Commit 5d524ec* (2016-06-27 12:38 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2641	 ParSpMatVec=0.0333	 speedup=7.9357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2641	 ParSpMatVec=0.0095	 speedup=27.8488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2641	 ParSpMatVec=0.0122	 speedup=21.7219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2641	 ParSpMatVec=0.0095	 speedup=27.8000
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2641	 ParSpMatVec=0.0102	 speedup=25.8368
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2835	 ParSpMatVec=0.0568	 speedup=4.9924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2835	 ParSpMatVec=0.0131	 speedup=21.7159
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2835	 ParSpMatVec=0.0147	 speedup=19.3447
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2835	 ParSpMatVec=0.0130	 speedup=21.7382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2835	 ParSpMatVec=0.0152	 speedup=18.6635

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1408	 ParSpMatVec=0.0305	 speedup=4.6101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1408	 ParSpMatVec=0.0144	 speedup=9.8053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1408	 ParSpMatVec=0.0196	 speedup=7.1739
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1408	 ParSpMatVec=0.0135	 speedup=10.4478
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1408	 ParSpMatVec=0.0123	 speedup=11.4722

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1212	 ParSpMatVec=0.0572	 speedup=2.1192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1212	 ParSpMatVec=0.0030	 speedup=40.0032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1212	 ParSpMatVec=0.0028	 speedup=42.8764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1212	 ParSpMatVec=0.0016	 speedup=76.5622
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1212	 ParSpMatVec=0.0019	 speedup=63.1517

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0799	 speedup=0.1020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0031	 speedup=2.6015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.8108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0070	 speedup=1.1668
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0105	 speedup=0.7775

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1294	 ParSpMatVec=0.0697	 speedup=1.8570
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1294	 ParSpMatVec=0.0044	 speedup=29.6834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1294	 ParSpMatVec=0.0020	 speedup=65.1312
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1294	 ParSpMatVec=0.0028	 speedup=45.8934
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1294	 ParSpMatVec=0.0026	 speedup=49.4761

INFO: ParSpMatVec tests passed

>>> End of log
