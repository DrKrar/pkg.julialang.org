>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:497
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4707
Commit 2119ea6* (2016-06-13 18:26 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2650	 ParSpMatVec=0.0364	 speedup=7.2765
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2650	 ParSpMatVec=0.0103	 speedup=25.8533
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2650	 ParSpMatVec=0.0226	 speedup=11.7005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2650	 ParSpMatVec=0.0108	 speedup=24.4480
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2650	 ParSpMatVec=0.0142	 speedup=18.6196
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2709	 ParSpMatVec=0.0654	 speedup=4.1437
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2709	 ParSpMatVec=0.0126	 speedup=21.4488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2709	 ParSpMatVec=0.0313	 speedup=8.6673
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2709	 ParSpMatVec=0.0134	 speedup=20.2559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2709	 ParSpMatVec=0.0132	 speedup=20.4465

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1352	 ParSpMatVec=0.0323	 speedup=4.1854
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1352	 ParSpMatVec=0.0137	 speedup=9.8882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1352	 ParSpMatVec=0.0140	 speedup=9.6823
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1352	 ParSpMatVec=0.0147	 speedup=9.2082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1352	 ParSpMatVec=0.0131	 speedup=10.3538

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1341	 ParSpMatVec=0.0616	 speedup=2.1764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1341	 ParSpMatVec=0.0028	 speedup=48.6974
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1341	 ParSpMatVec=0.0037	 speedup=36.6304
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1341	 ParSpMatVec=0.0024	 speedup=56.2184
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1341	 ParSpMatVec=0.0069	 speedup=19.5655

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0107	 ParSpMatVec=0.0680	 speedup=0.1568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0107	 ParSpMatVec=0.0035	 speedup=3.0325
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0107	 ParSpMatVec=0.0024	 speedup=4.3962
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0107	 ParSpMatVec=0.0039	 speedup=2.7304
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0107	 ParSpMatVec=0.0030	 speedup=3.5809

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1295	 ParSpMatVec=0.0710	 speedup=1.8239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1295	 ParSpMatVec=0.0037	 speedup=35.4318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1295	 ParSpMatVec=0.0020	 speedup=63.6839
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1295	 ParSpMatVec=0.0169	 speedup=7.6399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1295	 ParSpMatVec=0.0022	 speedup=59.1375

INFO: ParSpMatVec tests passed

>>> End of log
