>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5122
Commit 2e1bcc6* (2016-07-03 00:01 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2870	 ParSpMatVec=0.0282	 speedup=10.1879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2870	 ParSpMatVec=0.0119	 speedup=24.1016
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2870	 ParSpMatVec=0.0123	 speedup=23.3827
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2870	 ParSpMatVec=0.0110	 speedup=26.1037
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2870	 ParSpMatVec=0.0116	 speedup=24.8060
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2154	 ParSpMatVec=0.0341	 speedup=6.3147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2154	 ParSpMatVec=0.0112	 speedup=19.2187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2154	 ParSpMatVec=0.0149	 speedup=14.4427
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2154	 ParSpMatVec=0.0137	 speedup=15.7386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2154	 ParSpMatVec=0.0147	 speedup=14.6400

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0345	 speedup=1.2319
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0129	 speedup=3.3020
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0154	 speedup=2.7521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0168	 speedup=2.5278
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0098	 speedup=4.3465

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0817	 ParSpMatVec=0.0633	 speedup=1.2909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0817	 ParSpMatVec=0.0024	 speedup=33.9892
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0817	 ParSpMatVec=0.0023	 speedup=35.8346
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0817	 ParSpMatVec=0.0018	 speedup=46.1454
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0817	 ParSpMatVec=0.0020	 speedup=41.2468

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0631	 speedup=0.1378
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0035	 speedup=2.4713
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0021	 speedup=4.1850
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0027	 speedup=3.2489
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0025	 speedup=3.5229

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1594	 ParSpMatVec=0.0684	 speedup=2.3302
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1594	 ParSpMatVec=0.0043	 speedup=37.4703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1594	 ParSpMatVec=0.0020	 speedup=81.6023
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1594	 ParSpMatVec=0.0025	 speedup=63.2610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1594	 ParSpMatVec=0.0024	 speedup=66.4966

INFO: ParSpMatVec tests passed

>>> End of log
