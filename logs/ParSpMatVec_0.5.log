>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5456
Commit a1fbb84 (2016-07-16 21:33 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2979	 ParSpMatVec=0.0267	 speedup=11.1535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2979	 ParSpMatVec=0.0080	 speedup=37.3970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2979	 ParSpMatVec=0.0120	 speedup=24.9057
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2979	 ParSpMatVec=0.0090	 speedup=33.0547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2979	 ParSpMatVec=0.0086	 speedup=34.4866
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2000	 ParSpMatVec=0.0427	 speedup=4.6841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2000	 ParSpMatVec=0.0132	 speedup=15.1803
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2000	 ParSpMatVec=0.0157	 speedup=12.7316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2000	 ParSpMatVec=0.0132	 speedup=15.1849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2000	 ParSpMatVec=0.0133	 speedup=15.0631

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0645	 ParSpMatVec=0.0318	 speedup=2.0302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0645	 ParSpMatVec=0.0138	 speedup=4.6766
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0645	 ParSpMatVec=0.0169	 speedup=3.8266
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0645	 ParSpMatVec=0.0123	 speedup=5.2327
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0645	 ParSpMatVec=0.0201	 speedup=3.2144

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0569	 ParSpMatVec=0.0568	 speedup=1.0018
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0569	 ParSpMatVec=0.0022	 speedup=25.5976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0569	 ParSpMatVec=0.0017	 speedup=33.0411
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0569	 ParSpMatVec=0.0013	 speedup=43.4946
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0569	 ParSpMatVec=0.0017	 speedup=34.2931

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0711	 speedup=0.1389
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0048	 speedup=2.0773
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0037	 speedup=2.6583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0033	 speedup=3.0005
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0027	 speedup=3.5960

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0859	 ParSpMatVec=0.0679	 speedup=1.2656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0859	 ParSpMatVec=0.0050	 speedup=17.1157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0859	 ParSpMatVec=0.0023	 speedup=37.0747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0859	 ParSpMatVec=0.0027	 speedup=32.2444
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0859	 ParSpMatVec=0.0029	 speedup=29.9723

INFO: ParSpMatVec tests passed

>>> End of log
