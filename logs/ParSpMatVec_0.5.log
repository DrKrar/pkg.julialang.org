>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4402
Commit f31723a (2016-05-30 23:02 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2576	 ParSpMatVec=0.0687	 speedup=3.7492
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2576	 ParSpMatVec=0.0094	 speedup=27.3728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2576	 ParSpMatVec=0.0111	 speedup=23.1396
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2576	 ParSpMatVec=0.0088	 speedup=29.3998
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2576	 ParSpMatVec=0.0106	 speedup=24.3635
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2089	 ParSpMatVec=0.0608	 speedup=3.4358
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2089	 ParSpMatVec=0.0157	 speedup=13.3170
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2089	 ParSpMatVec=0.0153	 speedup=13.6863
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2089	 ParSpMatVec=0.0140	 speedup=14.9714
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2089	 ParSpMatVec=0.0112	 speedup=18.5990

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0631	 ParSpMatVec=0.0320	 speedup=1.9700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0631	 ParSpMatVec=0.0168	 speedup=3.7469
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0631	 ParSpMatVec=0.0174	 speedup=3.6277
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0631	 ParSpMatVec=0.0147	 speedup=4.2882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0631	 ParSpMatVec=0.0150	 speedup=4.2172

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1454	 ParSpMatVec=0.0613	 speedup=2.3709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1454	 ParSpMatVec=0.0034	 speedup=42.9661
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1454	 ParSpMatVec=0.0187	 speedup=7.7696
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1454	 ParSpMatVec=0.0127	 speedup=11.4628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1454	 ParSpMatVec=0.0077	 speedup=18.9809

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0368	 speedup=0.2215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0035	 speedup=2.3437
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0027	 speedup=3.0102
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.4444
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0034	 speedup=2.3775

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0989	 ParSpMatVec=0.0697	 speedup=1.4190
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0989	 ParSpMatVec=0.0040	 speedup=24.8701
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0989	 ParSpMatVec=0.0041	 speedup=24.1548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0989	 ParSpMatVec=0.0022	 speedup=45.0636
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0989	 ParSpMatVec=0.0021	 speedup=46.4293

INFO: ParSpMatVec tests passed

>>> End of log
