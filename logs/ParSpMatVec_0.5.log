>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:231
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4923
Commit 26fec34* (2016-06-23 21:09 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1886	 ParSpMatVec=0.0251	 speedup=7.5183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1886	 ParSpMatVec=0.0105	 speedup=17.9605
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1886	 ParSpMatVec=0.0117	 speedup=16.1714
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1886	 ParSpMatVec=0.0111	 speedup=17.0603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1886	 ParSpMatVec=0.0101	 speedup=18.7478
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1824	 ParSpMatVec=0.0625	 speedup=2.9202
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1824	 ParSpMatVec=0.0128	 speedup=14.2309
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1824	 ParSpMatVec=0.0152	 speedup=12.0007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1824	 ParSpMatVec=0.0131	 speedup=13.8940
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1824	 ParSpMatVec=0.0138	 speedup=13.1750

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1237	 ParSpMatVec=0.0336	 speedup=3.6814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1237	 ParSpMatVec=0.0120	 speedup=10.3178
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1237	 ParSpMatVec=0.0080	 speedup=15.4985
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1237	 ParSpMatVec=0.0134	 speedup=9.2281
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1237	 ParSpMatVec=0.0098	 speedup=12.5578

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1349	 ParSpMatVec=0.0465	 speedup=2.9036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1349	 ParSpMatVec=0.0021	 speedup=65.7438
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1349	 ParSpMatVec=0.0010	 speedup=129.8187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1349	 ParSpMatVec=0.0239	 speedup=5.6480
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1349	 ParSpMatVec=0.0019	 speedup=71.4794

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0104	 ParSpMatVec=0.0676	 speedup=0.1534
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0104	 ParSpMatVec=0.0042	 speedup=2.4494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0104	 ParSpMatVec=0.0020	 speedup=5.2887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0104	 ParSpMatVec=0.0011	 speedup=9.2128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0104	 ParSpMatVec=0.0025	 speedup=4.2315

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0878	 ParSpMatVec=0.0718	 speedup=1.2227
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0878	 ParSpMatVec=0.0029	 speedup=30.6512
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0878	 ParSpMatVec=0.0021	 speedup=41.6867
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0878	 ParSpMatVec=0.0060	 speedup=14.6513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0878	 ParSpMatVec=0.0019	 speedup=46.6537

INFO: ParSpMatVec tests passed

>>> End of log
