>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4506
Commit cd2a278 (2016-06-04 02:39 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1493	 ParSpMatVec=0.0255	 speedup=5.8453
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1493	 ParSpMatVec=0.0102	 speedup=14.6279
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1493	 ParSpMatVec=0.0116	 speedup=12.8828
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1493	 ParSpMatVec=0.0086	 speedup=17.3502
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1493	 ParSpMatVec=0.0110	 speedup=13.5965
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1748	 ParSpMatVec=0.0529	 speedup=3.3073
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1748	 ParSpMatVec=0.0107	 speedup=16.3455
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1748	 ParSpMatVec=0.0141	 speedup=12.3800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1748	 ParSpMatVec=0.0133	 speedup=13.1390
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1748	 ParSpMatVec=0.0126	 speedup=13.8512

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1250	 ParSpMatVec=0.0315	 speedup=3.9667
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1250	 ParSpMatVec=0.0133	 speedup=9.4126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1250	 ParSpMatVec=0.0148	 speedup=8.4400
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1250	 ParSpMatVec=0.0124	 speedup=10.0788
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1250	 ParSpMatVec=0.0127	 speedup=9.8339

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1083	 ParSpMatVec=0.0535	 speedup=2.0253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1083	 ParSpMatVec=0.0024	 speedup=45.1778
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1083	 ParSpMatVec=0.0026	 speedup=42.2766
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1083	 ParSpMatVec=0.0015	 speedup=71.1825
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1083	 ParSpMatVec=0.0020	 speedup=54.7068

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0061	 ParSpMatVec=0.0512	 speedup=0.1192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0061	 ParSpMatVec=0.0035	 speedup=1.7487
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0061	 ParSpMatVec=0.0020	 speedup=3.0049
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0061	 ParSpMatVec=0.0021	 speedup=2.8639
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0061	 ParSpMatVec=0.0025	 speedup=2.4529

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0935	 ParSpMatVec=0.0560	 speedup=1.6700
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0935	 ParSpMatVec=0.0038	 speedup=24.6997
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0935	 ParSpMatVec=0.0017	 speedup=54.4432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0935	 ParSpMatVec=0.0026	 speedup=36.0432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0935	 ParSpMatVec=0.0033	 speedup=27.9359

INFO: ParSpMatVec tests passed

>>> End of log
