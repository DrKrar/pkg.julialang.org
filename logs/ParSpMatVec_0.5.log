>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:1226
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4361
Commit bc56e32 (2016-05-27 12:01 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2605	 ParSpMatVec=0.0282	 speedup=9.2518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2605	 ParSpMatVec=0.0101	 speedup=25.7853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2605	 ParSpMatVec=0.0125	 speedup=20.8129
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2605	 ParSpMatVec=0.0090	 speedup=28.8607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2605	 ParSpMatVec=0.0090	 speedup=28.9130
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1686	 ParSpMatVec=0.0557	 speedup=3.0262
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1686	 ParSpMatVec=0.0108	 speedup=15.5585
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1686	 ParSpMatVec=0.0086	 speedup=19.4955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1686	 ParSpMatVec=0.0093	 speedup=18.0486
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1686	 ParSpMatVec=0.0107	 speedup=15.7532

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0574	 ParSpMatVec=0.0319	 speedup=1.7988
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0574	 ParSpMatVec=0.0132	 speedup=4.3531
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0574	 ParSpMatVec=0.0075	 speedup=7.6471
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0574	 ParSpMatVec=0.0131	 speedup=4.3665
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0574	 ParSpMatVec=0.0110	 speedup=5.2324

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1375	 ParSpMatVec=0.0561	 speedup=2.4519
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1375	 ParSpMatVec=0.0026	 speedup=52.0524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1375	 ParSpMatVec=0.0007	 speedup=183.4430
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1375	 ParSpMatVec=0.0015	 speedup=89.3708
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1375	 ParSpMatVec=0.0017	 speedup=82.6076

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0056	 ParSpMatVec=0.0394	 speedup=0.1434
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0056	 ParSpMatVec=0.0022	 speedup=2.5917
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0056	 ParSpMatVec=0.0017	 speedup=3.3817
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0056	 ParSpMatVec=0.0030	 speedup=1.8732
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0056	 ParSpMatVec=0.0023	 speedup=2.4465

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1127	 ParSpMatVec=0.0743	 speedup=1.5167
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1127	 ParSpMatVec=0.0031	 speedup=36.2803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1127	 ParSpMatVec=0.0017	 speedup=66.7189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1127	 ParSpMatVec=0.0039	 speedup=29.2612
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1127	 ParSpMatVec=0.0028	 speedup=40.0784

INFO: ParSpMatVec tests passed

>>> End of log
