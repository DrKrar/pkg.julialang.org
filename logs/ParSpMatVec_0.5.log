>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:231
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4867
Commit 01e3c8a* (2016-06-19 11:17 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2038	 ParSpMatVec=0.0270	 speedup=7.5526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2038	 ParSpMatVec=0.0099	 speedup=20.5556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2038	 ParSpMatVec=0.0125	 speedup=16.2483
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2038	 ParSpMatVec=0.0072	 speedup=28.1978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2038	 ParSpMatVec=0.0092	 speedup=22.2255
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1871	 ParSpMatVec=0.0500	 speedup=3.7430
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1871	 ParSpMatVec=0.0132	 speedup=14.1978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1871	 ParSpMatVec=0.0101	 speedup=18.4931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1871	 ParSpMatVec=0.0108	 speedup=17.2670
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1871	 ParSpMatVec=0.0137	 speedup=13.6299

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0905	 ParSpMatVec=0.0352	 speedup=2.5752
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0905	 ParSpMatVec=0.0137	 speedup=6.5937
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0905	 ParSpMatVec=0.0093	 speedup=9.7549
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0905	 ParSpMatVec=0.0128	 speedup=7.0581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0905	 ParSpMatVec=0.0105	 speedup=8.5991

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1331	 ParSpMatVec=0.0614	 speedup=2.1682
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1331	 ParSpMatVec=0.0027	 speedup=50.0401
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1331	 ParSpMatVec=0.0017	 speedup=80.4505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1331	 ParSpMatVec=0.0017	 speedup=78.1166
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1331	 ParSpMatVec=0.0015	 speedup=88.5585

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0684	 speedup=0.1316
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0034	 speedup=2.6594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0028	 speedup=3.2512
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0020	 speedup=4.4768
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0026	 speedup=3.5089

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1344	 ParSpMatVec=0.0739	 speedup=1.8181
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1344	 ParSpMatVec=0.0031	 speedup=42.8563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1344	 ParSpMatVec=0.0022	 speedup=60.3019
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1344	 ParSpMatVec=0.0023	 speedup=57.8736
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1344	 ParSpMatVec=0.0026	 speedup=51.8289

INFO: ParSpMatVec tests passed

>>> End of log
