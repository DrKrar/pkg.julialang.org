>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:497
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4679
Commit 85d098c* (2016-06-11 19:03 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2567	 ParSpMatVec=0.0264	 speedup=9.7398
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2567	 ParSpMatVec=0.0086	 speedup=29.8429
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2567	 ParSpMatVec=0.0122	 speedup=20.9833
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2567	 ParSpMatVec=0.0089	 speedup=28.9875
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2567	 ParSpMatVec=0.0095	 speedup=27.1288
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1716	 ParSpMatVec=0.0634	 speedup=2.7053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1716	 ParSpMatVec=0.0129	 speedup=13.2529
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1716	 ParSpMatVec=0.0135	 speedup=12.6850
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1716	 ParSpMatVec=0.0106	 speedup=16.1343
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1716	 ParSpMatVec=0.0127	 speedup=13.4963

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1242	 ParSpMatVec=0.0203	 speedup=6.1052
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1242	 ParSpMatVec=0.0114	 speedup=10.9374
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1242	 ParSpMatVec=0.0116	 speedup=10.7123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1242	 ParSpMatVec=0.0113	 speedup=11.0329
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1242	 ParSpMatVec=0.0108	 speedup=11.4901

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1215	 ParSpMatVec=0.0563	 speedup=2.1574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1215	 ParSpMatVec=0.0026	 speedup=45.9832
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1215	 ParSpMatVec=0.0026	 speedup=47.2774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1215	 ParSpMatVec=0.0018	 speedup=68.2099
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1215	 ParSpMatVec=0.0026	 speedup=46.2639

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0063	 ParSpMatVec=0.0720	 speedup=0.0870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0063	 ParSpMatVec=0.0045	 speedup=1.4056
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0063	 ParSpMatVec=0.0021	 speedup=2.9413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0063	 ParSpMatVec=0.0025	 speedup=2.5449
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0063	 ParSpMatVec=0.0018	 speedup=3.5448

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1351	 ParSpMatVec=0.0692	 speedup=1.9530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1351	 ParSpMatVec=0.0047	 speedup=28.9274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1351	 ParSpMatVec=0.0027	 speedup=50.2995
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1351	 ParSpMatVec=0.0020	 speedup=66.8894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1351	 ParSpMatVec=0.0015	 speedup=91.8507

INFO: ParSpMatVec tests passed

>>> End of log
