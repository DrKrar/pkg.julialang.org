>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:497
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:231
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4805
Commit 3f4e1e7* (2016-06-16 01:29 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2925	 ParSpMatVec=0.0208	 speedup=14.0686
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2925	 ParSpMatVec=0.0092	 speedup=31.8816
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2925	 ParSpMatVec=0.0119	 speedup=24.6481
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2925	 ParSpMatVec=0.0102	 speedup=28.8117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2925	 ParSpMatVec=0.0108	 speedup=27.0384
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2874	 ParSpMatVec=0.0596	 speedup=4.8241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2874	 ParSpMatVec=0.0140	 speedup=20.5866
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2874	 ParSpMatVec=0.0149	 speedup=19.3042
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2874	 ParSpMatVec=0.0135	 speedup=21.2821
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2874	 ParSpMatVec=0.0135	 speedup=21.2196

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1253	 ParSpMatVec=0.0217	 speedup=5.7857
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1253	 ParSpMatVec=0.0125	 speedup=10.0565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1253	 ParSpMatVec=0.0159	 speedup=7.9065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1253	 ParSpMatVec=0.0154	 speedup=8.1416
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1253	 ParSpMatVec=0.0134	 speedup=9.3814

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1345	 ParSpMatVec=0.0391	 speedup=3.4379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1345	 ParSpMatVec=0.0020	 speedup=68.4276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1345	 ParSpMatVec=0.0020	 speedup=67.3983
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1345	 ParSpMatVec=0.0016	 speedup=85.2578
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1345	 ParSpMatVec=0.0020	 speedup=67.1234

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0053	 ParSpMatVec=0.0456	 speedup=0.1158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0053	 ParSpMatVec=0.0033	 speedup=1.5865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0053	 ParSpMatVec=0.0030	 speedup=1.7410
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0053	 ParSpMatVec=0.0027	 speedup=1.9614
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0053	 ParSpMatVec=0.0039	 speedup=1.3423

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1246	 ParSpMatVec=0.0434	 speedup=2.8695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1246	 ParSpMatVec=0.0041	 speedup=30.1351
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1246	 ParSpMatVec=0.0026	 speedup=48.0486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1246	 ParSpMatVec=0.0029	 speedup=43.1440
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1246	 ParSpMatVec=0.0025	 speedup=49.0333

INFO: ParSpMatVec tests passed

>>> End of log
