>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4422
Commit d07b849 (2016-05-31 20:46 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2286	 ParSpMatVec=0.0272	 speedup=8.4019
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2286	 ParSpMatVec=0.0091	 speedup=25.2351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2286	 ParSpMatVec=0.0143	 speedup=15.9452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2286	 ParSpMatVec=0.0089	 speedup=25.8189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2286	 ParSpMatVec=0.0092	 speedup=24.8099
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1794	 ParSpMatVec=0.0526	 speedup=3.4072
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1794	 ParSpMatVec=0.0145	 speedup=12.3937
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1794	 ParSpMatVec=0.0098	 speedup=18.3144
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1794	 ParSpMatVec=0.0110	 speedup=16.2872
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1794	 ParSpMatVec=0.0109	 speedup=16.3890

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0490	 ParSpMatVec=0.0295	 speedup=1.6597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0490	 ParSpMatVec=0.0132	 speedup=3.6991
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0490	 ParSpMatVec=0.0094	 speedup=5.2043
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0490	 ParSpMatVec=0.0118	 speedup=4.1467
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0490	 ParSpMatVec=0.0113	 speedup=4.3493

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0890	 ParSpMatVec=0.0320	 speedup=2.7826
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0890	 ParSpMatVec=0.0016	 speedup=56.0252
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0890	 ParSpMatVec=0.0014	 speedup=61.4876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0890	 ParSpMatVec=0.0015	 speedup=58.2219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0890	 ParSpMatVec=0.0023	 speedup=38.0367

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0060	 ParSpMatVec=0.0383	 speedup=0.1569
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0060	 ParSpMatVec=0.0035	 speedup=1.7354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0060	 ParSpMatVec=0.0022	 speedup=2.6727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0060	 ParSpMatVec=0.0024	 speedup=2.5036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0060	 ParSpMatVec=0.0022	 speedup=2.7022

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0823	 ParSpMatVec=0.0618	 speedup=1.3316
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0823	 ParSpMatVec=0.0037	 speedup=21.9668
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0823	 ParSpMatVec=0.0073	 speedup=11.2281
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0823	 ParSpMatVec=0.0029	 speedup=27.9345
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0823	 ParSpMatVec=0.0021	 speedup=39.4870

INFO: ParSpMatVec tests passed

>>> End of log
