>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4393
Commit 15626c3 (2016-05-29 22:12 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2444	 ParSpMatVec=0.0305	 speedup=8.0023
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2444	 ParSpMatVec=0.0106	 speedup=22.9678
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2444	 ParSpMatVec=0.0158	 speedup=15.4835
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2444	 ParSpMatVec=0.0101	 speedup=24.2233
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2444	 ParSpMatVec=0.0109	 speedup=22.4641
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1088	 ParSpMatVec=0.0335	 speedup=3.2476
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1088	 ParSpMatVec=0.0112	 speedup=9.7526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1088	 ParSpMatVec=0.0151	 speedup=7.2004
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1088	 ParSpMatVec=0.0160	 speedup=6.7857
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1088	 ParSpMatVec=0.0129	 speedup=8.4199

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0495	 ParSpMatVec=0.0343	 speedup=1.4433
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0495	 ParSpMatVec=0.0129	 speedup=3.8314
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0495	 ParSpMatVec=0.0134	 speedup=3.6905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0495	 ParSpMatVec=0.0138	 speedup=3.5775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0495	 ParSpMatVec=0.0127	 speedup=3.8931

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1061	 ParSpMatVec=0.0593	 speedup=1.7884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1061	 ParSpMatVec=0.0019	 speedup=56.5988
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1061	 ParSpMatVec=0.0026	 speedup=41.3373
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1061	 ParSpMatVec=0.0018	 speedup=58.8246
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1061	 ParSpMatVec=0.0021	 speedup=50.6406

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0644	 speedup=0.1266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0041	 speedup=1.9817
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0043	 speedup=1.8887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0025	 speedup=3.2334
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0026	 speedup=3.1234

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1433	 ParSpMatVec=0.0735	 speedup=1.9506
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1433	 ParSpMatVec=0.0043	 speedup=33.5915
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1433	 ParSpMatVec=0.0039	 speedup=37.0189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1433	 ParSpMatVec=0.0029	 speedup=50.2469
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1433	 ParSpMatVec=0.0030	 speedup=47.7171

INFO: ParSpMatVec tests passed

>>> End of log
