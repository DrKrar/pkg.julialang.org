>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4563
Commit 3142819 (2016-06-06 22:30 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2434	 ParSpMatVec=0.0298	 speedup=8.1762
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2434	 ParSpMatVec=0.0090	 speedup=27.0812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2434	 ParSpMatVec=0.0123	 speedup=19.7181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2434	 ParSpMatVec=0.0142	 speedup=17.1893
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2434	 ParSpMatVec=0.0074	 speedup=32.7381
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2652	 ParSpMatVec=0.0602	 speedup=4.4030
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2652	 ParSpMatVec=0.0136	 speedup=19.4526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2652	 ParSpMatVec=0.0142	 speedup=18.6880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2652	 ParSpMatVec=0.0156	 speedup=16.9774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2652	 ParSpMatVec=0.0132	 speedup=20.0393

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0864	 ParSpMatVec=0.0344	 speedup=2.5093
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0864	 ParSpMatVec=0.0127	 speedup=6.7778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0864	 ParSpMatVec=0.0146	 speedup=5.9042
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0864	 ParSpMatVec=0.0163	 speedup=5.3105
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0864	 ParSpMatVec=0.0144	 speedup=5.9998

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1311	 ParSpMatVec=0.0600	 speedup=2.1860
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1311	 ParSpMatVec=0.0032	 speedup=41.1122
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1311	 ParSpMatVec=0.0024	 speedup=54.8556
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1311	 ParSpMatVec=0.0020	 speedup=66.4492
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1311	 ParSpMatVec=0.0028	 speedup=47.1000

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0132	 ParSpMatVec=0.0748	 speedup=0.1765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0132	 ParSpMatVec=0.0042	 speedup=3.1336
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0132	 ParSpMatVec=0.0046	 speedup=2.8796
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0132	 ParSpMatVec=0.0028	 speedup=4.6600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0132	 ParSpMatVec=0.0040	 speedup=3.2721

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1404	 ParSpMatVec=0.0730	 speedup=1.9216
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1404	 ParSpMatVec=0.0043	 speedup=32.3185
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1404	 ParSpMatVec=0.0220	 speedup=6.3737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1404	 ParSpMatVec=0.0027	 speedup=52.3450
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1404	 ParSpMatVec=0.0028	 speedup=49.9021

INFO: ParSpMatVec tests passed

>>> End of log
