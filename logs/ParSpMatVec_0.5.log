>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.22
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5550
Commit 10b67fc (2016-07-20 19:46 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2441	 ParSpMatVec=0.0279	 speedup=8.7616
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2441	 ParSpMatVec=0.0099	 speedup=24.7392
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2441	 ParSpMatVec=0.0115	 speedup=21.2810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2441	 ParSpMatVec=0.0146	 speedup=16.7257
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2441	 ParSpMatVec=0.0082	 speedup=29.6330
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1684	 ParSpMatVec=0.0414	 speedup=4.0706
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1684	 ParSpMatVec=0.0137	 speedup=12.3139
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1684	 ParSpMatVec=0.0137	 speedup=12.2953
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1684	 ParSpMatVec=0.0181	 speedup=9.2922
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1684	 ParSpMatVec=0.0171	 speedup=9.8264

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0580	 ParSpMatVec=0.0367	 speedup=1.5808
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0580	 ParSpMatVec=0.0118	 speedup=4.9351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0580	 ParSpMatVec=0.0158	 speedup=3.6831
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0580	 ParSpMatVec=0.0223	 speedup=2.5970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0580	 ParSpMatVec=0.0113	 speedup=5.1277

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0595	 ParSpMatVec=0.0687	 speedup=0.8668
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0595	 ParSpMatVec=0.0023	 speedup=25.7081
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0595	 ParSpMatVec=0.0025	 speedup=23.7996
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0595	 ParSpMatVec=0.0037	 speedup=16.1542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0595	 ParSpMatVec=0.0056	 speedup=10.5978

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0629	 speedup=0.1372
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0039	 speedup=2.2191
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0016	 speedup=5.4896
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0044	 speedup=1.9541
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0062	 speedup=1.3881

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0682	 ParSpMatVec=0.0568	 speedup=1.2006
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0682	 ParSpMatVec=0.0040	 speedup=17.2224
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0682	 ParSpMatVec=0.0226	 speedup=3.0140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0682	 ParSpMatVec=0.0024	 speedup=28.0048
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0682	 ParSpMatVec=0.0054	 speedup=12.6331

INFO: ParSpMatVec tests passed

>>> End of log
