>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5081
Commit e5b5a09* (2016-07-02 00:34 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.3062	 ParSpMatVec=0.0313	 speedup=9.7676
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.3062	 ParSpMatVec=0.0081	 speedup=37.7132
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.3062	 ParSpMatVec=0.0140	 speedup=21.8404
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.3062	 ParSpMatVec=0.0107	 speedup=28.5978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.3062	 ParSpMatVec=0.0104	 speedup=29.3749
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2197	 ParSpMatVec=0.0556	 speedup=3.9512
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2197	 ParSpMatVec=0.0130	 speedup=16.8694
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2197	 ParSpMatVec=0.0146	 speedup=15.0707
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2197	 ParSpMatVec=0.0124	 speedup=17.7727
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2197	 ParSpMatVec=0.0149	 speedup=14.7130

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0666	 ParSpMatVec=0.0422	 speedup=1.5763
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0666	 ParSpMatVec=0.0115	 speedup=5.8065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0666	 ParSpMatVec=0.0154	 speedup=4.3091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0666	 ParSpMatVec=0.0099	 speedup=6.6984
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0666	 ParSpMatVec=0.0139	 speedup=4.7837

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1461	 ParSpMatVec=0.0407	 speedup=3.5889
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1461	 ParSpMatVec=0.0022	 speedup=66.9776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1461	 ParSpMatVec=0.0031	 speedup=47.7218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1461	 ParSpMatVec=0.0048	 speedup=30.3801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1461	 ParSpMatVec=0.0045	 speedup=32.8168

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0636	 speedup=0.1471
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0035	 speedup=2.6824
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0021	 speedup=4.4577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0028	 speedup=3.3740
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0030	 speedup=3.1252

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1434	 ParSpMatVec=0.0744	 speedup=1.9279
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1434	 ParSpMatVec=0.0044	 speedup=32.2227
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1434	 ParSpMatVec=0.0021	 speedup=67.7286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1434	 ParSpMatVec=0.0029	 speedup=49.2363
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1434	 ParSpMatVec=0.0018	 speedup=79.5728

INFO: ParSpMatVec tests passed

>>> End of log
