>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5453
Commit 1fd440e (2016-07-15 23:33 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2604	 ParSpMatVec=0.0165	 speedup=15.8297
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2604	 ParSpMatVec=0.0094	 speedup=27.8314
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2604	 ParSpMatVec=0.0115	 speedup=22.7226
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2604	 ParSpMatVec=0.0137	 speedup=19.0791
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2604	 ParSpMatVec=0.0118	 speedup=22.0265
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2050	 ParSpMatVec=0.0473	 speedup=4.3306
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2050	 ParSpMatVec=0.0230	 speedup=8.9094
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2050	 ParSpMatVec=0.0128	 speedup=16.0566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2050	 ParSpMatVec=0.0170	 speedup=12.0551
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2050	 ParSpMatVec=0.0113	 speedup=18.2200

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0594	 ParSpMatVec=0.0322	 speedup=1.8473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0594	 ParSpMatVec=0.0128	 speedup=4.6439
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0594	 ParSpMatVec=0.0139	 speedup=4.2758
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0594	 ParSpMatVec=0.0129	 speedup=4.6184
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0594	 ParSpMatVec=0.0140	 speedup=4.2486

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0742	 ParSpMatVec=0.0561	 speedup=1.3233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0742	 ParSpMatVec=0.0025	 speedup=29.1574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0742	 ParSpMatVec=0.0018	 speedup=42.2982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0742	 ParSpMatVec=0.0016	 speedup=45.7635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0742	 ParSpMatVec=0.0012	 speedup=59.4108

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0621	 speedup=0.1443
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0029	 speedup=3.1083
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0019	 speedup=4.8409
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0018	 speedup=4.8919
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0021	 speedup=4.2751

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0484	 ParSpMatVec=0.0556	 speedup=0.8695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0484	 ParSpMatVec=0.0084	 speedup=5.7348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0484	 ParSpMatVec=0.0028	 speedup=17.2358
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0484	 ParSpMatVec=0.0036	 speedup=13.4595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0484	 ParSpMatVec=0.0031	 speedup=15.8503

INFO: ParSpMatVec tests passed

>>> End of log
