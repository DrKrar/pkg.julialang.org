>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/lruthotto/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+3184
Commit fb283c6 (2016-03-17 08:49 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2144	 ParSpMatVec=0.0345	 speedup=6.2073
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2144	 ParSpMatVec=0.0126	 speedup=17.0756
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2144	 ParSpMatVec=0.0140	 speedup=15.3326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2144	 ParSpMatVec=0.0145	 speedup=14.7499
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2144	 ParSpMatVec=0.0081	 speedup=26.5070
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2208	 ParSpMatVec=0.0760	 speedup=2.9040
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2208	 ParSpMatVec=0.0198	 speedup=11.1521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2208	 ParSpMatVec=0.0167	 speedup=13.2039
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2208	 ParSpMatVec=0.0187	 speedup=11.8045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2208	 ParSpMatVec=0.0153	 speedup=14.4490

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0684	 ParSpMatVec=0.0504	 speedup=1.3570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0684	 ParSpMatVec=0.0151	 speedup=4.5202
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0684	 ParSpMatVec=0.0178	 speedup=3.8451
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0684	 ParSpMatVec=0.0157	 speedup=4.3601
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0684	 ParSpMatVec=0.0161	 speedup=4.2422

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0820	 ParSpMatVec=0.0460	 speedup=1.7813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0820	 ParSpMatVec=0.0024	 speedup=34.7125
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0820	 ParSpMatVec=0.0018	 speedup=45.0636
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0820	 ParSpMatVec=0.0018	 speedup=45.7486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0820	 ParSpMatVec=0.0025	 speedup=33.0167

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0123	 ParSpMatVec=0.0788	 speedup=0.1556
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0123	 ParSpMatVec=0.0047	 speedup=2.6001
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0123	 ParSpMatVec=0.0022	 speedup=5.5887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0123	 ParSpMatVec=0.0027	 speedup=4.5338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0123	 ParSpMatVec=0.0036	 speedup=3.3903

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1294	 ParSpMatVec=0.0627	 speedup=2.0639
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1294	 ParSpMatVec=0.0027	 speedup=47.4573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1294	 ParSpMatVec=0.0026	 speedup=50.1778
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1294	 ParSpMatVec=0.0036	 speedup=35.9361
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1294	 ParSpMatVec=0.0034	 speedup=38.6277

INFO: ParSpMatVec tests passed

>>> End of log
