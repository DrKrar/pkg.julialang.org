>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4990
Commit 05f2e31* (2016-06-29 01:07 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2121	 ParSpMatVec=0.0178	 speedup=11.9208
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2121	 ParSpMatVec=0.0094	 speedup=22.4877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2121	 ParSpMatVec=0.0127	 speedup=16.6427
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2121	 ParSpMatVec=0.0106	 speedup=19.9805
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2121	 ParSpMatVec=0.0074	 speedup=28.5870
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2130	 ParSpMatVec=0.0613	 speedup=3.4731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2130	 ParSpMatVec=0.0105	 speedup=20.3802
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2130	 ParSpMatVec=0.0103	 speedup=20.7244
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2130	 ParSpMatVec=0.0114	 speedup=18.7311
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2130	 ParSpMatVec=0.0115	 speedup=18.5721

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0756	 ParSpMatVec=0.0358	 speedup=2.1101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0756	 ParSpMatVec=0.0187	 speedup=4.0437
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0756	 ParSpMatVec=0.0094	 speedup=8.0397
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0756	 ParSpMatVec=0.0110	 speedup=6.8625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0756	 ParSpMatVec=0.0119	 speedup=6.3656

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1367	 ParSpMatVec=0.0584	 speedup=2.3423
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1367	 ParSpMatVec=0.0030	 speedup=44.9770
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1367	 ParSpMatVec=0.0015	 speedup=88.7050
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1367	 ParSpMatVec=0.0012	 speedup=109.9496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1367	 ParSpMatVec=0.0026	 speedup=52.7556

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0623	 speedup=0.1396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0056	 speedup=1.5462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0021	 speedup=4.1086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0031	 speedup=2.7926
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0028	 speedup=3.0703

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0837	 ParSpMatVec=0.0434	 speedup=1.9260
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0837	 ParSpMatVec=0.0046	 speedup=18.3494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0837	 ParSpMatVec=0.0034	 speedup=24.6324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0837	 ParSpMatVec=0.0027	 speedup=30.9191
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0837	 ParSpMatVec=0.0022	 speedup=37.9514

INFO: ParSpMatVec tests passed

>>> End of log
