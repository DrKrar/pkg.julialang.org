>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.22
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5535
Commit eee3e07 (2016-07-20 02:02 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1837	 ParSpMatVec=0.0196	 speedup=9.3521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1837	 ParSpMatVec=0.0079	 speedup=23.3570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1837	 ParSpMatVec=0.0118	 speedup=15.5378
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1837	 ParSpMatVec=0.0124	 speedup=14.8716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1837	 ParSpMatVec=0.0098	 speedup=18.6963
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2212	 ParSpMatVec=0.0585	 speedup=3.7782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2212	 ParSpMatVec=0.0148	 speedup=14.9065
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2212	 ParSpMatVec=0.0152	 speedup=14.5731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2212	 ParSpMatVec=0.0139	 speedup=15.8759
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2212	 ParSpMatVec=0.0140	 speedup=15.8174

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0668	 ParSpMatVec=0.0319	 speedup=2.0928
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0668	 ParSpMatVec=0.0128	 speedup=5.2284
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0668	 ParSpMatVec=0.0144	 speedup=4.6530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0668	 ParSpMatVec=0.0126	 speedup=5.2930
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0668	 ParSpMatVec=0.0131	 speedup=5.0802

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0713	 ParSpMatVec=0.0630	 speedup=1.1306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0713	 ParSpMatVec=0.0025	 speedup=28.0097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0713	 ParSpMatVec=0.0021	 speedup=33.6559
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0713	 ParSpMatVec=0.0021	 speedup=34.4056
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0713	 ParSpMatVec=0.0016	 speedup=45.1795

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0064	 ParSpMatVec=0.0431	 speedup=0.1490
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0064	 ParSpMatVec=0.0027	 speedup=2.3630
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0064	 ParSpMatVec=0.0024	 speedup=2.6432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0064	 ParSpMatVec=0.0045	 speedup=1.4218
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0064	 ParSpMatVec=0.0030	 speedup=2.1444

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0711	 ParSpMatVec=0.0666	 speedup=1.0677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0711	 ParSpMatVec=0.0043	 speedup=16.4296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0711	 ParSpMatVec=0.0076	 speedup=9.3187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0711	 ParSpMatVec=0.0037	 speedup=18.9960
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0711	 ParSpMatVec=0.0029	 speedup=24.5999

INFO: ParSpMatVec tests passed

>>> End of log
