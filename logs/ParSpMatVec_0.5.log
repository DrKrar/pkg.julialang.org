>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4443
Commit c19b973 (2016-06-02 00:47 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1568	 ParSpMatVec=0.0293	 speedup=5.3440
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1568	 ParSpMatVec=0.0094	 speedup=16.6018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1568	 ParSpMatVec=0.0150	 speedup=10.4802
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1568	 ParSpMatVec=0.0103	 speedup=15.2229
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1568	 ParSpMatVec=0.0091	 speedup=17.3014
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1776	 ParSpMatVec=0.0502	 speedup=3.5402
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1776	 ParSpMatVec=0.0099	 speedup=17.8726
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1776	 ParSpMatVec=0.0130	 speedup=13.6304
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1776	 ParSpMatVec=0.0119	 speedup=14.8787
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1776	 ParSpMatVec=0.0150	 speedup=11.8731

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0574	 ParSpMatVec=0.0303	 speedup=1.8970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0574	 ParSpMatVec=0.0129	 speedup=4.4402
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0574	 ParSpMatVec=0.0148	 speedup=3.8890
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0574	 ParSpMatVec=0.0136	 speedup=4.2189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0574	 ParSpMatVec=0.0158	 speedup=3.6329

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0734	 ParSpMatVec=0.0525	 speedup=1.3980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0734	 ParSpMatVec=0.0022	 speedup=33.0243
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0734	 ParSpMatVec=0.0024	 speedup=30.0987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0734	 ParSpMatVec=0.0015	 speedup=48.6262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0734	 ParSpMatVec=0.0016	 speedup=46.8915

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0071	 ParSpMatVec=0.0642	 speedup=0.1107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0071	 ParSpMatVec=0.0045	 speedup=1.5839
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0071	 ParSpMatVec=0.0018	 speedup=4.0379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0071	 ParSpMatVec=0.0018	 speedup=3.9525
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0071	 ParSpMatVec=0.0025	 speedup=2.7972

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0898	 ParSpMatVec=0.0641	 speedup=1.4017
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0898	 ParSpMatVec=0.0044	 speedup=20.5389
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0898	 ParSpMatVec=0.0018	 speedup=49.8038
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0898	 ParSpMatVec=0.0029	 speedup=31.4980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0898	 ParSpMatVec=0.0029	 speedup=30.5712

INFO: ParSpMatVec tests passed

>>> End of log
