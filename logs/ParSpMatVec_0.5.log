>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5260
Commit f8d67f7* (2016-07-10 01:41 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2952	 ParSpMatVec=0.0308	 speedup=9.5740
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2952	 ParSpMatVec=0.0075	 speedup=39.4356
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2952	 ParSpMatVec=0.0129	 speedup=22.8519
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2952	 ParSpMatVec=0.0134	 speedup=22.0458
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2952	 ParSpMatVec=0.0079	 speedup=37.1448
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2242	 ParSpMatVec=0.0375	 speedup=5.9784
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2242	 ParSpMatVec=0.0135	 speedup=16.5938
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2242	 ParSpMatVec=0.0173	 speedup=12.9529
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2242	 ParSpMatVec=0.0128	 speedup=17.4669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2242	 ParSpMatVec=0.0127	 speedup=17.6588

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0728	 ParSpMatVec=0.0330	 speedup=2.2049
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0728	 ParSpMatVec=0.0135	 speedup=5.3889
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0728	 ParSpMatVec=0.0184	 speedup=3.9607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0728	 ParSpMatVec=0.0148	 speedup=4.9218
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0728	 ParSpMatVec=0.0144	 speedup=5.0588

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0821	 ParSpMatVec=0.0614	 speedup=1.3384
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0821	 ParSpMatVec=0.0028	 speedup=29.7250
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0821	 ParSpMatVec=0.0027	 speedup=30.9818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0821	 ParSpMatVec=0.0020	 speedup=40.5348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0821	 ParSpMatVec=0.0019	 speedup=42.8361

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0150	 ParSpMatVec=0.0635	 speedup=0.2367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0150	 ParSpMatVec=0.0042	 speedup=3.5597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0150	 ParSpMatVec=0.0029	 speedup=5.2651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0150	 ParSpMatVec=0.0023	 speedup=6.5672
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0150	 ParSpMatVec=0.0016	 speedup=9.5423

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0836	 ParSpMatVec=0.0617	 speedup=1.3548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0836	 ParSpMatVec=0.0035	 speedup=23.8130
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0836	 ParSpMatVec=0.0023	 speedup=35.7199
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0836	 ParSpMatVec=0.0018	 speedup=47.2795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0836	 ParSpMatVec=0.0018	 speedup=47.7397

INFO: ParSpMatVec tests passed

>>> End of log
