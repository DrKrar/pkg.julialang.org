>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4965
Commit 6651f78* (2016-06-28 02:53 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1890	 ParSpMatVec=0.0301	 speedup=6.2897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1890	 ParSpMatVec=0.0095	 speedup=19.9583
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1890	 ParSpMatVec=0.0097	 speedup=19.4002
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1890	 ParSpMatVec=0.0065	 speedup=29.1711
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1890	 ParSpMatVec=0.0070	 speedup=26.8571
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2087	 ParSpMatVec=0.0621	 speedup=3.3612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2087	 ParSpMatVec=0.0138	 speedup=15.0727
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2087	 ParSpMatVec=0.0078	 speedup=26.8553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2087	 ParSpMatVec=0.0103	 speedup=20.1981
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2087	 ParSpMatVec=0.0114	 speedup=18.3798

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0746	 ParSpMatVec=0.0357	 speedup=2.0881
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0746	 ParSpMatVec=0.0130	 speedup=5.7421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0746	 ParSpMatVec=0.0082	 speedup=9.0772
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0746	 ParSpMatVec=0.0088	 speedup=8.4893
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0746	 ParSpMatVec=0.0112	 speedup=6.6889

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1520	 ParSpMatVec=0.0555	 speedup=2.7367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1520	 ParSpMatVec=0.0026	 speedup=59.3526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1520	 ParSpMatVec=0.0018	 speedup=85.2121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1520	 ParSpMatVec=0.0015	 speedup=98.1078
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1520	 ParSpMatVec=0.0016	 speedup=93.4100

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0100	 ParSpMatVec=0.0631	 speedup=0.1588
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0100	 ParSpMatVec=0.0038	 speedup=2.6091
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0100	 ParSpMatVec=0.0018	 speedup=5.6882
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0100	 ParSpMatVec=0.0026	 speedup=3.7914
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0100	 ParSpMatVec=0.0025	 speedup=4.0305

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1370	 ParSpMatVec=0.0607	 speedup=2.2581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1370	 ParSpMatVec=0.0036	 speedup=37.8215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1370	 ParSpMatVec=0.0021	 speedup=65.6293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1370	 ParSpMatVec=0.0035	 speedup=39.4637
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1370	 ParSpMatVec=0.0031	 speedup=43.7017

INFO: ParSpMatVec tests passed

>>> End of log
