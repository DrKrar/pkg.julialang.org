>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:1226
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4370
Commit 758aebc (2016-05-27 21:34 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2439	 ParSpMatVec=0.0263	 speedup=9.2905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2439	 ParSpMatVec=0.0092	 speedup=26.5421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2439	 ParSpMatVec=0.0158	 speedup=15.3992
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2439	 ParSpMatVec=0.0092	 speedup=26.5040
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2439	 ParSpMatVec=0.0117	 speedup=20.8374
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1218	 ParSpMatVec=0.0408	 speedup=2.9887
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1218	 ParSpMatVec=0.0126	 speedup=9.7021
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1218	 ParSpMatVec=0.0150	 speedup=8.1152
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1218	 ParSpMatVec=0.0131	 speedup=9.3138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1218	 ParSpMatVec=0.0122	 speedup=9.9483

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0631	 ParSpMatVec=0.0318	 speedup=1.9806
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0631	 ParSpMatVec=0.0133	 speedup=4.7417
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0631	 ParSpMatVec=0.0140	 speedup=4.5181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0631	 ParSpMatVec=0.0131	 speedup=4.8019
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0631	 ParSpMatVec=0.0137	 speedup=4.6069

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1227	 ParSpMatVec=0.0543	 speedup=2.2604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1227	 ParSpMatVec=0.0023	 speedup=54.4463
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1227	 ParSpMatVec=0.0024	 speedup=51.0798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1227	 ParSpMatVec=0.0016	 speedup=76.8533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1227	 ParSpMatVec=0.0018	 speedup=67.5736

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0668	 speedup=0.1109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0045	 speedup=1.6546
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0022	 speedup=3.4233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0028	 speedup=2.6087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0021	 speedup=3.5901

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0833	 ParSpMatVec=0.0622	 speedup=1.3396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0833	 ParSpMatVec=0.0039	 speedup=21.5034
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0833	 ParSpMatVec=0.0023	 speedup=36.5417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0833	 ParSpMatVec=0.0022	 speedup=38.6666
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0833	 ParSpMatVec=0.0027	 speedup=31.4065

INFO: ParSpMatVec tests passed

>>> End of log
