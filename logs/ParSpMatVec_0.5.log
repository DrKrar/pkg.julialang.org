>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:532
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:231
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4916
Commit 65c6e6e* (2016-06-23 02:47 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1934	 ParSpMatVec=0.0176	 speedup=10.9848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1934	 ParSpMatVec=0.0098	 speedup=19.8005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1934	 ParSpMatVec=0.0105	 speedup=18.4051
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1934	 ParSpMatVec=0.0145	 speedup=13.3626
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1934	 ParSpMatVec=0.0101	 speedup=19.2055
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1352	 ParSpMatVec=0.0376	 speedup=3.5917
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1352	 ParSpMatVec=0.0133	 speedup=10.1682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1352	 ParSpMatVec=0.0144	 speedup=9.3653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1352	 ParSpMatVec=0.0166	 speedup=8.1481
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1352	 ParSpMatVec=0.0141	 speedup=9.5626

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0532	 ParSpMatVec=0.0197	 speedup=2.6990
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0532	 ParSpMatVec=0.0147	 speedup=3.6257
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0532	 ParSpMatVec=0.0114	 speedup=4.6492
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0532	 ParSpMatVec=0.0153	 speedup=3.4760
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0532	 ParSpMatVec=0.0107	 speedup=4.9755

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1374	 ParSpMatVec=0.0356	 speedup=3.8627
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1374	 ParSpMatVec=0.0028	 speedup=49.3735
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1374	 ParSpMatVec=0.0028	 speedup=49.6958
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1374	 ParSpMatVec=0.0018	 speedup=76.7191
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1374	 ParSpMatVec=0.0024	 speedup=56.3983

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0653	 speedup=0.1463
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0036	 speedup=2.6827
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0020	 speedup=4.7995
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0021	 speedup=4.4818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0030	 speedup=3.2312

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1166	 ParSpMatVec=0.0484	 speedup=2.4079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1166	 ParSpMatVec=0.0036	 speedup=32.1779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1166	 ParSpMatVec=0.0019	 speedup=60.8822
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1166	 ParSpMatVec=0.0015	 speedup=75.4833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1166	 ParSpMatVec=0.0025	 speedup=46.3954

INFO: ParSpMatVec tests passed

>>> End of log
