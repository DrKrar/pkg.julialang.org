>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:494
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4536
Commit 44d778a (2016-06-05 01:30 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1642	 ParSpMatVec=0.0266	 speedup=6.1634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1642	 ParSpMatVec=0.0094	 speedup=17.4799
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1642	 ParSpMatVec=0.0119	 speedup=13.7544
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1642	 ParSpMatVec=0.0123	 speedup=13.3880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1642	 ParSpMatVec=0.0098	 speedup=16.7462
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2142	 ParSpMatVec=0.0573	 speedup=3.7378
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2142	 ParSpMatVec=0.0168	 speedup=12.7379
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2142	 ParSpMatVec=0.0158	 speedup=13.5271
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2142	 ParSpMatVec=0.0119	 speedup=17.9816
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2142	 ParSpMatVec=0.0134	 speedup=15.9256

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1376	 ParSpMatVec=0.0219	 speedup=6.2909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1376	 ParSpMatVec=0.0130	 speedup=10.6066
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1376	 ParSpMatVec=0.0159	 speedup=8.6468
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1376	 ParSpMatVec=0.0136	 speedup=10.1002
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1376	 ParSpMatVec=0.0125	 speedup=11.0251

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0816	 ParSpMatVec=0.0387	 speedup=2.1095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0816	 ParSpMatVec=0.0023	 speedup=35.3883
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0816	 ParSpMatVec=0.0047	 speedup=17.5148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0816	 ParSpMatVec=0.0056	 speedup=14.5206
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0816	 ParSpMatVec=0.0014	 speedup=59.3171

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0677	 speedup=0.1079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0037	 speedup=2.0015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0021	 speedup=3.4419
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0042	 speedup=1.7542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0026	 speedup=2.7617

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0783	 ParSpMatVec=0.0732	 speedup=1.0690
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0783	 ParSpMatVec=0.0046	 speedup=16.9030
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0783	 ParSpMatVec=0.0030	 speedup=25.6704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0783	 ParSpMatVec=0.0031	 speedup=24.9039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0783	 ParSpMatVec=0.0028	 speedup=28.4334

INFO: ParSpMatVec tests passed

>>> End of log
