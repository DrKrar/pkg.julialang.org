>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:1214
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4329
Commit ef7101b (2016-05-26 00:11 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1651	 ParSpMatVec=0.0200	 speedup=8.2462
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1651	 ParSpMatVec=0.0087	 speedup=18.9675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1651	 ParSpMatVec=0.0118	 speedup=14.0359
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1651	 ParSpMatVec=0.0134	 speedup=12.2988
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1651	 ParSpMatVec=0.0088	 speedup=18.8321
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1922	 ParSpMatVec=0.0347	 speedup=5.5362
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1922	 ParSpMatVec=0.0100	 speedup=19.1610
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1922	 ParSpMatVec=0.0154	 speedup=12.4687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1922	 ParSpMatVec=0.0132	 speedup=14.5804
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1922	 ParSpMatVec=0.0173	 speedup=11.0831

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0225	 speedup=1.9138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0136	 speedup=3.1691
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0137	 speedup=3.1553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0099	 speedup=4.3496
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0132	 speedup=3.2590

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1080	 ParSpMatVec=0.0477	 speedup=2.2662
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1080	 ParSpMatVec=0.0025	 speedup=43.5171
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1080	 ParSpMatVec=0.0024	 speedup=44.1728
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1080	 ParSpMatVec=0.0046	 speedup=23.5996
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1080	 ParSpMatVec=0.0017	 speedup=64.1234

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0507	 speedup=0.1553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0031	 speedup=2.5123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0022	 speedup=3.6411
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0029	 speedup=2.7481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0026	 speedup=3.0392

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1371	 ParSpMatVec=0.0706	 speedup=1.9416
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1371	 ParSpMatVec=0.0037	 speedup=36.6273
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1371	 ParSpMatVec=0.0018	 speedup=78.1945
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1371	 ParSpMatVec=0.0019	 speedup=73.3654
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1371	 ParSpMatVec=0.0041	 speedup=33.4896

INFO: ParSpMatVec tests passed

>>> End of log
