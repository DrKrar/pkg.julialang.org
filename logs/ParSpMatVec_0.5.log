>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.0
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:493
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-pre+5664
Commit 0d7c014 (2016-07-24 18:30 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (641.578125 MB free)
Uptime: 12414.0 sec
Load Avg:  0.9794921875  0.96435546875  0.97412109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     562372 s        100 s      78105 s     447674 s         18 s
#2  3500 MHz     268743 s       6165 s      64792 s     850657 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
24 additional packages:
 - BinDeps                       0.4.0
 - Calculus                      0.1.15
 - ColorTypes                    0.2.5
 - ColorVectorSpace              0.1.5
 - Colors                        0.6.6
 - Compat                        0.8.6
 - Distances                     0.3.1
 - DualNumbers                   0.2.2
 - FileIO                        0.1.0
 - FixedPointNumbers             0.1.4
 - ForwardDiff                   0.2.2
 - Graphics                      0.1.3
 - Images                        0.5.5              8840a952 (dirty)
 - NLsolve                       0.7.2              bc5bbedf (dirty)
 - NaNMath                       0.2.1
 - OCCA                          0.0.1              f9fb1c0c (dirty)
 - Optim                         0.5.0
 - PositiveFactorizations        0.0.1
 - Reexport                      0.0.3
 - SHA                           0.1.2
 - SIUnits                       0.0.6
 - TexExtensions                 0.0.3
 - URIParser                     0.1.5
 - Zlib                          0.1.12
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2117	 ParSpMatVec=0.0250	 speedup=8.4780
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2117	 ParSpMatVec=0.0080	 speedup=26.4690
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2117	 ParSpMatVec=0.0084	 speedup=25.1749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2117	 ParSpMatVec=0.0109	 speedup=19.4586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2117	 ParSpMatVec=0.0080	 speedup=26.4246
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2104	 ParSpMatVec=0.0337	 speedup=6.2423
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2104	 ParSpMatVec=0.0128	 speedup=16.4313
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2104	 ParSpMatVec=0.0152	 speedup=13.8039
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2104	 ParSpMatVec=0.0188	 speedup=11.2161
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2104	 ParSpMatVec=0.0109	 speedup=19.3581

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0595	 ParSpMatVec=0.0226	 speedup=2.6264
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0595	 ParSpMatVec=0.0105	 speedup=5.6437
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0595	 ParSpMatVec=0.0152	 speedup=3.9192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0595	 ParSpMatVec=0.0137	 speedup=4.3375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0595	 ParSpMatVec=0.0138	 speedup=4.2980

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0714	 ParSpMatVec=0.0661	 speedup=1.0807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0714	 ParSpMatVec=0.0024	 speedup=30.1342
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0714	 ParSpMatVec=0.0030	 speedup=23.4307
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0714	 ParSpMatVec=0.0028	 speedup=25.5858
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0714	 ParSpMatVec=0.0021	 speedup=34.5872

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0461	 speedup=0.1712
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0042	 speedup=1.8837
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0048	 speedup=1.6568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0038	 speedup=2.0641
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0012	 speedup=6.4397

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0723	 ParSpMatVec=0.0483	 speedup=1.4957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0723	 ParSpMatVec=0.0024	 speedup=29.6710
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0723	 ParSpMatVec=0.0039	 speedup=18.5806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0723	 ParSpMatVec=0.0025	 speedup=28.9872
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0723	 ParSpMatVec=0.0033	 speedup=21.6748

INFO: ParSpMatVec tests passed

>>> End of log
