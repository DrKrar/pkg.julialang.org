>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5440
Commit edb112a* (2016-07-14 21:40 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2223	 ParSpMatVec=0.0269	 speedup=8.2548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2223	 ParSpMatVec=0.0088	 speedup=25.3730
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2223	 ParSpMatVec=0.0110	 speedup=20.1700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2223	 ParSpMatVec=0.0070	 speedup=31.6655
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2223	 ParSpMatVec=0.0075	 speedup=29.7833
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2225	 ParSpMatVec=0.0529	 speedup=4.2052
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2225	 ParSpMatVec=0.0137	 speedup=16.2168
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2225	 ParSpMatVec=0.0084	 speedup=26.4553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2225	 ParSpMatVec=0.0107	 speedup=20.8583
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2225	 ParSpMatVec=0.0176	 speedup=12.6140

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0375	 ParSpMatVec=0.0199	 speedup=1.8855
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0375	 ParSpMatVec=0.0127	 speedup=2.9579
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0375	 ParSpMatVec=0.0090	 speedup=4.1660
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0375	 ParSpMatVec=0.0089	 speedup=4.2324
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0375	 ParSpMatVec=0.0109	 speedup=3.4305

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0694	 ParSpMatVec=0.0614	 speedup=1.1296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0694	 ParSpMatVec=0.0031	 speedup=22.5840
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0694	 ParSpMatVec=0.0014	 speedup=51.2018
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0694	 ParSpMatVec=0.0019	 speedup=36.9019
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0694	 ParSpMatVec=0.0014	 speedup=48.7144

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0568	 speedup=0.1665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0038	 speedup=2.5039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0020	 speedup=4.8377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0026	 speedup=3.5818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0024	 speedup=3.9264

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0463	 ParSpMatVec=0.0422	 speedup=1.0987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0463	 ParSpMatVec=0.0031	 speedup=15.0580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0463	 ParSpMatVec=0.0019	 speedup=23.9495
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0463	 ParSpMatVec=0.0022	 speedup=20.7414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0463	 ParSpMatVec=0.0023	 speedup=19.8742

INFO: ParSpMatVec tests passed

>>> End of log
