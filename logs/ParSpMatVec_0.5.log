>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:522
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+5456
Commit a1fbb84 (2016-07-16 21:33 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1859	 ParSpMatVec=0.0269	 speedup=6.9194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1859	 ParSpMatVec=0.0094	 speedup=19.7482
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1859	 ParSpMatVec=0.0142	 speedup=13.0998
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1859	 ParSpMatVec=0.0123	 speedup=15.0606
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1859	 ParSpMatVec=0.0101	 speedup=18.4694
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.2180	 ParSpMatVec=0.0524	 speedup=4.1597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.2180	 ParSpMatVec=0.0137	 speedup=15.8924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.2180	 ParSpMatVec=0.0145	 speedup=15.0194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.2180	 ParSpMatVec=0.0139	 speedup=15.6470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.2180	 ParSpMatVec=0.0121	 speedup=18.0068

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0441	 ParSpMatVec=0.0195	 speedup=2.2581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0441	 ParSpMatVec=0.0123	 speedup=3.5897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0441	 ParSpMatVec=0.0141	 speedup=3.1288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0441	 ParSpMatVec=0.0132	 speedup=3.3303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0441	 ParSpMatVec=0.0134	 speedup=3.2840

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0555	 ParSpMatVec=0.0592	 speedup=0.9382
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0555	 ParSpMatVec=0.0024	 speedup=22.6813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0555	 ParSpMatVec=0.0030	 speedup=18.5462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0555	 ParSpMatVec=0.0020	 speedup=28.4374
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0555	 ParSpMatVec=0.0021	 speedup=26.7285

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0098	 ParSpMatVec=0.0581	 speedup=0.1684
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0098	 ParSpMatVec=0.0036	 speedup=2.7230
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0098	 ParSpMatVec=0.0024	 speedup=4.0650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0098	 ParSpMatVec=0.0029	 speedup=3.4319
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0098	 ParSpMatVec=0.0026	 speedup=3.7263

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0833	 ParSpMatVec=0.0712	 speedup=1.1693
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0833	 ParSpMatVec=0.0037	 speedup=22.6283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0833	 ParSpMatVec=0.0028	 speedup=29.2751
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0833	 ParSpMatVec=0.0031	 speedup=26.6139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0833	 ParSpMatVec=0.0031	 speedup=27.0284

INFO: ParSpMatVec tests passed

>>> End of log
