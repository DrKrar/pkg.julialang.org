>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:492
 in include_from_node1(::String) at ./loading.jl:488
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:504 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1003.125 MB free)
Uptime: 11096.0 sec
Load Avg:  1.00390625  1.00341796875  1.0
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     637821 s         32 s      66274 s     284358 s         21 s
#2  3500 MHz     198438 s        144 s      36530 s     847905 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1762	 ParSpMatVec=0.0251	 speedup=7.0082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1762	 ParSpMatVec=0.0088	 speedup=19.9659
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1762	 ParSpMatVec=0.0127	 speedup=13.9247
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1762	 ParSpMatVec=0.0068	 speedup=25.7878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1762	 ParSpMatVec=0.0067	 speedup=26.4819
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1878	 ParSpMatVec=0.0459	 speedup=4.0880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1878	 ParSpMatVec=0.0119	 speedup=15.7700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1878	 ParSpMatVec=0.0125	 speedup=15.0003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1878	 ParSpMatVec=0.0118	 speedup=15.9577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1878	 ParSpMatVec=0.0120	 speedup=15.7009

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0554	 ParSpMatVec=0.0529	 speedup=1.0480
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0554	 ParSpMatVec=0.0146	 speedup=3.7944
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0554	 ParSpMatVec=0.0150	 speedup=3.7004
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0554	 ParSpMatVec=0.0129	 speedup=4.2879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0554	 ParSpMatVec=0.0157	 speedup=3.5227

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0656	 ParSpMatVec=0.0531	 speedup=1.2355
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0656	 ParSpMatVec=0.0043	 speedup=15.3387
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0656	 ParSpMatVec=0.0039	 speedup=16.6977
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0656	 ParSpMatVec=0.0019	 speedup=35.2766
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0656	 ParSpMatVec=0.0021	 speedup=31.1868

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0664	 speedup=0.1426
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0035	 speedup=2.7170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0139	 speedup=0.6805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0032	 speedup=2.9217
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0025	 speedup=3.7384

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0859	 ParSpMatVec=0.0733	 speedup=1.1717
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0859	 ParSpMatVec=0.0036	 speedup=23.6280
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0859	 ParSpMatVec=0.0026	 speedup=32.4631
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0859	 ParSpMatVec=0.0034	 speedup=25.2745
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0859	 ParSpMatVec=0.0028	 speedup=31.0569

INFO: ParSpMatVec tests passed

>>> End of log
