>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from https://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.5/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.5/ParSpMatVec/deps/src
useIntel = false
creating build directory
WARNING: `@unix_only` is deprecated, use `@static if is_unix()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @unix_only(::Any) at ./deprecated.jl:1213
 in include_from_node1(::String) at ./loading.jl:426
 in eval(::Module, ::Any) at ./boot.jl:225
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/ParSpMatVec/deps/build.jl, in expression starting on line 29
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.5.0-dev+4281
Commit a0661a0 (2016-05-23 13:30 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1788	 ParSpMatVec=0.0235	 speedup=7.6120
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1788	 ParSpMatVec=0.0100	 speedup=17.9573
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1788	 ParSpMatVec=0.0120	 speedup=14.8917
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1788	 ParSpMatVec=0.0108	 speedup=16.5080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1788	 ParSpMatVec=0.0077	 speedup=23.1851
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1776	 ParSpMatVec=0.0560	 speedup=3.1723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1776	 ParSpMatVec=0.0135	 speedup=13.1045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1776	 ParSpMatVec=0.0133	 speedup=13.3462
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1776	 ParSpMatVec=0.0133	 speedup=13.3810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1776	 ParSpMatVec=0.0128	 speedup=13.9005

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0554	 ParSpMatVec=0.0325	 speedup=1.7047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0554	 ParSpMatVec=0.0127	 speedup=4.3800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0554	 ParSpMatVec=0.0142	 speedup=3.9118
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0554	 ParSpMatVec=0.0137	 speedup=4.0438
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0554	 ParSpMatVec=0.0129	 speedup=4.3042

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0893	 ParSpMatVec=0.0329	 speedup=2.7140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0893	 ParSpMatVec=0.0021	 speedup=42.5762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0893	 ParSpMatVec=0.0025	 speedup=36.3063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0893	 ParSpMatVec=0.0014	 speedup=66.0381
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0893	 ParSpMatVec=0.0038	 speedup=23.6073

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0491	 speedup=0.1542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0040	 speedup=1.8906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0032	 speedup=2.3291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0019	 speedup=4.0285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0018	 speedup=4.2013

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1245	 ParSpMatVec=0.0380	 speedup=3.2765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1245	 ParSpMatVec=0.0031	 speedup=40.3240
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1245	 ParSpMatVec=0.0042	 speedup=29.4610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1245	 ParSpMatVec=0.0034	 speedup=36.8918
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1245	 ParSpMatVec=0.0051	 speedup=24.5733

INFO: ParSpMatVec tests passed

>>> End of log
