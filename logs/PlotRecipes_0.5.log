>>> 'Pkg.add("PlotRecipes")' log
INFO: Installing BinDeps v0.4.2
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.5
INFO: Installing Colors v0.6.6
INFO: Installing DataArrays v0.3.8
INFO: Installing DataFrames v0.7.6
INFO: Installing Distributions v0.10.0
INFO: Installing Docile v0.5.23
INFO: Installing DualNumbers v0.2.2
INFO: Installing FixedPointNumbers v0.1.4
INFO: Installing FixedSizeArrays v0.2.2
INFO: Installing GZip v0.2.19
INFO: Installing Grid v0.4.1
INFO: Installing Iterators v0.1.10
INFO: Installing KernelDensity v0.1.2
INFO: Installing Measures v0.0.3
INFO: Installing NaNMath v0.2.1
INFO: Installing Optim v0.5.0
INFO: Installing PDMats v0.4.2
INFO: Installing PlotRecipes v0.0.6
INFO: Installing PlotUtils v0.0.4
INFO: Installing Plots v0.9.0
INFO: Installing PositiveFactorizations v0.0.2
INFO: Installing RecipesBase v0.0.6
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing Showoff v0.0.7
INFO: Installing SortingAlgorithms v0.1.0
INFO: Installing StatPlots v0.0.3
INFO: Installing StatsBase v0.9.0
INFO: Installing StatsFuns v0.3.0
INFO: Installing URIParser v0.1.5
INFO: Installing WoodburyMatrices v0.2.0
INFO: Building Rmath
INFO: Building Plots
INFO: Package database updated

>>> 'Pkg.test("PlotRecipes")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1608.83984375 MB free)
Uptime: 12081.0 sec
Load Avg:  1.017578125  1.001953125  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     630085 s       5678 s      71386 s     342835 s         22 s
#2  3499 MHz     232963 s        104 s      38275 s     892643 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - PlotRecipes                   0.0.6
34 additional packages:
 - BinDeps                       0.4.2
 - Calculus                      0.1.15
 - ColorTypes                    0.2.5
 - Colors                        0.6.6
 - Compat                        0.8.6
 - DataArrays                    0.3.8
 - DataFrames                    0.7.6
 - Distributions                 0.10.0
 - Docile                        0.5.23
 - DualNumbers                   0.2.2
 - FixedPointNumbers             0.1.4
 - FixedSizeArrays               0.2.2
 - GZip                          0.2.19
 - Grid                          0.4.1
 - Iterators                     0.1.10
 - KernelDensity                 0.1.2
 - Measures                      0.0.3
 - NaNMath                       0.2.1
 - Optim                         0.5.0
 - PDMats                        0.4.2
 - PlotUtils                     0.0.4
 - Plots                         0.9.0
 - PositiveFactorizations        0.0.2
 - RecipesBase                   0.0.6
 - Reexport                      0.0.3
 - Rmath                         0.1.2
 - SHA                           0.2.0
 - Showoff                       0.0.7
 - SortingAlgorithms             0.1.0
 - StatPlots                     0.0.3
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.0
 - URIParser                     0.1.5
 - WoodburyMatrices              0.2.0
INFO: Testing PlotRecipes
WARNING: Method definition cgrad(Any, Any) in module PlotUtils at /home/vagrant/.julia/v0.5/PlotUtils/src/color_gradients.jl:82 overwritten at /home/vagrant/.julia/v0.5/PlotUtils/src/color_gradients.jl:99.
WARNING: Method definition #cgrad(Array{Any, 1}, PlotUtils.#cgrad, Any, Any) in module PlotUtils overwritten.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Rmath.ji for module Rmath.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsFuns.ji for module StatsFuns.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsBase.ji for module StatsBase.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Distributions.ji for module Distributions.

WARNING: deprecated syntax "x::Float64".
Use "local x::Float64" instead.

WARNING: deprecated syntax "r::Float64".
Use "local r::Float64" instead.

WARNING: deprecated syntax "rmin::Float64".
Use "local rmin::Float64" instead.

WARNING: deprecated syntax "rmax::Float64".
Use "local rmax::Float64" instead.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/DataFrames.ji for module DataFrames.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/DataArrays.ji for module DataArrays.
WARNING: error while reinitializing value MethodTable(name=:interp_coords_1d, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpForward}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=#T<:Any, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpQuadratic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpCubic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCfill, Grid.BCnearest}}, Type{Grid.InterpQuadratic}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Union{Grid.BCfill, Grid.BCnearest}), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Grid.BoundaryCondition), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpNearest}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpBackward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpForward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=Array{Int64, 1})], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=Grid.#interp_coords_1d)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=6, kwsorter=#<null>, module=Grid, =0, =0):
OutOfMemoryError()
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{String,N}) at ./deprecated.jl:30
 in @glue(::Any) at /home/vagrant/.julia/v0.5/KernelDensity/src/KernelDensity.jl:21
 in include_from_node1(::String) at ./loading.jl:426
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/KernelDensity/src/KernelDensity.jl, in expression starting on line 28
WARNING: error while reinitializing value MethodTable(name=:interp_coords_1d, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpForward}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=#T<:Any, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpQuadratic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpCubic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCfill, Grid.BCnearest}}, Type{Grid.InterpQuadratic}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Union{Grid.BCfill, Grid.BCnearest}), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Grid.BoundaryCondition), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpNearest}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpBackward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpForward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=Array{Int64, 1})], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=Grid.#interp_coords_1d)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=6, kwsorter=#<null>, module=Grid, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:interp_coords_1d, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpForward}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=#T<:Any, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpQuadratic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpCubic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCfill, Grid.BCnearest}}, Type{Grid.InterpQuadratic}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Union{Grid.BCfill, Grid.BCnearest}), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Grid.BoundaryCondition), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpNearest}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpBackward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpForward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=Array{Int64, 1})], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=Grid.#interp_coords_1d)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=6, kwsorter=#<null>, module=Grid, =0, =0):
OutOfMemoryError()

WARNING: deprecated syntax "[a=>b for (a,b) in c]".
Use "Dict(a=>b for (a,b) in c)" instead.
WARNING: error while reinitializing value MethodTable(name=:interp_coords_1d, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpForward}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.BCreflect}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=#T<:Any, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpQuadratic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{Grid.InterpCubic}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpCubic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCfill, Grid.BCnearest}}, Type{Grid.InterpQuadratic}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Union{Grid.BCfill, Grid.BCnearest}), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}}, Type{Grid.InterpQuadratic}, Any, Int64}, tvars=#BC<:Union{Grid.BCnil, Grid.BCnan, Grid.BCna}, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpLinear}, #T<:Any, Int64}, tvars=svec(#T<:Any, #BC<:Grid.BoundaryCondition), simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpNearest}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpBackward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{Grid.#interp_coords_1d, Array{Int64, 1}, Type{#BC<:Grid.BoundaryCondition}, Type{Grid.InterpForward}, Any, Int64}, tvars=#BC<:Grid.BoundaryCondition, simplesig=nothing, guardsigs=svec(), func=Grid.interp_coords_1d(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=Array{Int64, 1})], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=Grid.#interp_coords_1d)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=6, kwsorter=#<null>, module=Grid, =0, =0):
OutOfMemoryError()
INFO: PlotRecipes tests passed

>>> End of log
