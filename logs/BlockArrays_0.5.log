>>> 'Pkg.add("BlockArrays")' log
INFO: Cloning cache of BlockArrays from https://github.com/KristofferC/BlockArrays.jl.git
INFO: Installing BlockArrays v0.0.3
INFO: Package database updated

>>> 'Pkg.test("BlockArrays")' log
Julia Version 0.5.0-dev+4306
Commit 0a3cf4a (2016-05-24 22:35 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing BlockArrays
Error During Test
  Test threw an exception of type UndefVarError
  Expression: replstrmime(BlockArray(collect(reshape(1:16,4,4)),[1,3],[2,2])) == "2×2-blocked 4×4 BlockArrays.BlockArray{Int64,2,Array{Int64,2}}:\n 1  5  │   9  13\n ──────┼────────\n 2  6  │  10  14\n 3  7  │  11  15\n 4  8  │  12  16"
  UndefVarError: showcompact_lim not defined
   in print_matrix_row(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}, ::Array{Tuple{Int64,Int64},1}, ::Int64, ::UnitRange{Int64}, ::String) at /home/vagrant/.julia/v0.5/BlockArrays/src/show.jl:25
   in print_matrix(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}, ::String, ::String, ::String, ::String, ::String, ::String, ::Int64, ::Int64) at ./show.jl:1321
   in print_matrix(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}, ::String, ::String, ::String) at ./show.jl:1293
   in showarray(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}) at ./show.jl:1500
   in writemime(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::MIME{Symbol("text/plain")}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}) at ./replutil.jl:4
   in verbose_writemime(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::MIME{Symbol("text/plain")}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}) at ./multimedia.jl:60
   in #sprint#131(::Void, ::Function, ::Int64, ::Function, ::MIME{Symbol("text/plain")}, ::Vararg{Any,N}) at ./strings/io.jl:38
   in stringmime(::MIME{Symbol("text/plain")}, ::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}) at ./multimedia.jl:75
   in replstrmime(::BlockArrays.BlockArray{Int64,2,Array{Int64,2}}) at /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl:106
   in include_from_node1(::String) at ./loading.jl:426
   in process_options(::Base.JLOptions) at ./client.jl:266
   in _start() at ./client.jl:322
ERROR: LoadError: There was an error during testing
 in record(::Base.Test.FallbackTestSet, ::Base.Test.Error) at ./test.jl:321
 in do_test(::Base.Test.Threw, ::Expr) at ./test.jl:219
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl, in expression starting on line 107
=============================[ ERROR: BlockArrays ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: BlockArrays had test errors
 in #test#49(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:693
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./null:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./null:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg.jl:245
 in test(::String, ::Vararg{String,N}) at ./pkg.jl:245
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
