>>> 'Pkg.add("BlockArrays")' log
INFO: Cloning cache of BlockArrays from https://github.com/KristofferC/BlockArrays.jl.git
INFO: Installing BlockArrays v0.0.3
INFO: Package database updated

>>> 'Pkg.test("BlockArrays")' log
Julia Version 0.5.0-dev+5214
Commit 756faa6* (2016-07-07 22:38 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing BlockArrays
WARNING: print_joined is deprecated, use join instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in print_joined(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::Vararg{Any,N}) at ./deprecated.jl:30
 in showerror(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::BlockArrays.BlockBoundsError) at /home/vagrant/.julia/v0.5/BlockArrays/src/abstractblockarray.jl:176
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl, in expression starting on line 102
BlockArrays.BlockArray{T,N,R} Float32 - OK!
BlockArrays.BlockArray{T,N,R} Float32 ~ Skipped no method!
BlockArrays.BlockArray{T,N,R} Float32 conj OK!
BlockArrays.BlockArray{T,N,R} Float32 abs OK!
BlockArrays.BlockArray{T,N,R} Float32 sin OK!
BlockArrays.BlockArray{T,N,R} Float32 cos OK!
BlockArrays.BlockArray{T,N,R} Float32 tan OK!
BlockArrays.BlockArray{T,N,R} Float32 sinh OK!
BlockArrays.BlockArray{T,N,R} Float32 cosh OK!
BlockArrays.BlockArray{T,N,R} Float32 tanh OK!
BlockArrays.BlockArray{T,N,R} Float32 asin OK!
BlockArrays.BlockArray{T,N,R} Float32 acos OK!
BlockArrays.BlockArray{T,N,R} Float32 atan OK!
BlockArrays.BlockArray{T,N,R} Float32 asinh OK!
BlockArrays.BlockArray{T,N,R} Float32 acosh Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 atanh OK!
BlockArrays.BlockArray{T,N,R} Float32 sec OK!
BlockArrays.BlockArray{T,N,R} Float32 csc OK!
BlockArrays.BlockArray{T,N,R} Float32 cot OK!
BlockArrays.BlockArray{T,N,R} Float32 asec Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 acsc Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 acot OK!
BlockArrays.BlockArray{T,N,R} Float32 sech OK!
BlockArrays.BlockArray{T,N,R} Float32 csch OK!
BlockArrays.BlockArray{T,N,R} Float32 coth OK!
BlockArrays.BlockArray{T,N,R} Float32 asech OK!
BlockArrays.BlockArray{T,N,R} Float32 acsch OK!
BlockArrays.BlockArray{T,N,R} Float32 acoth Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 sinc OK!
BlockArrays.BlockArray{T,N,R} Float32 cosc OK!
BlockArrays.BlockArray{T,N,R} Float32 cosd OK!
BlockArrays.BlockArray{T,N,R} Float32 cotd OK!
BlockArrays.BlockArray{T,N,R} Float32 cscd OK!
BlockArrays.BlockArray{T,N,R} Float32 secd OK!
BlockArrays.BlockArray{T,N,R} Float32 sind OK!
BlockArrays.BlockArray{T,N,R} Float32 tand OK!
BlockArrays.BlockArray{T,N,R} Float32 acosd OK!
BlockArrays.BlockArray{T,N,R} Float32 acotd OK!
BlockArrays.BlockArray{T,N,R} Float32 acscd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 asecd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 asind OK!
BlockArrays.BlockArray{T,N,R} Float32 atand OK!
BlockArrays.BlockArray{T,N,R} Float32 rad2deg OK!
BlockArrays.BlockArray{T,N,R} Float32 deg2rad OK!
BlockArrays.BlockArray{T,N,R} Float32 log OK!
BlockArrays.BlockArray{T,N,R} Float32 log2 OK!
BlockArrays.BlockArray{T,N,R} Float32 log10 OK!
BlockArrays.BlockArray{T,N,R} Float32 log1p OK!
BlockArrays.BlockArray{T,N,R} Float32 exponent OK!
BlockArrays.BlockArray{T,N,R} Float32 exp OK!
BlockArrays.BlockArray{T,N,R} Float32 exp2 OK!
BlockArrays.BlockArray{T,N,R} Float32 expm1 OK!
BlockArrays.BlockArray{T,N,R} Float32 cbrt OK!
BlockArrays.BlockArray{T,N,R} Float32 sqrt OK!
BlockArrays.BlockArray{T,N,R} Float32 erf OK!
BlockArrays.BlockArray{T,N,R} Float32 erfc OK!
BlockArrays.BlockArray{T,N,R} Float32 erfcx OK!
BlockArrays.BlockArray{T,N,R} Float32 erfi OK!
BlockArrays.BlockArray{T,N,R} Float32 dawson OK!
BlockArrays.BlockArray{T,N,R} Float32 ceil OK!
BlockArrays.BlockArray{T,N,R} Float32 floor OK!
BlockArrays.BlockArray{T,N,R} Float32 trunc OK!
BlockArrays.BlockArray{T,N,R} Float32 round OK!
BlockArrays.BlockArray{T,N,R} Float32 significand OK!
BlockArrays.BlockArray{T,N,R} Float32 maximum OK!
BlockArrays.BlockArray{T,N,R} Float32 minimum OK!
BlockArrays.BlockArray{T,N,R} Float32 sum OK!
BlockArrays.BlockArray{T,N,R} Float32 prod OK!
BlockArrays.BlockArray{T,N,R} Float32 .+ OK!
BlockArrays.BlockArray{T,N,R} Float32 .- OK!
BlockArrays.BlockArray{T,N,R} Float32 .* OK!
BlockArrays.BlockArray{T,N,R} Float32 ./ OK!
BlockArrays.BlockArray{T,N,R} Float32 .\ OK!
BlockArrays.BlockArray{T,N,R} Float32 .^ OK!
BlockArrays.BlockArray{T,N,R} Float32 + OK!
BlockArrays.BlockArray{T,N,R} Float32 - OK!
BlockArrays.BlockArray{T,N,R} Float32 min OK!
BlockArrays.BlockArray{T,N,R} Float32 max OK!
BlockArrays.BlockArray{T,N,R} Float32 div OK!
BlockArrays.BlockArray{T,N,R} Float32 mod OK!
BlockArrays.BlockArray{T,N,R} Float32 .== OK!
BlockArrays.BlockArray{T,N,R} Float32 .!= OK!
BlockArrays.BlockArray{T,N,R} Float32 .< OK!
BlockArrays.BlockArray{T,N,R} Float32 .<= OK!
BlockArrays.BlockArray{T,N,R} Float32 .> OK!
BlockArrays.BlockArray{T,N,R} Float32 .>= OK!
BlockArrays.BlockArray{T,N,R} Float32 - OK!
BlockArrays.BlockArray{T,N,R} Float32 ~ Skipped no method!
BlockArrays.BlockArray{T,N,R} Float32 conj OK!
BlockArrays.BlockArray{T,N,R} Float32 abs OK!
BlockArrays.BlockArray{T,N,R} Float32 sin OK!
BlockArrays.BlockArray{T,N,R} Float32 cos OK!
BlockArrays.BlockArray{T,N,R} Float32 tan OK!
BlockArrays.BlockArray{T,N,R} Float32 sinh OK!
BlockArrays.BlockArray{T,N,R} Float32 cosh OK!
BlockArrays.BlockArray{T,N,R} Float32 tanh OK!
BlockArrays.BlockArray{T,N,R} Float32 asin OK!
BlockArrays.BlockArray{T,N,R} Float32 acos OK!
BlockArrays.BlockArray{T,N,R} Float32 atan OK!
BlockArrays.BlockArray{T,N,R} Float32 asinh OK!
BlockArrays.BlockArray{T,N,R} Float32 acosh Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 atanh OK!
BlockArrays.BlockArray{T,N,R} Float32 sec OK!
BlockArrays.BlockArray{T,N,R} Float32 csc OK!
BlockArrays.BlockArray{T,N,R} Float32 cot OK!
BlockArrays.BlockArray{T,N,R} Float32 asec Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 acsc Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 acot OK!
BlockArrays.BlockArray{T,N,R} Float32 sech OK!
BlockArrays.BlockArray{T,N,R} Float32 csch OK!
BlockArrays.BlockArray{T,N,R} Float32 coth OK!
BlockArrays.BlockArray{T,N,R} Float32 asech OK!
BlockArrays.BlockArray{T,N,R} Float32 acsch OK!
BlockArrays.BlockArray{T,N,R} Float32 acoth Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 sinc OK!
BlockArrays.BlockArray{T,N,R} Float32 cosc OK!
BlockArrays.BlockArray{T,N,R} Float32 cosd OK!
BlockArrays.BlockArray{T,N,R} Float32 cotd OK!
BlockArrays.BlockArray{T,N,R} Float32 cscd OK!
BlockArrays.BlockArray{T,N,R} Float32 secd OK!
BlockArrays.BlockArray{T,N,R} Float32 sind OK!
BlockArrays.BlockArray{T,N,R} Float32 tand OK!
BlockArrays.BlockArray{T,N,R} Float32 acosd OK!
BlockArrays.BlockArray{T,N,R} Float32 acotd OK!
BlockArrays.BlockArray{T,N,R} Float32 acscd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 asecd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float32 asind OK!
BlockArrays.BlockArray{T,N,R} Float32 atand OK!
BlockArrays.BlockArray{T,N,R} Float32 rad2deg OK!
BlockArrays.BlockArray{T,N,R} Float32 deg2rad OK!
BlockArrays.BlockArray{T,N,R} Float32 log OK!
BlockArrays.BlockArray{T,N,R} Float32 log2 OK!
BlockArrays.BlockArray{T,N,R} Float32 log10 OK!
BlockArrays.BlockArray{T,N,R} Float32 log1p OK!
BlockArrays.BlockArray{T,N,R} Float32 exponent OK!
BlockArrays.BlockArray{T,N,R} Float32 exp OK!
BlockArrays.BlockArray{T,N,R} Float32 exp2 OK!
BlockArrays.BlockArray{T,N,R} Float32 expm1 OK!
BlockArrays.BlockArray{T,N,R} Float32 cbrt OK!
BlockArrays.BlockArray{T,N,R} Float32 sqrt OK!
BlockArrays.BlockArray{T,N,R} Float32 erf OK!
BlockArrays.BlockArray{T,N,R} Float32 erfc OK!
BlockArrays.BlockArray{T,N,R} Float32 erfcx OK!
BlockArrays.BlockArray{T,N,R} Float32 erfi OK!
BlockArrays.BlockArray{T,N,R} Float32 dawson OK!
BlockArrays.BlockArray{T,N,R} Float32 ceil OK!
BlockArrays.BlockArray{T,N,R} Float32 floor OK!
BlockArrays.BlockArray{T,N,R} Float32 trunc OK!
BlockArrays.BlockArray{T,N,R} Float32 round OK!
BlockArrays.BlockArray{T,N,R} Float32 significand OK!
BlockArrays.BlockArray{T,N,R} Float32 maximum OK!
BlockArrays.BlockArray{T,N,R} Float32 minimum OK!
BlockArrays.BlockArray{T,N,R} Float32 sum OK!
BlockArrays.BlockArray{T,N,R} Float32 prod OK!
BlockArrays.BlockArray{T,N,R} Float32 .+ OK!
BlockArrays.BlockArray{T,N,R} Float32 .- OK!
BlockArrays.BlockArray{T,N,R} Float32 .* OK!
BlockArrays.BlockArray{T,N,R} Float32 ./ OK!
BlockArrays.BlockArray{T,N,R} Float32 .\ OK!
BlockArrays.BlockArray{T,N,R} Float32 .^ OK!
BlockArrays.BlockArray{T,N,R} Float32 + OK!
BlockArrays.BlockArray{T,N,R} Float32 - OK!
BlockArrays.BlockArray{T,N,R} Float32 min OK!
BlockArrays.BlockArray{T,N,R} Float32 max OK!
BlockArrays.BlockArray{T,N,R} Float32 div OK!
BlockArrays.BlockArray{T,N,R} Float32 mod OK!
BlockArrays.BlockArray{T,N,R} Float32 .== OK!
BlockArrays.BlockArray{T,N,R} Float32 .!= OK!
BlockArrays.BlockArray{T,N,R} Float32 .< OK!
BlockArrays.BlockArray{T,N,R} Float32 .<= OK!
BlockArrays.BlockArray{T,N,R} Float32 .> OK!
BlockArrays.BlockArray{T,N,R} Float32 .>= OK!
BlockArrays.BlockArray{T,N,R} Float64 - OK!
BlockArrays.BlockArray{T,N,R} Float64 ~ Skipped no method!
BlockArrays.BlockArray{T,N,R} Float64 conj OK!
BlockArrays.BlockArray{T,N,R} Float64 abs OK!
BlockArrays.BlockArray{T,N,R} Float64 sin OK!
BlockArrays.BlockArray{T,N,R} Float64 cos OK!
BlockArrays.BlockArray{T,N,R} Float64 tan OK!
BlockArrays.BlockArray{T,N,R} Float64 sinh OK!
BlockArrays.BlockArray{T,N,R} Float64 cosh OK!
BlockArrays.BlockArray{T,N,R} Float64 tanh OK!
BlockArrays.BlockArray{T,N,R} Float64 asin OK!
BlockArrays.BlockArray{T,N,R} Float64 acos OK!
BlockArrays.BlockArray{T,N,R} Float64 atan OK!
BlockArrays.BlockArray{T,N,R} Float64 asinh OK!
BlockArrays.BlockArray{T,N,R} Float64 acosh Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 atanh OK!
BlockArrays.BlockArray{T,N,R} Float64 sec OK!
BlockArrays.BlockArray{T,N,R} Float64 csc OK!
BlockArrays.BlockArray{T,N,R} Float64 cot OK!
BlockArrays.BlockArray{T,N,R} Float64 asec Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 acsc Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 acot OK!
BlockArrays.BlockArray{T,N,R} Float64 sech OK!
BlockArrays.BlockArray{T,N,R} Float64 csch OK!
BlockArrays.BlockArray{T,N,R} Float64 coth OK!
BlockArrays.BlockArray{T,N,R} Float64 asech OK!
BlockArrays.BlockArray{T,N,R} Float64 acsch OK!
BlockArrays.BlockArray{T,N,R} Float64 acoth Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 sinc OK!
BlockArrays.BlockArray{T,N,R} Float64 cosc OK!
BlockArrays.BlockArray{T,N,R} Float64 cosd OK!
BlockArrays.BlockArray{T,N,R} Float64 cotd OK!
BlockArrays.BlockArray{T,N,R} Float64 cscd OK!
BlockArrays.BlockArray{T,N,R} Float64 secd OK!
BlockArrays.BlockArray{T,N,R} Float64 sind OK!
BlockArrays.BlockArray{T,N,R} Float64 tand OK!
BlockArrays.BlockArray{T,N,R} Float64 acosd OK!
BlockArrays.BlockArray{T,N,R} Float64 acotd OK!
BlockArrays.BlockArray{T,N,R} Float64 acscd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 asecd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 asind OK!
BlockArrays.BlockArray{T,N,R} Float64 atand OK!
BlockArrays.BlockArray{T,N,R} Float64 rad2deg OK!
BlockArrays.BlockArray{T,N,R} Float64 deg2rad OK!
BlockArrays.BlockArray{T,N,R} Float64 log OK!
BlockArrays.BlockArray{T,N,R} Float64 log2 OK!
BlockArrays.BlockArray{T,N,R} Float64 log10 OK!
BlockArrays.BlockArray{T,N,R} Float64 log1p OK!
BlockArrays.BlockArray{T,N,R} Float64 exponent OK!
BlockArrays.BlockArray{T,N,R} Float64 exp OK!
BlockArrays.BlockArray{T,N,R} Float64 exp2 OK!
BlockArrays.BlockArray{T,N,R} Float64 expm1 OK!
BlockArrays.BlockArray{T,N,R} Float64 cbrt OK!
BlockArrays.BlockArray{T,N,R} Float64 sqrt OK!
BlockArrays.BlockArray{T,N,R} Float64 erf OK!
BlockArrays.BlockArray{T,N,R} Float64 erfc OK!
BlockArrays.BlockArray{T,N,R} Float64 erfcx OK!
BlockArrays.BlockArray{T,N,R} Float64 erfi OK!
BlockArrays.BlockArray{T,N,R} Float64 dawson OK!
BlockArrays.BlockArray{T,N,R} Float64 ceil OK!
BlockArrays.BlockArray{T,N,R} Float64 floor OK!
BlockArrays.BlockArray{T,N,R} Float64 trunc OK!
BlockArrays.BlockArray{T,N,R} Float64 round OK!
BlockArrays.BlockArray{T,N,R} Float64 significand OK!
BlockArrays.BlockArray{T,N,R} Float64 maximum OK!
BlockArrays.BlockArray{T,N,R} Float64 minimum OK!
BlockArrays.BlockArray{T,N,R} Float64 sum OK!
BlockArrays.BlockArray{T,N,R} Float64 prod OK!
BlockArrays.BlockArray{T,N,R} Float64 .+ OK!
BlockArrays.BlockArray{T,N,R} Float64 .- OK!
BlockArrays.BlockArray{T,N,R} Float64 .* OK!
BlockArrays.BlockArray{T,N,R} Float64 ./ OK!
BlockArrays.BlockArray{T,N,R} Float64 .\ OK!
BlockArrays.BlockArray{T,N,R} Float64 .^ OK!
BlockArrays.BlockArray{T,N,R} Float64 + OK!
BlockArrays.BlockArray{T,N,R} Float64 - OK!
BlockArrays.BlockArray{T,N,R} Float64 min OK!
BlockArrays.BlockArray{T,N,R} Float64 max OK!
BlockArrays.BlockArray{T,N,R} Float64 div OK!
BlockArrays.BlockArray{T,N,R} Float64 mod OK!
BlockArrays.BlockArray{T,N,R} Float64 .== OK!
BlockArrays.BlockArray{T,N,R} Float64 .!= OK!
BlockArrays.BlockArray{T,N,R} Float64 .< OK!
BlockArrays.BlockArray{T,N,R} Float64 .<= OK!
BlockArrays.BlockArray{T,N,R} Float64 .> OK!
BlockArrays.BlockArray{T,N,R} Float64 .>= OK!
BlockArrays.BlockArray{T,N,R} Float64 - OK!
BlockArrays.BlockArray{T,N,R} Float64 ~ Skipped no method!
BlockArrays.BlockArray{T,N,R} Float64 conj OK!
BlockArrays.BlockArray{T,N,R} Float64 abs OK!
BlockArrays.BlockArray{T,N,R} Float64 sin OK!
BlockArrays.BlockArray{T,N,R} Float64 cos OK!
BlockArrays.BlockArray{T,N,R} Float64 tan OK!
BlockArrays.BlockArray{T,N,R} Float64 sinh OK!
BlockArrays.BlockArray{T,N,R} Float64 cosh OK!
BlockArrays.BlockArray{T,N,R} Float64 tanh OK!
BlockArrays.BlockArray{T,N,R} Float64 asin OK!
BlockArrays.BlockArray{T,N,R} Float64 acos OK!
BlockArrays.BlockArray{T,N,R} Float64 atan OK!
BlockArrays.BlockArray{T,N,R} Float64 asinh OK!
BlockArrays.BlockArray{T,N,R} Float64 acosh Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 atanh OK!
BlockArrays.BlockArray{T,N,R} Float64 sec OK!
BlockArrays.BlockArray{T,N,R} Float64 csc OK!
BlockArrays.BlockArray{T,N,R} Float64 cot OK!
BlockArrays.BlockArray{T,N,R} Float64 asec Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 acsc Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 acot OK!
BlockArrays.BlockArray{T,N,R} Float64 sech OK!
BlockArrays.BlockArray{T,N,R} Float64 csch OK!
BlockArrays.BlockArray{T,N,R} Float64 coth OK!
BlockArrays.BlockArray{T,N,R} Float64 asech OK!
BlockArrays.BlockArray{T,N,R} Float64 acsch OK!
BlockArrays.BlockArray{T,N,R} Float64 acoth Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 sinc OK!
BlockArrays.BlockArray{T,N,R} Float64 cosc OK!
BlockArrays.BlockArray{T,N,R} Float64 cosd OK!
BlockArrays.BlockArray{T,N,R} Float64 cotd OK!
BlockArrays.BlockArray{T,N,R} Float64 cscd OK!
BlockArrays.BlockArray{T,N,R} Float64 secd OK!
BlockArrays.BlockArray{T,N,R} Float64 sind OK!
BlockArrays.BlockArray{T,N,R} Float64 tand OK!
BlockArrays.BlockArray{T,N,R} Float64 acosd OK!
BlockArrays.BlockArray{T,N,R} Float64 acotd OK!
BlockArrays.BlockArray{T,N,R} Float64 acscd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 asecd Skipped exception!
BlockArrays.BlockArray{T,N,R} Float64 asind OK!
BlockArrays.BlockArray{T,N,R} Float64 atand OK!
BlockArrays.BlockArray{T,N,R} Float64 rad2deg OK!
BlockArrays.BlockArray{T,N,R} Float64 deg2rad OK!
BlockArrays.BlockArray{T,N,R} Float64 log OK!
BlockArrays.BlockArray{T,N,R} Float64 log2 OK!
BlockArrays.BlockArray{T,N,R} Float64 log10 OK!
BlockArrays.BlockArray{T,N,R} Float64 log1p OK!
BlockArrays.BlockArray{T,N,R} Float64 exponent OK!
BlockArrays.BlockArray{T,N,R} Float64 exp OK!
BlockArrays.BlockArray{T,N,R} Float64 exp2 OK!
BlockArrays.BlockArray{T,N,R} Float64 expm1 OK!
BlockArrays.BlockArray{T,N,R} Float64 cbrt OK!
BlockArrays.BlockArray{T,N,R} Float64 sqrt OK!
BlockArrays.BlockArray{T,N,R} Float64 erf OK!
BlockArrays.BlockArray{T,N,R} Float64 erfc OK!
BlockArrays.BlockArray{T,N,R} Float64 erfcx OK!
BlockArrays.BlockArray{T,N,R} Float64 erfi OK!
BlockArrays.BlockArray{T,N,R} Float64 dawson OK!
BlockArrays.BlockArray{T,N,R} Float64 ceil OK!
BlockArrays.BlockArray{T,N,R} Float64 floor OK!
BlockArrays.BlockArray{T,N,R} Float64 trunc OK!
BlockArrays.BlockArray{T,N,R} Float64 round OK!
BlockArrays.BlockArray{T,N,R} Float64 significand OK!
BlockArrays.BlockArray{T,N,R} Float64 maximum OK!
BlockArrays.BlockArray{T,N,R} Float64 minimum OK!
BlockArrays.BlockArray{T,N,R} Float64 sum OK!
BlockArrays.BlockArray{T,N,R} Float64 prod OK!
BlockArrays.BlockArray{T,N,R} Float64 .+ OK!
BlockArrays.BlockArray{T,N,R} Float64 .- OK!
BlockArrays.BlockArray{T,N,R} Float64 .* OK!
BlockArrays.BlockArray{T,N,R} Float64 ./ OK!
BlockArrays.BlockArray{T,N,R} Float64 .\ OK!
BlockArrays.BlockArray{T,N,R} Float64 .^ OK!
BlockArrays.BlockArray{T,N,R} Float64 + OK!
BlockArrays.BlockArray{T,N,R} Float64 - OK!
BlockArrays.BlockArray{T,N,R} Float64 min OK!
BlockArrays.BlockArray{T,N,R} Float64 max OK!
BlockArrays.BlockArray{T,N,R} Float64 div OK!
BlockArrays.BlockArray{T,N,R} Float64 mod OK!
BlockArrays.BlockArray{T,N,R} Float64 .== OK!
BlockArrays.BlockArray{T,N,R} Float64 .!= OK!
BlockArrays.BlockArray{T,N,R} Float64 .< OK!
BlockArrays.BlockArray{T,N,R} Float64 .<= OK!
BlockArrays.BlockArray{T,N,R} Float64 .> OK!
BlockArrays.BlockArray{T,N,R} Float64 .>= OK!
BlockArrays.BlockArray{T,N,R} Int32 - OK!
BlockArrays.BlockArray{T,N,R} Int32 ~ OK!
BlockArrays.BlockArray{T,N,R} Int32 conj OK!
BlockArrays.BlockArray{T,N,R} Int32 abs OK!
BlockArrays.BlockArray{T,N,R} Int32 sin OK!
BlockArrays.BlockArray{T,N,R} Int32 cos OK!
BlockArrays.BlockArray{T,N,R} Int32 tan OK!
BlockArrays.BlockArray{T,N,R} Int32 sinh OK!
BlockArrays.BlockArray{T,N,R} Int32 cosh OK!
BlockArrays.BlockArray{T,N,R} Int32 tanh OK!
BlockArrays.BlockArray{T,N,R} Int32 asin Skipped exception!
BlockArrays.BlockArray{T,N,R} Int32 acos Skipped exception!
BlockArrays.BlockArray{T,N,R} Int32 atan OK!
BlockArrays.BlockArray{T,N,R} Int32 asinh OK!
BlockArrays.BlockArray{T,N,R} Int32 acosh Skipped exception!
BlockArrays.BlockArray{T,N,R} Int32 atanh Skipped exception!
BlockArrays.BlockArray{T,N,R} Int32 sec OK!
BlockArrays.BlockArray{T,N,R} Int32 csc OK!
BlockArrays.BlockArray{T,N,R} Int32 cot OK!
BlockArrays.BlockArray{T,N,R} Int32 asec OK!
BlockArrays.BlockArray{T,N,R} Int32 acsc OK!
BlockArrays.BlockArray{T,N,R} Int32 acot OK!
BlockArrays.BlockArray{T,N,R} Int32 sech OK!
BlockArrays.BlockArray{T,N,R} Int32 csch OK!
BlockArrays.BlockArray{T,N,R} Int32 coth OK!
BlockArrays.BlockArray{T,N,R} Int32 asech Skipped exception!
BlockArrays.BlockArray{T,N,R} Int32 acsch OK!
BlockArrays.BlockArray{T,N,R} Int32 acoth OK!
BlockArrays.BlockArray{T,N,R} Int32 sinc OK!
BlockArrays.BlockArray{T,N,R} Int32 cosc OK!
BlockArrays.BlockArray{T,N,R} Int32 cosd Error During Test
  Test threw an exception of type MethodError
  Expression: res ≈ func(full(BA_1))
  MethodError: Cannot `convert` an object of type Int64 to an object of type Union{Float64,Int32}
  This may have arisen from a call to the constructor Union{Float64,Int32}(...),
  since type constructors fall back to convert methods.
   in promote_op(::Base.#-, ::Type{Float64}, ::Type{Union{Float64,Int32}}) at ./number.jl:73
   in -(::BlockArrays.BlockArray{Float64,1,Array{Float64,1}}, ::Array{Union{Float64,Int32},1}) at ./arraymath.jl:76
   in #isapprox#2(::Float64, ::Int64, ::Base.LinAlg.#vecnorm, ::Function, ::BlockArrays.BlockArray{Float64,1,Array{Float64,1}}, ::Array{Union{Float64,Int32},1}) at ./linalg/generic.jl:574
   in isapprox(::BlockArrays.BlockArray{Float64,1,Array{Float64,1}}, ::Array{Union{Float64,Int32},1}) at ./linalg/generic.jl:574
   in eval_comparison(::Expr) at ./test.jl:169
   in macro expansion; at /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl:128 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:426
   in process_options(::Base.JLOptions) at ./client.jl:266
   in _start() at ./client.jl:322
ERROR: LoadError: There was an error during testing
 in record(::Base.Test.FallbackTestSet, ::Base.Test.Error) at ./test.jl:397
 in do_test(::Base.Test.Threw, ::Expr) at ./test.jl:281
 in macro expansion; at /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl:128 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl, in expression starting on line 108
=============================[ ERROR: BlockArrays ]=============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/BlockArrays/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: BlockArrays had test errors
 in #test#51(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:720
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
