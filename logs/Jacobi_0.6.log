>>> 'Pkg.add("Jacobi")' log
INFO: Cloning cache of Jacobi from https://github.com/pjabardo/Jacobi.jl.git
INFO: Installing Jacobi v0.3.0
INFO: Installing Polynomials v0.1.2
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Jacobi
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Jacobi")' log
Julia Version 0.6.0-dev.2896
Commit d168287 (2017-02-22 00:17 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (2416.66796875 MB free)
Uptime: 47334.0 sec
Load Avg:  1.037109375  1.041015625  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz    1827476 s       4918 s     213084 s    2251066 s         87 s
#2  3492 MHz     694605 s       1704 s     127580 s    3772177 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.3
 - Jacobi                        0.3.0
6 additional packages:
 - Compat                        0.19.0
 - CompilerTools                 0.2.1
 - DataStructures                0.5.2
 - DocOpt                        0.2.0
 - ParallelAccelerator           0.2.2              6da2e374 (dirty)
 - Polynomials                   0.1.2
INFO: Testing Jacobi

WARNING: deprecated syntax "local i, k, iter=0" at /home/vagrant/.julia/v0.6/Jacobi/src/jac_poly.jl:136.
Use "local i; local k; local iter=0" instead.

WARNING: deprecated syntax "abstract QUADRATURE_TYPE" at /home/vagrant/.julia/v0.6/Jacobi/src/gauss_quad.jl:2.
Use "abstract type QUADRATURE_TYPE end" instead.
WARNING: @test_approx_eq_eps is deprecated, use `@test L[i, k] ≈ Jacobi.legendre(z[k], m[i]) atol=1.0e-7` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 19
WARNING: @test_approx_eq_eps is deprecated, use `@test Jacobi.legendre(z[k], m[i]) ≈ Jacobi.jacobi(z[k], m[i], 0, 0) atol=10 * eps(1.0)` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 26
WARNING: @test_approx_eq_eps is deprecated, use `@test dL[i, k] ≈ Jacobi.dlegendre(z[k], m2[i]) atol=1.0e-7` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 41
WARNING: @test_approx_eq_eps is deprecated, use `@test d ≈ Jacobi.djacobi(z[k], m2[i], a, b) atol=5.0e-7` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 56
WARNING: @test_approx_eq_eps is deprecated, use `@test y ≈ 0 atol=500 * eps(1.0)` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 76
WARNING: @test_approx_eq_eps is deprecated, use `@test yb ≈ BigFloat(0) atol=500 * eps(BigFloat(1))` instead
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] @test_approx_eq_eps(::ANY, ::ANY, ::ANY) at ./deprecated.jl:1022
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 88
ERROR: LoadError: LoadError: MethodError: no method matching Polynomials.Poly{Int64}(::Array{Int64,1}, ::Symbol)
Closest candidates are:
  Polynomials.Poly{Int64}(::Any) where T at sysimg.jl:24
Stacktrace:
 [1] poly_chebyshev(::Int64, ::Type{Int64}, ::Symbol) at /home/vagrant/.julia/v0.6/Jacobi/src/polynomials.jl:18
 [2] poly_chebyshev(::Int64) at /home/vagrant/.julia/v0.6/Jacobi/src/polynomials.jl:12
 [3] include_from_node1(::String) at ./loading.jl:539
 [4] include(::String) at ./sysimg.jl:14
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/Jacobi/test/testjacobi.jl, in expression starting on line 154
while loading /home/vagrant/.julia/v0.6/Jacobi/test/runtests.jl, in expression starting on line 3
===============================[ ERROR: Jacobi ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Jacobi/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Jacobi had test errors

>>> End of log
