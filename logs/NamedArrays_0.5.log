>>> 'Pkg.add("NamedArrays")' log
INFO: Installing Combinatorics v0.3.2
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.2
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (989.87890625 MB free)
Uptime: 8252.0 sec
Load Avg:  0.9111328125  0.9521484375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     429133 s       2997 s      52386 s     245318 s         23 s
#2  3501 MHz     120857 s       3648 s      22306 s     656455 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.3.2
 - Compat                        0.19.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.2
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	0.017888119676826797	0.4963030828114543	0.49523906017054364	0.8969713012611005
two	0.18951303043728385	0.9937719413599084	0.1560587068888275	0.20375044219949334
a	45
b	35
c	74
d	11
e	3
f	83
construction, 2×3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.444193   0.262231   0.382595
b           │ 0.0469957   0.640394   0.542382 0.44419315841531537 0.44419315841531537
2×3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.444193   0.262231   0.382595
b     │ 0.0469957   0.640394   0.542382
2×3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.444193   0.262231   0.382595
b           │ 0.0469957   0.640394   0.542382
2×3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.444193   0.262231   0.382595
b     │ 0.0469957   0.640394   0.542382
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, getindex, setindex, 2×4 Named Array{Float64,2}
magnificent ╲ 7 │        一         二         三         四
────────────────┼───────────────────────────────────────
一              │ 0.0172955   0.711505   0.219158   0.897786
二              │  0.106712  0.0194972   0.590756   0.653123
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
0
0-element Named Array{Any,1}

[0.0822471 0.00160911 0.889175 0.41572; 0.448282 0.542818 0.883552 0.541015]
2×4 Named Array{Float64,2}
A ╲ B │          a           b           c           d
──────┼───────────────────────────────────────────────
one   │  0.0822471  0.00160911    0.889175     0.41572
two   │   0.448282    0.542818    0.883552    0.5410152×4 Named Array{Float64,2}
A ╲ B │          a           b           c           d
──────┼───────────────────────────────────────────────
one   │  0.0822471  0.00160911    0.889175     0.41572
two   │   0.448282    0.542818    0.883552    0.5410152×1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.144327       1.74723  …        -1.236       1.29812
2     │     -1.26729      0.966989  …     -0.746506       1.067311000×2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │    1.77768    0.193111
2     │  -0.193689   -0.349894
3     │   0.146461    0.956193
4     │   0.642261    0.839832
5     │   0.353435    -0.25525
6     │   -0.02861    0.608313
7     │  -0.540984    0.217029
8     │    -1.1541    0.890342
9     │    1.78864    -1.19071
⋮                ⋮           ⋮
992   │    1.03551    0.402515
993   │  -0.239379    -1.96668
994   │  -0.857081   0.0215741
995   │   0.294384     1.91783
996   │  -0.509088   -0.936773
997   │   0.297315    -1.52926
998   │    -1.5901    0.560583
999   │ -0.0531267   -0.276355
1000  │   0.355893    -1.399061000-element Named Array{Float64,1}
A    │ 
─────┼────────────
1    │ -0.00684247
2    │   -0.481369
3    │   -0.307959
4    │    0.588346
5    │    0.436029
6    │    -2.05774
7    │    0.452767
8    │    -1.81296
9    │  -0.0198608
⋮                ⋮
992  │    -1.40127
993  │    0.614436
994  │    0.401297
995  │    0.145762
996  │    0.366581
997  │     1.02721
998  │    0.677479
999  │   -0.166654
1000 │    0.5208212×2×2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.899404  0.459332
1           │ 0.180566  0.969893

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.862411  0.235206
1           │ 0.158168  0.410498
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.341707
2  │ 0.854519
2×2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.160856   0.17228
2     │ 0.874679  0.907794
2×2×2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.729231  0.0679298
2     │ 0.0792564   0.780285

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0512214   0.403993
2     │  0.437211    0.70535
2×2×2×2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.886485  0.247702
2     │ 0.111065  0.182497

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.511599  0.764562
2     │ 0.875213  0.042942

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.434245  0.328586
2     │ 0.475374  0.049071

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.107602  0.631039
2     │ 0.762299  0.804936
2×2×2×2×2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.855916  0.748853
2     │ 0.149311   0.50928

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.675251  0.0936402
2     │  0.116411   0.318767

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0489204   0.226357
2     │ 0.0978323   0.881811
⋮
1×2×2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.220904  0.742434

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.291501  0.528634
2×1×2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.899962
2     │ 0.417254

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.302327
2     │ 0.135927
2×2×1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.58942  0.176223
2     │ 0.865669  0.293245
1000×1000 Named sparse matrix with 98 Float64 nonzero entries:
	[17173839162019621584, 14343632987770563929]  =  0.27632373068534744
	[7467562274097903724 , 12809965746239821631]  =  0.0334512945903096
	[2267379803219259174 , 17095493447719212504]  =  0.9981085101287945
	[18301367769706361526,  7199089960335318010]  =  0.4051090798835235
	[212886737595870541  ,   273396578563598247]  =  0.8294501722398329
	[8856745381828013443 ,  4329451781928897369]  =  0.7868747676111254
	[1800328568888766379 ,  4329451781928897369]  =  0.7442995736774083
	[8237952535892822805 ,  1166092285267503990]  =  0.7320440386804101
	                                              ⋮
	[1566360107212290167 , 16077859356318100249]  =  0.9901676181239727
	[397394769374478572  , 14169799449801373117]  =  0.009905101227927648
	[12680114143357042360,  6332455606016291123]  =  0.701574958820421
	[6482319473474263274 , 15436097664388839821]  =  0.3076880188049509
	[6565262192402102057 ,   372001016642560619]  =  0.35195407480629504
	[3029872332119767940 ,  1523061068178304284]  =  0.6155507295666327
	[1309242526546184706 ,  1523061068178304284]  =  0.25938833834263986
	[14340416566338039723, 11527542315164007414]  =  0.956846349099651
	[6333909840472075512 , 13950575499123628905]  =  0.8805331572490729Timing named index: 0.000879817, array index: 0.000417804, named key: 0.073117722
Timing sum large sparse array: 0.016286671, named: 0.014735167
done!
INFO: NamedArrays tests passed

>>> End of log
