>>> 'Pkg.add("Metis")' log
INFO: Cloning cache of ArrayViews from https://github.com/JuliaLang/ArrayViews.jl.git
INFO: Cloning cache of AutoHashEquals from https://github.com/andrewcooke/AutoHashEquals.jl.git
INFO: Cloning cache of Clustering from https://github.com/JuliaStats/Clustering.jl.git
INFO: Cloning cache of LightGraphs from https://github.com/JuliaGraphs/LightGraphs.jl.git
INFO: Cloning cache of Metis from https://github.com/JuliaSparse/Metis.jl.git
INFO: Cloning cache of ParserCombinator from https://github.com/andrewcooke/ParserCombinator.jl.git
INFO: Installing ArrayViews v0.6.4
INFO: Installing AutoHashEquals v0.0.10
INFO: Installing BinDeps v0.4.2
INFO: Installing Blosc v0.1.6
INFO: Installing Clustering v0.5.0
INFO: Installing Combinatorics v0.3.2
INFO: Installing DataStructures v0.4.5
INFO: Installing Distances v0.3.2
INFO: Installing Docile v0.5.23
INFO: Installing FileIO v0.1.0
INFO: Installing GZip v0.2.19
INFO: Installing Graphs v0.6.0
INFO: Installing HDF5 v0.6.4
INFO: Installing Iterators v0.1.10
INFO: Installing JLD v0.6.3
INFO: Installing LegacyStrings v0.1.1
INFO: Installing LightGraphs v0.5.4
INFO: Installing LightXML v0.3.0
INFO: Installing MacroTools v0.3.0
INFO: Installing Metis v0.0.10
INFO: Installing ParserCombinator v1.7.9
INFO: Installing Polynomials v0.0.5
INFO: Installing Requires v0.2.2
INFO: Installing Rmath v0.1.2
INFO: Installing SHA v0.2.0
INFO: Installing StatsBase v0.8.3
INFO: Installing StatsFuns v0.3.0
INFO: Installing URIParser v0.1.5
INFO: Building Blosc
INFO: Building Rmath
INFO: Building HDF5
WARNING: `@linux_only` is deprecated, use `@static if is_linux()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @linux_only(::Any) at ./deprecated.jl:501
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/HDF5/deps/build.jl, in expression starting on line 5
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::Type{T}, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in satisfy!(::BinDeps.LibraryDependency, ::Array{DataType,1}) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:781 (repeats 2 times)
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:836 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/HDF5/deps/build.jl, in expression starting on line 27
INFO: Building LightXML
INFO: Building Metis
Installing dependency libmetis5 via `sudo apt-get install libmetis5`:
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  libmetis5
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 183 kB of archives.
After this operation, 441 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu/ trusty/universe libmetis5 amd64 5.1.0.dfsg-2 [183 kB]
dpkg-preconfigure: unable to re-open stdin: No such file or directory
Fetched 183 kB in 1s (96.7 kB/s)
Selecting previously unselected package libmetis5:amd64.
(Reading database ... 72437 files and directories currently installed.)
Preparing to unpack .../libmetis5_5.1.0.dfsg-2_amd64.deb ...
Unpacking libmetis5:amd64 (5.1.0.dfsg-2) ...
Setting up libmetis5:amd64 (5.1.0.dfsg-2) ...
Processing triggers for libc-bin (2.19-0ubuntu6.9) ...
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::BinDeps.AptGet, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in (::BinDeps.#kw##_find_library)(::Array{Any,1}, ::BinDeps.#_find_library, ::BinDeps.LibraryDependency) at ./<missing>:0
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:837 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Metis/deps/build.jl, in expression starting on line 44
INFO: Package database updated

>>> 'Pkg.test("Metis")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1688.1484375 MB free)
Uptime: 3658.0 sec
Load Avg:  0.94873046875  0.998046875  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     156774 s         60 s      21212 s     145003 s         10 s
#2  3499 MHz      42040 s        104 s      11214 s     302450 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - Metis                         0.0.10
28 additional packages:
 - ArrayViews                    0.6.4
 - AutoHashEquals                0.0.10
 - BinDeps                       0.4.2
 - Blosc                         0.1.6
 - Clustering                    0.5.0
 - Combinatorics                 0.3.2
 - Compat                        0.8.6
 - DataStructures                0.4.5
 - Distances                     0.3.2
 - Docile                        0.5.23
 - FileIO                        0.1.0
 - GZip                          0.2.19
 - Graphs                        0.6.0
 - HDF5                          0.6.4
 - Iterators                     0.1.10
 - JLD                           0.6.3
 - LegacyStrings                 0.1.1
 - LightGraphs                   0.5.4
 - LightXML                      0.3.0
 - MacroTools                    0.3.0
 - ParserCombinator              1.7.9
 - Polynomials                   0.0.5
 - Requires                      0.2.2
 - Rmath                         0.1.2
 - SHA                           0.2.0
 - StatsBase                     0.8.3
 - StatsFuns                     0.3.0
 - URIParser                     0.1.5
INFO: Testing Metis
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Graphs/src/common.jl:3
WARNING: Method definition (::Type{Graphs.KeyVertex})(Int64, #K<:Any) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:12 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:16.
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Graphs/src/common.jl:20
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{String,N}) at ./deprecated.jl:30
 in _graph_requires_code(::Symbol, ::Symbol, ::Vararg{Symbol,N}) at /home/vagrant/.julia/v0.5/Graphs/src/concepts.jl:69
 in @graph_requires(::Any, ::Symbol, ::Vararg{Symbol,N}) at /home/vagrant/.julia/v0.5/Graphs/src/concepts.jl:77
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Graphs/src/common.jl, in expression starting on line 36
WARNING: Method definition (::Type{Graphs.Edge})(Int64, #V<:Any, #V<:Any) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:54 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:60.
WARNING: Method definition (::Type{Graphs.ExEdge})(Int64, #V<:Any, #V<:Any, Base.Dict{String, Any}) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:72 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:83.
WARNING: Method definition (::Type{Graphs.TargetIterator})(#G<:Graphs.AbstractGraph, #EList<:Any) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:123 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:127.
WARNING: Method definition (::Type{Graphs.SourceIterator})(#G<:Graphs.AbstractGraph, #EList<:Any) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:141 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:145.
WARNING: Method definition edge_property_requirement(Graphs.AbstractEdgePropertyInspector{#T<:Any}, Graphs.AbstractGraph{#V<:Any, E<:Any}) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:164 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/common.jl:179.
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Graphs/src/common.jl:181
WARNING: symbol is deprecated, use Symbol instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in symbol(::String, ::Vararg{String,N}) at ./deprecated.jl:30
 in _graph_implements_code(::Symbol, ::Symbol, ::Vararg{Symbol,N}) at /home/vagrant/.julia/v0.5/Graphs/src/concepts.jl:53
 in @graph_implements(::Any, ::Symbol, ::Vararg{Symbol,N}) at /home/vagrant/.julia/v0.5/Graphs/src/concepts.jl:60
 in include_from_node1(::String) at ./loading.jl:426 (repeats 2 times)
 in eval(::Module, ::Any) at ./boot.jl:234
 in require(::Symbol) at ./loading.jl:357
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Graphs/src/edge_list.jl, in expression starting on line 9
WARNING: Method definition vertex_index(#V<:Union{Graphs.KeyVertex, Graphs.ExVertex}, Graphs.GenericGraph{#V<:Union{Graphs.KeyVertex, Graphs.ExVertex}, E<:Any, VList<:Any, EList<:Any, IncList<:Any}) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/graph.jl:65 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/graph.jl:67.
WARNING: Method definition (::Type{Graphs.GDistanceVisitor})(#G<:Graphs.AbstractGraph, #DMap<:Any) in module Graphs at /home/vagrant/.julia/v0.5/Graphs/src/breadth_first_visit.jl:107 overwritten at /home/vagrant/.julia/v0.5/Graphs/src/breadth_first_visit.jl:111.
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Graphs/src/dot.jl:80
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsBase.ji for module StatsBase.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/Rmath.ji for module Rmath.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/StatsFuns.ji for module StatsFuns.
WARNING: Method definition (::Type{ArrayViews.UnsafeContiguousView})(Ptr{#T<:Any}, Int64, Tuple{Vararg{Int64, #N<:Any}}) in module ArrayViews at /home/vagrant/.julia/v0.5/ArrayViews/src/arrviews.jl:18 overwritten at /home/vagrant/.julia/v0.5/ArrayViews/src/arrviews.jl:26.
WARNING: error while reinitializing value MethodTable(name=:restrict_crank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#M<:Any}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#N<:Any}}, Tuple{}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#restrict_crank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:restrict_crank, defs=TypeMapLevel(index_arg1=nothing, arg1=Array{Any, 1}[TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{1}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{0}}, Tuple{Int64, Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{Int64, Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{2}}, Tuple{Int64}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{4}}, Tuple{}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#M<:Any}}, Tuple{Vararg{Int64, #N<:Any}}}, tvars=svec(#M<:Any, #N<:Any), simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{ArrayViews.#restrict_crank, Type{ArrayViews.ContRank{#N<:Any}}, Tuple{}}, tvars=#N<:Any, simplesig=nothing, guardsigs=svec(), func=ArrayViews.restrict_crank(...), isleafsig=false, issimplesig=false, va=false), any=nothing, key=ArrayViews.#restrict_crank)], index_targ=nothing, targ=nothing, list=nothing, any=nothing, key=#<null>), cache=nothing, max_args=3, kwsorter=#<null>, module=ArrayViews, =0, =0):
OutOfMemoryError()
WARNING: could not import Base.complement into LightGraphs
WARNING: Method definition (::Type{LightGraphs.TreeBFSVisitor})(Any) in module LightGraphs at /home/vagrant/.julia/v0.5/LightGraphs/src/traversals/bfs.jl:134 overwritten at deprecated.jl:49.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.5/HDF5.ji for module HDF5.
WARNING: error while reinitializing value MethodTable(name=:add_format, defs=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Any, Any, Any, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Any, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Union{AbstractArray{T<:Any, 1}, Tuple, String}, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Tuple{Vararg{#T<:Array{UInt8, 1}, #N<:Any}}, Any}, tvars=svec(#sym<:Any, #T<:Array{UInt8, 1}, #N<:Any), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), any=nothing, key=#<null>), max_args=4, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_format(...):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:add_saver, defs=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{#sym<:Any}}, Symbol}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol), isleafsig=false, issimplesig=true, va=false)], list=nothing, any=nothing, key=#<null>), max_args=3, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
ERROR: LoadError: Failed to precompile LightGraphs to /home/vagrant/.julia/lib/v0.5/LightGraphs.ji
 in compilecache(::String) at ./loading.jl:505
 in require(::Symbol) at ./loading.jl:364
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Metis/test/runtests.jl, in expression starting on line 2
================================[ ERROR: Metis ]================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Metis/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Metis had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
