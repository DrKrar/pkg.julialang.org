>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (424.15234375 MB free)
Uptime: 5220.0 sec
Load Avg:  1.08642578125  1.61376953125  1.73388671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     247308 s         51 s      33142 s     187104 s         15 s
#2  3500 MHz     136009 s        104 s      25462 s     342347 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.8.3
2 additional packages:
 - Compat                        0.18.0
 - DoubleDouble                  0.2.0
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.107583 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.355855; 0.0 0.119219 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0403989; 0.0 0.0 0.0402932 0.0 0.0 0.0 0.0 0.0 0.0 0.103445; 0.0 0.0 0.0 0.34536 0.0 0.0 0.0 0.0 0.0 0.146348; 0.0 0.0 0.0 0.0 0.25765 0.0 0.0 0.0 0.0 0.380638; 0.0 0.0 0.0 0.0 0.0 0.725092 0.0 0.0 0.0 0.730562; 0.0 0.0 0.0 0.0 0.0 0.0 0.00496491 0.0 0.0 0.684053; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.484293 0.0 0.78408; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.822051 0.337436; 0.355855 0.0403989 0.103445 0.146348 0.380638 0.730562 0.684053 0.78408 0.337436 0.365987]
(U,Lambda) = eig(full(A)) = ([-1.06764,0.0391198,0.0750395,0.119079,0.173924,0.304285,0.352725,0.62159,0.809229,1.84514],
[-0.211241 0.0573685 0.712799 0.106855 0.610824 0.171386 -0.0678384 0.0732242 -0.0182031 -0.140752; -0.0237462 0.00556665 0.0596071 -0.993958 0.0840953 0.0206802 -0.00808524 0.00850542 -0.00210138 -0.0160868; -0.0651362 0.973014 -0.194069 0.0045326 0.0881524 0.0371221 -0.0154731 0.0188219 -0.00482849 -0.0393906; -0.0722554 0.0052745 0.0352908 -0.00223267 -0.0972114 -0.337536 -0.92863 0.0560361 -0.0113236 -0.0670629; -0.200367 0.0192245 0.135875 -0.00948249 -0.517705 0.773242 -0.187098 0.11062 -0.0247682 -0.164787; -0.284293 0.0117545 0.073259 -0.00416159 -0.15094 -0.16447 0.0916868 -0.746555 -0.311646 -0.448272; -0.444912 -0.221051 -0.636328 0.0206935 0.461038 0.216504 -0.0919244 0.117333 -0.0305268 -0.255477; -0.352461 0.0194395 0.124888 -0.00741133 -0.287682 -0.412647 0.278503 0.604019 -0.0866071 -0.395979; -0.124573 0.00475688 0.0294453 -0.00165705 -0.0592873 -0.0617403 0.0335999 -0.178038 0.944487 -0.226673; 0.697629 -0.0110371 -0.0651857 0.0034521 0.113876 0.0947352 -0.0467327 0.105767 -0.0358914 -0.687262])
Remedy 3 
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:350 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:348 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:340 [inlined]
 in macro expansion at ./multidimensional.jl:298 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:291
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
