>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages
INFO: Nothing to be done
INFO: METADATA is out-of-date — you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.0-pre+5688
Commit da9c28e (2016-07-25 21:05 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (468.921875 MB free)
Uptime: 3486.0 sec
Load Avg:  0.99462890625  0.96875  0.9140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     111317 s         97 s      25475 s     177090 s          9 s
#2  3499 MHz      69804 s         40 s      20954 s     239812 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Arrowhead                     0.0.1
 - JSON                          0.6.0
13 additional packages:
 - ColorTypes                    0.2.5
 - ColorVectorSpace              0.1.5
 - Colors                        0.6.6
 - Compat                        0.8.6
 - DoubleDouble                  0.2.0
 - FileIO                        0.1.0
 - FixedPointNumbers             0.1.4
 - Graphics                      0.1.3
 - Images                        0.5.5              8840a952 (dirty)
 - Reexport                      0.0.3
 - SIUnits                       0.0.6
 - TexExtensions                 0.0.3
 - Zlib                          0.1.12
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.581097 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.556514; 0.0 0.453359 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.212193; 0.0 0.0 0.207149 0.0 0.0 0.0 0.0 0.0 0.0 0.89729; 0.0 0.0 0.0 0.388959 0.0 0.0 0.0 0.0 0.0 0.737919; 0.0 0.0 0.0 0.0 0.0173014 0.0 0.0 0.0 0.0 0.903228; 0.0 0.0 0.0 0.0 0.0 0.00272816 0.0 0.0 0.0 0.660073; 0.0 0.0 0.0 0.0 0.0 0.0 0.909766 0.0 0.0 0.168867; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.582858 0.0 0.493221; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.799476 0.708803; 0.556514 0.212193 0.89729 0.737919 0.903228 0.660073 0.168867 0.493221 0.708803 0.668644]
(U,Lambda) = eig(full(A)) = ([-1.4722,0.00755609,0.114879,0.320534,0.448796,0.516043,0.582091,0.738554,0.906868,2.44821],
[-0.180438 0.00587151 0.0791949 0.148797 -0.0863668 -0.61473 0.657087 -0.270996 -0.0290759 0.218164; -0.0733633 0.00288022 0.0415918 0.111297 -0.954955 0.243249 0.00193373 -0.0570476 -0.00796368 0.077857; -0.35571 0.0272035 0.645181 -0.551322 0.0762401 0.208739 0.0028075 -0.129466 -0.0218262 0.29306; -0.263955 0.0117074 0.178624 0.751316 0.253204 0.417253 0.00448236 -0.161842 -0.0242507 0.262287; -0.403702 0.560843 -0.614125 -0.207515 0.0429788 0.130138 0.00187612 -0.0960194 -0.0172818 0.271961; -0.297938 -0.82731 -0.39048 -0.144697 0.0303824 0.0924036 0.00133657 -0.0687805 -0.0124258 0.197563; -0.047197 0.0011326 0.0140945 0.0199659 -0.00752152 -0.0308203 -0.000604578 0.0756242 0.991964 0.0803418; -0.15978 0.00518781 0.0699238 0.130989 -0.0755386 -0.530455 -0.75378 -0.242892 -0.0259091 0.193535; -0.207723 0.00541605 0.0686912 0.103103 -0.0415 -0.179704 -0.00382513 0.89208 -0.112336 0.314668; 0.66574 -0.00605115 -0.0663452 -0.0696673 0.020532 0.0718589 0.00117314 -0.0766741 -0.0170204 0.731945])
Remedy 3 
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:343 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:341 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:333 [inlined]
 in macro expansion at ./multidimensional.jl:291 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:284
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
