>>> 'Pkg.add("Arrowhead")' log
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.0-rc4+0
Commit 9c76c3e (2016-09-09 01:43 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (454.94921875 MB free)
Uptime: 40394.0 sec
Load Avg:  1.06640625  1.9638671875  1.7109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz    1229530 s         54 s     168613 s    2190191 s        177 s
#2  3501 MHz     424059 s        201 s      90405 s    3283675 s         10 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
6 required packages:
 - Arrowhead                     0.0.1
 - ColorSchemes                  1.0.0
 - ColorTypes                    0.2.6
 - ColorVectorSpace              0.1.8
 - Compat                        0.9.2
 - JSON                          0.7.0
19 additional packages:
 - BinDeps                       0.4.5
 - Clustering                    0.6.0
 - Colors                        0.6.7
 - Distances                     0.3.2
 - DoubleDouble                  0.2.0
 - FileIO                        0.1.2
 - FixedPointNumbers             0.1.6
 - Graphics                      0.1.3
 - ImageMagick                   0.1.7
 - Images                        0.5.10
 - Reexport                      0.0.3
 - Rmath                         0.1.3
 - SHA                           0.2.1
 - SIUnits                       0.0.6
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.1
 - TexExtensions                 0.0.3
 - URIParser                     0.1.6
 - Zlib                          0.1.12
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.867668 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.99104; 0.0 0.160787 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.535916; 0.0 0.0 0.430799 0.0 0.0 0.0 0.0 0.0 0.0 0.441561; 0.0 0.0 0.0 0.785136 0.0 0.0 0.0 0.0 0.0 0.84715; 0.0 0.0 0.0 0.0 0.622056 0.0 0.0 0.0 0.0 0.514773; 0.0 0.0 0.0 0.0 0.0 0.537133 0.0 0.0 0.0 0.437972; 0.0 0.0 0.0 0.0 0.0 0.0 0.0765073 0.0 0.0 0.785987; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.489589 0.0 0.83221; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.112834 0.479366; 0.99104 0.535916 0.441561 0.84715 0.514773 0.437972 0.785987 0.83221 0.479366 0.977713]
(U,Lambda) = eig(full(A)) = ([-1.32977,0.0995754,0.139171,0.259726,0.441453,0.525326,0.587686,0.682698,0.826233,2.82813],
[-0.296564 0.0255149 -0.0406829 -0.172863 0.0511239 0.0648137 0.173511 -0.37485 0.750302 -0.373464; -0.236425 0.173133 -0.741449 0.574384 -0.0419827 -0.0329147 -0.0615372 0.0718405 -0.0252639 -0.148434; -0.164923 0.0263624 -0.0452804 -0.273706 -0.911254 -0.104585 -0.137965 0.12264 -0.0350293 -0.136075; -0.263399 0.0244361 -0.0392193 -0.170977 0.0541957 0.0730031 0.210315 -0.578587 -0.64664 -0.306344; -0.173428 0.0194832 -0.0318801 -0.150655 0.0626688 0.119149 0.734177 0.593899 -0.0790905 -0.17239; -0.154266 0.0197937 -0.0329119 -0.167418 0.100644 0.83048 -0.424683 0.210503 -0.0475241 -0.141234; -0.367527 -0.673783 0.375098 0.454904 -0.0473533 -0.0392086 -0.0753717 0.0907141 -0.0328873 -0.211029; -0.300787 0.0421958 -0.0710224 -0.383917 0.380121 -0.521383 -0.415856 0.301508 -0.0775493 -0.262908; -0.218506 0.714951 0.54431 0.346053 -0.0320728 -0.0260189 -0.0494851 0.0588524 -0.021079 -0.130427; 0.657575 -0.019775 0.0299053 0.106041 -0.0219868 -0.0223891 -0.0490192 0.069963 -0.0313701 -0.738781])
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:350 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:348 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:340 [inlined]
 in macro expansion at ./multidimensional.jl:298 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:291
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 218
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
