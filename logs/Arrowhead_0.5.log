>>> 'Pkg.add("Arrowhead")' log
INFO: Cloning cache of Arrowhead from https://github.com/ivanslapnicar/Arrowhead.jl.git
INFO: Cloning cache of DoubleDouble from https://github.com/simonbyrne/DoubleDouble.jl.git
INFO: Installing Arrowhead v0.0.1
INFO: Installing DoubleDouble v0.2.0
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Arrowhead
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Arrowhead")' log
Julia Version 0.5.0-dev+5243
Commit bd2ac12* (2016-07-08 21:52 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing Arrowhead
There are four tests for arrowhead matrices, a random matrix test and three
tests from the arrowhead paper [1] (see README for details)

tols = [100.0,100.0,100.0,100.0,100.0] = [100.0,100.0,100.0,100.0,100.0]

1st test - Random SymArrow matrix

A = Arrowhead.GenSymArrow(10,10) = [0.262363 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.780007; 0.0 0.526868 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0122332; 0.0 0.0 0.373242 0.0 0.0 0.0 0.0 0.0 0.0 0.601637; 0.0 0.0 0.0 0.370808 0.0 0.0 0.0 0.0 0.0 0.825137; 0.0 0.0 0.0 0.0 0.516 0.0 0.0 0.0 0.0 0.58019; 0.0 0.0 0.0 0.0 0.0 0.805879 0.0 0.0 0.0 0.807576; 0.0 0.0 0.0 0.0 0.0 0.0 0.944964 0.0 0.0 0.178424; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.722152 0.0 0.240431; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.958159 0.667289; 0.780007 0.0122332 0.601637 0.825137 0.58019 0.807576 0.178424 0.240431 0.667289 0.977558]
(U,Lambda) = eig(full(A)) = ([-1.05272,0.297856,0.372399,0.480862,0.526864,0.669061,0.733363,0.910734,0.946083,2.57349],
[-0.388745 -0.838695 -0.00803666 0.182363 -0.000982538 0.200022 -0.0669232 0.0701273 -0.00675659 0.250392; -0.00507594 0.00203857 8.97863e-5 -0.0135836 0.999838 0.00897254 -0.00239404 0.00185769 -0.000172827 0.00443454; -0.276532 0.304567 0.808833 0.285581 -0.00130485 0.212109 -0.0675126 0.0652491 -0.00622025 0.202865; -0.379909 0.431649 -0.587958 0.383008 -0.00176166 0.28853 -0.091971 0.0890848 -0.00849489 0.27792; -0.242406 0.101501 0.00458063 -0.84351 -0.0177921 0.395326 -0.107866 0.0856795 -0.00798959 0.209208; -0.284785 0.0606657 0.00211216 -0.126931 0.000964351 -0.615589 0.450038 0.448957 -0.0341137 0.338955; -0.058539 0.0105225 0.000353297 -0.0196394 0.000142184 -0.0674446 0.0340749 -0.303852 -0.944158 0.0812837; -0.0887855 0.0216254 0.000779362 -0.0509025 0.000410197 -0.472297 -0.866687 0.0743194 -0.00635892 0.0963494; -0.217494 0.0385668 0.00129153 -0.071419 0.000515487 -0.240724 0.119956 -0.820204 0.327272 0.306476; 0.65542 -0.038163 -0.00113373 0.0510844 -0.000333179 0.104292 -0.0404109 0.0582924 -0.00592253 0.7419])
Remedy 3 
ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64
This may have arisen from a call to the constructor Float64(...),
since type constructors fall back to convert methods.
 in macro expansion at ./multidimensional.jl:285 [inlined]
 in macro expansion at ./cartesian.jl:64 [inlined]
 in macro expansion at ./multidimensional.jl:283 [inlined]
 in _unsafe_getindex! at ./multidimensional.jl:0 [inlined]
 in macro expansion at ./multidimensional.jl:233 [inlined]
 in _unsafe_getindex(::Base.LinearFast, ::Array{Float64,2}, ::Array{Any,1}, ::Array{Int64,1}) at ./multidimensional.jl:226
 in aheigall(::Arrowhead.SymArrow{Float64}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.5/Arrowhead/src/arrowhead3.jl:540
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl, in expression starting on line 198
==============================[ ERROR: Arrowhead ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/Arrowhead/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Arrowhead had test errors
 in #test#51(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:720
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:255
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
