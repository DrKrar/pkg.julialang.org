>>> 'Pkg.add("DiffEqBiological")' log
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffEqBase v0.12.1
INFO: Installing DiffEqBiological v0.0.1
INFO: Installing DiffEqJump v0.2.0
INFO: Installing MacroTools v0.3.6
INFO: Installing Parameters v0.7.2
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.2.0
INFO: Installing SimpleTraits v0.4.0
INFO: Package database updated

>>> 'Pkg.test("DiffEqBiological")' log
Julia Version 0.6.0-pre.alpha.241
Commit 52f04d2 (2017-03-23 18:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1805.375 MB free)
Uptime: 23146.0 sec
Load Avg:  0.9677734375  1.0107421875  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1353033 s         54 s     110866 s     604665 s         60 s
#2  3500 MHz     642572 s         94 s      77246 s    1507356 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqBiological              0.0.1
 - JSON                          0.8.3
10 additional packages:
 - Compat                        0.21.0
 - DataStructures                0.5.3
 - DiffEqBase                    0.12.1
 - DiffEqJump                    0.2.0
 - MacroTools                    0.3.6
 - Parameters                    0.7.2
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.2.0
 - SimpleTraits                  0.4.0
INFO: Computing test dependencies for DiffEqBiological...
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.4.0
INFO: Installing DiffBase v0.1.0
INFO: Installing Distances v0.4.1
INFO: Installing ForwardDiff v0.4.1
INFO: Installing GenericSVD v0.0.2
INFO: Installing Hiccup v0.1.1
INFO: Installing InplaceOps v0.1.0
INFO: Installing Iterators v0.3.0
INFO: Installing Juno v0.2.7
INFO: Installing LineSearches v0.1.5
INFO: Installing Media v0.2.5
INFO: Installing NLsolve v0.9.1
INFO: Installing NaNMath v0.2.2
INFO: Installing Optim v0.7.8
INFO: Installing OrdinaryDiffEq v1.5.0
INFO: Installing PolynomialFactors v0.0.3
INFO: Installing Polynomials v0.1.3
INFO: Installing PositiveFactorizations v0.0.4
INFO: Installing Primes v0.1.3
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Roots v0.3.0
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StochasticDiffEq v1.2.1
INFO: Testing DiffEqBiological

WARNING: deprecated syntax "abstract AbstractReaction" at /home/vagrant/.julia/v0.6/DiffEqBiological/src/DiffEqBiological.jl:6.
Use "abstract type AbstractReaction end" instead.

WARNING: deprecated syntax "abstract AbstractJump" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:12.
Use "abstract type AbstractJump end" instead.

WARNING: deprecated syntax "abstract AbstractAggregatorAlgorithm" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:13.
Use "abstract type AbstractAggregatorAlgorithm end" instead.

WARNING: deprecated syntax "abstract AbstractJumpAggregator" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:14.
Use "abstract type AbstractJumpAggregator end" instead.

WARNING: deprecated syntax "abstract AbstractJumpProblem{P,J}<:DEProblem" at /home/vagrant/.julia/v0.6/DiffEqJump/src/DiffEqJump.jl:15.
Use "abstract type AbstractJumpProblem{P,J}<:DEProblem end" instead.
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:23
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/extended_jump_array.jl:23
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/coupled_array.jl:35
WARNING: Base.linearindexing is deprecated, use Base.IndexStyle instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqJump/src/coupled_array.jl:35
  1.105634 seconds (8.31 M allocations: 728.450 MiB, 10.94% gc time)
Test Summary:   | Pass  Total
Gillespie Tests |    1      1
 21.957160 seconds (24.27 M allocations: 1.670 GiB, 2.86% gc time)
Solve the Gillespie Problem
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl:15
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl:15
WARNING: Base.LinearFast is deprecated, use Base.IndexLinear instead.
  likely near /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl:15
  0.460433 seconds (2.92 M allocations: 62.358 MiB, 3.33% gc time)
Add ODE to Gillespie Problem
Turn Gillespie Problem into SDE
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 56
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18
 [8] #solve#35(::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [9] solve(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##27#29,DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##28#30{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void},DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{}},Void,Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,2,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64},DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:6
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [13] macro expansion at ./test.jl:853 [inlined]
 [14] macro expansion at ./util.jl:237 [inlined]
 [15] anonymous at ./<missing>:?
 [16] include_from_node1(::String) at ./loading.jl:539
 [17] include(::String) at ./sysimg.jl:14
 [18] process_options(::Base.JLOptions) at ./client.jl:305
 [19] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 56
Now mix constant rate reactions
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 63
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 63
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}}, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:95
 [5] (::DiffEqBase.#kw##init)(::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at ./<missing>:0
 [6] #init#36(::DiffEqBase.CallbackSet{Tuple{},Tuple{}}, ::Array{Float64,1}, ::Tuple{Bool,Bool}, ::Array{Any,1}, ::Function, ::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:19
 [7] init(::DiffEqJump.JumpProblem{DiffEqBase.SDEProblem{DiffEqJump.ExtendedJumpArray{Array{Float64,1},Array{Float64,1}},Float64,true,true,:Diagonal,DiffEqJump.##15#17{DiffEqBase.SDEProblem{Array{Float64,1},Float64,true,true,:Diagonal,##3#4,##5#6,Base.Random.#randn!},DiffEqJump.JumpSet{Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Tuple{DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}}},DiffEqJump.ConstantRateJump{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}},##5#6,Base.Random.#randn!},DiffEqJump.Direct,DiffEqBase.CallbackSet{Tuple{DiffEqBase.ContinuousCallback{DiffEqJump.##31#33,DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},DiffEqJump.##32#34{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}},Float64,Int64,Void}},Tuple{DiffEqBase.DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}}}}},DiffEqJump.DirectJumpAggregation{Float64,Tuple{DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##6#8{DiffEqBiological.Reaction{Float64,Int64,1,2}}},Tuple{DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,2,2}},DiffEqBiological.##7#9{DiffEqBiological.Reaction{Float64,Int64,1,2}}}},Tuple{DiffEqJump.VariableRateJump{DiffEqBiological.##11#13{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},DiffEqBiological.##12#14{DiffEqBiological.VariableRateReaction{Float64,Int64,Void,1,2}},Void,Float64,Int64}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/DiffEqJump/src/solve.jl:18 (repeats 2 times)
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] macro expansion at /home/vagrant/.julia/v0.6/DiffEqBiological/test/runtests.jl:6 [inlined]
 [11] macro expansion at ./test.jl:853 [inlined]
 [12] macro expansion at ./util.jl:237 [inlined]
 [13] anonymous at ./<missing>:?
 [14] include_from_node1(::String) at ./loading.jl:539
 [15] include(::String) at ./sysimg.jl:14
 [16] process_options(::Base.JLOptions) at ./client.jl:305
 [17] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqBiological/test/variable_rate_reactions.jl, in expression starting on line 63
Test Summary:                | Pass  Total
Variable Rate Reaction Tests |    4      4
 76.528244 seconds (209.59 M allocations: 4.729 GiB, 2.17% gc time)
elapsed time: 100.101318026 seconds
INFO: DiffEqBiological tests passed
INFO: Removing Calculus v0.2.2
INFO: Removing Combinatorics v0.4.0
INFO: Removing DiffBase v0.1.0
INFO: Removing Distances v0.4.1
INFO: Removing ForwardDiff v0.4.1
INFO: Removing GenericSVD v0.0.2
INFO: Removing Hiccup v0.1.1
INFO: Removing InplaceOps v0.1.0
INFO: Removing Iterators v0.3.0
INFO: Removing Juno v0.2.7
INFO: Removing LineSearches v0.1.5
INFO: Removing Media v0.2.5
INFO: Removing NLsolve v0.9.1
INFO: Removing NaNMath v0.2.2
INFO: Removing Optim v0.7.8
INFO: Removing OrdinaryDiffEq v1.5.0
INFO: Removing PolynomialFactors v0.0.3
INFO: Removing Polynomials v0.1.3
INFO: Removing PositiveFactorizations v0.0.4
INFO: Removing Primes v0.1.3
INFO: Removing ResettableStacks v0.1.0
INFO: Removing Roots v0.3.0
INFO: Removing SpecialFunctions v0.1.1
INFO: Removing StochasticDiffEq v1.2.1

>>> End of log
