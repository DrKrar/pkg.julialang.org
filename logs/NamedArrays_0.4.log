>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (854.92578125 MB free)
Uptime: 7892.0 sec
Load Avg:  0.98486328125  0.9697265625  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     367898 s         54 s      31815 s     305779 s          9 s
#2  3500 MHz     219141 s         89 s      28193 s     514875 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.6885468495136295	.7045381395859256	.4385972804564413	.6399281207973959
two	.7840214380312729	.2514285117747581	.0943065830776475	.19916643642464127
a	86
b	51
c	66
d	52
e	48
f	63
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.63962  0.283707  0.838145
b           │ 0.196286  0.797271  0.920542 0.6396203526289035 0.6396203526289035
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.63962  0.283707  0.838145
b     │ 0.196286  0.797271  0.920542
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.63962  0.283707  0.838145
b           │ 0.196286  0.797271  0.920542
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.63962  0.283707  0.838145
b     │ 0.196286  0.797271  0.920542
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │  0.62055  0.580757  0.960829  0.547148
er              │ 0.585419  0.777439  0.960241  0.713423
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140061795220144
0-element Named Array{Any,1}

[0.9161436262327336 0.7535498492329571 0.9970715388384852 0.7120633578206046
 0.09211264751977022 0.6661538133057083 0.07921435563405099 0.8891421769594368]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.916144    0.75355   0.997072   0.712063
two   │ 0.0921126   0.666154  0.0792144   0.8891422x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.916144    0.75355   0.997072   0.712063
two   │ 0.0921126   0.666154  0.0792144   0.8891422x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │   -0.646967      1.63548  …     0.858461     0.256994
2     │    -0.58271     -1.43266  …    -0.701892     0.3844221000x2 Named Array{Float64,2}
A ╲ B │           1            2
──────┼─────────────────────────
1     │     3.16594      1.19023
2     │     0.22834    -0.294408
3     │   -0.921078      1.99366
4     │   -0.567014     0.895132
5     │    0.863332     -1.13218
6     │    0.361853      -1.5719
7     │   -0.336176     0.681282
8     │     1.04054     0.413802
9     │   -0.693285    -0.389932
⋮                 ⋮            ⋮
992   │     0.75847      1.43845
993   │   -0.459694    -0.533286
994   │    0.794722     0.263749
995   │     1.74915      1.91646
996   │    0.588599    -0.433655
997   │     -0.3215  -0.00430815
998   │    0.534726    -0.809088
999   │     -1.2539    0.0277376
1000  │     -1.6403        1.1471000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.33276
2    │  0.0521129
3    │  0.0660326
4    │   -1.90758
5    │    2.01693
6    │   0.158386
7    │  -0.340825
8    │    -1.0401
9    │  -0.732032
⋮               ⋮
992  │   -1.85267
993  │   0.747328
994  │    1.14776
995  │   0.087336
996  │   0.371238
997  │  -0.792977
998  │  -0.135274
999  │ -0.0979362
1000 │  -0.4696162x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.346722  0.996321
1           │ 0.896068  0.463166

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.379017  0.489297
1           │ 0.297359   0.96695
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.387953
2  │ 0.725595
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.643771   0.111229
2     │ 0.0332334   0.299815
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.222994  0.361311
2     │ 0.353328  0.612045

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.970702  0.489544
2     │ 0.528953  0.736518
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.354735  0.445582
2     │ 0.469174   0.21499

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.389197  0.0810809
2     │   0.67068   0.139006

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.141408  0.154418
2     │ 0.117582   0.15712

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.536306  0.433763
2     │ 0.995082   0.76138
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.221373  0.253125
2     │ 0.212286  0.314153

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.218691  0.989162
2     │ 0.531715  0.295308

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.492475  0.278254
2     │ 0.412299  0.838618
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.703265  0.943813

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.367243  0.0801749
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.724053
2     │ 0.362993

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.462846
2     │ 0.457513
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.69057  0.419315
2     │ 0.698501  0.952589
1000×1000 Named sparse matrix with 105 Float64 nonzero entries:
	[17383975982595546373,  5004131969199419793]  =  0.12361469256328084
	[2072770496586688023 , 14033074738777421392]  =  0.11777721772466387
	[1831003761424276165 , 11080872162023102847]  =  0.6376555115558293
	[8586548853081112102 , 11080872162023102847]  =  0.6398559200891245
	[8265524791738013937 , 18443816037252674910]  =  0.1865859966354786
	[14026963558639697815,  7425701996526302553]  =  0.9863077889508447
	[7011600752848376140 ,  8720304024814141479]  =  0.6581094507434606
	[4214085865611670439 ,   906960604709401733]  =  0.05089763273592851
	                                              ⋮
	[16083059188908835467,  6738482027934271349]  =  0.916099996757139
	[3945256368785098242 , 11993454575275700781]  =  0.7057211198186233
	[16544335554558850098,  8779884342238752210]  =  0.3179160488888755
	[5723128691850249417 , 13970367575607681105]  =  0.33385156024661145
	[13769040811181486455, 13970367575607681105]  =  0.24962965392712366
	[17508789370476597174,  3279378535085980212]  =  0.9235248286091693
	[12020782256748308824, 12020782256748308824]  =  0.24014288208778334
	[7011600752848376140 , 15240003619098155971]  =  0.206669843538706
	[17436498189161857304, 14599810768241287016]  =  0.22826339750466262Timing named index: 0.000674003, array index: 0.00042627, named key: 0.088898677
Timing sum large sparse array: 0.01174366, named: 0.024252057
done!
INFO: NamedArrays tests passed

>>> End of log
