>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (818.47265625 MB free)
Uptime: 8484.0 sec
Load Avg:  1.0029296875  0.966796875  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     381170 s         45 s      30080 s     350435 s         13 s
#2  3500 MHz     243059 s         93 s      26041 s     554180 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.7776296189548801	.9853390188204076	.7988031057364409	.6762850963994249
two	.19691568733091502	.6844460214342969	.4002700326787372	.8492066303783186
a	86
b	41
c	66
d	39
e	89
f	54
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.837236  0.832794  0.458417
b           │ 0.199394  0.431043  0.884152 0.8372364154466336 0.8372364154466336
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.837236  0.832794  0.458417
b     │ 0.199394  0.431043  0.884152
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.837236  0.832794  0.458417
b           │ 0.199394  0.431043  0.884152
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.837236  0.832794  0.458417
b     │ 0.199394  0.431043  0.884152
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.308786  0.833339  0.689476  0.801016
er              │ 0.205151  0.998331  0.440591  0.864323
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139637155428256
0-element Named Array{Any,1}

[0.5067539739542062 0.7446640453691962 0.7370762345900872 0.653916368897292
 0.015424936168981107 0.8615361658400094 0.06314440437425173 0.6192899824349221]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.506754   0.744664   0.737076   0.653916
two   │ 0.0154249   0.861536  0.0631444    0.619292x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.506754   0.744664   0.737076   0.653916
two   │ 0.0154249   0.861536  0.0631444    0.619292x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.212929     -1.69712  …    -0.871052      1.08369
2     │  -0.0658676     -1.62378  …     -1.66146     0.1700041000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │ -0.0215513    0.745318
2     │ -0.0821135    0.273612
3     │    2.69898     -1.5667
4     │   -1.51316    0.957964
5     │   0.560644     -1.6781
6     │   -1.26407    -1.50241
7     │  -0.742368    -2.20517
8     │   -1.02514   -0.696909
9     │   -1.82079     2.35043
⋮                ⋮           ⋮
992   │     1.1028   -0.410423
993   │  -0.239346    -1.61425
994   │  -0.817619     1.51681
995   │  -0.420861    -1.27073
996   │   -1.06366   -0.405942
997   │   0.537759   -0.929914
998   │    1.11564   0.0742846
999   │ -0.0983901    -0.20485
1000  │   -1.65144    -0.424371000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.509811
2    │  0.495833
3    │  0.655114
4    │  0.548132
5    │   2.24661
6    │ -0.962488
7    │   1.60797
8    │ -0.337152
9    │  0.349245
⋮              ⋮
992  │   0.40742
993  │  0.563173
994  │ -0.153697
995  │  0.214482
996  │  0.377882
997  │  -0.37155
998  │  0.330566
999  │  0.309868
1000 │  -1.654672x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.659445   0.24954
1           │ 0.706566   0.27054

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.572268  0.465392
1           │  0.72634  0.869949
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.961569
2  │ 0.138476
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.479818   0.78718
2     │ 0.897712  0.644165
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.071431  0.599313
2     │ 0.285511  0.453745

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.157855   0.490751
2     │  0.776122  0.0616733
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.161172  0.890203
2     │ 0.315327  0.275981

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.939667    0.11138
2     │ 0.0947719   0.567491

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0802377    0.62486
2     │  0.325429   0.374703

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.940379   0.50412
2     │ 0.165893  0.283164
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.77509   0.731771
2     │ 0.0667242   0.835334

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.105106  0.445517
2     │ 0.663383  0.852502

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0137185   0.325914
2     │  0.190686   0.814443
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.904995  0.298181

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.303116  0.240495
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.130129
2     │ 0.229927

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │  0.51647
2     │ 0.224186
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.510795   0.61084
2     │ 0.969037  0.655297
1000×1000 Named sparse matrix with 92 Float64 nonzero entries:
	[14280380654045797140,  5312631360709731698]  =  0.5003151115622235
	[12000240359954909472,  4786699431706339713]  =  0.40194330697353964
	[8194749162452730241 , 12295598998729798629]  =  0.4375970373607918
	[1637279412807692950 ,  4981387750669837953]  =  0.5135257820991816
	[3489406529678529571 ,  4981387750669837953]  =  0.38143359719395575
	[4509385789584299296 , 16621507366152005377]  =  0.8173873936625498
	[14138153537439249859,  4976045735032000325]  =  0.34142531829020584
	[1473175892488538621 , 15493082059768908559]  =  0.5197754501971861
	                                              ⋮
	[10186301591602193943, 10647878191897777347]  =  0.738832124672524
	[17383975982595546373, 11033897610157224162]  =  0.9681111930582371
	[13440552775821083551,  3014575823142358933]  =  0.8877025457598826
	[13873794816269884083,  5983786778458205040]  =  0.9849152365734688
	[175416465984822993  ,  5122894113285174381]  =  0.8651553615101837
	[9301010200713812034 ,  4047135350800189603]  =  0.5114438997361419
	[3904210102766439976 , 16202651256804923129]  =  0.11212622699910879
	[16221828541365357577, 13950575499123628905]  =  0.5537086136940865
	[17448184880248178237,  6565262192402102057]  =  0.8777168627683529Timing named index: 0.000668213, array index: 0.000459773, named key: 0.111092738
Timing sum large sparse array: 0.006120034, named: 0.013589015
done!
INFO: NamedArrays tests passed

>>> End of log
