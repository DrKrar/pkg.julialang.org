>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (867.32421875 MB free)
Uptime: 7476.0 sec
Load Avg:  1.1513671875  1.01611328125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     342253 s       6574 s      28106 s     295878 s         14 s
#2  3500 MHz     236504 s         71 s      24733 s     465632 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.4
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.7840111506187193	.8029039693228264	.34815115872272684	.9594911678458213
two	.9162400375043183	.44890899451239163	.054078863603598926	.7222563471610994
a	35
b	77
c	55
d	72
e	65
f	24
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.569841   0.388392   0.685982
b           │  0.682171  0.0299454   0.973188 0.5698413539081411 0.5698413539081411
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.569841   0.388392   0.685982
b     │  0.682171  0.0299454   0.973188
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.569841   0.388392   0.685982
b           │  0.682171  0.0299454   0.973188
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.569841   0.388392   0.685982
b     │  0.682171  0.0299454   0.973188
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.815069  0.761918  0.743175  0.895897
er              │ 0.818615  0.294022  0.026012  0.831269
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139668304572048
0-element Named Array{Any,1}

[0.1671929658546112 0.14939205655596077 0.7996645059616116 0.5721772459521088
 0.6175502133069788 0.025145324073751585 0.41252827982493767 0.6580223736498816]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.167193   0.149392   0.799665   0.572177
two   │   0.61755  0.0251453   0.412528   0.6580222x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.167193   0.149392   0.799665   0.572177
two   │   0.61755  0.0251453   0.412528   0.6580222x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -1.10811    -0.366836  …    -0.568572    -0.931706
2     │    0.250961     0.110144  …     -1.54419    -0.6161891000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.390514    -1.87674
2     │    2.28562    0.389158
3     │   -2.00159    -1.36468
4     │  -0.196642    0.626636
5     │  -0.110318   -0.164707
6     │    1.84961    0.344911
7     │   0.627699    -2.12056
8     │  -0.947117      2.1094
9     │    1.16574    0.387304
⋮                ⋮           ⋮
992   │    1.40896   -0.836942
993   │ -0.0113706    0.347121
994   │ -0.0945133   -0.304676
995   │   0.953554   -0.561946
996   │    2.06091   -0.623426
997   │    1.07704   0.0367522
998   │  -0.389123    -2.77568
999   │   0.818622  -0.0154432
1000  │  -0.127665   -0.4420771000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -1.04947
2    │  -2.25563
3    │  -1.66508
4    │   1.31774
5    │ -0.790748
6    │  0.642979
7    │  0.161477
8    │  0.215256
9    │  -2.11909
⋮              ⋮
992  │   1.50205
993  │ -0.176857
994  │  0.248462
995  │   1.50182
996  │  0.929261
997  │ -0.989557
998  │   1.72741
999  │ -0.755021
1000 │   1.449642x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.220614  0.0820828
1           │  0.851803   0.504256

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.838789   0.03588
1           │ 0.344346  0.440973
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.939466
2  │ 0.946213
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.756001  0.142204
2     │ 0.557175  0.988688
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.683956  0.878247
2     │  0.33652  0.133612

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.651533  0.535904
2     │ 0.305574  0.909734
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.917639  0.534741
2     │  0.74836  0.201298

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.92475   0.10865
2     │ 0.110278  0.140241

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.359272  0.546563
2     │ 0.911376  0.529726

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.311073  0.0747367
2     │  0.574559  0.0111361
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00297445    0.618789
2     │  0.0239434    0.229112

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.436132  0.192362
2     │ 0.345493  0.532384

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.708804   0.098725
2     │ 0.0337352    0.97761
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.238591    0.1458

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.825824  0.207896
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │ 0.0483535
2     │  0.548324

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.174549
2     │ 0.720613
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.128911  0.284904
2     │ 0.839181  0.280353
1000×1000 Named sparse matrix with 100 Float64 nonzero entries:
	[1603870711594358861 ,  6526988131186142725]  =  0.35394012000013886
	[3082239157947279921 ,  9690422262975321697]  =  0.90714962282109
	[2362724562918981188 , 13789993170142104254]  =  0.8106945211375289
	[898568979075944978  ,  4247719799217886270]  =  0.00021851429061015004
	[4565099145871195153 ,  2230070772219402886]  =  0.6450245054551611
	[306017613260083765  ,  7199089960335318010]  =  0.3994081278175512
	[5723128691850249417 , 18168544338330653462]  =  0.03934941465984387
	[4329451781928897369 , 16408863325498676967]  =  0.610619371441103
	                                              ⋮
	[10601912832305821454, 14774945750507892610]  =  0.494275008109347
	[11594286046942303904,  6468689935112619700]  =  0.970710116050538
	[2362724562918981188 , 11993454575275700781]  =  0.42530852025016586
	[13440552775821083551, 14835807873575694564]  =  0.47279766580554994
	[9526342322394325946 ,  1842419535934980543]  =  0.1848565256582113
	[14517667374310463124, 11527542315164007414]  =  0.2084504402230667
	[12378274853958980878,  3279378535085980212]  =  0.17539398793889638
	[14027562189529080231,  3733926995351842633]  =  0.3880455822261224
	[8468779409087899409 ,   427459847123490633]  =  0.1701495754051332Timing named index: 0.000805511, array index: 0.000670046, named key: 0.131477767
Timing sum large sparse array: 0.006342776, named: 0.018216607
done!
INFO: NamedArrays tests passed

>>> End of log
