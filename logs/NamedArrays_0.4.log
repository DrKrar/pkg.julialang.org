>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.0
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (866.94921875 MB free)
Uptime: 6322.0 sec
Load Avg:  0.880859375  0.955078125  1.03125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     280063 s        318 s      25671 s     258277 s          6 s
#2  3500 MHz     173927 s       5154 s      22058 s     408789 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.3
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.0
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.3070550590425525	.7799190992382183	.7894237852568746	.22671299984418303
two	.9304118908994861	.3604339821044402	.880337875981893	.49287089987049004
a	25
b	61
c	20
d	25
e	51
f	80
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0640986   0.927622   0.243063
b           │  0.958936   0.347656   0.780011 0.06409855135619291 0.06409855135619291
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0640986   0.927622   0.243063
b     │  0.958936   0.347656   0.780011
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0640986   0.927622   0.243063
b           │  0.958936   0.347656   0.780011
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0640986   0.927622   0.243063
b     │  0.958936   0.347656   0.780011
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.476717  0.844998  0.661799  0.702006
er              │ 0.828907  0.236856  0.345101  0.702405
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140153070159456
0-element Named Array{Any,1}

[0.2683931071503738 0.657773101924872 0.12988878586116348 0.19295388427244875
 0.5532819052099165 0.8587061916421641 0.267850557391049 0.3530882095338037]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.268393  0.657773  0.129889  0.192954
two   │ 0.553282  0.858706  0.267851  0.3530882x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.268393  0.657773  0.129889  0.192954
two   │ 0.553282  0.858706  0.267851  0.3530882x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    0.583316   -0.0113443  …      1.68087     0.353121
2     │     1.29034     0.642082  …     -2.18933     -0.788821000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.22381    0.887332
2     │   -1.35006    0.126376
3     │  -0.996703  -0.0384697
4     │  -0.957182   -0.121517
5     │  0.0102451    -1.34538
6     │  -0.432858    -1.30475
7     │   0.920335    -1.03451
8     │   0.349288    -1.11773
9     │  -0.443685     1.42529
⋮                ⋮           ⋮
992   │  -0.854685    -1.34429
993   │   0.442837     -1.5176
994   │  -0.867948     1.45224
995   │  -0.375874     2.08774
996   │   0.565596   -0.807679
997   │  -0.783916     1.59083
998   │   0.504142   -0.446583
999   │  -0.681837    0.888964
1000  │   0.615874     1.653431000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   0.633005
2    │    -0.6951
3    │ -0.0274232
4    │  -0.778884
5    │    1.55011
6    │    1.91824
7    │  -0.561329
8    │   0.383252
9    │    1.73651
⋮               ⋮
992  │   0.312069
993  │    2.22539
994  │  -0.773817
995  │    1.02658
996  │   0.678048
997  │   0.240253
998  │   -0.54337
999  │     1.3458
1000 │   0.0456452x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.750949  0.719899
1           │   0.2972  0.995729

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.393694   0.72766
1           │ 0.957993  0.841614
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.618096
2  │ 0.561533
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.888842  0.335185
2     │ 0.892638   0.48204
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.968411  0.722163
2     │ 0.805041  0.288234

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.665381  0.559559
2     │ 0.331085  0.471657
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.75398  0.610387
2     │ 0.033285   0.88516

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.933449  0.637353
2     │ 0.316193  0.141708

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.514536  0.492967
2     │ 0.163212  0.281674

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │    0.8968   0.233982
2     │  0.833997  0.0259512
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.953311  0.436095
2     │   0.6125  0.699954

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.425749  0.685686
2     │ 0.306036  0.693619

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.62921  0.670572
2     │ 0.763534  0.187318
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.157195  0.720615

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.590808   0.86583
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.240054
2     │ 0.303901

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │  0.87835
2     │ 0.396332
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.588225  0.982892
2     │  0.39139  0.747911
1000×1000 Named sparse matrix with 115 Float64 nonzero entries:
	[8499646773720035521 ,  1703847331300677320]  =  0.6208067069635224
	[10685333727101695973, 13888991764943741743]  =  0.16523733977807842
	[2111347661095988866 , 14033074738777421392]  =  0.5095939622434291
	[14027562189529080231,  9920432272297441209]  =  0.47045819590046256
	[13882698648709482562,  2849690884155085581]  =  0.8979817614340737
	[8305934159106380255 ,  4329451781928897369]  =  0.7960058358426205
	[15128086289133168420,  4976045735032000325]  =  0.6809319281209585
	[5062864901616737721 , 16246598853062742192]  =  0.24633479856155427
	                                              ⋮
	[3489406529678529571 ,  5597731276780160114]  =  0.07533928673460011
	[7083487105814040007 , 11711005111088208244]  =  0.9457196826993703
	[17467549359930456931, 11993454575275700781]  =  0.8634935518833906
	[3805326236553509133 ,   372001016642560619]  =  0.5236085320862427
	[1163464316904916440 , 16836080019131185762]  =  0.018931041270740634
	[8507737825562801990 ,  4047135350800189603]  =  0.8754849587108657
	[16097006782209161274,  3010300210541878305]  =  0.19402584841853687
	[8237952535892822805 ,  2588469222286953884]  =  0.4862924515842022
	[9767020441840364452 ,  2588469222286953884]  =  0.5901249970176341Timing named index: 0.000616361, array index: 0.000422712, named key: 0.071915757
Timing sum large sparse array: 0.007800931, named: 0.016229451
done!
INFO: NamedArrays tests passed

>>> End of log
