>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.0
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (868.8359375 MB free)
Uptime: 7343.0 sec
Load Avg:  1.03076171875  0.9921875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     333907 s        540 s      31325 s     294533 s         24 s
#2  3499 MHz     206176 s       7370 s      26348 s     466929 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.4
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.0
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.49781105486587895	.21585228407588253	.725178665717886	.9495564920829547
two	.9125910116746474	.3667035382267221	.20647850174344717	.5885221369262013
a	80
b	9
c	70
d	54
e	91
f	11
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.481887   0.694894   0.262933
b           │  0.950595  0.0880459   0.598785 0.4818865542256179 0.4818865542256179
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.481887   0.694894   0.262933
b     │  0.950595  0.0880459   0.598785
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.481887   0.694894   0.262933
b           │  0.950595  0.0880459   0.598785
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.481887   0.694894   0.262933
b     │  0.950595  0.0880459   0.598785
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.677822  0.606004  0.541574  0.824054
er              │ 0.130893  0.444527  0.911271     0.546
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140619112915280
0-element Named Array{Any,1}

[0.18711957583591698 0.4449703869405064 0.8319156068779916 0.6015219078492848
 0.5716001072687114 0.1267636507358163 0.5621079887482427 0.8886101277587273]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │  0.18712   0.44497  0.831916  0.601522
two   │   0.5716  0.126764  0.562108   0.888612x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │  0.18712   0.44497  0.831916  0.601522
two   │   0.5716  0.126764  0.562108   0.888612x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -1.18136     -1.36686  …      0.40888    -0.326199
2     │    0.481134      -1.0672  …    -0.531613      2.472131000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ -0.411057    1.16732
2     │  0.789848    2.66949
3     │  -1.92399   0.449208
4     │  -1.43931   -0.51378
5     │ -0.375602   0.421741
6     │  0.456921    1.48161
7     │ -0.405486    1.36065
8     │   1.42057   -1.24445
9     │    1.7883   -1.36666
⋮               ⋮          ⋮
992   │  0.983489  -0.696671
993   │  0.358938   0.818158
994   │ 0.0537618    -1.4021
995   │  -1.34876   0.332533
996   │  -1.44899  -0.601149
997   │  0.317989   0.941992
998   │  0.713676   -1.50379
999   │  0.126786    1.31032
1000  │   2.50711    1.336861000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.628522
2    │    1.2993
3    │  0.945643
4    │  0.124956
5    │ -0.680303
6    │  -1.30545
7    │  -0.90409
8    │  -1.65334
9    │  0.212107
⋮              ⋮
992  │   1.30395
993  │ -0.339295
994  │   0.73515
995  │ 0.0856177
996  │ -0.856075
997  │ -0.616978
998  │   1.00517
999  │ -0.435821
1000 │  -1.335912x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0776061   0.386459
1           │   0.40752  0.0976497

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.934133  0.425519
1           │ 0.201885  0.508965
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.370356
2  │  0.56342
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0946001     0.8331
2     │  0.625137   0.917121
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.143168  0.933922
2     │ 0.765678  0.210969

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.996275  0.531471
2     │  0.83132  0.449575
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.675951  0.618071
2     │ 0.187444  0.710678

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.113443  0.979132
2     │ 0.806765  0.936109

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.270423   0.224642
2     │  0.549023  0.0518942

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.816415   0.140506
2     │  0.486711  0.0184907
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.815773    0.586858
2     │ 0.00767725     0.89832

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.141325  0.265027
2     │ 0.597148  0.741007

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.227824  0.075376
2     │ 0.201257  0.793033
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.711527  0.564958

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.659449  0.394914
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │  0.60261
2     │ 0.341235

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.999876
2     │ 0.645423
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.112688  0.660712
2     │ 0.663932  0.899213
1000×1000 Named sparse matrix with 99 Float64 nonzero entries:
	[3098092458876750059 ,  4247719799217886270]  =  0.16802117404578198
	[7011600752848376140 , 12295598998729798629]  =  0.4070515898918621
	[15935843203573098002,  3253468397832770835]  =  0.5536110798991547
	[4898605355838645106 ,  7425701996526302553]  =  0.5429372242116755
	[2202644137930953607 ,   906960604709401733]  =  0.44765380850065606
	[12901330087571726961, 17609421066205025733]  =  0.28568060022252495
	[16147086907566520640,  2791304443232646030]  =  0.14734559861740193
	[16597465986996936346,  2001767177420584454]  =  0.9832182957749058
	                                              ⋮
	[17549715336456040083, 11604119926906451644]  =  0.7220049662497037
	[11146485517283900572,  8471876845144429043]  =  0.3717330925959148
	[16246598853062742192, 15717097331822026300]  =  0.6885655970996414
	[10109836606734241243, 15717097331822026300]  =  0.14901225606059088
	[16406121832856650968, 15717097331822026300]  =  0.37678567293439924
	[3701904739816180802 ,  9815398096560962926]  =  0.43285593366096653
	[11641483179283066996, 11314283927973801071]  =  0.15170280770689093
	[7580984277293214809 ,  5122894113285174381]  =  0.8444470716836594
	[8063487388436248612 , 14835807873575694564]  =  0.14802942764320282Timing named index: 0.000706468, array index: 0.000454986, named key: 0.07184465
Timing sum large sparse array: 0.006504729, named: 0.016470831
done!
INFO: NamedArrays tests passed

>>> End of log
