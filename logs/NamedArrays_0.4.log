>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.0
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (790.81640625 MB free)
Uptime: 7167.0 sec
Load Avg:  1.02734375  0.95849609375  1.04736328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     310420 s       1223 s      30988 s     303970 s         15 s
#2  3500 MHz     206439 s       3951 s      26988 s     455883 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.3
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.0
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.9801293626249952	.6965787002678401	.9291937465544513	.13466168979540738
two	.09107352571716065	.9916809221057707	.35347320436844565	.626725616147898
a	62
b	81
c	49
d	97
e	100
f	96
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.227118  0.757063  0.249686
b           │ 0.953748  0.331376  0.103201 0.22711814902818084 0.22711814902818084
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.227118  0.757063  0.249686
b     │ 0.953748  0.331376  0.103201
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.227118  0.757063  0.249686
b           │ 0.953748  0.331376  0.103201
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.227118  0.757063  0.249686
b     │ 0.953748  0.331376  0.103201
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.906604  0.779252   0.58029  0.105531
er              │ 0.436898  0.147633  0.462337  0.343626
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140272179965968
0-element Named Array{Any,1}

[0.15860630231977169 0.0927831517094806 0.22873668630923571 0.5228859680207194
 0.9170381411532267 0.350113431402689 0.1770673233818547 0.35929144263257395]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.158606  0.0927832   0.228737   0.522886
two   │  0.917038   0.350113   0.177067   0.3592912x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.158606  0.0927832   0.228737   0.522886
two   │  0.917038   0.350113   0.177067   0.3592912x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -0.24308     0.484776  …     0.967331     0.449579
2     │    -0.33011    -0.851407  …      0.32585    -0.1990141000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.198587     0.5691
2     │  -1.52044   0.378616
3     │ -0.687972   0.855826
4     │ -0.211604   -0.99019
5     │ -0.797551   0.417476
6     │ -0.759001    -1.2623
7     │ -0.390439  -0.252636
8     │ -0.731093  -0.701063
9     │  -2.62653   0.684359
⋮               ⋮          ⋮
992   │  0.600202  -0.585891
993   │ -0.487831   -1.49838
994   │   2.04723    1.12661
995   │   1.47094   0.477197
996   │  0.239547  -0.238658
997   │ -0.344326  0.0595591
998   │ -0.945403  -0.485825
999   │   0.44837  -0.293529
1000  │  -1.09739   0.1901771000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │ -0.0327447
2    │    1.00974
3    │    1.17464
4    │   0.424189
5    │   0.591355
6    │   0.356808
7    │   -0.72431
8    │   -0.22936
9    │    1.04479
⋮               ⋮
992  │    -1.0939
993  │    2.06168
994  │  -0.696311
995  │ -0.0351363
996  │   0.638481
997  │  -0.817253
998  │   0.855378
999  │   0.922636
1000 │   0.8248042x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.900296  0.450438
1           │ 0.918843  0.267143

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.924896   0.19737
1           │ 0.384147  0.324889
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.167306
2  │ 0.317109
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.124378  0.534741
2     │ 0.494612  0.815485
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00713514    0.937523
2     │   0.692858    0.654271

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.204971  0.0655421
2     │  0.374143   0.952693
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.775294  0.305006
2     │  0.41876  0.591241

[:, :, C=2, D=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.429713  0.00139608
2     │   0.147192     0.18149

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0339114   0.232504
2     │  0.773812   0.646102

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.340159  0.239176
2     │ 0.860986  0.942424
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 5.80618e-5    0.420351
2     │   0.831467    0.586524

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.116678  0.780715
2     │ 0.272814  0.301798

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.519736  0.902303
2     │ 0.976608  0.350203
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.604465    0.7697

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.753474  0.445202
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.710035
2     │ 0.133465

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.216034
2     │ 0.485872
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.682288   0.397594
2     │  0.345484  0.0357057
1000×1000 Named sparse matrix with 113 Float64 nonzero entries:
	[14881898804895637463, 13789993170142104254]  =  0.1666565206056858
	[615289593087278592  , 14033074738777421392]  =  0.9245894787452384
	[9510369508347309199 ,  4247719799217886270]  =  0.7167523825672877
	[9833052444289127168 ,  2849690884155085581]  =  0.0755796680042069
	[919672847296486462  , 10106592262940987645]  =  0.8507324254041906
	[9833052444289127168 , 12295598998729798629]  =  0.15023652205621274
	[16564731551779441726, 15260609615288845879]  =  0.7653978270634518
	[18287766226606777885, 14956803718882296446]  =  0.7960575772732406
	                                              ⋮
	[2436126165640975798 , 11711005111088208244]  =  0.34077338675544255
	[16408863325498676967, 10370911177498520402]  =  0.3522258878790703
	[10186301591602193943, 10024080200852233627]  =  0.8434146076177651
	[1406197640930237395 ,  9223427034658990711]  =  0.9463297634127921
	[7841950699682704949 , 11470862121108514714]  =  0.2618244877081013
	[1834107590195416916 , 16365943061271568709]  =  0.14218223688075193
	[4981387750669837953 ,  5122894113285174381]  =  0.7956545568109008
	[1017373194429467360 , 12020782256748308824]  =  0.7903160124738726
	[2348334269037542278 , 15240003619098155971]  =  0.5411405429526555Timing named index: 0.000737844, array index: 0.000509944, named key: 0.07175216
Timing sum large sparse array: 0.007376717, named: 0.016052576
done!
INFO: NamedArrays tests passed

>>> End of log
