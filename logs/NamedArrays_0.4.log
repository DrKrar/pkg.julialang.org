>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (861.0546875 MB free)
Uptime: 6940.0 sec
Load Avg:  1.04052734375  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     330904 s       2341 s      31022 s     260479 s         12 s
#2  3500 MHz     204747 s       4961 s      27038 s     435375 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.1095030193535178	.18049306965200307	.9742702456250019	.4645887972418654
two	.8908920716767064	.3001316819040869	.8339778401144313	.34765293802812813
a	33
b	6
c	10
d	94
e	63
f	23
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.530093   0.940086   0.800132
b           │  0.543198   0.163659  0.0059035 0.5300927433506677 0.5300927433506677
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.530093   0.940086   0.800132
b     │  0.543198   0.163659  0.0059035
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.530093   0.940086   0.800132
b           │  0.543198   0.163659  0.0059035
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.530093   0.940086   0.800132
b     │  0.543198   0.163659  0.0059035
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.536886   0.303803  0.0839029   0.554106
er              │  0.186217   0.277636   0.360764   0.873589
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140154802439504
0-element Named Array{Any,1}

[0.36635710801665944 0.5839221714065694 0.022099759762620685 0.27047618923856875
 0.19906339790387984 0.9480062995641416 0.44729283876180315 0.9446652746024382]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.366357   0.583922  0.0220998   0.270476
two   │  0.199063   0.948006   0.447293   0.9446652x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.366357   0.583922  0.0220998   0.270476
two   │  0.199063   0.948006   0.447293   0.9446652x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     0.747974      0.599253  …       2.44128     -0.802114
2     │    -0.234148       0.65562  …      0.214173    -0.01478541000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   2.10074   -1.05487
2     │ -0.457436   0.643484
3     │ -0.709671   0.234997
4     │ -0.214111    2.28327
5     │    1.4305   0.916901
6     │  0.675167   0.221973
7     │ -0.975651   -1.34018
8     │ -0.325683  -0.331408
9     │ -0.730297   0.689854
⋮               ⋮          ⋮
992   │   1.13383    1.28912
993   │   1.34275    1.12862
994   │  0.354465    1.54699
995   │  0.541451   -1.64207
996   │  -1.90948  -0.406474
997   │   1.18112   -1.22744
998   │ 0.0123075    1.53378
999   │  -2.33588  0.0857399
1000  │ -0.925508  -0.1369451000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.186289
2    │  -2.12078
3    │   0.37024
4    │  0.122263
5    │  -1.16285
6    │  0.629314
7    │ -0.788191
8    │  0.911134
9    │  -1.67403
⋮              ⋮
992  │   1.49734
993  │   1.73399
994  │  0.746924
995  │  -1.60043
996  │   1.57238
997  │  0.799658
998  │   2.25696
999  │ -0.221704
1000 │  -1.933692x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.712287  0.989453
1           │ 0.745504  0.997273

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │  0.72462  0.291358
1           │ 0.226196  0.400141
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │ 0.0368757
2  │  0.425682
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.439114   0.102379
2     │  0.722444  0.0847441
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.323483  0.483558
2     │ 0.289493  0.407658

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.787271  0.125233
2     │ 0.300693  0.721148
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │   0.9365  0.400632
2     │ 0.116824  0.278121

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.624969  0.665985
2     │ 0.680928  0.336784

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.368601  0.148685
2     │ 0.240844  0.907106

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.882942  0.828178
2     │ 0.363884  0.926738
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.798389  0.594532
2     │ 0.796919  0.863815

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.589056  0.247395
2     │   0.1477  0.635988

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.287799   0.518891
2     │   0.26399  0.0857179
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.54926  0.0820199

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.184579  0.190056
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.814736
2     │ 0.329396

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.964521
2     │ 0.481905
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.872415  0.857475
2     │ 0.942082  0.815297
1000×1000 Named sparse matrix with 99 Float64 nonzero entries:
	[8510717240885107729 ,   144428425607543167]  =  0.773364615102972
	[9307608947950104313 , 12419957900638875901]  =  0.4421158956176692
	[875267146556840949  , 10601912832305821454]  =  0.8261417592822944
	[10932896149891808656,  4394159825732135742]  =  0.6847780005844442
	[13550011942507349191,   273396578563598247]  =  0.39048320535503733
	[16111656927569727313,   273396578563598247]  =  0.48185241266713685
	[1834107590195416916 ,  4329451781928897369]  =  0.556471783158762
	[6006398908531647410 , 16621507366152005377]  =  0.9816307829909721
	                                              ⋮
	[10369386120472232477,  2695040152261095162]  =  0.7043537420212884
	[615289593087278592  , 18365636711081267169]  =  0.8279178006580057
	[17418510937611012500, 10080555958650725266]  =  0.04924248650377261
	[13465652674533777795,  8357516066305821252]  =  0.5426029325409025
	[11624303196129780378, 10626898038408744182]  =  0.9732934565672506
	[12786760913832678713, 12680114143357042360]  =  0.27825019862052036
	[2758171916068192631 , 12680114143357042360]  =  0.18243183629797888
	[9284771721002998782 , 10647878191897777347]  =  0.09957279645697592
	[14071609933964289859, 10370911177498520402]  =  0.9570062096860026Timing named index: 0.000722011, array index: 0.000684812, named key: 0.095329238
Timing sum large sparse array: 0.013463828, named: 0.025487857
done!
INFO: NamedArrays tests passed

>>> End of log
