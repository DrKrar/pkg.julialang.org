>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.0
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (857.15625 MB free)
Uptime: 7570.0 sec
Load Avg:  1.015625  0.96435546875  1.0283203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     349335 s       6588 s      29098 s     292103 s         18 s
#2  3499 MHz     215155 s       7427 s      24515 s     485640 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.3
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.0
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.24992419091934326	.44327529574710267	.051705402819258284	.313467153961285
two	.31683353117457	.3667935897925605	.23699664881163307	.35702753211064975
a	49
b	79
c	24
d	53
e	92
f	29
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.546774  0.542915  0.805128
b           │ 0.851776   0.66087  0.816057 0.5467743746430405 0.5467743746430405
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.546774  0.542915  0.805128
b     │ 0.851776   0.66087  0.816057
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.546774  0.542915  0.805128
b           │ 0.851776   0.66087  0.816057
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.546774  0.542915  0.805128
b     │ 0.851776   0.66087  0.816057
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │         yi          er         san          si
────────────────┼───────────────────────────────────────────────
yi              │   0.959311    0.947863    0.252208  0.00713324
er              │   0.389387    0.204298    0.387426    0.390462
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140226809816464
0-element Named Array{Any,1}

[0.6688108740589442 0.679082903467362 0.8210468079886701 0.630894596039755
 0.40470870306795437 0.97354110088657 0.4693462468093159 0.9918688763748402]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.668811  0.679083  0.821047  0.630895
two   │ 0.404709  0.973541  0.469346  0.9918692x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.668811  0.679083  0.821047  0.630895
two   │ 0.404709  0.973541  0.469346  0.9918692x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -0.70714    -0.0423593  …     -0.566634      -1.20058
2     │    -0.446892      -0.79866  …      0.735275     -0.3023771000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.143598   0.0708192
2     │   -1.10816    0.530701
3     │  -0.419064   -0.507158
4     │  -0.456557     -1.1117
5     │  -0.226534   -0.116707
6     │   0.917437    0.422646
7     │  -0.677787     1.77941
8     │   0.146622     2.24157
9     │   0.230475   -0.751784
⋮                ⋮           ⋮
992   │   0.969094   -0.898373
993   │    1.17216    0.030407
994   │   0.784485  0.00616883
995   │   -0.69698    -1.20434
996   │    2.57808    0.224718
997   │    0.33874   -0.333279
998   │   0.588751     1.31365
999   │   0.511567   -0.318474
1000  │   0.322554    -2.204511000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -1.78254
2    │ -0.768318
3    │   2.55461
4    │   1.49875
5    │ -0.393161
6    │   0.75002
7    │  0.299106
8    │  0.652079
9    │   1.62989
⋮              ⋮
992  │ -0.935421
993  │   1.11343
994  │ -0.533526
995  │  0.213516
996  │  0.801621
997  │  0.544653
998  │  -1.23594
999  │ -0.251588
1000 │  0.6715282x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.964402  0.0470428
1           │  0.285501   0.363537

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.723323   0.740113
1           │ 0.0794997   0.298654
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.179434
2  │ 0.195035
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.462327  0.228499
2     │  0.50121   0.16718
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.375527  0.261292
2     │ 0.644252  0.317401

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.984874   0.544296
2     │  0.120212  0.0697293
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.960906  0.0359303
2     │  0.423822   0.383891

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.24416   0.249099
2     │  0.676958  0.0273526

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.567698  0.558393
2     │ 0.112304  0.819024

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.147472  0.138796
2     │ 0.287399  0.317959
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.246269  0.110359
2     │ 0.533019  0.900059

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.832693   0.85596
2     │ 0.647837  0.701255

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.430555  0.430244
2     │ 0.191697  0.959438
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.258709  0.331263

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.274565  0.197404
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.187106
2     │ 0.222078

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.274861
2     │ 0.737353
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.668266  0.920208
2     │ 0.526492  0.495299
1000×1000 Named sparse matrix with 90 Float64 nonzero entries:
	[16390501590956164603,   397394769374478572]  =  0.47477501649291143
	[584033670402314773  , 13789993170142104254]  =  0.4982397190433552
	[10370911177498520402, 14343632987770563929]  =  0.9679869225301594
	[8629498292780771804 , 14033074738777421392]  =  0.7551374643268023
	[3988919785315502792 ,  2230070772219402886]  =  0.23444775012982766
	[8600174387665261856 ,  2230070772219402886]  =  0.6892941092483738
	[6806539949965918083 ,  4786699431706339713]  =  0.5578065453164496
	[372001016642560619  , 12295598998729798629]  =  0.8898086343433662
	                                              ⋮
	[10213422356137903131, 14169799449801373117]  =  0.6140794965585592
	[14025941730136024849, 10924666096879366607]  =  0.6224388940459233
	[12989059827452924244, 10725201418295586676]  =  0.47818338505196967
	[3590338872863214714 , 10725201418295586676]  =  0.6389819041591154
	[13093611746678628780, 17329041886349039120]  =  0.8226430881276894
	[6736866286121987098 ,  8090338657268802519]  =  0.623286061219549
	[8225434152398798479 , 10370911177498520402]  =  0.29714886758841597
	[13884235257459061953,  9223427034658990711]  =  0.8828588327474305
	[1811302532022619362 , 14599810768241287016]  =  0.6147990620908144Timing named index: 0.0007852, array index: 0.000711712, named key: 0.129092599
Timing sum large sparse array: 0.010277505, named: 0.024471979
done!
INFO: NamedArrays tests passed

>>> End of log
