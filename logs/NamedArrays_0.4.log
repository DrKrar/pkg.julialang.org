>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.2
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.2
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (804.6328125 MB free)
Uptime: 8762.0 sec
Load Avg:  0.85400390625  0.9189453125  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     385256 s       7203 s      34448 s     360657 s         24 s
#2  3500 MHz     235262 s          6 s      30088 s     575920 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.18.0
 - DataStructures                0.5.2
 - Iterators                     0.2.0
 - Polynomials                   0.1.2
INFO: Testing NamedArrays
WARNING: New definition 
    push!(DataStructures.Accumulator{#T<:Any, #V<:Number}, #T<:Any) at /home/vagrant/.julia/v0.4/DataStructures/src/accumulator.jl:54
is ambiguous with: 
    push!(Base.Associative, Base.Pair) at dict.jl:294.
To fix, define 
    push!(DataStructures.Accumulator{K<:Any, #V<:Number}, _<:Base.Pair)
before the new definition.
WARNING: New definition 
    push!(DataStructures.Accumulator{#T<:Any, #V<:Number}, #T<:Any) at /home/vagrant/.julia/v0.4/DataStructures/src/accumulator.jl:54
is ambiguous with: 
    push!(Base.Associative, Base.Pair) at dict.jl:294.
To fix, define 
    push!(DataStructures.Accumulator{K<:Any, #V<:Number}, _<:Base.Pair)
before the new definition.
Starting test, no assertions should fail... base, one	.5630628408730283	.9005250910184461	.19044552773825973	.46571779875237085
two	.7750493254206423	.30836798327115966	.8256294861264315	.8852592716472965
a	45
b	20
c	14
d	24
e	89
f	26
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.673663  0.219225  0.417976
b           │ 0.010621  0.188437  0.730905 0.6736634038791514 0.6736634038791514
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.673663  0.219225  0.417976
b     │ 0.010621  0.188437  0.730905
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.673663  0.219225  0.417976
b           │ 0.010621  0.188437  0.730905
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.673663  0.219225  0.417976
b     │ 0.010621  0.188437  0.730905
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.182208    0.2218  0.887222  0.501128
er              │ 0.165676  0.424489   0.22219  0.928272
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140430858643312
0-element Named Array{Any,1}

[0.18638652660154942 0.028439014553847786 0.3587225671459475 0.7008917684218112
 0.8492408360567629 0.4136783029374982 0.3824035698071211 0.9569905924215749]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.186387  0.028439  0.358723  0.700892
two   │ 0.849241  0.413678  0.382404  0.9569912x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.186387  0.028439  0.358723  0.700892
two   │ 0.849241  0.413678  0.382404  0.9569912x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     0.726746     -0.877871  …       1.54799     -0.446767
2     │     0.240037      0.612147  …      -1.54171      0.4128761000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.284317    0.166277
2     │   0.957475      1.2717
3     │   0.443091   -0.127894
4     │   -1.17086    0.954869
5     │    0.29415    -1.80387
6     │    1.19954    0.106365
7     │   0.120008   -0.542177
8     │  -0.372929    0.130324
9     │   0.989339   -0.142893
⋮                ⋮           ⋮
992   │    1.95388    -1.06073
993   │   -0.68673   -0.448265
994   │  -0.795548    0.831058
995   │  -0.305899    -1.10093
996   │   0.367653   -0.100232
997   │   0.124979    0.189059
998   │ -0.0559245   -0.556922
999   │  -0.564619    -1.64445
1000  │  0.0150385     -0.74541000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.29594
2    │  -0.379427
3    │   -1.15327
4    │ -0.0714153
5    │  -0.285908
6    │    1.78367
7    │    1.06047
8    │ 0.00717301
9    │   0.914206
⋮               ⋮
992  │  -0.373426
993  │   -0.33539
994  │  -0.973349
995  │  -0.261057
996  │  0.0609068
997  │  -0.102789
998  │  -0.603311
999  │   0.666001
1000 │  -0.4445482x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.340938  0.652635
1           │ 0.761325  0.739473

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.416901  0.966611
1           │ 0.692604   0.96141
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.662734
2  │ 0.214133
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │  0.61537  0.587462
2     │  0.59352  0.326918
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.553314  0.0782117
2     │  0.864616   0.716567

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.292964   0.303995
2     │ 0.0410472   0.715889
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.55505  0.980733
2     │ 0.465127  0.373065

[:, :, C=2, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0327959   0.870933
2     │ 0.0211192    0.30641

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.916208  0.311087
2     │ 0.307002  0.280527

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.494673   0.769923
2     │ 0.0386734   0.925467
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.826983   0.31053
2     │ 0.797879  0.554244

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.991369  0.275248
2     │ 0.175752  0.680473

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.287843  0.271988
2     │ 0.897079  0.321738
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.278009  0.588041

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.202643  0.837288
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │  0.180095
2     │ 0.0446121

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.279137
2     │ 0.537923
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.840879  0.603225
2     │ 0.864152  0.384789
1000×1000 Named sparse matrix with 102 Float64 nonzero entries:
	[10109836606734241243,  6564272639106249010]  =  0.27330271035529274
	[3904210102766439976 , 17095493447719212504]  =  0.07713704099775809
	[5312631360709731698 ,  4247719799217886270]  =  0.947535914526888
	[10684064542878956755,  9920432272297441209]  =  0.6738387748037717
	[1094738720364955812 ,  9283096199793891681]  =  0.007278853259997442
	[8430133805019144520 ,  7425701996526302553]  =  0.4220612857908965
	[10024080200852233627, 16621507366152005377]  =  0.6376110314959242
	[6279220855469790341 , 11907679469289587679]  =  0.7824762765048685
	                                              ⋮
	[7242692203416363180 ,  1177457170591155921]  =  0.1569571944959578
	[13864621993906192564,  5567682937376679626]  =  0.3440876969608979
	[1811770088802748199 ,     1348625733340586]  =  0.02908242925760507
	[3982709381579875351 , 16655780295490676025]  =  0.5434652402621403
	[140805053905483200  , 10370911177498520402]  =  0.8439643213113497
	[9510369508347309199 , 10024080200852233627]  =  0.9425524011711381
	[9870978712100122380 , 16836080019131185762]  =  0.9847472380480466
	[13873794816269884083, 16836080019131185762]  =  0.0397606301636626
	[10361072080411987344,  7519919299137062942]  =  0.8100901468745823Timing named index: 0.000736613, array index: 0.000657528, named key: 0.14616805
Timing sum large sparse array: 0.009403779, named: 0.019201651
done!
INFO: NamedArrays tests passed

>>> End of log
