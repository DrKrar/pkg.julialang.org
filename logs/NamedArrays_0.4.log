>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (859.62109375 MB free)
Uptime: 7079.0 sec
Load Avg:  0.86865234375  0.9365234375  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     326430 s       1192 s      30702 s     278529 s         19 s
#2  3500 MHz     201221 s       5515 s      26437 s     445907 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.4
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.2170893759387329	.3156773364374401	.9212395220757013	.19830470014713364
two	.1616917219480396	.2863607587432302	.6696482173534302	.21249369130523355
a	17
b	11
c	100
d	36
e	16
f	85
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.805828  0.467963  0.067666
b           │ 0.201293  0.438273  0.578329 0.8058281548752797 0.8058281548752797
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.805828  0.467963  0.067666
b     │ 0.201293  0.438273  0.578329
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.805828  0.467963  0.067666
b           │ 0.201293  0.438273  0.578329
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.805828  0.467963  0.067666
b     │ 0.201293  0.438273  0.578329
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │   0.7268  0.624983  0.467489  0.376644
er              │ 0.790389  0.587087  0.230912  0.661652
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140330739318880
0-element Named Array{Any,1}

[0.9432408282598781 0.8665671362067091 0.8162701359197184 0.04892020014053822
 0.8215201033573019 0.8936744979909519 0.1715239072718584 0.970300977616332]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.943241   0.866567    0.81627  0.0489202
two   │   0.82152   0.893674   0.171524   0.9703012x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.943241   0.866567    0.81627  0.0489202
two   │   0.82152   0.893674   0.171524   0.9703012x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -2.25518       1.2242  …     0.288486     -1.08818
2     │   -0.328015     0.314131  …      1.89008    -0.7820861000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   1.39434   -1.09646
2     │  0.181505   0.397019
3     │ -0.202769  -0.563765
4     │ -0.323687   0.707533
5     │ -0.420474   -1.55286
6     │ -0.911736   0.614172
7     │ -0.762133    1.12932
8     │  -2.40546    1.54533
9     │  -1.94288    0.54673
⋮               ⋮          ⋮
992   │  -1.00238   0.996653
993   │  0.675126  -0.178136
994   │  0.150221    1.20153
995   │ -0.941232  0.0539271
996   │  0.250273  -0.345096
997   │  0.114692   0.445731
998   │ -0.661936  -0.732425
999   │  -2.76152   0.554533
1000  │  0.915231  0.02117061000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.162567
2    │ -0.158886
3    │ -0.390716
4    │    0.1639
5    │  0.528991
6    │  0.309484
7    │  -0.55138
8    │  0.837588
9    │   1.34262
⋮              ⋮
992  │  -2.59343
993  │   1.07865
994  │ -0.692637
995  │  -0.44199
996  │   -1.5422
997  │ -0.619055
998  │ 0.0863955
999  │  0.286479
1000 │  0.4528092x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.325316  0.903185
1           │ 0.956043  0.947109

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │  0.92986  0.860379
1           │ 0.384165  0.656208
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.834533
2  │ 0.929105
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.796629   0.756999
2     │  0.136168  0.0341264
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.389009  0.528511
2     │ 0.602558  0.946616

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.815271  0.544012
2     │ 0.318789  0.634975
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.860974  0.682053
2     │ 0.397075  0.608745

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.589678  0.193683
2     │ 0.574672  0.970755

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.15163  0.784885
2     │ 0.394751  0.140266

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.373955  0.327793
2     │ 0.509173  0.587372
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.856641  0.865544
2     │ 0.953225  0.565379

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.734067  0.416039
2     │ 0.623329  0.558985

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.875721  0.0712503
2     │ 0.0798221   0.221355
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0685194  0.0932366

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.868286  0.591024
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.658379
2     │ 0.272186

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.455739
2     │ 0.603675
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.767863   0.895363
2     │  0.467783  0.0498656
1000×1000 Named sparse matrix with 98 Float64 nonzero entries:
	[17549715336456040083, 12809965746239821631]  =  0.19692527516504654
	[9559487157531389543 ,  5927176887743683346]  =  0.4789443782909266
	[14288330035547288615,   592365234179887848]  =  0.22827221748405502
	[12452104047290745507, 11080872162023102847]  =  0.17849419214882145
	[3014575823142358933 , 14517667374310463124]  =  0.9022491950268305
	[17207488849817960156,  9920432272297441209]  =  0.32596985574396875
	[849947749456312673  ,  2849690884155085581]  =  0.03615860844569685
	[13068922020419317632,  3253468397832770835]  =  0.7085065746818384
	                                              ⋮
	[12020782256748308824,  2564073136243113693]  =  0.9604054084731268
	[1017373194429467360 ,  5392016834065508343]  =  0.9700653442665803
	[918962486075492040  ,  1898604270381526844]  =  0.7564006739420479
	[15905894300834924909,  4494612503536197367]  =  0.5457285673662313
	[175416465984822993  , 17401827539426951865]  =  0.47918945538886204
	[4136980692892754005 , 11711005111088208244]  =  0.4816522262501872
	[493461921061351564  , 12169815624147734794]  =  0.46293221986727695
	[8330309809540032104 ,  3279378535085980212]  =  0.5830091430932702
	[15396075083334870119, 13690505415342562739]  =  0.24024142239186097Timing named index: 0.000683997, array index: 0.000445432, named key: 0.070901792
Timing sum large sparse array: 0.007096239, named: 0.016275755
done!
INFO: NamedArrays tests passed

>>> End of log
