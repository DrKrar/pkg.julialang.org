>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (796.2890625 MB free)
Uptime: 9682.0 sec
Load Avg:  0.9521484375  0.95654296875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     398964 s        740 s      31932 s     444450 s         17 s
#2  3500 MHz     230133 s       5686 s      26670 s     679561 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.5372947966904342	.9729160390931699	.6656790471625362	.3089694215643817
two	.9029982948473136	.9452328190702997	.8908815181696212	.8735265671707757
a	21
b	80
c	27
d	22
e	99
f	23
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.118593  0.873139  0.558076
b           │ 0.413431  0.955208  0.843315 0.11859281702531277 0.11859281702531277
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.118593  0.873139  0.558076
b     │ 0.413431  0.955208  0.843315
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.118593  0.873139  0.558076
b           │ 0.413431  0.955208  0.843315
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.118593  0.873139  0.558076
b     │ 0.413431  0.955208  0.843315
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │ 0.0918067   0.541074   0.805475   0.657604
er              │  0.300027   0.803033   0.989048    0.87887
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140154464890032
0-element Named Array{Any,1}

[0.24994350362636175 0.4270505558874942 0.22716751616982878 0.1894221839108401
 0.8379479481025016 0.4127415779701844 0.5381214514101154 0.6352651969501624]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.249944  0.427051  0.227168  0.189422
two   │ 0.837948  0.412742  0.538121  0.6352652x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.249944  0.427051  0.227168  0.189422
two   │ 0.837948  0.412742  0.538121  0.6352652x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     0.778689      -1.41778  …      0.426856      0.508211
2     │      0.19627      -1.50546  …        1.0173      -0.547591000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.338253    -1.02999
2     │   0.363253      1.0844
3     │  -0.277642     1.28783
4     │   0.312164    -1.08733
5     │   0.138991     0.26738
6     │   0.444197    -0.23672
7     │  -0.877315    -0.81646
8     │     1.4811     2.07371
9     │ -0.0088111    -2.09785
⋮                ⋮           ⋮
992   │   -1.64748   -0.226592
993   │   -1.75017   -0.994389
994   │    1.39492     1.38586
995   │   0.190082    0.137672
996   │    -2.5305   -0.482346
997   │   0.293571     2.33307
998   │  -0.393015   -0.769439
999   │  -0.212653    0.109872
1000  │    1.15397    0.8875041000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  -0.24661
2    │ -0.058105
3    │  0.698243
4    │  0.859751
5    │  0.135962
6    │  0.903336
7    │  0.726325
8    │   -1.0561
9    │  0.517047
⋮              ⋮
992  │  0.886424
993  │ -0.110526
994  │   1.58301
995  │  0.148323
996  │   1.03516
997  │    -2.029
998  │  -0.74122
999  │  0.661839
1000 │   2.255722x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0659057  0.0370473
1           │  0.314144   0.157067

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.401143   0.045098
1           │ 0.0471628   0.747754
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.230517
2  │  0.32862
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.772934  0.694495
2     │ 0.743234  0.340499
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.347915  0.135396
2     │ 0.413439  0.245345

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.287356   0.687269
2     │ 0.0421243   0.309028
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.268383   0.204532
2     │  0.478641  0.0677934

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.565294  0.490788
2     │ 0.885735  0.634299

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.764315   0.469477
2     │ 0.0028069   0.115067

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.792361  0.517608
2     │ 0.874028  0.839824
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.518876   0.416108
2     │   0.57496  0.0361255

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.893701  0.205363
2     │ 0.593433  0.676172

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.593785   0.986912
2     │  0.664511  0.0641126
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.360107  0.392813

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.208674  0.345071
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.500949
2     │ 0.206226

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.411934
2     │ 0.739524
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.711991  0.465992
2     │ 0.397866  0.919959
1000×1000 Named sparse matrix with 126 Float64 nonzero entries:
	[1163464316904916440 , 13789993170142104254]  =  0.5475708521688682
	[592365234179887848  , 14343632987770563929]  =  0.2586366073266031
	[2111347661095988866 ,  6046649976662626325]  =  0.6666083737026589
	[18332460987873573245,  4247719799217886270]  =  0.6067482959937054
	[14288330035547288615,  9920432272297441209]  =  0.7668786021165455
	[2537122889535958280 ,  9283096199793891681]  =  0.3785075693512385
	[11681839584861684795, 12295598998729798629]  =  0.05728854801440719
	[370154515922583624  ,  3039451196773527828]  =  0.6399491007112215
	                                              ⋮
	[13690505415342562739, 14027562189529080231]  =  0.18678051446611899
	[8069307267129313135 ,  2117445326293199079]  =  0.029243660691135265
	[9210596506099025992 ,  5597731276780160114]  =  0.8969671871952258
	[2365706432056806243 , 10655964431342481635]  =  0.6311757085676939
	[6828122599267262902 , 10655964431342481635]  =  0.049326244322533075
	[11604119926906451644, 12624682912995533025]  =  0.2118777710976658
	[397394769374478572  , 16031689834122954645]  =  0.3651140419894783
	[5597731276780160114 ,  3733926995351842633]  =  0.4004503617540336
	[2011794367635262695 , 14599810768241287016]  =  0.9055374733503703Timing named index: 0.000120099, array index: 0.00080098, named key: 0.129062581
Timing sum large sparse array: 0.008498407, named: 0.022107698
done!
INFO: NamedArrays tests passed

>>> End of log
