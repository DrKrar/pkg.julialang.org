>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (870.5703125 MB free)
Uptime: 6753.0 sec
Load Avg:  1.04833984375  1.01904296875  1.05517578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3505 MHz     332228 s       2019 s      30813 s     244633 s         13 s
#2  3505 MHz     189503 s       4315 s      27592 s     435607 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.4
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.9009144468904262	.24621382527992441	.8392237519466297	.13638734380554163
two	.6626447551815589	.8357542477868134	.8637416091981567	.7356674681109634
a	15
b	1
c	47
d	74
e	32
f	59
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.799395  0.374661  0.383338
b           │  0.89904  0.834107  0.383384 0.7993949560084201 0.7993949560084201
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.799395  0.374661  0.383338
b     │  0.89904  0.834107  0.383384
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.799395  0.374661  0.383338
b           │  0.89904  0.834107  0.383384
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.799395  0.374661  0.383338
b     │  0.89904  0.834107  0.383384
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.353323  0.366217  0.210196  0.710137
er              │ 0.430851   0.60884  0.852994  0.732675
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139695257034880
0-element Named Array{Any,1}

[0.9247451655140311 0.47666668658352673 0.5761351744011454 0.4813004685200586
 0.19947484610375454 0.7025615331972341 0.22182776095295376 0.7001092001440803]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.924745  0.476667  0.576135    0.4813
two   │ 0.199475  0.702562  0.221828  0.7001092x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.924745  0.476667  0.576135    0.4813
two   │ 0.199475  0.702562  0.221828  0.7001092x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │      1.53231       3.06804  …      -1.28524       1.05869
2     │     0.196891      0.379245  …      0.498897      0.4658991000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.155277    -1.49343
2     │   0.356095    0.564214
3     │  -0.328465    0.155933
4     │   0.315788     -1.1132
5     │   -1.09975    -2.10358
6     │   0.308824     1.89287
7     │  -0.598862     1.19277
8     │  -0.375331    0.159989
9     │  -0.790789    0.231672
⋮                ⋮           ⋮
992   │ -0.0922515     1.19336
993   │   0.418763    -1.41021
994   │  -0.913483    0.977974
995   │   0.088644   -0.972771
996   │   0.268591     1.22353
997   │  -0.463808   -0.459748
998   │    1.10298    -1.41097
999   │    1.40315  -0.0778806
1000  │   0.031927    0.3487651000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.519457
2    │  -0.161541
3    │  -0.311443
4    │   0.294541
5    │  -0.462563
6    │    1.90434
7    │ -0.0264539
8    │    1.13427
9    │    1.83359
⋮               ⋮
992  │ -0.0516418
993  │    1.86737
994  │   -1.22917
995  │   -1.98707
996  │   -1.77073
997  │   0.998198
998  │    1.80452
999  │   0.153309
1000 │    2.052132x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.479597  0.950163
1           │ 0.224253  0.519519

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.999171    0.4995
1           │ 0.292494   0.11254
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │  0.94441
2  │ 0.464454
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.952339  0.905305
2     │ 0.918544  0.149928
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.483545  0.510182
2     │ 0.600736  0.225249

[:, :, C=2] =
A ╲ B │          1           2
──────┼───────────────────────
1     │  0.0551213    0.410163
2     │ 0.00594143   0.0212786
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.919229  0.441212
2     │ 0.383663  0.667047

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.935184  0.848705
2     │ 0.561598  0.963361

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.849715  0.306054
2     │ 0.800775  0.179564

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.225144  0.0188734
2     │  0.275279   0.427291
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.451071  0.0416226
2     │  0.116912   0.174695

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.552389   0.080473
2     │ 0.0809623   0.219203

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.62667  0.411142
2     │ 0.210363   0.81599
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.522782  0.771288

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.493717  0.928658
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │  0.807135
2     │ 0.0712327

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.551781
2     │ 0.642285
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.80399  0.880222
2     │ 0.708016  0.452322
1000×1000 Named sparse matrix with 111 Float64 nonzero entries:
	[3215182586804062522 ,  9690422262975321697]  =  0.1669877334939469
	[99445198107514719   ,  5004131969199419793]  =  0.8769888680239364
	[5579376550761991812 , 13888991764943741743]  =  0.11802099068078697
	[2211499036183048350 ,  6046649976662626325]  =  0.18888326912106956
	[4786699431706339713 ,  9920432272297441209]  =  0.2140792234784763
	[4788923618671962983 ,  2230070772219402886]  =  0.37102095329492824
	[14025941730136024849, 10361072080411987344]  =  0.9129965406270011
	[10725201418295586676,  4394159825732135742]  =  0.06670281946841872
	                                              ⋮
	[5756544042870584356 , 10024080200852233627]  =  0.9855456538703031
	[11022261278769353274,  9223427034658990711]  =  0.9464108427991342
	[8425210698882380606 ,  9223427034658990711]  =  0.13141642738354298
	[10504931430957650557, 12624682912995533025]  =  0.9061541777909479
	[18443722453013281811, 16031689834122954645]  =  0.9787850528581725
	[6662260146027230599 ,  1861743268047760089]  =  0.27533363547220624
	[13093952135199384747,  1842419535934980543]  =  0.9328190250270991
	[2836200141957565154 ,  3733926995351842633]  =  0.2955689046361174
	[9861459413671678323 ,  3010300210541878305]  =  0.8063288352655915Timing named index: 0.000738148, array index: 0.000530414, named key: 0.111371912
Timing sum large sparse array: 0.007073546, named: 0.016558633
done!
INFO: NamedArrays tests passed

>>> End of log
