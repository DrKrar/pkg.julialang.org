>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.0
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (877.7421875 MB free)
Uptime: 6930.0 sec
Load Avg:  0.953125  0.93896484375  0.99609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     317154 s         78 s      28687 s     274448 s         10 s
#2  3500 MHz     193335 s         55 s      27150 s     440021 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.3
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.0
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.1386703055329883	.34366924081422856	.07687772010837968	.8743654214232277
two	.30939219652543715	.4392179889117729	.8746923161326563	.8906092325253268
a	36
b	35
c	67
d	63
e	8
f	50
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.826848   0.51834  0.225457
b           │ 0.296612  0.286338  0.624239 0.826847669662379 0.826847669662379
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.826848   0.51834  0.225457
b     │ 0.296612  0.286338  0.624239
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.826848   0.51834  0.225457
b           │ 0.296612  0.286338  0.624239
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.826848   0.51834  0.225457
b     │ 0.296612  0.286338  0.624239
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.273865  0.768728   0.44184  0.940293
er              │ 0.874838  0.520157   0.86837  0.984353
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140235445691984
0-element Named Array{Any,1}

[0.5544135241120736 0.9466265324517147 0.13186868596968782 0.6577072514983193
 0.6918443078558985 0.994573870674957 0.35112320880161163 0.3341477803521573]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.554414  0.946627  0.131869  0.657707
two   │ 0.691844  0.994574  0.351123  0.3341482x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.554414  0.946627  0.131869  0.657707
two   │ 0.691844  0.994574  0.351123  0.3341482x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │     1.44274     0.474934  …     0.845802    -0.272785
2     │     -1.5887     0.525731  …     0.106504     0.7336461000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00108938   0.0881477
2     │    0.24253   0.0912317
3     │   0.163985     1.26753
4     │  -0.854307    0.163416
5     │      -1.71     1.61507
6     │   0.248266   -0.551759
7     │   0.597264   -0.899617
8     │    1.22545     0.30545
9     │   0.236055     1.30638
⋮                ⋮           ⋮
992   │  -0.776114    0.481748
993   │   -1.28806    0.766351
994   │  -0.132196   -0.930437
995   │    1.04181    0.432983
996   │   0.192691    0.963161
997   │   -1.07015    -0.69424
998   │   0.863114     0.35097
999   │     0.6473   -0.197667
1000  │   0.607248     1.194081000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │  0.418812
2    │ 0.0298022
3    │   -1.7523
4    │  -1.45126
5    │ -0.868311
6    │ -0.890837
7    │   1.89165
8    │  0.188424
9    │  0.747298
⋮              ⋮
992  │  -2.09504
993  │ -0.954357
994  │ -0.166625
995  │  0.419145
996  │  0.680591
997  │  0.337867
998  │   0.31154
999  │ -0.211417
1000 │  -1.798842x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0325157   0.979218
1           │  0.534282   0.884673

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.518374  0.536543
1           │  0.76612  0.123898
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.993027
2  │ 0.885886
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.850195  0.364558
2     │ 0.234621   0.70041
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.259733  0.139354
2     │ 0.289227  0.490397

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.466932  0.630781
2     │ 0.889004  0.742224
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.311464  0.712247
2     │ 0.882251  0.509339

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.539051  0.263062
2     │ 0.841231  0.167496

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.60399   0.227909
2     │  0.399404  0.0380323

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.818978   0.557644
2     │  0.618336  0.0961457
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.302226  0.100662
2     │ 0.429243   0.59754

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.473939  0.867137
2     │ 0.225701  0.700248

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.671195  0.385766
2     │ 0.209567  0.251609
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.866011  0.286862

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.120828  0.389529
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.219317
2     │ 0.520683

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.183217
2     │ 0.288845
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.336829  0.267597
2     │ 0.566792  0.791515
1000×1000 Named sparse matrix with 95 Float64 nonzero entries:
	[4227256904035335927 , 16462243977607957471]  =  0.10408859595452524
	[7286441479725315933 , 14033074738777421392]  =  0.7874986208090822
	[2588469222286953884 , 14517667374310463124]  =  0.5763682861576471
	[16784990760345090389,  4394159825732135742]  =  0.8920724251263445
	[2001767177420584454 ,  5723128691850249417]  =  0.09902057206438997
	[2588469222286953884 ,  6065204439534692180]  =  0.8371185511774768
	[12020782256748308824,   281356413667926651]  =  0.5718816530960802
	[6566196097100363524 , 11024660093340930346]  =  0.1661077612534343
	                                              ⋮
	[14071609933964289859, 14169799449801373117]  =  0.04793358571030781
	[13950575499123628905, 16243515418520287792]  =  0.6789551480160732
	[13450619636401767365,  7630593249633640373]  =  0.7663821072040222
	[10596751188013898940, 16655780295490676025]  =  0.09113587306173687
	[17900418222753209643, 11641483179283066996]  =  0.5321479664307462
	[17287069299322624247,  9815398096560962926]  =  0.9976720935395027
	[7135933997555694158 , 11551291857879764225]  =  0.8993018436125906
	[6330913940894778354 ,  1203336841330469213]  =  0.6047646798408304
	[2773759897603617072 ,  9133170895916704973]  =  0.9548012118322358Timing named index: 0.000669582, array index: 0.000457838, named key: 0.075168698
Timing sum large sparse array: 0.011599298, named: 0.026461665
done!
INFO: NamedArrays tests passed

>>> End of log
