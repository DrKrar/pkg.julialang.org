>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (831.5 MB free)
Uptime: 7535.0 sec
Load Avg:  1.06005859375  0.9619140625  1.0126953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     339290 s       5614 s      32120 s     302099 s         16 s
#2  3500 MHz     202242 s       1065 s      28141 s     499237 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.10047985881613775	.5206650722792177	.03383651967564827	.8880181177805468
two	.7912295442145618	.47588384285082075	.6396176495505697	.9180759219728762
a	55
b	40
c	80
d	35
e	21
f	46
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0251938   0.434569   0.131249
b           │  0.765414    0.63609   0.331851 0.02519378323721022 0.02519378323721022
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0251938   0.434569   0.131249
b     │  0.765414    0.63609   0.331851
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │ 0.0251938   0.434569   0.131249
b           │  0.765414    0.63609   0.331851
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │ 0.0251938   0.434569   0.131249
b     │  0.765414    0.63609   0.331851
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.883644  0.786228  0.948733  0.146818
er              │ 0.973053  0.366645  0.423801   0.99556
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139873219347408
0-element Named Array{Any,1}

[0.8897196187158414 0.6645811342013666 0.7332521455992229 0.8824499192424027
 0.08476791179188536 0.14124504043779917 0.7731419486797801 0.5559045882568527]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.88972   0.664581   0.733252    0.88245
two   │ 0.0847679   0.141245   0.773142   0.5559052x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.88972   0.664581   0.733252    0.88245
two   │ 0.0847679   0.141245   0.773142   0.5559052x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.186485      0.543507  …      -1.65342     -0.814508
2     │    -0.292661      0.762564  …      0.645659      0.9036371000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │   1.82908   0.532247
2     │  0.215151    0.15457
3     │ -0.610563   0.631618
4     │ -0.611895  -0.663889
5     │  -3.26098   -1.93829
6     │ -0.761893  0.0402266
7     │    0.8375  -0.225808
8     │  0.992456   -1.25303
9     │ -0.644183   -0.53672
⋮               ⋮          ⋮
992   │ -0.282211   -1.17395
993   │  -1.42486  -0.916955
994   │   -1.1772   0.697022
995   │ -0.266384  -0.366075
996   │  0.848537   -0.27379
997   │   1.39829     1.1713
998   │   2.31204   0.819091
999   │ -0.724411  -0.488805
1000  │ -0.717838    0.811681000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.255594
2    │    1.45356
3    │  0.0156813
4    │  -0.167527
5    │  -0.842586
6    │   -1.62333
7    │  -0.673718
8    │ -0.0925111
9    │  -0.151145
⋮               ⋮
992  │   -1.10519
993  │  -0.998114
994  │   -1.25017
995  │  -0.381163
996  │   -1.76704
997  │  -0.913005
998  │   0.356968
999  │  -0.732514
1000 │   -1.469022x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.455933  0.337431
1           │ 0.653726  0.804427

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.584291   0.548155
1           │ 0.0528166   0.097246
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │  0.218366
2  │ 0.0226764
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.414721  0.969803
2     │ 0.520725  0.702313
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0237101     0.1595
2     │  0.824952   0.583738

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.169587   0.812341
2     │ 0.0255574   0.808881
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.36132   0.701282
2     │  0.737799  0.0341491

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.463468  0.726693
2     │ 0.279742  0.398959

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.463647  0.0592202
2     │ 0.0206671   0.385812

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.185332  0.663845
2     │ 0.765169  0.928885
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.874075  0.155656
2     │  0.78419  0.066644

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.359829  0.0318185
2     │  0.171216   0.306609

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.727455  0.913751
2     │ 0.172264  0.301593
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.439944  0.887555

[:, :, C=2] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00751471    0.457581
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │       1
──────┼────────
1     │ 0.80486
2     │ 0.89617

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.569681
2     │ 0.126453
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.161647  0.784012
2     │  0.10325  0.151991
1000×1000 Named sparse matrix with 119 Float64 nonzero entries:
	[10581043158258790064,  4913249781191789579]  =  0.7112777618762194
	[10725201418295586676,  5312631360709731698]  =  0.4671070482775388
	[4302721723742542942 , 17095493447719212504]  =  0.5479455307250451
	[16427568314583164731,  9920432272297441209]  =  0.5988352215431423
	[281356413667926651  , 18443816037252674910]  =  0.760045877681703
	[18443722453013281811,  3253468397832770835]  =  0.45067283560167914
	[11727192159770649882, 17678211741433686062]  =  0.6819117915228676
	[6009757290359055522 ,  5723128691850249417]  =  0.9970864233939818
	                                              ⋮
	[8069307267129313135 , 17853331136360781895]  =  0.47135511095062244
	[6249139884124980606 , 12459420750016908814]  =  0.3410121826649828
	[14881898804895637463, 12459420750016908814]  =  0.9797231085921132
	[8803535867071971780 , 14774945750507892610]  =  0.4172187723647549
	[13404584004200911263,  2117445326293199079]  =  0.14421474800772405
	[17678211741433686062,  2318046236442875673]  =  0.49895513287503834
	[15396075083334870119, 10361974346531339474]  =  0.43049196150752556
	[1526691723863411160 , 12554874066387155728]  =  0.8177326421587943
	[4843503160950653737 ,  7989582431359101293]  =  0.6226249017717469Timing named index: 0.000812898, array index: 0.001131011, named key: 0.124881766
Timing sum large sparse array: 0.01560778, named: 0.021949587
done!
INFO: NamedArrays tests passed

>>> End of log
