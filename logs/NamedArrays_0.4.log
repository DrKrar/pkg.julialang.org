>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (800.09375 MB free)
Uptime: 8700.0 sec
Load Avg:  0.98193359375  0.96240234375  1.029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     380035 s       1928 s      33076 s     373260 s         16 s
#2  3500 MHz     223228 s       4916 s      29714 s     582226 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.37605296014899126	.8682176822737853	.37345153704445977	.9352790628316245
two	.4569495425624335	.689844780892114	.040055004701029295	.46607185761325365
a	93
b	18
c	10
d	21
e	50
f	24
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.732609  0.217525   0.80174
b           │ 0.713576  0.663692   0.69703 0.732609151143307 0.732609151143307
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.732609  0.217525   0.80174
b     │ 0.713576  0.663692   0.69703
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.732609  0.217525   0.80174
b           │ 0.713576  0.663692   0.69703
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.732609  0.217525   0.80174
b     │ 0.713576  0.663692   0.69703
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │         yi          er         san          si
────────────────┼───────────────────────────────────────────────
yi              │    0.51547     0.80973    0.921573  0.00108401
er              │    0.88812    0.070834    0.873081    0.654794
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
0
0-element Named Array{Any,1}

[0.46931141212720506 0.20860056767880564 0.14678300943854738 0.5196076109013577
 0.7143607751627421 0.9291771688090271 0.37556889192674126 0.540012379999314]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.469311  0.208601  0.146783  0.519608
two   │ 0.714361  0.929177  0.375569  0.5400122x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.469311  0.208601  0.146783  0.519608
two   │ 0.714361  0.929177  0.375569  0.5400122x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │   -0.807269     0.879771  …    -0.247443     0.239997
2     │    0.618003    -0.307667  …      1.47432      1.035831000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.168907   -0.377059
2     │   0.142646     1.44381
3     │     1.1532    0.086411
4     │    1.46346    -1.13384
5     │  -0.877602     1.02572
6     │   0.404795   -0.622391
7     │  -0.851994   -0.324235
8     │  -0.846383    -1.08815
9     │   -1.86734    -2.76551
⋮                ⋮           ⋮
992   │  -0.897333   -0.466992
993   │   0.755968  -0.0401821
994   │   0.494065    -0.80017
995   │    2.14591     1.07907
996   │  -0.744921     1.75627
997   │   0.296716    -1.91828
998   │    1.50537   -0.580819
999   │   0.887736   -0.709556
1000  │   0.590276   -0.9377391000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.66224
2    │  -0.164248
3    │    1.42516
4    │ -0.0773589
5    │  0.0239745
6    │  -0.790033
7    │ -0.0839176
8    │    1.60566
9    │    1.19842
⋮               ⋮
992  │   0.759456
993  │   0.432921
994  │   0.305006
995  │  -0.802498
996  │   0.642679
997  │  -0.170667
998  │   0.300862
999  │    1.53802
1000 │  -0.4504642x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.834346  0.0956887
1           │  0.511304  0.0517873

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.284236  0.0363569
1           │  0.702327  0.0515248
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.663979
2  │ 0.784221
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.502325  0.192085
2     │  0.80216  0.459081
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.860181  0.138723
2     │ 0.381535  0.661755

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.826764  0.849456
2     │ 0.558761   0.11506
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.766891  0.0314282
2     │  0.101283   0.931147

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.109811  0.525862
2     │ 0.847258  0.559214

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.758028   0.626151
2     │  0.621266  0.0729429

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.981168  0.501843
2     │ 0.129769  0.326094
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.318022  0.775878
2     │ 0.994063   0.39025

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.667632  0.855715
2     │ 0.168675  0.317798

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.882499  0.639498
2     │ 0.183513  0.249465
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.526263  0.881777

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.230364   0.12936
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.417062
2     │ 0.695996

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.954584
2     │ 0.364678
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.492927  0.948168
2     │ 0.443448  0.989004
1000×1000 Named sparse matrix with 109 Float64 nonzero entries:
	[17676219393380616284,  4913249781191789579]  =  0.44546057052421895
	[6333909840472075512 , 13789993170142104254]  =  0.6909863268033922
	[11581210425696274532,  5312631360709731698]  =  0.985047803745899
	[11707210785935603289, 12809965746239821631]  =  0.6451543355912708
	[2001767177420584454 ,  8058121953372963805]  =  0.6115260488891778
	[6736866286121987098 ,  5927176887743683346]  =  0.7599817878207034
	[15552872266293998212,  4394159825732135742]  =  0.4538616820022894
	[16320645429046908531, 12295598998729798629]  =  0.38372172004595595
	                                              ⋮
	[3043368577052145501 ,  9526342322394325946]  =  0.44409958474708544
	[12459420750016908814, 17718833055079784125]  =  0.05980909241042398
	[16655780295490676025, 10370911177498520402]  =  0.5495092383996054
	[16655780295490676025,  7989582431359101293]  =  0.8664563226121951
	[15493082059768908559, 11470862121108514714]  =  0.44570297397487635
	[1094738720364955812 ,  5122894113285174381]  =  0.7276302130713035
	[898568979075944978  ,  1842419535934980543]  =  0.281099132452576
	[13268306687392746585, 13690505415342562739]  =  0.020054754485056003
	[2365706432056806243 ,  7519919299137062942]  =  0.278839477249319Timing named index: 0.000616377, array index: 0.000421834, named key: 0.075818456
Timing sum large sparse array: 0.006482149, named: 0.013366259
done!
INFO: NamedArrays tests passed

>>> End of log
