>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (825.9453125 MB free)
Uptime: 7413.0 sec
Load Avg:  0.9033203125  0.927734375  1.0009765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     335762 s       6085 s      32006 s     294038 s         16 s
#2  3500 MHz     221317 s       1050 s      29574 s     460726 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.8773983709038384	.05066013011116777	.7881037155647919	.3020438780618111
two	.7126656222167318	.7144700873254664	.9464058050648922	.014499586804670228
a	33
b	97
c	84
d	21
e	36
f	76
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.994869  0.319282  0.380234
b           │ 0.173475  0.140087  0.627147 0.9948685908735218 0.9948685908735218
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.994869  0.319282  0.380234
b     │ 0.173475  0.140087  0.627147
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.994869  0.319282  0.380234
b           │ 0.173475  0.140087  0.627147
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.994869  0.319282  0.380234
b     │ 0.173475  0.140087  0.627147
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.354772   0.829716   0.354768  0.0919544
er              │  0.520286   0.332583  0.0637858   0.837269
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140261667381352
0-element Named Array{Any,1}

[0.10163548384929166 0.9777991509447206 0.6511625296599366 0.19375282744362576
 0.916652113363853 0.9191272395583436 0.9496182079800906 0.15666515265170378]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.101635  0.977799  0.651163  0.193753
two   │ 0.916652  0.919127  0.949618  0.1566652x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.101635  0.977799  0.651163  0.193753
two   │ 0.916652  0.919127  0.949618  0.1566652x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │   -0.374238      1.66056  …     0.374357      1.31082
2     │    0.920674    -0.583698  …     0.679454    -0.8316651000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.42397    0.651336
2     │ -0.0551539    0.895877
3     │    0.39965    -0.90684
4     │   0.745407    0.302171
5     │  -0.107612    0.531195
6     │  -0.672462    -2.08188
7     │   0.804758   -0.651541
8     │    2.44635    0.545714
9     │  -0.256112   0.0162601
⋮                ⋮           ⋮
992   │   -1.18324    0.992494
993   │   -1.49007     1.59739
994   │   0.770547    -0.74152
995   │   -1.06975    0.444538
996   │    1.45477    -1.47561
997   │   0.968464     2.19909
998   │ -0.0572225   -0.240414
999   │    0.95097    -1.95434
1000  │   0.861809    -2.193341000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   0.202739
2    │  -0.958797
3    │ -0.0118201
4    │    1.62994
5    │  -0.394155
6    │  -0.436283
7    │  -0.423128
8    │ 0.00908591
9    │ -0.0935287
⋮               ⋮
992  │   0.602229
993  │    1.28865
994  │     -1.475
995  │    1.07558
996  │   0.564296
997  │   -1.46185
998  │   0.586282
999  │   0.819537
1000 │  -0.6780192x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0679451   0.335054
1           │  0.610995   0.152453

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.709727   0.93682
1           │ 0.802085  0.977383
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.282359
2  │ 0.616247
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.687892  0.927935
2     │ 0.892349   0.81682
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.59264   0.476759
2     │ 0.0264138   0.390091

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0222774    0.66256
2     │  0.508075   0.470742
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.693307  0.468811
2     │ 0.239254  0.644462

[:, :, C=2, D=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │ 0.00431647    0.569957
2     │    0.74302    0.938524

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.974878  0.705209
2     │  0.29253  0.848336

[:, :, C=2, D=2] =
A ╲ B │          1           2
──────┼───────────────────────
1     │    0.89437  0.00932303
2     │   0.502378    0.171527
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.477939  0.0531693
2     │  0.922297   0.991543

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.53095    0.10624
2     │  0.502303  0.0406767

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0866053   0.598472
2     │  0.774791   0.209322
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.869043  0.972285

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.639997  0.913482
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.101692
2     │ 0.921368

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.751992
2     │ 0.754973
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.511162  0.00317837
2     │   0.567917    0.419051
1000×1000 Named sparse matrix with 85 Float64 nonzero entries:
	[1800328568888766379 ,  4400785119912308702]  =  0.9562810781260682
	[17813916387369881   ,  8699333159457747740]  =  0.5318262288114515
	[15273241082585353674, 13789993170142104254]  =  0.5887343134343426
	[281356413667926651  ,  6806539949965918083]  =  0.7394508958531971
	[17166029506115742196,  2849690884155085581]  =  0.6714487918375867
	[2537122889535958280 , 10361072080411987344]  =  0.15647676364404095
	[312622336801724658  , 12876006501778729182]  =  0.5722926310552683
	[4882987618343239453 ,  2001767177420584454]  =  0.25811902251181484
	                                              ⋮
	[14770838543801714634,  1082833487325258643]  =  0.43250950592838966
	[2792827719799450558 , 14340416566338039723]  =  0.8142919809325639
	[13872873498766619962, 11033897610157224162]  =  0.4890805953459829
	[5983786778458205040 , 11382910810432795234]  =  0.6080675615590778
	[4285843451033309381 ,  8090338657268802519]  =  0.8905340677122637
	[14264755834865868473, 11470862121108514714]  =  0.010526848591349891
	[6133723350622533458 , 15240003619098155971]  =  0.6624373446001941
	[9582646421956613839 ,  7957587899775749890]  =  0.6325645508329683
	[15552872266293998212, 13950575499123628905]  =  0.19038791969300983Timing named index: 0.000854604, array index: 0.000852719, named key: 0.13753553
Timing sum large sparse array: 0.01214473, named: 0.027273708
done!
INFO: NamedArrays tests passed

>>> End of log
