>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (523.6875 MB free)
Uptime: 9034.0 sec
Load Avg:  1.048828125  1.13037109375  1.1005859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     380618 s       5333 s      30361 s     397066 s         20 s
#2  3499 MHz     246447 s         85 s      26676 s     603782 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.21.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.6500400356903195	.36592369960610593	.733179563950312	.7366802727727284
two	.2806229744142845	.3283828117060761	.4003425885121066	.8076600979616673
a	15
b	54
c	59
d	16
e	15
f	67
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.449951  0.141902  0.590668
b           │ 0.627044  0.323768  0.144504 0.44995114300255024 0.44995114300255024
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.449951  0.141902  0.590668
b     │ 0.627044  0.323768  0.144504
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.449951  0.141902  0.590668
b           │ 0.627044  0.323768  0.144504
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.449951  0.141902  0.590668
b     │ 0.627044  0.323768  0.144504
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.203215  0.336451  0.585899  0.103371
er              │ 0.787389  0.434856  0.715344  0.688968
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140579895310992
0-element Named Array{Any,1}

[0.279687886438059 0.9803450958823605 0.7381490415029937 0.9191677755493903
 0.40736320171300533 0.8202684732636936 0.9627674734170737 0.939255795268386]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.279688  0.980345  0.738149  0.919168
two   │ 0.407363  0.820268  0.962767  0.9392562x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.279688  0.980345  0.738149  0.919168
two   │ 0.407363  0.820268  0.962767  0.9392562x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │     1.33848     0.633401  …    -0.465654    0.0461695
2     │   -0.228442    -0.023119  …    0.0385992     -1.957211000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ -0.593872   0.194496
2     │  0.439212   0.346087
3     │  -1.00837    1.79825
4     │  0.874204   -1.23941
5     │  -2.25328  -0.358175
6     │  -0.50643  -0.273217
7     │  0.576314  0.0234813
8     │ -0.449327   0.317377
9     │  0.764161   0.672362
⋮               ⋮          ⋮
992   │  -1.80233   0.046071
993   │  -1.40974  -0.658341
994   │ -0.813964  -0.579408
995   │ -0.223721    1.55392
996   │ 0.0224524   0.752085
997   │ -0.272883    0.86549
998   │ -0.292399    1.08083
999   │  -1.83018   0.313796
1000  │   1.61255   -2.310441000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.09601
2    │   -1.10079
3    │  -0.766592
4    │  -0.421258
5    │  0.0265225
6    │   0.740938
7    │  -0.797787
8    │   0.588517
9    │  -0.290574
⋮               ⋮
992  │  -0.394551
993  │   -1.81207
994  │  -0.892005
995  │   0.390258
996  │   0.280318
997  │   -1.25437
998  │     1.0018
999  │    1.35429
1000 │ -0.06562162x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.276031  0.329812
1           │ 0.759107  0.598955

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │  0.33473  0.688326
1           │  0.25262  0.941629
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │  0.306129
2  │ 0.0702915
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.730633   0.55301
2     │ 0.544443  0.182506
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.529065  0.0443937
2     │  0.788926   0.277082

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.476358  0.312538
2     │  0.77512  0.322543
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.343509  0.484237
2     │ 0.422515  0.820507

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.872028  0.608537
2     │ 0.867543  0.295019

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.495832  0.809143
2     │  0.41555  0.300268

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.118141  0.326649
2     │ 0.142928  0.613974
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.26674   0.72322
2     │ 0.154595  0.799529

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.312341  0.0538888
2     │   0.11697   0.247192

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.856335  0.666102
2     │ 0.897725  0.921991
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.827351  0.524886

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.768709   0.64904
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1
──────┼───────────
1     │ 0.00235823
2     │   0.226932

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.394532
2     │ 0.855177
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.357916  0.363013
2     │ 0.341864  0.983009
1000×1000 Named sparse matrix with 85 Float64 nonzero entries:
	[14343632987770563929, 15422846019410515149]  =  0.12004448701600245
	[310341593395597147  ,  8058121953372963805]  =  0.20641745730190442
	[4500327340515608799 , 10106592262940987645]  =  0.7496859780892837
	[15880539982885271201, 17676219393380616284]  =  0.5184308493386718
	[2520040687452014961 ,  4394159825732135742]  =  0.6553488844164979
	[17173839162019621584,   273396578563598247]  =  0.47043506096897914
	[14477441409544525021,  4329451781928897369]  =  0.5990444690882308
	[5362270516586366302 , 16621507366152005377]  =  0.105996145311684
	                                              ⋮
	[6216214939212987967 ,  6738482027934271349]  =  0.0638922141831566
	[6413456663738881847 , 12169815624147734794]  =  0.46713468875254716
	[10338346681654797567, 12169815624147734794]  =  0.7804066680810771
	[3082239157947279921 , 14057278280866812536]  =  0.5782594927643534
	[14169799449801373117,  1203336841330469213]  =  0.8735851802038972
	[9507787290874245939 , 13970367575607681105]  =  0.9250390630301031
	[3988919785315502792 ,  2758171916068192631]  =  0.860321284208797
	[15838569937311488483, 12020782256748308824]  =  0.9092955088055543
	[15589056775630200950,  9133170895916704973]  =  0.9364568462370377Timing named index: 0.000748507, array index: 0.00049889, named key: 0.086067781
Timing sum large sparse array: 0.011035929, named: 0.02538173
done!
INFO: NamedArrays tests passed

>>> End of log
