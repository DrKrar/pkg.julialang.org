>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (834.19921875 MB free)
Uptime: 7300.0 sec
Load Avg:  1.025390625  0.98486328125  1.0498046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     323429 s       7136 s      32077 s     299074 s         17 s
#2  3500 MHz     214052 s        457 s      28080 s     465443 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.048609969202386916	.920283223471851	.5549793506129981	.14996405652110867
two	.7348993606747329	.08431026544517084	.21610468326820764	.9171625418583638
a	73
b	59
c	56
d	37
e	66
f	59
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.898363   0.45168   0.73371
b           │ 0.749456  0.872931  0.824612 0.8983625132187179 0.8983625132187179
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.898363   0.45168   0.73371
b     │ 0.749456  0.872931  0.824612
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.898363   0.45168   0.73371
b           │ 0.749456  0.872931  0.824612
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.898363   0.45168   0.73371
b     │ 0.749456  0.872931  0.824612
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.350734   0.932171    0.35103  0.0409198
er              │  0.243344   0.855864   0.585957   0.296755
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139649174336432
0-element Named Array{Any,1}

[0.702335956304136 0.26329302961442114 0.7731755949688048 0.494936658343748
 0.5525404585531981 0.46297393671025633 0.960574789060447 0.6657112204865492]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.702336  0.263293  0.773176  0.494937
two   │  0.55254  0.462974  0.960575  0.6657112x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.702336  0.263293  0.773176  0.494937
two   │  0.55254  0.462974  0.960575  0.6657112x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -0.71778     -0.270982  …     0.0929791      -1.12981
2     │     0.316868      0.694725  …     -0.422705    -0.05666791000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.30053     -1.0471
2     │    1.37747    -1.25893
3     │   0.381027    0.479169
4     │   -1.20273   -0.704167
5     │    0.62016    0.827976
6     │    1.34588    0.260257
7     │   0.458503    0.826538
8     │   0.533648   -0.528472
9     │   0.968453    -1.41427
⋮                ⋮           ⋮
992   │    1.08198    0.824334
993   │   -2.24126     1.18666
994   │    1.24087      1.1661
995   │   0.713046    0.473938
996   │    1.22899   -0.220355
997   │   -0.52116   -0.213474
998   │   0.951083    0.995354
999   │  -0.113593    0.784838
1000  │   -0.10524  -0.07672851000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   0.258861
2    │   -1.15353
3    │  -0.359043
4    │  -0.258109
5    │  -0.326121
6    │   0.654931
7    │ -0.0318295
8    │   0.653273
9    │    1.13941
⋮               ⋮
992  │  -0.169112
993  │      1.428
994  │  -0.803534
995  │    1.33946
996  │    1.16536
997  │   0.742411
998  │    1.30397
999  │   0.434886
1000 │  -0.4333062x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.900468  0.332132
1           │ 0.617385  0.850456

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.326542  0.640264
1           │ 0.292443  0.963589
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │ 0.0187069
2  │  0.150767
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.602379  0.472099
2     │ 0.984202  0.970524
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.663331  0.837955
2     │ 0.878948  0.145792

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.438704  0.316689
2     │ 0.521728   0.79239
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.339541  0.0949559
2     │  0.582952   0.486443

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.497458  0.825427
2     │ 0.300554   0.91097

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.702941   0.549255
2     │   0.34303  0.0263031

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.645033   0.75968
2     │ 0.922442  0.878902
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.137325  0.423436
2     │ 0.876289  0.801966

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.47289   0.930562
2     │  0.475468  0.0706067

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.822277  0.328964
2     │ 0.259131  0.558402
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.813813  0.177479

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.646023  0.104396
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.461012
2     │ 0.472904

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.764308
2     │ 0.430614
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.932661  0.250219
2     │ 0.387549  0.319555
1000×1000 Named sparse matrix with 98 Float64 nonzero entries:
	[2230070772219402886 ,  5647414292592918739]  =  0.2733312453791319
	[437360754480709846  ,  8058121953372963805]  =  0.7684417945739708
	[17737936919457265947, 10601912832305821454]  =  0.18944761627117357
	[11594286046942303904, 14995138918287078531]  =  0.6519308185085828
	[11604119926906451644, 16621507366152005377]  =  0.5712466228992432
	[11024660093340930346,  7242692203416363180]  =  0.65340850932463
	[14340416566338039723, 16112569381171233070]  =  0.7235925880979599
	[5193276450681624824 , 15987302811816728974]  =  0.042338977322565974
	                                              ⋮
	[16530907666167163390,  2792481481398066916]  =  0.5103696711920986
	[12532031314284117913, 17329041886349039120]  =  0.7783765981279229
	[5597731276780160114 , 17329041886349039120]  =  0.5592076661173198
	[3039451196773527828 , 12459420750016908814]  =  0.16548448464415588
	[12023328037222515112, 15857670694969494589]  =  0.1766874149565243
	[3988919785315502792 ,  1526691723863411160]  =  0.1712787189357472
	[13342932250377702532,  5597731276780160114]  =  0.3742575510515751
	[16077031779703164343,   372001016642560619]  =  0.11671382695707666
	[11551291857879764225,  1842419535934980543]  =  0.9942509161742017Timing named index: 0.000837662, array index: 0.000704508, named key: 0.123892812
Timing sum large sparse array: 0.006024452, named: 0.016135598
done!
INFO: NamedArrays tests passed

>>> End of log
