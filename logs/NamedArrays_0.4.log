>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (829.69140625 MB free)
Uptime: 7870.0 sec
Load Avg:  1.05029296875  1.001953125  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     363652 s        898 s      33265 s     311464 s         20 s
#2  3504 MHz     220942 s       5338 s      29401 s     505731 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.021390649588141075	.24523084486602054	.8369827107725012	.08529146997938786
two	.11502878380156734	.9409666763749138	.7529363028596261	.24607794782528702
a	64
b	50
c	95
d	79
e	70
f	16
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.451134  0.870315  0.194615
b           │ 0.788807  0.230708  0.177279 0.4511335462569155 0.4511335462569155
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.451134  0.870315  0.194615
b     │ 0.788807  0.230708  0.177279
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.451134  0.870315  0.194615
b           │ 0.788807  0.230708  0.177279
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.451134  0.870315  0.194615
b     │ 0.788807  0.230708  0.177279
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │ 0.0889078   0.544766    0.13946   0.378593
er              │  0.146411   0.172061   0.490707   0.915158
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140709617055504
0-element Named Array{Any,1}

[0.6385632484587411 0.8332855431607089 0.994580266951197 0.3950472272552823
 0.43137183430399495 0.8375462758451404 0.34169515491740254 0.3003151600831988]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.638563  0.833286   0.99458  0.395047
two   │ 0.431372  0.837546  0.341695  0.3003152x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.638563  0.833286   0.99458  0.395047
two   │ 0.431372  0.837546  0.341695  0.3003152x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │    -1.02998     0.781827  …    -0.190225     -1.13852
2     │    -1.72561      -1.0115  …    -0.311449    -0.1802851000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │  -0.839578    0.962957
2     │    1.75999   -0.337934
3     │   -1.26494  -0.0778752
4     │  -0.933378    0.556888
5     │   0.140258     0.22888
6     │  -0.184694   -0.121395
7     │  -0.203912   -0.944539
8     │  -0.324926    0.376977
9     │     1.5484   -0.354259
⋮                ⋮           ⋮
992   │  -0.429089    -1.26206
993   │  -0.427275    0.834396
994   │  -0.228871    0.994813
995   │  -0.383026     1.00914
996   │   0.567571    0.174938
997   │    1.07684    0.439737
998   │   0.467997  -0.0853315
999   │   0.459869   -0.355086
1000  │   -0.51299    0.8496951000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.806732
2    │   0.597181
3    │  -0.947957
4    │  -0.740887
5    │   0.131014
6    │   -1.99391
7    │  -0.516041
8    │   -1.96854
9    │    1.13038
⋮               ⋮
992  │    1.13347
993  │   0.243839
994  │  -0.249445
995  │ -0.0364997
996  │    1.11844
997  │    1.26845
998  │  -0.743075
999  │    1.24989
1000 │ -0.03480912x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.618714  0.931269
1           │ 0.836063  0.422061

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.348464  0.262821
1           │ 0.475066  0.295865
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.900634
2  │  0.20673
2x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.614083  0.0396058
2     │  0.963252    0.96705
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.55448   0.29557
2     │ 0.894073  0.168643

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.738851  0.444298
2     │ 0.673124  0.759021
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.425411  0.371731
2     │  0.15621  0.551012

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.937207  0.607023
2     │ 0.182699  0.260521

[:, :, C=1, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.343448  0.163617
2     │ 0.860583  0.485869

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.491023  0.0589054
2     │   0.58055   0.772274
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.303767   0.272174
2     │ 0.0961224    0.55918

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.716758  0.787554
2     │ 0.975125  0.526979

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.50563  0.860114
2     │ 0.308245  0.323859
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.974953  0.00578835

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.821879   0.98822
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.503262
2     │ 0.670352

[:, :, C=2] =
A ╲ B │         1
──────┼──────────
1     │   0.18893
2     │ 0.0181131
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.946819  0.278649
2     │ 0.906635  0.783675
1000×1000 Named sparse matrix with 100 Float64 nonzero entries:
	[273396578563598247  ,  9690422262975321697]  =  0.5139826833447654
	[8351221943604278133 , 12419957900638875901]  =  0.2776206835342603
	[16365943061271568709,  6046649976662626325]  =  0.7537441530572988
	[7388874443385012746 ,  8629498292780771804]  =  0.995451656694694
	[16300844420296039097, 13769040811181486455]  =  0.7896884538273781
	[15559590888388931697, 14486665179875284614]  =  0.10904486854363094
	[15408733635197285348,  3753583410179171704]  =  0.0008416192989904037
	[8803535867071971780 , 13550011942507349191]  =  0.7549538502400792
	                                              ⋮
	[2265917884294506251 , 10080555958650725266]  =  0.40163576295314374
	[5350103876752110926 ,  4099991848953537601]  =  0.5698266786645363
	[12560086892438044273, 14944477062144183931]  =  0.22712117580988944
	[9526148563984720196 , 12901330087571726961]  =  0.4504621978865926
	[1095814029099585013 , 11711005111088208244]  =  0.5478943729686256
	[8586548853081112102 , 11711005111088208244]  =  0.8778248804742435
	[9872310664988650577 , 10024080200852233627]  =  0.35476396525870224
	[2764549293755475861 ,  5122894113285174381]  =  0.04210391185634532
	[8265524791738013937 ,  2588469222286953884]  =  0.5631176285568089Timing named index: 0.000841396, array index: 0.000765061, named key: 0.136337921
Timing sum large sparse array: 0.020564979, named: 0.024949799
done!
INFO: NamedArrays tests passed

>>> End of log
