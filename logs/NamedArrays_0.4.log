>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (776.53515625 MB free)
Uptime: 6896.0 sec
Load Avg:  0.994140625  1.03662109375  1.0927734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     318310 s       4764 s      31190 s     265595 s         12 s
#2  3499 MHz     204634 s       1702 s      28899 s     426089 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.822687947293653	.19806571150044072	.6338102248990956	.28705094786978935
two	.8994341462529729	.2969065576815513	.5164023216262226	.7241028517208412
a	29
b	66
c	68
d	50
e	100
f	10
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.402699  0.528602  0.160822
b           │ 0.984984  0.687504  0.484307 0.4026993682950617 0.4026993682950617
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.402699  0.528602  0.160822
b     │ 0.984984  0.687504  0.484307
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.402699  0.528602  0.160822
b           │ 0.984984  0.687504  0.484307
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.402699  0.528602  0.160822
b     │ 0.984984  0.687504  0.484307
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.841373   0.503981   0.602567   0.925935
er              │  0.353547  0.0163547   0.241907   0.418277
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140135729235568
0-element Named Array{Any,1}

[0.8912154240544807 0.4130625177514313 0.17120593561234232 0.06553631451721231
 0.021526871906327072 0.3800592240950216 0.017006020578622216 0.4907499715336576]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.891215   0.413063   0.171206  0.0655363
two   │ 0.0215269   0.380059   0.017006    0.490752x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │  0.891215   0.413063   0.171206  0.0655363
two   │ 0.0215269   0.380059   0.017006    0.490752x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     -1.19072       1.65615  …     -0.737688      -0.87482
2     │     -1.13932      0.269634  …      0.346168     -0.4685141000x2 Named Array{Float64,2}
A ╲ B │           1            2
──────┼─────────────────────────
1     │   -0.318146    0.0280935
2     │    -1.00031      1.74873
3     │   -0.839382     -1.59444
4     │     1.40228     0.703982
5     │    0.497715     -1.68439
6     │     1.32894     0.420797
7     │   -0.669041     -1.09604
8     │    0.345556     -1.20931
9     │   -0.741908    -0.963066
⋮                 ⋮            ⋮
992   │    0.938064    -0.366623
993   │    -1.23736    -0.319673
994   │    -2.64756      1.75421
995   │    0.538205      1.49839
996   │     1.67873     0.533306
997   │ -0.00406076    -0.428844
998   │   -0.181684      0.30576
999   │    0.477115      1.71169
1000  │   -0.903749     0.8698061000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │   1.17325
2    │ -0.795251
3    │   1.35834
4    │   1.53914
5    │  0.349805
6    │ -0.116044
7    │  0.437622
8    │ -0.144869
9    │  0.553158
⋮              ⋮
992  │ -0.546483
993  │   -0.4638
994  │  -0.37652
995  │   0.27168
996  │  0.166743
997  │  0.264944
998  │ -0.564973
999  │  0.496671
1000 │  0.0844992x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │          0           1
────────────┼───────────────────────
0           │   0.217579    0.761354
1           │   0.475376  0.00344948

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │   0.26286  0.0677086
1           │ 0.0664041    0.89605
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.706811
2  │ 0.425804
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.833206   0.69914
2     │ 0.909705  0.656752
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.782124  0.594503
2     │ 0.750131  0.367781

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.148803   0.94782
2     │  0.25842  0.363643
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0927352   0.642078
2     │  0.445684   0.280282

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.799453  0.686098
2     │ 0.820527  0.462321

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0865892   0.457461
2     │   0.41583   0.135302

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.168632  0.257529
2     │ 0.129233  0.290359
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.826638  0.833991
2     │ 0.960281  0.960104

[:, :, C=2, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.646317   0.624885
2     │  0.296948  0.0033827

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.422488  0.787052
2     │ 0.292876  0.177034
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.868551  0.603325

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0723298   0.417597
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │  0.25667
2     │ 0.448771

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.939523
2     │ 0.453066
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.683058  0.494576
2     │ 0.769288  0.816478
1000×1000 Named sparse matrix with 109 Float64 nonzero entries:
	[14951403058635497631, 12419957900638875901]  =  0.6862827290803875
	[15578960726498056365, 15422846019410515149]  =  0.7186814663891392
	[17850470016925415361,  8058121953372963805]  =  0.2928924648627105
	[8720304024814141479 ,  5927176887743683346]  =  0.23901685172470377
	[3945256368785098242 ,   113574861176001527]  =  0.9937569241744173
	[12900616928123055279,   592365234179887848]  =  0.2510011373388603
	[4315763856331682254 , 17676219393380616284]  =  0.39412666723954404
	[13789993170142104254, 12295598998729798629]  =  0.40941129114855523
	                                              ⋮
	[1602213502834622003 , 18148906667482527649]  =  0.9247114925155278
	[370154515922583624  ,  4214085865611670439]  =  0.5494854248007539
	[5193276450681624824 , 11711005111088208244]  =  0.14783534968426126
	[5188033427577448982 ,  9223427034658990711]  =  0.2743677167463132
	[18012118909807029393, 11470862121108514714]  =  0.6907843464829839
	[14679805967366726614, 16365943061271568709]  =  0.16325589564200627
	[12357008997902541361, 16031689834122954645]  =  0.015282994796216087
	[13459572381615104428,  2758171916068192631]  =  0.029631717031374905
	[18301367769706361526, 11527542315164007414]  =  0.42186415355829654Timing named index: 0.000513272, array index: 0.000627944, named key: 0.132021012
Timing sum large sparse array: 0.011860299, named: 0.02837924
done!
INFO: NamedArrays tests passed

>>> End of log
