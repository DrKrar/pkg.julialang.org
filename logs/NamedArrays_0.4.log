>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.2
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.2
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (814.19921875 MB free)
Uptime: 8145.0 sec
Load Avg:  0.802734375  0.931640625  1.01708984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     375564 s       1644 s      33571 s     322000 s         17 s
#2  3499 MHz     224863 s       5084 s      29690 s     529942 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.19.0
 - DataStructures                0.5.2
 - Iterators                     0.3.0
 - Polynomials                   0.1.2
INFO: Testing NamedArrays
WARNING: New definition 
    push!(DataStructures.Accumulator{#T<:Any, #V<:Number}, #T<:Any) at /home/vagrant/.julia/v0.4/DataStructures/src/accumulator.jl:54
is ambiguous with: 
    push!(Base.Associative, Base.Pair) at dict.jl:294.
To fix, define 
    push!(DataStructures.Accumulator{K<:Any, #V<:Number}, _<:Base.Pair)
before the new definition.
WARNING: New definition 
    push!(DataStructures.Accumulator{#T<:Any, #V<:Number}, #T<:Any) at /home/vagrant/.julia/v0.4/DataStructures/src/accumulator.jl:54
is ambiguous with: 
    push!(Base.Associative, Base.Pair) at dict.jl:294.
To fix, define 
    push!(DataStructures.Accumulator{K<:Any, #V<:Number}, _<:Base.Pair)
before the new definition.
Starting test, no assertions should fail... base, one	.3721547257953812	.2643594005697951	.42878875805313066	.32397956265178984
two	.22392336189003625	.7221731680084325	.6770273688302366	.3830319017157431
a	72
b	83
c	8
d	38
e	12
f	88
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.366618  0.169444  0.965098
b           │ 0.735691  0.294163  0.355459 0.36661844854142833 0.36661844854142833
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.366618  0.169444  0.965098
b     │ 0.735691  0.294163  0.355459
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.366618  0.169444  0.965098
b           │ 0.735691  0.294163  0.355459
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.366618  0.169444  0.965098
b     │ 0.735691  0.294163  0.355459
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.888215   0.27304   0.22693  0.508441
er              │ 0.891672  0.381792  0.529798  0.718528
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140195179189968
0-element Named Array{Any,1}

[0.9007404763985956 0.6975452147938568 0.29629850328058627 0.019525679011374253
 0.16868393060419296 0.46008084956347894 0.32770587385012195 0.9795098515226863]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.90074   0.697545   0.296299  0.0195257
two   │  0.168684   0.460081   0.327706    0.979512x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │   0.90074   0.697545   0.296299  0.0195257
two   │  0.168684   0.460081   0.327706    0.979512x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │     0.383139     -0.541097  …       1.16207    -0.0803552
2     │     0.477508     -0.333963  …      -0.74328       -0.66581000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   -1.00536    0.841698
2     │    1.60323   0.0190626
3     │  -0.659241   -0.756842
4     │   0.484655    -0.36613
5     │   0.243834  -0.0505323
6     │   0.477991   -0.343931
7     │    1.58824    0.265271
8     │    1.22414     0.74499
9     │    0.57237   -0.410026
⋮                ⋮           ⋮
992   │    1.46603    0.857469
993   │   0.750802   -0.576313
994   │   -1.72203     -0.9846
995   │    0.51723    0.915499
996   │ -0.0479084    0.477498
997   │   -1.56968   -0.482486
998   │  0.0620412    -1.01573
999   │ 0.00925436     1.82083
1000  │  -0.690654    -0.252641000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.725987
2    │ -0.869519
3    │  0.147814
4    │  0.774505
5    │  0.403222
6    │  -1.08054
7    │  0.427415
8    │ -0.355301
9    │ -0.129208
⋮              ⋮
992  │  0.310762
993  │  0.202058
994  │  0.396966
995  │  0.283232
996  │  0.282823
997  │  0.824229
998  │  0.611211
999  │   0.38145
1000 │ 0.08230792x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0156624   0.177411
1           │  0.930748   0.555525

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.874915  0.316957
1           │ 0.315731  0.215332
2-element Named Array{Float64,1}
A  │ 
───┼──────────
1  │ 0.0205802
2  │  0.644756
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.434414  0.444328
2     │ 0.770831  0.596831
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.485532  0.705576
2     │ 0.575064   0.44097

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.655302  0.522712
2     │ 0.766231  0.589471
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.185404  0.874261
2     │ 0.735539  0.388619

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.674135  0.575942
2     │ 0.851029  0.559503

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.916174  0.0332122
2     │  0.760749   0.736768

[:, :, C=2, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │   0.96489   0.163471
2     │ 0.0147662  0.0422731
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.620528    0.7627
2     │ 0.353344  0.772003

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.260511  0.907726
2     │ 0.267742  0.452954

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.71577  0.995634
2     │ 0.335999  0.686412
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.808329  0.473593

[:, :, C=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.226244  0.0760238
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │  0.23193
2     │ 0.803672

[:, :, C=2] =
A ╲ B │         1
──────┼──────────
1     │  0.746929
2     │ 0.0738851
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0561635   0.141776
2     │  0.539441   0.348619
1000×1000 Named sparse matrix with 104 Float64 nonzero entries:
	[14839428249571644385,  6564272639106249010]  =  0.7895314351854472
	[7026046704018437269 , 12809965746239821631]  =  0.13767501090928658
	[53689838181604040   ,  5927176887743683346]  =  0.4140288328372421
	[13538631162213086910,   592365234179887848]  =  0.7170502049240575
	[437360754480709846  ,  2791304443232646030]  =  0.3694494026902242
	[8809575672816075910 ,  6947860236989419941]  =  0.7891888367853399
	[720843468639697319  , 16390501590956164603]  =  0.18519795781059867
	[3002012468963137344 , 14956803718882296446]  =  0.8287111537817058
	                                              ⋮
	[17135076390733320242,  9526342322394325946]  =  0.631033057400356
	[8265524791738013937 , 10024080200852233627]  =  0.5660141301308117
	[2515209571418144671 , 17737936919457265947]  =  0.8795731891805563
	[11177662065610013630,  7989582431359101293]  =  0.3325223693282926
	[8586548853081112102 ,  1523061068178304284]  =  0.4518751606450315
	[144428425607543167  , 12624682912995533025]  =  0.827092120644384
	[3004739544949339451 , 12020782256748308824]  =  0.4250943335012718
	[919672847296486462  ,  3010300210541878305]  =  0.3416249323129392
	[7356293762799192678 ,   427459847123490633]  =  0.9802986004510981Timing named index: 0.000883421, array index: 0.000610412, named key: 0.102532535
Timing sum large sparse array: 0.010331329, named: 0.027611155
done!
INFO: NamedArrays tests passed

>>> End of log
