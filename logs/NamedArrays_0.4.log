>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.4.6
INFO: Installing Iterators v0.2.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.1
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (882.69921875 MB free)
Uptime: 7021.0 sec
Load Avg:  1.234375  1.0185546875  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz     319112 s       3039 s      29116 s     275237 s         25 s
#2  3492 MHz     197639 s       2855 s      25702 s     448106 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.9.5
 - DataStructures                0.4.6
 - Iterators                     0.2.0
 - Polynomials                   0.1.1
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.3130318033755768	.07106730328071897	.5423129439541021	.16033043641739364
two	.8992713310349687	.02791364085371284	.792604929413226	.5419403736231811
a	16
b	79
c	31
d	40
e	52
f	10
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.216076   0.228246   0.179608
b           │ 0.0366852   0.948589   0.473148 0.21607620045969278 0.21607620045969278
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.216076   0.228246   0.179608
b     │ 0.0366852   0.948589   0.473148
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │         c          d          e
────────────┼────────────────────────────────
a           │  0.216076   0.228246   0.179608
b           │ 0.0366852   0.948589   0.473148
2x3 Named Array{Float64,2}
A ╲ B │         c          d          e
──────┼────────────────────────────────
a     │  0.216076   0.228246   0.179608
b     │ 0.0366852   0.948589   0.473148
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.501524  0.468742  0.656567  0.891133
er              │ 0.029824  0.115569  0.925198  0.498245
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140605176017536
0-element Named Array{Any,1}

[0.09921491360513102 0.0388839292013452 0.42173921384387136 0.5421734092583537
 0.7749418542040809 0.8427169869108961 0.06863735339330912 0.2730236160712527]
2x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │ 0.0992149  0.0388839   0.421739   0.542173
two   │  0.774942   0.842717  0.0686374   0.2730242x4 Named Array{Float64,2}
A ╲ B │         a          b          c          d
──────┼───────────────────────────────────────────
one   │ 0.0992149  0.0388839   0.421739   0.542173
two   │  0.774942   0.842717  0.0686374   0.2730242x1000 Named Array{Float64,2}
A ╲ B │           1            2  …          999         1000
──────┼──────────────────────────────────────────────────────
1     │   -0.151438    -0.819562  …      1.37768    -0.934514
2     │    0.695353   0.00786156  …      0.32501     -1.521811000x2 Named Array{Float64,2}
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.513354   -0.665735
2     │   0.272349   0.0769972
3     │   -1.79218     1.51847
4     │   0.883104    0.787901
5     │   -2.09309       1.219
6     │  -0.565124   -0.536402
7     │    1.08695   -0.610662
8     │ -0.0506492    0.657152
9     │    0.18397    -1.86237
⋮                ⋮           ⋮
992   │    1.09291     1.60642
993   │   0.367338    -1.43083
994   │  0.0525029     1.73665
995   │    1.90915    0.546363
996   │  0.0884232     1.69006
997   │   0.196375     0.18648
998   │   0.350325    0.259824
999   │   0.913103   -0.377294
1000  │  -0.340509    -0.193931000-element Named Array{Float64,1}
A    │ 
─────┼──────────
1    │ -0.520384
2    │ -0.266347
3    │    1.0488
4    │  -1.18528
5    │  0.305062
6    │ -0.512419
7    │  0.174187
8    │   2.55138
9    │  0.923651
⋮              ⋮
992  │ -0.402914
993  │ -0.110373
994  │  -1.48167
995  │ 0.0357401
996  │  -0.32206
997  │   1.02145
998  │ -0.877101
999  │ -0.727068
1000 │  -1.124312x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.813493  0.446616
1           │ 0.998073  0.180125

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │ 0.0244083   0.369506
1           │  0.768334  0.0219728
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.122937
2  │ 0.435739
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │  0.28527  0.337198
2     │ 0.453668  0.742676
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.730165   0.348656
2     │ 0.0459607   0.224472

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.236591  0.515904
2     │ 0.447911  0.431597
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │ 0.0988618   0.648232
2     │  0.148116   0.789956

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.528345  0.376582
2     │ 0.609306  0.444043

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.137068   0.765303
2     │  0.690669  0.0948558

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.13725  0.227587
2     │ 0.374078  0.850637
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.996679  0.0612724
2     │  0.379986   0.642492

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.693816  0.386948
2     │  0.32557  0.991678

[:, :, C=1, D=2, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.988526  0.709626
2     │ 0.112643  0.590688
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.875467  0.829162

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │  0.49991  0.399428
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.811687
2     │ 0.347887

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.842566
2     │ 0.164138
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.724809  0.761922
2     │ 0.871243   0.40329
1000×1000 Named sparse matrix with 106 Float64 nonzero entries:
	[13970367575607681105,  5927176887743683346]  =  0.2558262579517152
	[9036634046110542021 ,  2849690884155085581]  =  0.6715437152999923
	[1987182164192973075 , 10601912832305821454]  =  0.49947858977088133
	[12376285854513575894,  8725235013359650451]  =  0.2806996323668174
	[4782469333680129318 ,  1166092285267503990]  =  0.22954964930370858
	[14475185020288943568,  2001767177420584454]  =  0.6880896333693547
	[14178850942406463629,  1603870711594358861]  =  0.4970782062619079
	[13538132892370992970,  6947860236989419941]  =  0.365306443264511
	                                              ⋮
	[1389137670392774052 , 13700233674872906346]  =  0.5868719597147292
	[12195123354423713188, 13700233674872906346]  =  0.40542821814239516
	[9051203263452778593 , 13544680138434484894]  =  0.7749720910999309
	[16501174925917855829, 15717097331822026300]  =  0.87830454423551
	[14340416566338039723,  2318046236442875673]  =  0.10662437633712285
	[3988919785315502792 ,  9526342322394325946]  =  0.7083710018692302
	[11568453395938084092,  5597731276780160114]  =  0.013808946276630873
	[5647414292592918739 , 11711005111088208244]  =  0.5845295443200333
	[12288543705408635880, 14057278280866812536]  =  0.7084433239699812Timing named index: 0.000698703, array index: 0.000301696, named key: 0.131004018
Timing sum large sparse array: 0.007411831, named: 0.01930616
done!
INFO: NamedArrays tests passed

>>> End of log
