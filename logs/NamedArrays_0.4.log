>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (851.0078125 MB free)
Uptime: 8785.0 sec
Load Avg:  0.9228515625  0.97802734375  1.03857421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     378177 s         14 s      32693 s     381830 s         23 s
#2  3503 MHz     242692 s       5499 s      29386 s     573743 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.256728424274804	.6565356695937985	.7128772963747603	.6162435673271343
two	.9821009999632069	.9444400852730692	.9042666133268631	.7835156811162194
a	38
b	84
c	94
d	69
e	51
f	61
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.33576  0.880629  0.665776
b           │ 0.343575  0.977097  0.952535 0.33576015629230516 0.33576015629230516
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.33576  0.880629  0.665776
b     │ 0.343575  0.977097  0.952535
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │  0.33576  0.880629  0.665776
b           │ 0.343575  0.977097  0.952535
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │  0.33576  0.880629  0.665776
b     │ 0.343575  0.977097  0.952535
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │        yi         er        san         si
────────────────┼───────────────────────────────────────────
yi              │  0.325408   0.944313  0.0514257   0.418159
er              │  0.808262   0.819111  0.0334181   0.647111
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
140074600140320
0-element Named Array{Any,1}

[0.3765493815370635 0.08366399338467145 0.7629970856084958 0.9933914048278336
 0.8461129758380981 0.9115763554560634 0.3674978500108441 0.2548837103944124]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.376549  0.083664  0.762997  0.993391
two   │ 0.846113  0.911576  0.367498  0.2548842x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.376549  0.083664  0.762997  0.993391
two   │ 0.846113  0.911576  0.367498  0.2548842x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │      1.25031       2.29882  …     -0.181613      -1.85305
2     │    0.0833107      -1.32754  …      0.225636      -1.376251000x2 Named Array{Float64,2}
A ╲ B │         1          2
──────┼─────────────────────
1     │ -0.290218  -0.260895
2     │ -0.442502  -0.694815
3     │  0.756623   -1.48594
4     │ -0.496263    1.48017
5     │  -1.25469   -1.80515
6     │  0.649858  -0.647081
7     │   0.72468   -0.44074
8     │ -0.169258   0.400945
9     │ -0.182341  -0.958146
⋮               ⋮          ⋮
992   │ -0.631461   0.345043
993   │  0.861483  -0.284279
994   │ -0.334668   0.415334
995   │  0.587895  -0.321234
996   │ -0.467012  -0.490891
997   │ -0.294541    0.11687
998   │  -1.72164  -0.696495
999   │ -0.522847    1.35241
1000  │  -0.47446  -0.8107981000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │   -1.25519
2    │ -0.0702602
3    │  -0.248279
4    │   0.694395
5    │  0.0233094
6    │    0.52093
7    │   0.419089
8    │   0.715323
9    │  -0.465072
⋮               ⋮
992  │   -2.48924
993  │  -0.303768
994  │    -1.2659
995  │  -0.525655
996  │  -0.411432
997  │  -0.383577
998  │    0.20347
999  │  -0.471576
1000 │    0.526212x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │  0.28549  0.642746
1           │ 0.399247  0.886708

[:, :, indexing=1] =
base ╲ zero │         0          1
────────────┼─────────────────────
0           │  0.754759  0.0587994
1           │  0.413829   0.693442
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.774948
2  │ 0.267095
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.999435  0.746334
2     │ 0.102763  0.521337
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.173911   0.0640822
2     │   0.131254  0.00862564

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.196878   0.91161
2     │  0.12199  0.835997
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.884277   0.799715
2     │ 0.0735597   0.263363

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.920332  0.905188
2     │  0.69356  0.537417

[:, :, C=1, D=2] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.491557   0.843392
2     │ 0.0103338   0.363428

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.583018  0.790245
2     │ 0.974924  0.627391
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.493494  0.254659
2     │ 0.202233  0.784541

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.533062  0.537021
2     │ 0.486764  0.537712

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.548265   0.908054
2     │   0.48117  0.0124954
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.798357  0.743255

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.828972  0.845648
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1
──────┼─────────
1     │ 0.414121
2     │ 0.348912

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.280665
2     │ 0.775239
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.522873  0.138053
2     │ 0.829875  0.593902
1000×1000 Named sparse matrix with 100 Float64 nonzero entries:
	[14110845009009629080,  9690422262975321697]  =  0.9874138497540448
	[13421307536398036800,   397394769374478572]  =  0.890104229583867
	[14276971493366205365, 13789993170142104254]  =  0.9807371025976084
	[4302721723742542942 ,  8058121953372963805]  =  0.5798923683429296
	[10109836606734241243,  6134978669850253296]  =  0.10459641065066205
	[18403132107547063335, 14517667374310463124]  =  0.09383723617466488
	[2365706432056806243 ,  2230070772219402886]  =  0.8725312888501777
	[17080632333507329842, 10601912832305821454]  =  0.6766613037032525
	                                              ⋮
	[11551291857879764225, 16221828541365357577]  =  0.7195859947216248
	[15607310917841701902,  5983786778458205040]  =  0.4711141759566704
	[13544680138434484894,  7608520278977511969]  =  0.9584665096347857
	[14835807873575694564, 10361974346531339474]  =  0.2485630729912056
	[16930337021800722690,  9526342322394325946]  =  0.5188897638197094
	[14770838543801714634, 14057278280866812536]  =  0.8409809743152208
	[18403132107547063335, 13970367575607681105]  =  0.7732457839192284
	[8471876845144429043 , 11314283927973801071]  =  0.8763804953943755
	[1082045492561856594 , 13950575499123628905]  =  0.7523234147439186Timing named index: 0.000441793, array index: 0.000485591, named key: 0.073686997
Timing sum large sparse array: 0.005237718, named: 0.012060702
done!
INFO: NamedArrays tests passed

>>> End of log
