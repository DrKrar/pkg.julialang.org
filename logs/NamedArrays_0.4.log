>>> 'Pkg.add("NamedArrays")' log
INFO: Cloning cache of NamedArrays from git://github.com/davidavdav/NamedArrays.jl.git
INFO: Installing Combinatorics v0.2.1
INFO: Installing DataStructures v0.5.3
INFO: Installing Iterators v0.3.0
INFO: Installing NamedArrays v0.5.3
INFO: Installing Polynomials v0.1.3
INFO: Package database updated

>>> 'Pkg.test("NamedArrays")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (811.0546875 MB free)
Uptime: 8269.0 sec
Load Avg:  0.90185546875  0.93798828125  1.0078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     369173 s         54 s      33308 s     341963 s         10 s
#2  3500 MHz     248787 s        116 s      30301 s     522285 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - NamedArrays                   0.5.3
5 additional packages:
 - Combinatorics                 0.2.1
 - Compat                        0.21.0
 - DataStructures                0.5.3
 - Iterators                     0.3.0
 - Polynomials                   0.1.3
INFO: Testing NamedArrays
Starting test, no assertions should fail... base, one	.9776669931917596	.3208265289627621	.6683831263630378	.3373158520005044
two	.7734793991208653	.0027145086258109075	.49976652278946276	.12283856975421337
a	35
b	100
c	42
d	41
e	2
f	43
construction, 2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.941421  0.893386  0.228916
b           │ 0.863285  0.549015  0.558053 0.9414208156218762 0.9414208156218762
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.941421  0.893386  0.228916
b     │ 0.863285  0.549015  0.558053
2x3 Named Array{Float64,2}
dim1 ╲ dim2 │        c         d         e
────────────┼─────────────────────────────
a           │ 0.941421  0.893386  0.228916
b           │ 0.863285  0.549015  0.558053
2x3 Named Array{Float64,2}
A ╲ B │        c         d         e
──────┼─────────────────────────────
a     │ 0.941421  0.893386  0.228916
b     │ 0.863285  0.549015  0.558053
arithmetic, WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
WARNING: Dropping mismatching names
convert, WARNING: could not import Base.indices into Main
getindex, setindex, 2x4 Named Array{Float64,2}
magnificent ╲ 7 │       yi        er       san        si
────────────────┼───────────────────────────────────────
yi              │ 0.409108  0.122126  0.484903    0.3001
er              │ 0.532423  0.739292  0.218056  0.758276
hcat/vcat, copy, sum, conversions, changing names, multi-dimensional, dodgy indices, sort, broadcast, vectorized, re-arrange, eachindex, matrixops, show,
0-dimensional Named Array{Int64,0}
139809203251248
0-element Named Array{Any,1}

[0.7471635452926095 0.6768912727957603 0.7171367001989175 0.40559890830401724
 0.5527240670438549 0.28208868264373765 0.486687137219179 0.6438415262111525]
2x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.747164  0.676891  0.717137  0.405599
two   │ 0.552724  0.282089  0.486687  0.6438422x4 Named Array{Float64,2}
A ╲ B │        a         b         c         d
──────┼───────────────────────────────────────
one   │ 0.747164  0.676891  0.717137  0.405599
two   │ 0.552724  0.282089  0.486687  0.6438422x1000 Named Array{Float64,2}
A ╲ B │            1             2  …           999          1000
──────┼──────────────────────────────────────────────────────────
1     │    -0.519197     -0.990702  …       1.57842        3.3468
2     │    0.0251441     0.0703003  …       2.27301     -0.3410651000x2 Named Array{Float64,2}
A ╲ B │           1            2
──────┼─────────────────────────
1     │    0.976795     0.984792
2     │   -0.591403     -1.59124
3     │   -0.292535    -0.215374
4     │   -0.226952  -0.00846359
5     │   -0.934136     -1.33945
6     │     0.42295      0.36323
7     │   -0.329223     0.890682
8     │    -1.52857     0.487445
9     │    0.547946    -0.914654
⋮                 ⋮            ⋮
992   │    -1.04323    -0.640274
993   │  -0.0363615    -0.342998
994   │    0.853539    -0.159724
995   │   0.0601237     0.768858
996   │   -0.114074    -0.467331
997   │   -0.323609      2.25503
998   │    0.426233     0.346718
999   │    0.105535      1.65536
1000  │   -0.375351    -0.6454981000-element Named Array{Float64,1}
A    │ 
─────┼───────────
1    │  -0.579563
2    │   -1.23127
3    │   0.995861
4    │  -0.989417
5    │  -0.754599
6    │ -0.0971108
7    │   -0.40713
8    │  0.0261401
9    │    1.67819
⋮               ⋮
992  │ -0.0339658
993  │  0.0779229
994  │   -0.45008
995  │    -1.2321
996  │   -0.91041
997  │   0.651968
998  │  -0.468275
999  │    1.26849
1000 │    1.189692x2x2 Named Array{Float64,3}

[:, :, indexing=0] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.501881  0.860486
1           │ 0.257548  0.803258

[:, :, indexing=1] =
base ╲ zero │        0         1
────────────┼───────────────────
0           │ 0.888232  0.643989
1           │ 0.621716  0.140007
2-element Named Array{Float64,1}
A  │ 
───┼─────────
1  │ 0.956109
2  │ 0.136414
2x2 Named Array{Float64,2}
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.953608  0.765613
2     │ 0.127195  0.918299
2x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.405594   0.71256
2     │ 0.668486  0.364853

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.581845  0.682227
2     │ 0.141282  0.984788
2x2x2x2 Named Array{Float64,4}

[:, :, C=1, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.711969  0.742803
2     │ 0.911894  0.223696

[:, :, C=2, D=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.456897  0.872219
2     │ 0.583162  0.809974

[:, :, C=1, D=2] =
A ╲ B │          1           2
──────┼───────────────────────
1     │   0.841729  0.00267537
2     │   0.944842    0.509646

[:, :, C=2, D=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.066491  0.240706
2     │ 0.972349  0.934868
2x2x2x2x2 Named Array{Float64,5}

[:, :, C=1, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.120454  0.206177
2     │ 0.428343   0.18546

[:, :, C=2, D=1, E=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.146348  0.359937
2     │ 0.980269  0.263697

[:, :, C=1, D=2, E=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.781797    0.71358
2     │ 0.0652874   0.983647
⋮
1x2x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.876005  0.758827

[:, :, C=2] =
A ╲ B │        1         2
──────┼───────────────────
1     │ 0.658578  0.458691
2x1x2 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1
──────┼──────────
1     │  0.797202
2     │ 0.0589652

[:, :, C=2] =
A ╲ B │        1
──────┼─────────
1     │ 0.397329
2     │ 0.348988
2x2x1 Named Array{Float64,3}

[:, :, C=1] =
A ╲ B │         1          2
──────┼─────────────────────
1     │  0.502724  0.0876485
2     │  0.344443    0.50575
1000×1000 Named sparse matrix with 89 Float64 nonzero entries:
	[16633641293030664246,  9690422262975321697]  =  0.2737082030566407
	[9870978712100122380 , 12809965746239821631]  =  0.8282989358535933
	[2057797465169484997 ,  8058121953372963805]  =  0.27617259914271
	[5733908175048446366 , 11080872162023102847]  =  0.17277694659744758
	[15838569937311488483,  5062864901616737721]  =  0.0654004171886231
	[14066869468942639955,  4394159825732135742]  =  0.4448310512339726
	[11024660093340930346,  6947860236989419941]  =  0.47983090638136816
	[8969053341726467224 , 15090471957562756503]  =  0.8337252042097312
	                                              ⋮
	[16365943061271568709, 15624079346807366426]  =  0.01936191697969636
	[5853903685320491388 , 15673988649286256572]  =  0.6270210328282118
	[14117127041272093201, 11033897610157224162]  =  0.20151250032778423
	[7467562274097903724 , 17329041886349039120]  =  0.7629537728563398
	[4398365516710837200 , 14774945750507892610]  =  0.12270479154601688
	[12405273559266350440, 11551291857879764225]  =  0.21133207972940227
	[11438449578475668365,  7989582431359101293]  =  0.15514376437382582
	[144428425607543167  ,  9223427034658990711]  =  0.9746598915084757
	[12786760913832678713,  6565262192402102057]  =  0.172465039777024Timing named index: 0.000927984, array index: 0.000484003, named key: 0.102345834
Timing sum large sparse array: 0.006764365, named: 0.020975205
done!
INFO: NamedArrays tests passed

>>> End of log
