>>> 'Pkg.add("DiffEqFinancial")' log
INFO: Installing Calculus v0.2.2
INFO: Installing Combinatorics v0.3.2
INFO: Installing DataStructures v0.5.3
INFO: Installing DiffBase v0.0.5
INFO: Installing DiffEqBase v0.11.0
INFO: Installing DiffEqFinancial v0.0.1
INFO: Installing ForwardDiff v0.4.1
INFO: Installing Hiccup v0.1.1
INFO: Installing Iterators v0.3.0
INFO: Installing Juno v0.2.7
INFO: Installing MacroTools v0.3.6
INFO: Installing Media v0.2.5
INFO: Installing NaNMath v0.2.2
INFO: Installing Parameters v0.7.1
INFO: Installing PolynomialFactors v0.0.3
INFO: Installing Polynomials v0.1.3
INFO: Installing Primes v0.1.2
INFO: Installing Ranges v0.0.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing RecursiveArrayTools v0.2.0
INFO: Installing ResettableStacks v0.1.0
INFO: Installing Roots v0.3.0
INFO: Installing SimpleTraits v0.3.1
INFO: Installing SpecialFunctions v0.1.1
INFO: Installing StochasticDiffEq v1.1.0
INFO: Package database updated

>>> 'Pkg.test("DiffEqFinancial")' log
Julia Version 0.6.0-pre.alpha.161
Commit 8f97e6e (2017-03-17 02:27 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1790.85546875 MB free)
Uptime: 23350.0 sec
Load Avg:  0.853515625  0.9150390625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1330219 s       6646 s     118709 s     636799 s         47 s
#2  3499 MHz     657117 s         44 s      75423 s    1505284 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - DiffEqFinancial               0.0.1
 - JSON                          0.8.3
25 additional packages:
 - Calculus                      0.2.2
 - Combinatorics                 0.3.2
 - Compat                        0.20.0
 - DataStructures                0.5.3
 - DiffBase                      0.0.5
 - DiffEqBase                    0.11.0
 - ForwardDiff                   0.4.1
 - Hiccup                        0.1.1
 - Iterators                     0.3.0
 - Juno                          0.2.7
 - MacroTools                    0.3.6
 - Media                         0.2.5
 - NaNMath                       0.2.2
 - Parameters                    0.7.1
 - PolynomialFactors             0.0.3
 - Polynomials                   0.1.3
 - Primes                        0.1.2
 - Ranges                        0.0.1
 - RecipesBase                   0.1.0
 - RecursiveArrayTools           0.2.0
 - ResettableStacks              0.1.0
 - Roots                         0.3.0
 - SimpleTraits                  0.3.1
 - SpecialFunctions              0.1.1
 - StochasticDiffEq              1.1.0
INFO: Testing DiffEqFinancial
WARNING: Method definition (::Type{DiffEqBase.DiscreteTestProblem{uType, AType, tType, isinplace, F} where F where isinplace where tType where AType where uType})(Any, Any, Any) in module DiffEqBase at /home/vagrant/.julia/v0.6/DiffEqBase/src/problems/discrete_problems.jl:19 overwritten at /home/vagrant/.julia/v0.6/DiffEqBase/src/problems/discrete_problems.jl:33.
WARNING: sqrt{T <: Number}(x::AbstractArray{T}) is deprecated, use sqrt.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] sqrt(::Array{Float64,1}) at ./deprecated.jl:51
 [3] construct_correlated_noisefunc(::Array{Float64,2}) at /home/vagrant/.julia/v0.6/DiffEqBase/src/noise_process.jl:19
 [4] DiffEqFinancial.HestonProblem(::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::Array{Float64,1}, ::Tuple{Float64,Float64}) at /home/vagrant/.julia/v0.6/DiffEqFinancial/src/problems.jl:29
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] process_options(::Base.JLOptions) at ./client.jl:305
 [8] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl, in expression starting on line 7
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:15
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::Void, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:91
 [5] init(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:47
 [6] #solve#53(::Array{Any,1}, ::Function, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl, in expression starting on line 8
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:32
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::Void, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:91
 [5] init(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:47
 [6] #solve#53(::Array{Any,1}, ::Function, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl, in expression starting on line 8
WARNING: max{T1 <: Real, T2 <: Real}(x::AbstractArray{T1}, y::AbstractArray{T2}) is deprecated, use max.(x, y) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:64
 [2] max(::Array{Float64,1}, ::Array{Float64,1}) at ./deprecated.jl:51
 [3] sde_determine_initdt(::Array{Float64,1}, ::Float64, ::Float64, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::Rational{Int64}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/initdt.jl:33
 [4] #init#54(::Float64, ::Bool, ::Int64, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Bool, ::Bool, ::Rational{Int64}, ::Float64, ::Float64, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Bool, ::Rational{Int64}, ::Rational{Int64}, ::Rational{Int64}, ::Float64, ::Float64, ::Float64, ::StochasticDiffEq.#ODE_DEFAULT_NORM, ::StochasticDiffEq.#ODE_DEFAULT_UNSTABLE_CHECK, ::StochasticDiffEq.#ODE_DEFAULT_ISOUTOFDOMAIN, ::Bool, ::Bool, ::Bool, ::Bool, ::Int64, ::Bool, ::StochasticDiffEq.#ODE_DEFAULT_PROG_MESSAGE, ::String, ::Void, ::Void, ::Bool, ::Bool, ::Bool, ::Array{Any,1}, ::DiffEqBase.#init, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:91
 [5] init(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:47
 [6] #solve#53(::Array{Any,1}, ::Function, ::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [7] solve(::DiffEqFinancial.HestonProblem{Array{Float64,1},Float64,true,true,:Commutative,DiffEqFinancial.##1#3{Float64,Float64,Float64},DiffEqFinancial.##2#4{Float64},DiffEqBase.##15#16{Array{Float64,2},Array{Float64,1}}}, ::StochasticDiffEq.SRIW1{StochasticDiffEq.RSWM{:RSwM3,Float64}}) at /home/vagrant/.julia/v0.6/StochasticDiffEq/src/solve.jl:10
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] process_options(::Base.JLOptions) at ./client.jl:305
 [11] _start() at ./client.jl:371
while loading /home/vagrant/.julia/v0.6/DiffEqFinancial/test/runtests.jl, in expression starting on line 8
INFO: DiffEqFinancial tests passed

>>> End of log
