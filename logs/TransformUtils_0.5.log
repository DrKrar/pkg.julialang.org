>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (412.92578125 MB free)
Uptime: 37358.0 sec
Load Avg:  1.06982421875  1.02880859375  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz    2195359 s       7184 s     230952 s     782362 s        239 s
#2  3511 MHz     666989 s         53 s     134428 s    2770348 s          9 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.2
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.14.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0414052 0.034342; 0.0414052 0.0 0.0287977; -0.034342 -0.0287977 0.0])
dAA = TransformUtils.so3([0.0 -0.0406121 -0.0430331; 0.0406121 0.0 -0.0182679; 0.0430331 0.0182679 0.0])
dAA = TransformUtils.so3([0.0 -0.100789 0.0901242; 0.100789 0.0 -0.00470367; -0.0901242 0.00470367 0.0])
dAA = TransformUtils.Quaternion(0.9964544252952177,[0.0182595,-0.0429369,-0.0700114])
dAA = TransformUtils.SO3([0.97907 -0.0137488 -0.203059; 0.0231925 0.998753 0.0442008; 0.202199 -0.0479852 0.978168])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.995541 -0.00917776 -0.093884; 0.0171042 0.996321 0.0839755; 0.0927679 -0.0852069 0.992035]),[-0.853382,0.894366,0.575579])
xj = TransformUtils.SE3(TransformUtils.SO3([0.901795 0.365607 -0.23043; -0.378415 0.925552 -0.0124312; 0.20873 0.0984085 0.97301]),[-0.673687,-1.59721,-0.179057])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.910664 0.388937 -0.139351; -0.403085 0.910407 -0.0931777; 0.0906257 0.141024 0.98585]),[0.0662717,-2.41976,-0.974728])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
