>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (611.30859375 MB free)
Uptime: 38085.0 sec
Load Avg:  1.181640625  1.08740234375  1.06298828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2192229 s       1216 s     221095 s     948527 s        195 s
#2  3500 MHz     784917 s       5265 s     114890 s    2771483 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.101917 -0.00533087; -0.101917 0.0 -0.0133412; 0.00533087 0.0133412 0.0])
dAA = TransformUtils.so3([0.0 0.016034 -0.128411; -0.016034 0.0 -0.0807394; 0.128411 0.0807394 0.0])
dAA = TransformUtils.so3([0.0 -0.0613047 -0.0987119; 0.0613047 0.0 -0.144656; 0.0987119 0.144656 0.0])
dAA = TransformUtils.Quaternion(0.9969983487103097,[-0.0167738,-0.0701561,0.0281258])
dAA = TransformUtils.SO3([0.999731 0.0231586 0.000789448; -0.0231674 0.999633 0.014055; -0.000463664 -0.0140695 0.999901])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.863785 0.168394 0.474889; -0.258037 0.957366 0.12987; -0.432774 -0.234719 0.87041]),[0.750253,-0.0991354,1.08468])
xj = TransformUtils.SE3(TransformUtils.SO3([0.981759 0.172223 -0.0805462; -0.162884 0.980392 0.110907; 0.0980676 -0.0957644 0.990561]),[-0.953286,-0.536809,0.38383])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.847618 -0.06277 -0.526882; -0.0136355 0.990073 -0.139888; 0.530432 0.125756 0.838348]),[-1.05524,-0.541376,-1.47586])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
