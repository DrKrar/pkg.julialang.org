>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (589.02734375 MB free)
Uptime: 36524.0 sec
Load Avg:  1.1201171875  1.04345703125  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3494 MHz    2171283 s       4028 s     189450 s     835468 s        153 s
#2  3494 MHz     696282 s       1984 s      98099 s    2734790 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0919464 0.190244; 0.0919464 0.0 0.026143; -0.190244 -0.026143 0.0])
dAA = TransformUtils.so3([0.0 -0.00330438 -0.113533; 0.00330438 0.0 -0.0597193; 0.113533 0.0597193 0.0])
dAA = TransformUtils.so3([0.0 -0.0414568 -0.0643427; 0.0414568 0.0 -0.0805782; 0.0643427 0.0805782 0.0])
dAA = TransformUtils.Quaternion(0.9995859423059587,[-0.0125111,-0.025646,-0.00370139])
dAA = TransformUtils.SO3([0.977494 -0.179638 -0.110611; 0.164826 0.977579 -0.13104; 0.131671 0.10986 0.985187])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.905273 -0.226251 -0.35957; 0.0205614 0.868729 -0.49486; 0.424332 0.440591 0.791089]),[0.516891,-1.46216,-0.632063])
xj = TransformUtils.SE3(TransformUtils.SO3([0.963921 0.0646749 0.258212; -0.0842188 0.994302 0.0653488; -0.252514 -0.0847374 0.963876]),[-2.86256,0.429335,-0.249872])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.763731 0.043036 0.644099; -0.402507 0.811812 0.423024; -0.504682 -0.582331 0.637328]),[-2.85826,2.57619,0.581472])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
