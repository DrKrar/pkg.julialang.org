>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (622.66015625 MB free)
Uptime: 40818.0 sec
Load Avg:  1.21875  1.02587890625  1.00927734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2313950 s       6071 s     229430 s    1049586 s        287 s
#2  3499 MHz     812278 s        108 s     128149 s    2982990 s          8 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0256523 -0.12055; -0.0256523 0.0 -0.0848921; 0.12055 0.0848921 0.0])
dAA = TransformUtils.so3([0.0 -0.0333963 -0.00606778; 0.0333963 0.0 0.142463; 0.00606778 -0.142463 0.0])
dAA = TransformUtils.so3([0.0 -0.190868 0.0544519; 0.190868 0.0 0.0400678; -0.0544519 -0.0400678 0.0])
dAA = TransformUtils.Quaternion(0.996785580460602,[-0.0739119,0.00144645,0.0308778])
dAA = TransformUtils.SO3([0.967621 -0.206402 -0.145285; 0.222804 0.968932 0.107376; 0.118609 -0.13627 0.983546])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.965724 -0.099147 -0.239891; 0.0282105 0.958793 -0.282703; 0.258035 0.266246 0.928726]),[-1.06214,-0.866526,-0.161042])
xj = TransformUtils.SE3(TransformUtils.SO3([0.998974 0.0339553 -0.0299789; -0.0370729 0.993192 -0.110433; 0.026025 0.111431 0.993431]),[0.583561,-0.0697211,-1.20104])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.970402 0.0895629 0.224273; -0.127661 0.978566 0.161587; -0.204994 -0.185435 0.961037]),[1.34341,0.323909,-1.58592])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
