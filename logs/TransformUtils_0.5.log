>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (550.77734375 MB free)
Uptime: 40262.0 sec
Load Avg:  0.88427734375  0.94189453125  1.0107421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2241531 s       1246 s     217577 s    1095601 s        208 s
#2  3499 MHz     813370 s       5624 s     112461 s    2936822 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0301096 -0.0980305; -0.0301096 0.0 -0.106282; 0.0980305 0.106282 0.0])
dAA = TransformUtils.so3([0.0 -0.0260853 0.0228404; 0.0260853 0.0 0.0267447; -0.0228404 -0.0267447 0.0])
dAA = TransformUtils.so3([0.0 -0.126871 0.245112; 0.126871 0.0 -0.0671454; -0.245112 0.0671454 0.0])
dAA = TransformUtils.Quaternion(0.999144260615657,[0.0195319,0.0115957,0.0345657])
dAA = TransformUtils.SO3([0.994691 0.102725 -0.00609485; -0.102797 0.994616 -0.0130791; 0.0047185 0.0136362 0.999896])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.977869 -0.198336 -0.0665951; 0.1699 0.938547 -0.300438; 0.12209 0.282474 0.951474]),[-1.51284,0.0868393,-1.44374])
xj = TransformUtils.SE3(TransformUtils.SO3([0.912883 0.220211 -0.343732; -0.268172 0.958348 -0.0982492; 0.307779 0.181869 0.933914]),[0.166924,-0.522858,-0.947605])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.884694 0.400366 -0.238795; -0.345811 0.907152 0.23977; 0.312619 -0.129545 0.941003]),[1.59957,-0.765241,0.543374])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
