>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (407.62890625 MB free)
Uptime: 38050.0 sec
Load Avg:  0.96728515625  1.0068359375  0.9677734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2275402 s       6388 s     259907 s     779991 s        115 s
#2  3499 MHz     607902 s        624 s     113322 s    2982992 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.2
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.14.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.0456213 -0.0852719; 0.0456213 0.0 -0.088657; 0.0852719 0.088657 0.0])
dAA = TransformUtils.so3([0.0 -0.191557 -0.0173226; 0.191557 0.0 -0.0387741; 0.0173226 0.0387741 0.0])
dAA = TransformUtils.so3([0.0 -0.0624545 0.116883; 0.0624545 0.0 -0.0120053; -0.116883 0.0120053 0.0])
dAA = TransformUtils.Quaternion(0.9958188058598031,[0.0170593,0.0645107,0.0623879])
dAA = TransformUtils.SO3([0.998072 0.0571207 0.0242997; -0.0555706 0.996633 -0.0602861; -0.0276614 0.0588195 0.997885])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.965334 0.0305829 -0.259219; 0.100857 0.872273 0.478506; 0.240744 -0.488062 0.838951]),[0.0378784,1.04197,0.827385])
xj = TransformUtils.SE3(TransformUtils.SO3([0.961724 0.271475 0.0372603; -0.252973 0.82735 0.501495; 0.105316 -0.491725 0.864358]),[0.419087,0.253328,0.541386])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.928225 0.227129 0.294637; -0.24265 0.96997 0.0167194; -0.281991 -0.0870131 0.955463]),[0.2196,-0.536671,-0.716127])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
