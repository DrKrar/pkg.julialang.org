>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (892.79296875 MB free)
Uptime: 38099.0 sec
Load Avg:  1.05322265625  1.04248046875  0.9912109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    2186055 s        211 s     236490 s     939949 s        144 s
#2  3500 MHz     723550 s       6011 s     113346 s    2840950 s          6 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.19.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 -0.00535854 0.197997; 0.00535854 0.0 -0.158916; -0.197997 0.158916 0.0])
dAA = TransformUtils.so3([0.0 0.0382201 -0.0196165; -0.0382201 0.0 -0.161052; 0.0196165 0.161052 0.0])
dAA = TransformUtils.so3([0.0 -0.0473879 0.235793; 0.0473879 0.0 -0.0442341; -0.235793 0.0442341 0.0])
dAA = TransformUtils.Quaternion(0.9943510844838915,[0.0383949,-0.0828171,-0.0541578])
dAA = TransformUtils.SO3([0.997325 0.0058414 -0.0728626; 0.00579352 0.987349 0.158456; 0.0728664 -0.158454 0.984674])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.707784 -0.512513 0.486181; 0.475178 0.854662 0.209185; -0.522731 0.0829646 0.848451]),[-0.199066,0.400919,0.389506])
xj = TransformUtils.SE3(TransformUtils.SO3([0.935858 0.352291 -0.00775017; -0.350067 0.926987 -0.134715; -0.0402746 0.128787 0.990854]),[0.772051,0.542718,1.82109])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.517094 0.622509 -0.587449; -0.78217 0.622391 -0.028958; 0.347596 0.474459 0.808743]),[0.00638738,-0.257749,1.71643])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
