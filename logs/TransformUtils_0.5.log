>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (605.78515625 MB free)
Uptime: 40857.0 sec
Load Avg:  0.9970703125  1.0224609375  1.01904296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2240749 s       6267 s     202764 s    1175948 s        149 s
#2  3499 MHz     780421 s        698 s     101899 s    3082357 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.121438 -0.0471183; -0.121438 0.0 0.182928; 0.0471183 -0.182928 0.0])
dAA = TransformUtils.so3([0.0 -0.0360852 0.0428528; 0.0360852 0.0 0.0922636; -0.0428528 -0.0922636 0.0])
dAA = TransformUtils.so3([0.0 0.0103165 0.0485935; -0.0103165 0.0 -0.00478712; -0.0485935 0.00478712 0.0])
dAA = TransformUtils.Quaternion(0.9983183328822441,[-0.0492871,-0.00622185,-0.0298761])
dAA = TransformUtils.SO3([0.990143 -0.131122 -0.0492228; 0.133719 0.989558 0.0537931; 0.0416554 -0.0598449 0.997338])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.966956 -0.160255 0.19828; 0.187587 0.973916 -0.127664; -0.172649 0.16064 0.971796]),[0.418035,-1.30948,0.395823])
xj = TransformUtils.SE3(TransformUtils.SO3([0.999106 -0.00017967 0.0422842; 0.0105829 0.969228 -0.245938; -0.0409388 0.246165 0.968363]),[-0.0749462,1.62287,-0.593774])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.975144 0.13914 -0.172435; -0.156381 0.98352 -0.0907412; 0.156967 0.115451 0.980832]),[0.244232,2.7759,-1.43379])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
