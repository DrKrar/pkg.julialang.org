>>> 'Pkg.add("TransformUtils")' log
INFO: Installing TransformUtils v0.0.5
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of TransformUtils
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("TransformUtils")' log
Julia Version 0.5.1
Commit 6445c82 (2017-03-05 13:25 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (581.47265625 MB free)
Uptime: 38190.0 sec
Load Avg:  1.16796875  1.06005859375  1.05859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2208779 s       1140 s     205152 s     950906 s        186 s
#2  3499 MHz     790848 s       4997 s     101514 s    2798162 s          5 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.3
 - TransformUtils                0.0.5
1 additional packages:
 - Compat                        0.20.0
INFO: Testing TransformUtils
[TEST] constructors SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] comparison functions for SO3, Quaternion, AngleAxis... [SUCCESS]
[TEST] trivial case quaterion -> SO3 -> Euler -> quaternion... [SUCCESS]
[TEST] convert functions 
WARNING: Need better coverage on convert function tests
[TEST] compare SO3 and quaternion rotations... dAA = TransformUtils.AngleAxis(0.7853981633974483,[1.0,0.0,0.0])
dAA = TransformUtils.so3([0.0 0.0331882 0.0205033; -0.0331882 0.0 0.0791549; -0.0205033 -0.0791549 0.0])
dAA = TransformUtils.so3([0.0 -0.0322191 0.106218; 0.0322191 0.0 -0.120326; -0.106218 0.120326 0.0])
dAA = TransformUtils.so3([0.0 -0.0875213 0.102844; 0.0875213 0.0 0.0515118; -0.102844 -0.0515118 0.0])
dAA = TransformUtils.Quaternion(0.9924620813229708,[0.0389119,-0.0533819,-0.103224])
dAA = TransformUtils.SO3([0.983476 -0.0761451 -0.164245; 0.091174 0.992116 0.0859857; 0.156403 -0.0995398 0.982665])
[SUCCESS]
[TEST] basic SE3 mechanics... [SUCCESS]
[TEST] SE3 ⊕ and ⊖ mechanics... Compare operations on two different SE3 transforms
xi = TransformUtils.SE3(TransformUtils.SO3([0.954195 0.275959 0.115578; -0.291472 0.944583 0.151018; -0.0674984 -0.177788 0.981751]),[1.17937,-0.443675,0.0908226])
xj = TransformUtils.SE3(TransformUtils.SO3([0.955053 -0.250819 0.158001; 0.206489 0.94531 0.252488; -0.212689 -0.208514 0.954613]),[0.141876,-0.201159,-1.83552])
Dx = TransformUtils.SE3(TransformUtils.SO3([0.865477 -0.500787 0.0127358; 0.496416 0.86078 0.112379; -0.0672409 -0.0909394 0.993584]),[-0.930636,0.28525,-1.97448])
[SUCCESS]
[TEST] previous discovered issues
TransformUtils.convert(Euler,q) = TransformUtils.Euler(0.7853981633974484,0.0,1.5707963267948963,TransformUtils.Quaternion(1.0,[0.0,0.0,0.0]))
INFO: TransformUtils tests passed

>>> End of log
