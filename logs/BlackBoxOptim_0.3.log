>>> 'Pkg.add("BlackBoxOptim")' log
INFO: Cloning cache of BlackBoxOptim from git://github.com/robertfeldt/BlackBoxOptim.jl.git
INFO: Installing ArrayViews v0.6.4
INFO: Installing BlackBoxOptim v0.1.3
INFO: Installing Distributions v0.8.10
INFO: Installing FactCheck v0.4.3
INFO: Installing PDMats v0.4.2
INFO: Installing StatsBase v0.7.4
INFO: Installing StatsFuns v0.2.2
INFO: Package database updated

>>> 'Pkg.test("BlackBoxOptim")' log
Julia Version 0.3.12
Commit 80aa779 (2015-10-26 12:41 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (224.2578125 MB free)
Uptime: 4313.0 sec
Load Avg:  1.03271484375  0.9970703125  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     168894 s         62 s      26928 s     184237 s         10 s
#2  3499 MHz     103235 s        107 s      24500 s     271329 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.3
4 required packages:
 - BlackBoxOptim                 0.1.3
 - Cairo                         0.2.34
 - HttpParser                    0.0.13
 - JSON                          0.6.1
18 additional packages:
 - ArrayViews                    0.6.4
 - BinDeps                       0.3.21
 - ColorTypes                    0.1.7
 - Colors                        0.5.4
 - Compat                        0.8.8
 - Dates                         0.3.2
 - Distributions                 0.8.10
 - Docile                        0.5.23
 - FactCheck                     0.4.3
 - FixedPointNumbers             0.0.12
 - Graphics                      0.1.0
 - HttpCommon                    0.1.2
 - PDMats                        0.4.2
 - Reexport                      0.0.3
 - SHA                           0.2.1
 - StatsBase                     0.7.4
 - StatsFuns                     0.2.2
 - URIParser                     0.0.7
INFO: Testing BlackBoxOptim
Latin hypercube sampling
15 facts verified.
Assign ranks within tolerance
  > Ranks correctly if none are within tolerance of each other
  > Ranks correctly if some are within tolerance of each other
  > Ranks correctly if all are within tolerance of each other
  > Ranks in reverse if none are within tolerance of each other
  > Ranks correctly for a complex example testing many aspects
25 facts verified.
DictChain
  > Matching keys and type parameters
  > merging and chaining
    > incompatible dictionary types
    > using constructor
    > using merge()
    > using merge!()
    > using chain()
  > converting to Dict
  > show()
DictChain{Symbol,Int64}[[:a=>1],[:b=>4,:a=>2],[:b=>5,:a=>3]]
  > flatten
35 facts verified.
Parameters
  > When no parameters or key type doesn't match
  > With one parameter in one set
  > With parameters in multiple sets
  > Updating parameters after construction
  > Constructing from another parameters object
  > Get key without default
  > Get key with default
  > Merge with Parameters or Dict
28 facts verified.
Fitness
  > hat_compare floats
  > is_minimizing in ScalarFitness schemes
  > hat_compare floats in a minimizing fitness scheme
  > hat_compare floats in a maximizing fitness scheme
  > hat_compare fitnesses of size 1 in a minimizing FitnessScheme
  > hat_compare fitnesses of size 1 in a maximizing FitnessScheme
  > hat_compare fitnesses of size > 1 in a minimizing FitnessScheme
  > hat_compare fitnesses of size > 1 in a minimizing FitnessScheme
  > is_better/is_worse/same_fitness in a minimizing FitnessScheme
  > is_better/is_worse/same_fitness in a maximizing FitnessScheme
83 facts verified.
Population
  > FitPopulation
    > candidates pool
    > append!()
21 facts verified.
Bimodal Cauchy Distributions
  > sample bimodal cauchy with truncation on one side
  > sample bimodal cauchy with truncation on both sides
400 facts verified.
Search space
  > in()
  > Symmetric search space with default range
  > SymmetricSearchSpace with given range
  > rand_individual is within the search space
  > rand_individuals creates many individuals and all are within the search space
  > rand_individuals correctly handles column-wise generation in assymetric search spaces
  > RangePerDimSearchSpace
  > rand_individuals_lhs samples in LHS intervals
  > feasible finds feasible points in the search space
  > diameters
10119 facts verified.
Mutation operators
  > SimpleGibbsMutation
  > MutationClock
  > FixedGeneticOperatorsMixture
  > FAGeneticOperatorsMixture
22615 facts verified.
Frequency Adaptation
  > returns all indices once in the first block
  > increases the frequency of a method that has higher progress values
1272 facts verified.
TopListArchive
  > ArchivedIndividual
  > Constructing a small archive and adding to it
  > magnitude_class for positive fitness values
  > magnitude_class for negative fitness values
  > archive copies the individuals
  > for maximizing fitness
98 facts verified.
Random search
  > ask()
900 facts verified.
Differential evolution optimizer
  > SimpleSelector
  > RadiusLimitedSelector
  > RandomBound
    > does nothing if within bounds
    > bounds if lower than min bound
    > bounds if higher than max bound
  > DiffEvoRandBin1
    > always copies from donor if length is 1
    > always copies at least one element from donor
    > unlikely to copy everything if vectors are large
    > correctly modifies the parameters vector
  > ask()/tell!()
2027 facts verified.
Adaptive differential evolution optimizer
  > parameters adjust!()
  > ask()
1000 facts verified.
sNES
  > assign_weights!()
    > when indices are already ordered
    > when indices are not ordered
35 facts verified.
Top-level interface
  > run a simple optimization
    > using bboptimize() with mostly defaults
    > using bbsetup()/bboptimize() with mostly defaults
    > using non-population optimizer
    > using population optimizer
  > continue running an optimization after it finished
  > continue running an optimization after serializing to disc
46 facts verified.
bboptimize smoketest
  > testing probabilistic_descent method to ensure it works
  > testing de_rand_1_bin method to ensure it works
  > testing generating_set_search method to ensure it works
  > testing xnes method to ensure it works
  > testing de_rand_2_bin_radiuslimited method to ensure it works
  > testing de_rand_1_bin_radiuslimited method to ensure it works
  > testing adaptive_de_rand_1_bin_radiuslimited method to ensure it works
  > testing resampling_inheritance_memetic_search method to ensure it works
  > testing simultaneous_perturbation_stochastic_approximation method to ensure it works
  > testing resampling_memetic_search method to ensure it works
  > testing dxnes method to ensure it works
  > testing adaptive_de_rand_1_bin method to ensure it works
  > testing de_rand_2_bin method to ensure it works
  > testing separable_nes method to ensure it works
  > testing random_search method to ensure it works
45 facts verified.
Single objective functions
  > Sphere
  > Schwefel2.22
  > Schwefel1.2
  > Schwefel2.21
  > Rosenbrock
32 facts verified.
Generating set search
2 facts verified.
Random sampling on unit, n-dimensional sphere
797 facts verified.
Random direction generator
2 facts verified.
Mirrored random direction generator
10 facts verified.
INFO: BlackBoxOptim tests passed
INFO: No packages to install, update or remove

>>> End of log
