>>> 'Pkg.add("IntervalConstraintProgramming")' log
INFO: Cloning cache of IntervalConstraintProgramming from git://github.com/dpsanders/IntervalConstraintProgramming.jl.git
INFO: Installing CRlibm v0.2.3
INFO: Installing Calculus v0.1.15
INFO: Installing FixedSizeArrays v0.2.2
INFO: Installing ForwardDiff v0.2.1
INFO: Installing IntervalConstraintProgramming v0.1.1
INFO: Installing MacroTools v0.3.0
INFO: Installing NaNMath v0.2.1
INFO: Installing ValidatedNumerics v0.4.3
INFO: Building CRlibm
Downloading the library files from http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src
--2016-07-22 11:42:46--  http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Resolving lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)... 140.77.166.31
Connecting to lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)|140.77.166.31|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2368435 (2.3M) [application/binary]
Saving to: ‘crlibm-1.0beta4.tar.gz.2’

     0K .......... .......... .......... .......... ..........  2%  267K 8s
    50K .......... .......... .......... .......... ..........  4%  267K 8s
   100K .......... .......... .......... .......... ..........  6%  530K 7s
   150K .......... .......... .......... .......... ..........  8%  531K 6s
   200K .......... .......... .......... .......... .......... 10%  537K 5s
   250K .......... .......... .......... .......... .......... 12%  533K 5s
   300K .......... .......... .......... .......... .......... 15%  536K 5s
   350K .......... .......... .......... .......... .......... 17% 23.0M 4s
   400K .......... .......... .......... .......... .......... 19%  521K 4s
   450K .......... .......... .......... .......... .......... 21% 37.4M 3s
   500K .......... .......... .......... .......... .......... 23% 53.1M 3s
   550K .......... .......... .......... .......... .......... 25%  561K 3s
   600K .......... .......... .......... .......... .......... 28% 35.4M 3s
   650K .......... .......... .......... .......... .......... 30%  554K 3s
   700K .......... .......... .......... .......... .......... 32% 15.9M 2s
   750K .......... .......... .......... .......... .......... 34% 32.4M 2s
   800K .......... .......... .......... .......... .......... 36%  557K 2s
   850K .......... .......... .......... .......... .......... 38% 15.6M 2s
   900K .......... .......... .......... .......... .......... 41% 43.1M 2s
   950K .......... .......... .......... .......... .......... 43%  555K 2s
  1000K .......... .......... .......... .......... .......... 45% 20.1M 2s
  1050K .......... .......... .......... .......... .......... 47% 29.6M 1s
  1100K .......... .......... .......... .......... .......... 49%  110M 1s
  1150K .......... .......... .......... .......... .......... 51%  558K 1s
  1200K .......... .......... .......... .......... .......... 54% 25.4M 1s
  1250K .......... .......... .......... .......... .......... 56% 77.0M 1s
  1300K .......... .......... .......... .......... .......... 58%  106M 1s
  1350K .......... .......... .......... .......... .......... 60% 27.9M 1s
  1400K .......... .......... .......... .......... .......... 62%  565K 1s
  1450K .......... .......... .......... .......... .......... 64% 11.2M 1s
  1500K .......... .......... .......... .......... .......... 67% 37.4M 1s
  1550K .......... .......... .......... .......... .......... 69% 71.1M 1s
  1600K .......... .......... .......... .......... .......... 71% 43.3M 1s
  1650K .......... .......... .......... .......... .......... 73%  582K 1s
  1700K .......... .......... .......... .......... .......... 75% 9.67M 1s
  1750K .......... .......... .......... .......... .......... 77% 45.1M 0s
  1800K .......... .......... .......... .......... .......... 79%  132M 0s
  1850K .......... .......... .......... .......... .......... 82% 89.5M 0s
  1900K .......... .......... .......... .......... .......... 84% 93.8M 0s
  1950K .......... .......... .......... .......... .......... 86%  561K 0s
  2000K .......... .......... .......... .......... .......... 88% 27.3M 0s
  2050K .......... .......... .......... .......... .......... 90% 23.2M 0s
  2100K .......... .......... .......... .......... .......... 92% 57.0M 0s
  2150K .......... .......... .......... .......... .......... 95% 39.9M 0s
  2200K .......... .......... .......... .......... .......... 97% 66.0M 0s
  2250K .......... .......... .......... .......... .......... 99%  602K 0s
  2300K .......... ..                                         100% 3.27M=1.8s

2016-07-22 11:42:48 (1.27 MB/s) - ‘crlibm-1.0beta4.tar.gz.2’ saved [2368435/2368435]

Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Making all in scs_lib
Making all in .
Making all in tests
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of IntervalConstraintProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IntervalConstraintProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Computing test dependencies for IntervalConstraintProgramming...
INFO: Installing FactCheck v0.4.3
INFO: Testing IntervalConstraintProgramming
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/ForwardDiff.ji for module ForwardDiff.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/ValidatedNumerics.ji for module ValidatedNumerics.
WARNING: New definition 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:154
is ambiguous with: 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/intervals/conversion.jl:9.
To fix, define 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:154
is ambiguous with: 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/decorations/intervals.jl:76.
To fix, define 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/intervals/conversion.jl:9
is ambiguous with: 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:154.
To fix, define 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/decorations/intervals.jl:76
is ambiguous with: 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:154.
To fix, define 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
Utilities
1 fact verified.
code = quote 
    z1 = x ^ 2
    z2 = y ^ 2
    z3 = z1 + z2
    z3 = z3 ∩ _A_
    (z3,z1,z2) = plusRev(z3,z1,z2)
    (z2,y,_) = powerRev(z2,y,2)
    (z1,x,_) = powerRev(z1,x,2)
    return (x,y)
end
Separators
4 facts verified.
code = quote 
    z4 = 1x
    z4 = z4 ∩ _A_
    (z4,_,x) = mulRev(z4,1,x)
    return (x,)
end
code = quote 
    z5 = 1y
    z5 = z5 ∩ _A_
    (z5,_,y) = mulRev(z5,1,y)
    return (y,)
end
code = quote 
    z6 = x ^ 2
    z7 = y ^ 2
    z8 = z6 + z7
    z8 = z8 ∩ _A_
    (z8,z6,z7) = plusRev(z8,z6,z7)
    (z7,y,_) = powerRev(z7,y,2)
    (z6,x,_) = powerRev(z6,x,2)
    return (x,y)
end
setinverse
6 facts verified.
Volume
3 facts verified.
INFO: IntervalConstraintProgramming tests passed
INFO: Removing FactCheck v0.4.3

>>> End of log
