>>> 'Pkg.add("IntervalConstraintProgramming")' log
INFO: Cloning cache of IntervalConstraintProgramming from git://github.com/dpsanders/IntervalConstraintProgramming.jl.git
INFO: Installing CRlibm v0.2.3
INFO: Installing Calculus v0.1.15
INFO: Installing FixedSizeArrays v0.2.1
INFO: Installing ForwardDiff v0.2.0
INFO: Installing IntervalConstraintProgramming v0.1.1
INFO: Installing MacroTools v0.3.0
INFO: Installing NaNMath v0.2.1
INFO: Installing ValidatedNumerics v0.4.3
INFO: Building CRlibm
Downloading the library files from http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src
--2016-06-25 11:07:27--  http://lipforge.ens-lyon.fr/frs/download.php/162/crlibm-1.0beta4.tar.gz
Resolving lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)... 140.77.166.31
Connecting to lipforge.ens-lyon.fr (lipforge.ens-lyon.fr)|140.77.166.31|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2368435 (2.3M) [application/binary]
Saving to: ‘crlibm-1.0beta4.tar.gz.2’

     0K .......... .......... .......... .......... ..........  2%  291K 8s
    50K .......... .......... .......... .......... ..........  4%  292K 8s
   100K .......... .......... .......... .......... ..........  6%  578K 6s
   150K .......... .......... .......... .......... ..........  8% 28.4M 5s
   200K .......... .......... .......... .......... .......... 10%  574K 4s
   250K .......... .......... .......... .......... .......... 12%  590K 4s
   300K .......... .......... .......... .......... .......... 15% 34.4M 3s
   350K .......... .......... .......... .......... .......... 17%  587K 3s
   400K .......... .......... .......... .......... .......... 19% 33.6M 3s
   450K .......... .......... .......... .......... .......... 21%  586K 3s
   500K .......... .......... .......... .......... .......... 23% 48.4M 2s
   550K .......... .......... .......... .......... .......... 25%  605K 2s
   600K .......... .......... .......... .......... .......... 28% 16.9M 2s
   650K .......... .......... .......... .......... .......... 30% 37.3M 2s
   700K .......... .......... .......... .......... .......... 32%  592K 2s
   750K .......... .......... .......... .......... .......... 34% 7.39M 2s
   800K .......... .......... .......... .......... .......... 36%  285M 2s
   850K .......... .......... .......... .......... .......... 38%  648K 2s
   900K .......... .......... .......... .......... .......... 41% 11.0M 1s
   950K .......... .......... .......... .......... .......... 43% 43.3M 1s
  1000K .......... .......... .......... .......... .......... 45%  589K 1s
  1050K .......... .......... .......... .......... .......... 47% 62.8M 1s
  1100K .......... .......... .......... .......... .......... 49% 75.0M 1s
  1150K .......... .......... .......... .......... .......... 51%  628K 1s
  1200K .......... .......... .......... .......... .......... 54% 8.01M 1s
  1250K .......... .......... .......... .......... .......... 56% 62.6M 1s
  1300K .......... .......... .......... .......... .......... 58% 52.7M 1s
  1350K .......... .......... .......... .......... .......... 60%  632K 1s
  1400K .......... .......... .......... .......... .......... 62% 8.55M 1s
  1450K .......... .......... .......... .......... .......... 64% 69.8M 1s
  1500K .......... .......... .......... .......... .......... 67% 65.8M 1s
  1550K .......... .......... .......... .......... .......... 69%  637K 1s
  1600K .......... .......... .......... .......... .......... 71% 7.16M 1s
  1650K .......... .......... .......... .......... .......... 73%  113M 0s
  1700K .......... .......... .......... .......... .......... 75%  328M 0s
  1750K .......... .......... .......... .......... .......... 77%  642K 0s
  1800K .......... .......... .......... .......... .......... 79% 6.44M 0s
  1850K .......... .......... .......... .......... .......... 82% 53.9M 0s
  1900K .......... .......... .......... .......... .......... 84% 94.0M 0s
  1950K .......... .......... .......... .......... .......... 86%  254M 0s
  2000K .......... .......... .......... .......... .......... 88%  227M 0s
  2050K .......... .......... .......... .......... .......... 90%  624K 0s
  2100K .......... .......... .......... .......... .......... 92%  276M 0s
  2150K .......... .......... .......... .......... .......... 95% 17.9M 0s
  2200K .......... .......... .......... .......... .......... 97% 54.1M 0s
  2250K .......... .......... .......... .......... .......... 99% 85.6M 0s
  2300K .......... ..                                         100%  220M=1.6s

2016-06-25 11:07:28 (1.45 MB/s) - ‘crlibm-1.0beta4.tar.gz.2’ saved [2368435/2368435]

Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Working in /home/vagrant/.julia/v0.4/CRlibm/deps/src/crlibm-1.0beta4
Making all in scs_lib
Making all in .
Making all in tests
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of IntervalConstraintProgramming
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("IntervalConstraintProgramming")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Computing test dependencies for IntervalConstraintProgramming...
INFO: Installing FactCheck v0.4.3
INFO: Testing IntervalConstraintProgramming
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/ForwardDiff.ji for module ForwardDiff.
INFO: Recompiling stale cache file /home/vagrant/.julia/lib/v0.4/ValidatedNumerics.ji for module ValidatedNumerics.
WARNING: New definition 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:149
is ambiguous with: 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/intervals/conversion.jl:9.
To fix, define 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:149
is ambiguous with: 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/decorations/intervals.jl:76.
To fix, define 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/intervals/conversion.jl:9
is ambiguous with: 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:149.
To fix, define 
    promote_rule(Type{ValidatedNumerics.Interval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
WARNING: New definition 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{#S<:Real}) at /home/vagrant/.julia/v0.4/ValidatedNumerics/src/decorations/intervals.jl:76
is ambiguous with: 
    promote_rule(Type{#A<:Real}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}}) at /home/vagrant/.julia/v0.4/ForwardDiff/src/dual.jl:149.
To fix, define 
    promote_rule(Type{ValidatedNumerics.DecoratedInterval{#T<:Real}}, Type{ForwardDiff.Dual{#N<:Any, #B<:Real}})
before the new definition.
Utilities
1 fact verified.
code = quote 
    z1 = x ^ 2
    z2 = y ^ 2
    z3 = z1 + z2
    z3 = z3 ∩ _A_
    (z3,z1,z2) = plusRev(z3,z1,z2)
    (z2,y,_) = powerRev(z2,y,2)
    (z1,x,_) = powerRev(z1,x,2)
    return (x,y)
end
Separators
4 facts verified.
code = quote 
    z4 = 1x
    z4 = z4 ∩ _A_
    (z4,_,x) = mulRev(z4,1,x)
    return (x,)
end
code = quote 
    z5 = 1y
    z5 = z5 ∩ _A_
    (z5,_,y) = mulRev(z5,1,y)
    return (y,)
end
code = quote 
    z6 = x ^ 2
    z7 = y ^ 2
    z8 = z6 + z7
    z8 = z8 ∩ _A_
    (z8,z6,z7) = plusRev(z8,z6,z7)
    (z7,y,_) = powerRev(z7,y,2)
    (z6,x,_) = powerRev(z6,x,2)
    return (x,y)
end
setinverse
6 facts verified.
Volume
3 facts verified.
INFO: IntervalConstraintProgramming tests passed
INFO: Removing FactCheck v0.4.3

>>> End of log
