>>> 'Pkg.add("LLLplus")' log
INFO: Cloning cache of LLLplus from https://github.com/christianpeel/LLLplus.jl.git
INFO: Installing LLLplus v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LLLplus
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LLLplus")' log
Julia Version 0.5.0-dev+3184
Commit fb283c6 (2016-03-17 08:49 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Testing LLLplus
WARNING: Method definition roundf(Any) in module LLLplus at /home/vagrant/.julia/v0.5/LLLplus/test/../src/lll.jl:33 overwritten at /home/vagrant/.julia/v0.5/LLLplus/test/../src/lll.jl:36.
tests with small matrices...
...done

In all the following tests, the first time includes the JIT compilation; 
for the second execution the compilation is already done and the time
should be faster.

Testing LLL on 1000x1000 real matrix...
  1.650271 seconds (1.94 M allocations: 3.029 GB, 10.28% gc time)
  1.471854 seconds (1.76 M allocations: 3.020 GB, 14.16% gc time)

Testing LLL on 10x10 complex matrix...
  1.781510 seconds (1.47 M allocations: 84.632 MB, 0.97% gc time)
  0.000328 seconds (1.76 k allocations: 200.156 KB)
Testing VBLAST on same 10x10 complex matrix...
  1.061866 seconds (731.77 k allocations: 45.180 MB, 0.98% gc time)
  0.000466 seconds (476 allocations: 148.688 KB)

Testing sphere decoder on 100000 samples of 2x2 BPSK system...
ERROR: LoadError: MethodError: no method matching *(::Array{Float64,1}, ::Array{Float64,1})
Closest candidates are:
  *(::Any, ::Any, !Matched::Any, !Matched::Any...)
  *{T<:Union{Complex{Float32},Complex{Float64},Float32,Float64},S}(!Matched::Union{DenseArray{T<:Union{Complex{Float32},Complex{Float64},Float32,Float64},2},SubArray{T<:Union{Complex{Float32},Complex{Float64},Float32,Float64},2,A<:DenseArray{T,N},I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex{N},Base.NoSlice,Colon,Int64,Range{Int64}}}},L}}, ::Union{DenseArray{S,1},SubArray{S,1,A<:DenseArray{T,N},I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex{N},Base.NoSlice,Colon,Int64,Range{Int64}}}},L}})
  *{TA,TB}(!Matched::Base.LinAlg.AbstractTriangular{TA,S<:AbstractArray{T,2}}, ::Union{DenseArray{TB,1},DenseArray{TB,2},SubArray{TB,1,A<:DenseArray{T,N},I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex{N},Base.NoSlice,Colon,Int64,Range{Int64}}}},L},SubArray{TB,2,A<:DenseArray{T,N},I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex{N},Base.NoSlice,Colon,Int64,Range{Int64}}}},L}})
  ...
 [inlined code] from ./array.jl:252
 in algII_smart(::Array{Float64,2}, ::Array{Float64,2}, ::Array{Float64,2}) at /home/vagrant/.julia/v0.5/LLLplus/test/../src/hard_sphere.jl:79
 in hard_sphere(::Array{Float64,2}, ::Array{Float64,2}, ::Int64) at /home/vagrant/.julia/v0.5/LLLplus/test/../src/hard_sphere.jl:23
 in include(::ASCIIString) at ./boot.jl:264
 in include_from_node1(::UTF8String) at ./loading.jl:417
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/LLLplus/test/runtests.jl, in expression starting on line 155
===============================[ ERROR: LLLplus ]===============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/LLLplus/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Base.Pkg.PkgError("LLLplus had test errors")
 in #test#55(::Bool, ::Any, ::Array{AbstractString,1}) at ./pkg/entry.jl:671
 [inlined code] from ./boot.jl:331
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::ASCIIString) at ./file.jl:48
 in #cd#1(::Array{Any,1}, ::Any, ::Any, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1}}) at ./pkg/dir.jl:31
 [inlined code] from ./boot.jl:331
 in #test#3(::Bool, ::Any, ::ASCIIString, ::Vararg{ASCIIString}) at ./pkg.jl:228
 in eval(::Module, ::Any) at ./boot.jl:267
 [inlined code] from ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
