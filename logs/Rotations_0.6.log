>>> 'Pkg.add("Rotations")' log
INFO: Installing Rotations v0.3.4
INFO: Installing StaticArrays v0.2.1
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Rotations
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Rotations")' log
Julia Version 0.6.0-dev.2635
Commit dc2459d (2017-02-13 07:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1553.95703125 MB free)
Uptime: 21835.0 sec
Load Avg:  1.14013671875  1.4912109375  1.333984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1244640 s       6294 s     125744 s     549810 s        201 s
#2  3499 MHz     397672 s        212 s      78641 s    1589347 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.3
 - Rotations                     0.3.4
2 additional packages:
 - Compat                        0.18.0
 - StaticArrays                  0.2.1
INFO: Computing test dependencies for Rotations...
INFO: Installing Calculus v0.2.0
INFO: Installing DiffBase v0.0.4
INFO: Installing ForwardDiff v0.3.4
INFO: Installing NaNMath v0.2.2
INFO: Testing Rotations
Skipping Base.<|
Skipping Base.>:
Skipping Base.active_repl
Skipping Base.active_repl_backend
Skipping StaticArrays.MutableFieldVector
Skipping Base.<|
Skipping Base.>:
Skipping Base.active_repl
Skipping Base.active_repl_backend
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] abs(::StaticArrays.SVector{3,Float64}) at ./deprecated.jl:50
 [3] perpendicular_vector(::StaticArrays.SVector{3,Float64}) at /home/vagrant/.julia/v0.6/Rotations/src/util.jl:12
 [4] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl:5 [inlined]
 [5] macro expansion at ./test.jl:852 [inlined]
 [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl:0 [inlined]
 [7] macro expansion at ./test.jl:852 [inlined]
 [8] anonymous at ./<missing>:?
 [9] include_from_node1(::String) at ./loading.jl:539
 [10] include(::String) at ./sysimg.jl:14
 [11] include_from_node1(::String) at ./loading.jl:539
 [12] include(::String) at ./sysimg.jl:14
 [13] process_options(::Base.JLOptions) at ./client.jl:300
 [14] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl, in expression starting on line 1
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] abs(::StaticArrays.SVector{3,Float64}) at ./deprecated.jl:50
 [3] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl:6 [inlined]
 [4] macro expansion at ./test.jl:852 [inlined]
 [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl:0 [inlined]
 [6] macro expansion at ./test.jl:852 [inlined]
 [7] anonymous at ./<missing>:?
 [8] include_from_node1(::String) at ./loading.jl:539
 [9] include(::String) at ./sysimg.jl:14
 [10] include_from_node1(::String) at ./loading.jl:539
 [11] include(::String) at ./sysimg.jl:14
 [12] process_options(::Base.JLOptions) at ./client.jl:300
 [13] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rotations/test/util_tests.jl, in expression starting on line 1
Test Summary: | Pass  Total
Util          |  200    200
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: isrotation(r)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] isrotation(::Rotations.RotMatrix{2,Float64,4}, ::Float64) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:125
   [5] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:40 [inlined]
   [6] macro expansion at ./test.jl:852 [inlined]
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: inv(r) * r ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:43 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Testing inverse(): Error During Test
  Test threw an exception of type ErrorException
  Expression: r * inv(r) ≈ I
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:17
   [3] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [4] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Rotations.RotMatrix{2,Float64,4}) at ./linalg/generic.jl:1233
   [5] eval_comparison(::Expr) at ./test.jl:196
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:44 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] anonymous at ./<missing>:?
Rotate Points: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10 [inlined]
   [3] StaticArrays.SMatrix(::Rotations.RotMatrix{2,Float64,4}) at /home/vagrant/.julia/v0.6/StaticArrays/src/SMatrix.jl:86
   [4] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:59 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] include_from_node1(::String) at ./loading.jl:539
   [12] include(::String) at ./sysimg.jl:14
   [13] process_options(::Base.JLOptions) at ./client.jl:300
   [14] _start() at ./client.jl:366
Compose rotations: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10 [inlined]
   [3] StaticArrays.SMatrix(::Rotations.RotMatrix{2,Float64,4}) at /home/vagrant/.julia/v0.6/StaticArrays/src/SMatrix.jl:86
   [4] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:80 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [7] macro expansion at ./test.jl:852 [inlined]
   [8] anonymous at ./<missing>:?
   [9] include_from_node1(::String) at ./loading.jl:539
   [10] include(::String) at ./sysimg.jl:14
   [11] include_from_node1(::String) at ./loading.jl:539
   [12] include(::String) at ./sysimg.jl:14
   [13] process_options(::Base.JLOptions) at ./client.jl:300
   [14] _start() at ./client.jl:366
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: size(R) == (2, 2)
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:110 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] length(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:4
   [3] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:31
   [4] #isapprox#14(::Float64, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float64,4}, ::Array{Float64,2}) at ./linalg/generic.jl:1233
   [5] isapprox(::Rotations.RotMatrix{2,Float64,4}, ::Array{Float64,2}) at ./linalg/generic.jl:1233
   [6] eval_comparison(::Expr) at ./test.jl:196
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:112 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] anonymous at ./<missing>:?
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float32,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] length(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:4
   [3] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:31
   [4] #isapprox#14(::Float32, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:1233
   [5] isapprox(::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:1233
   [6] eval_comparison(::Expr) at ./test.jl:196
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:112 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] anonymous at ./<missing>:?
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: size(R) == (2, 2)
  The size of type `Rotations.RotMatrix{2,Float32,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:110 [inlined]
   [3] macro expansion at ./test.jl:852 [inlined]
   [4] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [5] macro expansion at ./test.jl:852 [inlined]
   [6] anonymous at ./<missing>:?
Types and products: Error During Test
  Test threw an exception of type ErrorException
  Expression: R * R ≈ $(Expr(:typed_vcat, :T, :(0 -1), :(1 0)))
  The size of type `Rotations.RotMatrix{2,Float32,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] length(::Type{Rotations.RotMatrix{2,Float32,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:4
   [3] map(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/mapreduce.jl:31
   [4] #isapprox#14(::Float32, ::Int64, ::Bool, ::Base.LinAlg.#vecnorm, ::Function, ::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:1233
   [5] isapprox(::Rotations.RotMatrix{2,Float32,4}, ::Array{Float32,2}) at ./linalg/generic.jl:1233
   [6] eval_comparison(::Expr) at ./test.jl:196
   [7] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:112 [inlined]
   [8] macro expansion at ./test.jl:852 [inlined]
   [9] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [10] macro expansion at ./test.jl:852 [inlined]
   [11] anonymous at ./<missing>:?
show: Error During Test
  Got an exception of type ErrorException outside of a @test
  The size of type `Rotations.RotMatrix{2,Float64,4}` is not known.
  
  If you were trying to construct (or `convert` to) a `StaticArray` you
  may need to add the size explicitly as a type parameter so its size is
  inferrable to the Julia compiler (or performance would be terrible). For
  example, you might try
  
      m = zeros(3,3)
      SMatrix(m)      # this error
      SMatrix{3,3}(m) # correct - size is inferrable
  
  Stacktrace:
   [1] size(::Type{Rotations.RotMatrix{2,Float64,4}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/core.jl:126
   [2] size(::Type{Rotations.RotMatrix{2,Float64,4}}, ::Int64) at /home/vagrant/.julia/v0.6/StaticArrays/src/abstractarray.jl:10
   [3] getindex(...) at /home/vagrant/.julia/v0.6/StaticArrays/src/indexing.jl:174
   [4] alignment(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::Rotations.RotMatrix{2,Float64,4}, ::Array{Int64,1}, ::Array{Int64,1}, ::Int64, ::Int64, ::Int64) at ./show.jl:1311
   [5] print_matrix(::IOContext{Base.AbstractIOBuffer{Array{UInt8,1}}}, ::Rotations.RotMatrix{2,Float64,4}, ::String, ::String, ::String, ::String, ::String, ::String, ::Int64, ::Int64) at ./show.jl:1440
   [6] #showarray#5(::Bool, ::Function, ::Base.AbstractIOBuffer{Array{UInt8,1}}, ::Rotations.RotMatrix{2,Float64,4}, ::Bool) at /home/vagrant/.julia/v0.6/Rotations/src/core_types.jl:179
   [7] show(::Base.AbstractIOBuffer{Array{UInt8,1}}, ::MIME{Symbol("text/plain")}, ::Rotations.RotMatrix{2,Float64,4}) at ./replutil.jl:140
   [8] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:119 [inlined]
   [9] macro expansion at ./test.jl:852 [inlined]
   [10] macro expansion at /home/vagrant/.julia/v0.6/Rotations/test/2d.jl:0 [inlined]
   [11] macro expansion at ./test.jl:852 [inlined]
   [12] anonymous at ./<missing>:?
   [13] include_from_node1(::String) at ./loading.jl:539
   [14] include(::String) at ./sysimg.jl:14
   [15] include_from_node1(::String) at ./loading.jl:539
   [16] include(::String) at ./sysimg.jl:14
   [17] process_options(::Base.JLOptions) at ./client.jl:300
   [18] _start() at ./client.jl:366
Test Summary:              | Pass  Error  Total
2d Rotations               |  214    308    522
  Core                     |    2             2
  Identity rotation checks |    4             4
  Testing inverse()        |  200    300    500
  Rotate Points            |           1      1
  Compose rotations        |           1      1
  Convert rotations        |    1             1
  Types and products       |    7      5     12
  show                     |           1      1
ERROR: LoadError: LoadError: Some tests did not pass: 214 passed, 0 failed, 308 errored, 0 broken.
while loading /home/vagrant/.julia/v0.6/Rotations/test/2d.jl, in expression starting on line 3
while loading /home/vagrant/.julia/v0.6/Rotations/test/runtests.jl, in expression starting on line 13
==============================[ ERROR: Rotations ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Rotations/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.2.0
INFO: Removing DiffBase v0.0.4
INFO: Removing ForwardDiff v0.3.4
INFO: Removing NaNMath v0.2.2
ERROR: Rotations had test errors

>>> End of log
