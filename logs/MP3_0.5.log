>>> 'Pkg.add("MP3")' log
INFO: Cloning cache of MP3 from https://github.com/jongwook/MP3.jl.git
INFO: Cloning cache of SampledSignals from https://github.com/JuliaAudio/SampledSignals.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing FileIO v0.1.0
INFO: Installing FixedPointNumbers v0.1.4
INFO: Installing MP3 v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing SIUnits v0.0.6
INFO: Installing SampledSignals v0.0.1
INFO: Installing TexExtensions v0.0.3
INFO: Installing URIParser v0.1.5
INFO: Building MP3
WARNING: `@osx_only` is deprecated, use `@static if is_apple()` instead
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @osx_only(::Any) at ./deprecated.jl:497
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/MP3/deps/build.jl, in expression starting on line 11
Installing dependency libmpg123-dev via `sudo apt-get install libmpg123-dev`:
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libmpg123-0
The following NEW packages will be installed:
  libmpg123-0 libmpg123-dev
0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 138 kB of archives.
After this operation, 485 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu/ trusty/universe libmpg123-0 amd64 1.16.0-1ubuntu1 [111 kB]
Get:2 http://archive.ubuntu.com/ubuntu/ trusty/universe libmpg123-dev amd64 1.16.0-1ubuntu1 [27.3 kB]
dpkg-preconfigure: unable to re-open stdin: No such file or directory
Fetched 138 kB in 0s (219 kB/s)
Selecting previously unselected package libmpg123-0:amd64.
(Reading database ... 72452 files and directories currently installed.)
Preparing to unpack .../libmpg123-0_1.16.0-1ubuntu1_amd64.deb ...
Unpacking libmpg123-0:amd64 (1.16.0-1ubuntu1) ...
Selecting previously unselected package libmpg123-dev:amd64.
Preparing to unpack .../libmpg123-dev_1.16.0-1ubuntu1_amd64.deb ...
Unpacking libmpg123-dev:amd64 (1.16.0-1ubuntu1) ...
Setting up libmpg123-0:amd64 (1.16.0-1ubuntu1) ...
Setting up libmpg123-dev:amd64 (1.16.0-1ubuntu1) ...
Processing triggers for libc-bin (2.19-0ubuntu6.9) ...
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::Type{T}, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in issatisfied(::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:663
 in satisfy!(::BinDeps.LibraryDependency, ::Array{DataType,1}) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:804
 in satisfy!(::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:781
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:836 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/MP3/deps/build.jl, in expression starting on line 20
WARNING: bytestring(p::Union{Ptr{Int8},Ptr{UInt8}}) is deprecated, use unsafe_string(p) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in bytestring(::Ptr{UInt8}) at ./deprecated.jl:50
 in #_find_library#50(::BinDeps.AptGet, ::Function, ::BinDeps.LibraryDependency) at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:553
 in (::BinDeps.#kw##_find_library)(::Array{Any,1}, ::BinDeps.#_find_library, ::BinDeps.LibraryDependency) at ./<missing>:0
 in macro expansion; at /home/vagrant/.julia/v0.5/BinDeps/src/dependencies.jl:837 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:426
 in evalfile(::String, ::Array{String,1}) at ./loading.jl:442 (repeats 2 times)
 in cd(::##2#4, ::String) at ./file.jl:59
 in (::##1#3)(::IOStream) at ./none:13
 in open(::##1#3, ::String, ::String) at ./iostream.jl:113
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/MP3/deps/build.jl, in expression starting on line 20
Installing dependency libmp3lame-dev via `sudo apt-get install libmp3lame-dev`:
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libmp3lame0
The following NEW packages will be installed:
  libmp3lame-dev libmp3lame0
0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 338 kB of archives.
After this operation, 1,109 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu/ trusty/universe libmp3lame0 amd64 3.99.5+repack1-3ubuntu1 [158 kB]
Get:2 http://archive.ubuntu.com/ubuntu/ trusty/universe libmp3lame-dev amd64 3.99.5+repack1-3ubuntu1 [180 kB]
dpkg-preconfigure: unable to re-open stdin: No such file or directory
Fetched 338 kB in 0s (559 kB/s)
Selecting previously unselected package libmp3lame0:amd64.
(Reading database ... 72472 files and directories currently installed.)
Preparing to unpack .../libmp3lame0_3.99.5+repack1-3ubuntu1_amd64.deb ...
Unpacking libmp3lame0:amd64 (3.99.5+repack1-3ubuntu1) ...
Selecting previously unselected package libmp3lame-dev:amd64.
Preparing to unpack .../libmp3lame-dev_3.99.5+repack1-3ubuntu1_amd64.deb ...
Unpacking libmp3lame-dev:amd64 (3.99.5+repack1-3ubuntu1) ...
Setting up libmp3lame0:amd64 (3.99.5+repack1-3ubuntu1) ...
Setting up libmp3lame-dev:amd64 (3.99.5+repack1-3ubuntu1) ...
Processing triggers for libc-bin (2.19-0ubuntu6.9) ...
INFO: Package database updated

>>> 'Pkg.test("MP3")' log
Julia Version 0.5.0-rc1+0
Commit cede539 (2016-08-04 08:48 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (952.82421875 MB free)
Uptime: 4800.0 sec
Load Avg:  1.205078125  1.26220703125  1.09228515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     224328 s         60 s      28837 s     166863 s         11 s
#2  3499 MHz      58061 s        104 s      14394 s     394053 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.6.0
 - MP3                           0.0.1
9 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - FileIO                        0.1.0
 - FixedPointNumbers             0.1.4
 - SHA                           0.2.0
 - SIUnits                       0.0.6
 - SampledSignals                0.0.1
 - TexExtensions                 0.0.3
 - URIParser                     0.1.5
INFO: Computing test dependencies for MP3...
INFO: Installing BaseTestNext v0.2.1
INFO: Testing MP3
WARNING: could not import Base.float64 into SIUnits
WARNING: could not import Base.int into SIUnits
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:14
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:14
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:20
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:20
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:107
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:107
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:124
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:124
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:125
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:125
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:126
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:126
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:128
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/TexExtensions/src/TexExtensions.jl:128
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/SIUnits/src/SIUnits.jl:441
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/SIUnits/src/SIUnits.jl:464
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/SIUnits/src/SIUnits.jl:527
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/SIUnits/src/SIUnits.jl:531
WARNING: Base.writemime is deprecated.
  likely near /home/vagrant/.julia/v0.5/SampledSignals/src/SampleBuf.jl:40

WARNING: deprecated syntax "actual::Int".
Use "local actual::Int" instead.
WARNING: error while reinitializing value MethodTable(name=:add_format, defs=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Any, Any, Any, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Any, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Union{AbstractArray{T<:Any, 1}, Tuple, String}, Any}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{#sym<:Any}}, Tuple{Vararg{#T<:Array{UInt8, 1}, #N<:Any}}, Any}, tvars=svec(#sym<:Any, #T<:Array{UInt8, 1}, #N<:Any), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JLD}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMBinary}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PPMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:NRRD}}, String, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AndorSIF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CRW}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:CUR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:DOT}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:EPS}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDR}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ICO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:INFO}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JP2}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PCX}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PDF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PGM}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PSD}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:RGB}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WMF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WPG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TGA}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GIF}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PNG}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:TIFF}}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:JPEG}}, Array{UInt8, 1}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PBMText}}, Array{UInt8, 1}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:GLSLShader}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OBJ}}, Tuple{}, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:PLY_BINARY}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:2DM}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:OFF}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:WAV}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:FLAC}}, String, String), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Any, String}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:AVI}}, Function, String), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:HDF5}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_ASCII}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Any, Array{String, 1}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:STL_BINARY}}, Function, Array{String, 1}), isleafsig=false, issimplesig=false, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{FileIO.DataFormat{:ABAQUS_INP}}, Tuple{}, Array{String, 1}), isleafsig=false, issimplesig=true, va=false)], list=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=Tuple{FileIO.#add_format, Type{T<:Any}, Any, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Function, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=false, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Array{String, 1}, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Tuple{}, String, Array{Any, 1}, Vararg{Any, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, Array{String, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Any, 1}, Vararg{Array{Any, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, Array{UInt8, 1}, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), sig=Tuple{FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_format(FileIO.#add_format, Type{T<:Any}, String, String, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N<:Any}), isleafsig=false, issimplesig=true, va=true), any=nothing, key=#<null>), max_args=4, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
WARNING: error while reinitializing value FileIO.add_format(...):
OutOfMemoryError()
WARNING: error while reinitializing value MethodTable(name=:add_saver, defs=TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{#sym<:Any}}, Symbol}, tvars=#sym<:Any, simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(...), isleafsig=false, issimplesig=false, va=false), cache=TypeMapLevel(index_arg1=nothing, arg1=nothing, index_targ=nothing, targ=Array{Any, 1}[
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JLD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PPMBinary}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:NRRD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CRW}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:CUR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:DOT}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:EPS}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDR}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JP2}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PCX}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PDF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PGM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PSD}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:RGB}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:INFO}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WPG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:Imagine}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TGA}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GIF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PNG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:TIFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:JPEG}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:BMP}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:GLSLShader}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OBJ}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:PLY_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:2DM}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:OFF}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:WAV}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:FLAC}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:AVI}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:HDF5}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_ASCII}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:STL_BINARY}}, Symbol), isleafsig=false, issimplesig=true, va=false),
  TypeMapEntry(next=nothing, sig=Tuple{FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol}, tvars=svec(), simplesig=nothing, guardsigs=svec(), func=FileIO.add_saver(FileIO.#add_saver, Type{FileIO.DataFormat{:ABAQUS_INP}}, Symbol), isleafsig=false, issimplesig=true, va=false)], list=nothing, any=nothing, key=#<null>), max_args=3, kwsorter=#<null>, module=FileIO, =0, =0):
OutOfMemoryError()
ERROR: LoadError: Failed to precompile MP3 to /home/vagrant/.julia/lib/v0.5/MP3.ji
 in compilecache(::String) at ./loading.jl:505
 in require(::Symbol) at ./loading.jl:364
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/MP3/test/runtests.jl, in expression starting on line 1
=================================[ ERROR: MP3 ]=================================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/MP3/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing BaseTestNext v0.2.1
ERROR: MP3 had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
