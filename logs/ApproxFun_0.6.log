>>> 'Pkg.add("ApproxFun")' log
INFO: Cloning cache of ApproxFun from https://github.com/ApproxFun/ApproxFun.jl.git
INFO: Cloning cache of BandedMatrices from https://github.com/JuliaMatrices/BandedMatrices.jl.git
INFO: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
INFO: Cloning cache of FastTransforms from https://github.com/MikaelSlevinsky/FastTransforms.jl.git
INFO: Cloning cache of FixedSizeArrays from https://github.com/SimonDanisch/FixedSizeArrays.jl.git
INFO: Cloning cache of Measures from https://github.com/dcjones/Measures.jl.git
INFO: Cloning cache of PlotThemes from https://github.com/JuliaPlots/PlotThemes.jl.git
INFO: Cloning cache of PlotUtils from https://github.com/JuliaPlots/PlotUtils.jl.git
INFO: Cloning cache of Plots from https://github.com/tbreloff/Plots.jl.git
INFO: Cloning cache of Showoff from https://github.com/JuliaGraphics/Showoff.jl.git
INFO: Cloning cache of ToeplitzMatrices from https://github.com/JuliaMatrices/ToeplitzMatrices.jl.git
INFO: Installing ApproxFun v0.4.0
INFO: Installing BandedMatrices v0.1.2
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.12
INFO: Installing Colors v0.6.9
INFO: Installing DualNumbers v0.2.3
INFO: Installing FastGaussQuadrature v0.1.0
INFO: Installing FastTransforms v0.0.7
INFO: Installing FixedPointNumbers v0.2.1
INFO: Installing FixedSizeArrays v0.2.5
INFO: Installing Iterators v0.2.0
INFO: Installing Measures v0.0.3
INFO: Installing NaNMath v0.2.2
INFO: Installing PlotThemes v0.1.0
INFO: Installing PlotUtils v0.2.0
INFO: Installing Plots v0.10.1
INFO: Installing RecipesBase v0.1.0
INFO: Installing Reexport v0.0.3
INFO: Installing Showoff v0.0.7
INFO: Installing StatsBase v0.11.1
INFO: Installing ToeplitzMatrices v0.1.1
INFO: Building Plots
INFO: Cannot find deps/plotly-latest.min.js... downloading latest version.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 1771k  100 1771k    0     0  1589k      0  0:00:01  0:00:01 --:--:-- 1590k
INFO: Package database updated

>>> 'Pkg.test("ApproxFun")' log
Julia Version 0.6.0-dev.1321
Commit a4612cc (2016-11-27 23:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (326.31640625 MB free)
Uptime: 2850.0 sec
Load Avg:  0.92529296875  0.951171875  0.89404296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3511 MHz      99415 s         57 s      22688 s     140990 s          4 s
#2  3511 MHz      76554 s         91 s      16344 s     181887 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - ApproxFun                     0.4.0
 - JSON                          0.8.0
21 additional packages:
 - BandedMatrices                0.1.2
 - Calculus                      0.1.15
 - ColorTypes                    0.2.12
 - Colors                        0.6.9
 - Compat                        0.9.4
 - DualNumbers                   0.2.3
 - FastGaussQuadrature           0.1.0
 - FastTransforms                0.0.7
 - FixedPointNumbers             0.2.1
 - FixedSizeArrays               0.2.5
 - Iterators                     0.2.0
 - Measures                      0.0.3
 - NaNMath                       0.2.2
 - PlotThemes                    0.1.0
 - PlotUtils                     0.2.0
 - Plots                         0.10.1
 - RecipesBase                   0.1.0
 - Reexport                      0.0.3
 - Showoff                       0.0.7
 - StatsBase                     0.11.1
 - ToeplitzMatrices              0.1.1
INFO: Testing ApproxFun
Julia Version 0.6.0-dev.1321
Commit a4612cc (2016-11-27 23:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
WARNING: Base.drop is deprecated.
  likely near /home/vagrant/.julia/v0.6/Showoff/src/Showoff.jl:6
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:1000
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 27
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 99
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 155
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 79
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 80
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 81
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 82
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 723
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 724
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:992
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 725
Helper tests
Domain tests
  2.827033 seconds (1.86 M allocations: 76.098 MB, 0.79% gc time)
Fun tests
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in exp(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 31
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 31
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in cos(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 32
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:167
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:124
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 39
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:169
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:124
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 39
WARNING: max{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use max.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in max(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:124
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 39
WARNING: min{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use min.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in min(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:124
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 39
Error During Test
  Test threw an exception of type MethodError
  Expression: norm(besselj.(1,f) - besselj(1,f)) < 100 * eps()
  MethodError: Cannot `convert` an object of type Int64 to an object of type ApproxFun.Infinity{Bool}
  This may have arisen from a call to the constructor ApproxFun.Infinity{Bool}(...),
  since type constructors fall back to convert methods.
   in mapfoldl_impl(::Base.#length, ::Base.#+, ::ApproxFun.Infinity{Bool}, ::Tuple{ApproxFun.ZeroRepeated{Int64}}, ::Int64) at ./reduce.jl:40
   in mapfoldl(::Base.#length, ::Function, ::Tuple{ApproxFun.ZeroRepeated{Int64}}) at ./reduce.jl:73
   in done at /home/vagrant/.julia/v0.6/ApproxFun/src/LinearAlgebra/helper.jl:882 [inlined]
   in isempty(::ApproxFun.Flatten{Tuple{ApproxFun.ZeroRepeated{Int64}}}) at ./essentials.jl:241
   in +(::ApproxFun.Flatten{Tuple{ApproxFun.ZeroRepeated{Int64}}}, ::ApproxFun.Flatten{Tuple{ApproxFun.ZeroRepeated{Int64}}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/LinearAlgebra/helper.jl:978
   in +(::ApproxFun.Flatten{Tuple{Array{Bool,1},ApproxFun.ZeroRepeated{Int64}}}, ::ApproxFun.Flatten{Tuple{Array{Bool,1},ApproxFun.ZeroRepeated{Int64}}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/LinearAlgebra/helper.jl:986
   in _mapreduce(::ApproxFun.##399#400{ApproxFun.Infinity{Bool}}, ::Base.#+, ::Base.LinearFast, ::Array{Any,1}) at ./reduce.jl:236
   in blocklengths(::ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Spaces/Modifier/SumSpace.jl:86
   in blockstop at /home/vagrant/.julia/v0.6/ApproxFun/src/Multivariate/TensorSpace.jl:134 [inlined]
   in colstop(::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}, ::Int64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/general/InterlaceOperator.jl:237
   in colstop(::ApproxFun.SubOperator{Float64,ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}, ::Int64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/SubOperator.jl:111
   in rzeros(::ApproxFun.SubOperator{Float64,ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/Operator.jl:597
   in convert(::Type{ApproxFun.RaggedMatrix}, ::ApproxFun.SubOperator{Float64,ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/general/InterlaceOperator.jl:339
   in convert(::Type{AbstractArray{T,2}}, ::ApproxFun.SubOperator{Float64,ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}},Tuple{UnitRange{Int64},UnitRange{Int64}},Tuple{Int64,Int64},Tuple{Int64,Int64}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/Operator.jl:664
   in getindex(::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}, ::UnitRange{Int64}, ::UnitRange{Int64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/Operator.jl:180
   in #CachedOperator#670(::Bool, ::Type{T}, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Caching/almostbanded.jl:52
   in (::Core.#kw#Type)(::Array{Any,1}, ::Type{ApproxFun.CachedOperator}, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}) at ./<missing>:0
   in #cache#307(::Array{Any,1}, ::Function, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/general/CachedOperator.jl:49
   in (::ApproxFun.#kw##cache)(::Array{Any,1}, ::ApproxFun.#cache, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}) at ./<missing>:0
   in #qrfact#362(::Int64, ::Function, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/qrfact.jl:78
   in #linsolve#274(::Array{Any,1}, ::Function, ::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/linsolve.jl:11
   in linsolve(::ApproxFun.InterlaceOperator{Float64,1,ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},ApproxFun.TupleSpace{Tuple{ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.ConstantSpace{ApproxFun.Point{Float64}},ApproxFun.Ultraspherical{Int64,ApproxFun.Interval{Float64}}},ApproxFun.RealBasis,ApproxFun.Point{Float64},1},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Void},Tuple{Int64}}},ApproxFun.CachedIterator{Tuple{Int64,Int64},ApproxFun.BlockInterlacer{Tuple{Array{Bool,1},Array{Bool,1},ApproxFun.Repeated{Bool}}},Tuple{Int64,Int64,Tuple{Int64,Int64,Void},Tuple{Int64,Int64,Int64}}},Tuple{ApproxFun.Infinity{Bool},ApproxFun.Infinity{Bool}}}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/linsolve.jl:4
   in #linsolve#275(::Array{Any,1}, ::Function, ::Array{ApproxFun.Operator{Float64},1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/linsolve.jl:15
   in \(::Array{ApproxFun.Operator{Float64},1}, ::Array{Float64,1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Operators/linsolve.jl:22
   in besselj(::Int64, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:508
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
ERROR: LoadError: LoadError: There was an error during testing
 in record(::Base.Test.FallbackTestSet, ::Base.Test.Error) at ./test.jl:398
 in do_test(::Base.Test.Threw, ::Expr) at ./test.jl:281
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 133
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl, in expression starting on line 194
==============================[ ERROR: ApproxFun ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ApproxFun had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
