>>> 'Pkg.add("ApproxFun")' log
INFO: Cloning cache of ApproxFun from https://github.com/ApproxFun/ApproxFun.jl.git
INFO: Cloning cache of BandedMatrices from https://github.com/JuliaMatrices/BandedMatrices.jl.git
INFO: Cloning cache of FastGaussQuadrature from https://github.com/ajt60gaibb/FastGaussQuadrature.jl.git
INFO: Cloning cache of FastTransforms from https://github.com/MikaelSlevinsky/FastTransforms.jl.git
INFO: Cloning cache of FixedSizeArrays from https://github.com/SimonDanisch/FixedSizeArrays.jl.git
INFO: Cloning cache of Measures from https://github.com/dcjones/Measures.jl.git
INFO: Cloning cache of PlotUtils from https://github.com/JuliaPlots/PlotUtils.jl.git
INFO: Cloning cache of Plots from https://github.com/tbreloff/Plots.jl.git
INFO: Cloning cache of RecipesBase from https://github.com/JuliaPlots/RecipesBase.jl.git
INFO: Cloning cache of Showoff from https://github.com/JuliaGraphics/Showoff.jl.git
INFO: Cloning cache of ToeplitzMatrices from https://github.com/JuliaMatrices/ToeplitzMatrices.jl.git
INFO: Installing ApproxFun v0.3.1
INFO: Installing BandedMatrices v0.0.9
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.1.15
INFO: Installing ColorTypes v0.2.6
INFO: Installing Colors v0.6.7
INFO: Installing DualNumbers v0.2.2
INFO: Installing FastGaussQuadrature v0.1.0
INFO: Installing FastTransforms v0.0.5
INFO: Installing FixedPointNumbers v0.1.6
INFO: Installing FixedSizeArrays v0.2.3
INFO: Installing Iterators v0.1.10
INFO: Installing Measures v0.0.3
INFO: Installing NaNMath v0.2.1
INFO: Installing PlotUtils v0.0.4
INFO: Installing Plots v0.9.1
INFO: Installing RecipesBase v0.0.6
INFO: Installing Reexport v0.0.3
INFO: Installing Rmath v0.1.3
INFO: Installing SHA v0.2.1
INFO: Installing Showoff v0.0.7
INFO: Installing StatsBase v0.9.0
INFO: Installing StatsFuns v0.3.1
INFO: Installing ToeplitzMatrices v0.1.1
INFO: Installing URIParser v0.1.6
INFO: Building Rmath
INFO: Building Plots
INFO: Cannot find deps/plotly-latest.min.js... downloading latest version.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 1746k  100 1746k    0     0  3039k      0 --:--:-- --:--:-- --:--:-- 3037k
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ApproxFun
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ApproxFun")' log
Julia Version 0.6.0-dev.718
Commit 9f50a2c (2016-09-20 15:35 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (367.39453125 MB free)
Uptime: 2781.0 sec
Load Avg:  0.9169921875  0.96875  0.91064453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz      97382 s         60 s      20524 s     140511 s          4 s
#2  3498 MHz      75590 s         95 s      18187 s     172264 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - ApproxFun                     0.3.1
 - JSON                          0.7.0
25 additional packages:
 - BandedMatrices                0.0.9
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - ColorTypes                    0.2.6
 - Colors                        0.6.7
 - Compat                        0.9.2
 - DualNumbers                   0.2.2
 - FastGaussQuadrature           0.1.0
 - FastTransforms                0.0.5
 - FixedPointNumbers             0.1.6
 - FixedSizeArrays               0.2.3
 - Iterators                     0.1.10
 - Measures                      0.0.3
 - NaNMath                       0.2.1
 - PlotUtils                     0.0.4
 - Plots                         0.9.1
 - RecipesBase                   0.0.6
 - Reexport                      0.0.3
 - Rmath                         0.1.3
 - SHA                           0.2.1
 - Showoff                       0.0.7
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.1
 - ToeplitzMatrices              0.1.1
 - URIParser                     0.1.6
INFO: Testing ApproxFun
Julia Version 0.6.0-dev.718
Commit 9f50a2c (2016-09-20 15:35 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
WARNING: Method definition cgrad(Any, Any) in module PlotUtils at /home/vagrant/.julia/v0.6/PlotUtils/src/color_gradients.jl:82 overwritten at /home/vagrant/.julia/v0.6/PlotUtils/src/color_gradients.jl:99.
WARNING: Method definition #cgrad(Array{Any, 1}, PlotUtils.#cgrad, Any, Any) in module PlotUtils overwritten.
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:994
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 27
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 99
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/FastTransforms/src/specialfunctions.jl, in expression starting on line 155
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 79
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 80
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 81
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Domains/Ray.jl, in expression starting on line 82
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 749
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 750
WARNING: `@vectorize_1arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_1arg(::ANY, ::ANY) at ./deprecated.jl:986
 in include_from_node1(::String) at ./loading.jl:541 (repeats 3 times)
 in macro expansion; at ./none:2 [inlined]
 in anonymous at ./<missing>:?
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl, in expression starting on line 751
Domain tests
Fun tests
WARNING: exp{T <: Number}(x::AbstractArray{T}) is deprecated, use exp.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in exp(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 27
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 27
WARNING: cos{T <: Number}(x::AbstractArray{T}) is deprecated, use cos.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in cos(::Array{Float64,1}) at ./deprecated.jl:50
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 28
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:167
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:122
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 35
WARNING: abs{T <: Number}(x::AbstractArray{T}) is deprecated, use abs.(x) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in abs(::Array{Float64,1}) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:169
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:122
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 35
WARNING: max{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use max.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in max(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:122
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 35
WARNING: min{T1 <: Real}(x::AbstractArray{T1},y::Real) is deprecated, use min.(x,y) instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in min(::Array{Float64,1}, ::Int64) at ./deprecated.jl:50
 in PruneOptions(::Array{Complex{Float64},1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:171
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64, ::ApproxFun.ClenshawPlan{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:215
 in rootsunit_coeffs(::Array{Float64,1}, ::Float64) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:177
 in roots(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/roots.jl:104
 in ./(::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}, ::ApproxFun.Fun{ApproxFun.Chebyshev{ApproxFun.Interval{Float64}},Float64}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Extras/specialfunctions.jl:122
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/ChebyshevTest.jl, in expression starting on line 35
ERROR: LoadError: LoadError: MethodError: Cannot `convert` an object of type Int64 to an object of type ApproxFun.Infinity{Bool}
This may have arisen from a call to the constructor ApproxFun.Infinity{Bool}(...),
since type constructors fall back to convert methods.
 in mapfoldl_impl(::ApproxFun.#dimension, ::Base.#+, ::ApproxFun.Infinity{Bool}, ::Tuple{ApproxFun.Hardy{true,ApproxFun.PeriodicInterval{Float64}},ApproxFun.Hardy{false,ApproxFun.PeriodicInterval{Float64}}}, ::Int64) at ./reduce.jl:43
 in mapfoldl(::ApproxFun.#dimension, ::Function, ::Tuple{ApproxFun.Hardy{true,ApproxFun.PeriodicInterval{Float64}},ApproxFun.Hardy{false,ApproxFun.PeriodicInterval{Float64}}}) at ./reduce.jl:73
 in ApproxFun.Fun{ApproxFun.SumSpace{Tuple{ApproxFun.Hardy{true,ApproxFun.PeriodicInterval{Float64}},ApproxFun.Hardy{false,ApproxFun.PeriodicInterval{Float64}}},ApproxFun.ComplexBasis,ApproxFun.PeriodicInterval{Float64},1},Float64}(::Array{Float64,1}, ::ApproxFun.SumSpace{Tuple{ApproxFun.Hardy{true,ApproxFun.PeriodicInterval{Float64}},ApproxFun.Hardy{false,ApproxFun.PeriodicInterval{Float64}}},ApproxFun.ComplexBasis,ApproxFun.PeriodicInterval{Float64},1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Fun/Fun.jl:15
 in ApproxFun.Fun{S,T}(::Array{Float64,1}, ::ApproxFun.SumSpace{Tuple{ApproxFun.Hardy{true,ApproxFun.PeriodicInterval{Float64}},ApproxFun.Hardy{false,ApproxFun.PeriodicInterval{Float64}}},ApproxFun.ComplexBasis,ApproxFun.PeriodicInterval{Float64},1}) at /home/vagrant/.julia/v0.6/ApproxFun/src/Fun/Fun.jl:25
 in include_from_node1(::String) at ./loading.jl:541 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:326
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/FourierTest.jl, in expression starting on line 8
while loading /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl, in expression starting on line 13
==============================[ ERROR: ApproxFun ]==============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/ApproxFun/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: ApproxFun had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:238
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:326

>>> End of log
