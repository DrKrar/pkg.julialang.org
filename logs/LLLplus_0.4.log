>>> 'Pkg.add("LLLplus")' log
INFO: Cloning cache of LLLplus from git://github.com/christianpeel/LLLplus.jl.git
INFO: Installing LLLplus v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LLLplus
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LLLplus")' log
Julia Version 0.4.0-rc2
Commit fa52609* (2015-09-18 17:51 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing LLLplus
tests with small matrices...
...done

In all the following tests, the first time includes the JIT compilation; 
for the second execution the compilation is already done and the time
should be faster.

Testing LLL on 1000x1000 real matrix...
  1.555074 seconds (3.42 M allocations: 1.385 GB, 11.99% gc time)
  1.253637 seconds (3.20 M allocations: 1.376 GB, 10.42% gc time)

Testing LLL on 10x10 complex matrix...
  1.691967 seconds (1.64 M allocations: 74.728 MB, 0.78% gc time)
  0.001229 seconds (5.71 k allocations: 461.766 KB)
Testing VBLAST on same 10x10 complex matrix...
  0.828806 seconds (931.22 k allocations: 42.240 MB, 1.39% gc time)
  0.000394 seconds (499 allocations: 146.078 KB)

Testing sphere decoder on 100000 samples of 2x2 BPSK system...
  1.066606 seconds (4.26 M allocations: 221.913 MB, 2.93% gc time)
  0.415794 seconds (3.70 M allocations: 196.817 MB, 6.72% gc time)
Error Rate is 0.0. It should be zero or very small.

Testing now with 200x200 matrix from latticechallenge.org.
All the column norms should be 30.
max col-norm of input is 233.24879420910196
  0.092362 seconds (193.26 k allocations: 89.289 MB, 27.42% gc time)
max col-norm of lll-reduced basis is 30.0
  7.695237 seconds (27.81 M allocations: 3.964 GB, 6.22% gc time)
max column norm of seysen-reduced basis is 30.0
INFO: LLLplus tests passed

>>> End of log
