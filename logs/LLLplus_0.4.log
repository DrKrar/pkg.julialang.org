>>> 'Pkg.add("LLLplus")' log
INFO: Cloning cache of LLLplus from git://github.com/christianpeel/LLLplus.jl.git
INFO: Installing LLLplus v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LLLplus
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LLLplus")' log
Julia Version 0.4.0-pre+7119
Commit 0568edb (2015-09-01 17:02 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Core(TM) i5-2500K CPU @ 3.30GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing LLLplus
tests with small matrices...
...done

In all the following tests, the first time includes the JIT compilation; 
for the second execution the compilation is already done and the time
should be faster.

Testing LLL on 1000x1000 real matrix...
  1.566136 seconds (3.85 M allocations: 2.034 GB, 10.79% gc time)
  1.254271 seconds (3.65 M allocations: 2.025 GB, 11.02% gc time)

Testing LLL on 10x10 complex matrix...
  1.566750 seconds (1.50 M allocations: 67.517 MB, 0.80% gc time)
  0.000341 seconds (1.80 k allocations: 144.688 KB)
Testing VBLAST on same 10x10 complex matrix...
  0.751068 seconds (844.88 k allocations: 37.884 MB, 0.76% gc time)
  0.000326 seconds (499 allocations: 146.078 KB)

Testing sphere decoder on 100000 samples of 2x2 BPSK system...
  0.960951 seconds (4.25 M allocations: 221.176 MB, 3.04% gc time)
  0.337334 seconds (3.70 M allocations: 196.817 MB, 5.85% gc time)
Error Rate is 0.0. It should be zero or very small.

Testing now with 200x200 matrix from latticechallenge.org.
All the column norms should be 30.
max col-norm of input is 233.24879420910193
  0.061164 seconds (191.90 k allocations: 89.220 MB, 21.84% gc time)
max col-norm of lll-reduced basis is 30.0
  6.633891 seconds (27.60 M allocations: 3.954 GB, 5.17% gc time)
max column norm of seysen-reduced basis is 30.0
INFO: LLLplus tests passed

>>> End of log
