>>> 'Pkg.add("LLLplus")' log
INFO: Cloning cache of LLLplus from git://github.com/christianpeel/LLLplus.jl.git
INFO: Installing LLLplus v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LLLplus
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LLLplus")' log
Julia Version 0.4.0-pre+7304
Commit b3a1be5 (2015-09-05 13:59 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Core(TM) i5-2500K CPU @ 3.30GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing LLLplus
tests with small matrices...
...done

In all the following tests, the first time includes the JIT compilation; 
for the second execution the compilation is already done and the time
should be faster.

Testing LLL on 1000x1000 real matrix...
  1.605252 seconds (3.69 M allocations: 2.323 GB, 10.86% gc time)
  1.395305 seconds (3.48 M allocations: 2.314 GB, 10.42% gc time)

Testing LLL on 10x10 complex matrix...
  1.612436 seconds (1.64 M allocations: 74.156 MB, 0.94% gc time)
  0.000418 seconds (2.21 k allocations: 187.406 KB)
Testing VBLAST on same 10x10 complex matrix...
  0.769936 seconds (932.53 k allocations: 42.040 MB, 1.35% gc time)
  0.000253 seconds (499 allocations: 146.078 KB)

Testing sphere decoder on 100000 samples of 2x2 BPSK system...
  0.972946 seconds (4.26 M allocations: 221.629 MB, 2.92% gc time)
  0.373068 seconds (3.70 M allocations: 196.817 MB, 5.36% gc time)
Error Rate is 0.0. It should be zero or very small.

Testing now with 200x200 matrix from latticechallenge.org.
All the column norms should be 30.
max col-norm of input is 233.24879420910196
  0.062397 seconds (191.90 k allocations: 89.220 MB, 17.46% gc time)
max col-norm of lll-reduced basis is 30.0
  6.518132 seconds (27.65 M allocations: 3.956 GB, 5.17% gc time)
max column norm of seysen-reduced basis is 30.0
INFO: LLLplus tests passed

>>> End of log
