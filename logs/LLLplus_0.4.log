>>> 'Pkg.add("LLLplus")' log
INFO: Cloning cache of LLLplus from git://github.com/christianpeel/LLLplus.jl.git
INFO: Installing LLLplus v0.1.1
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of LLLplus
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("LLLplus")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (534.43359375 MB free)
Uptime: 31986.0 sec
Load Avg:  0.97021484375  1.078125  1.14453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz    1403088 s       3292 s     148593 s    1277583 s         58 s
#2  3500 MHz     998220 s        697 s     129474 s    1915823 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - LLLplus                       0.1.1
24 additional packages:
 - BinDeps                       0.4.0
 - BufferedStreams               0.1.5
 - Codecs                        0.1.5
 - Compat                        0.8.6
 - DataArrays                    0.3.6
 - DataFrames                    0.7.6
 - Docile                        0.5.23
 - GZip                          0.2.19
 - GeoIP                         0.2.2              598fe5a8 (dirty)
 - HttpCommon                    0.2.6
 - HttpParser                    0.1.1
 - IPNets                        0.2.0
 - Libz                          0.1.1
 - MbedTLS                       0.2.5
 - Reexport                      0.0.3
 - Requests                      0.3.8
 - Rmath                         0.1.2
 - SHA                           0.1.2
 - SortingAlgorithms             0.0.6
 - StatsBase                     0.9.0
 - StatsFuns                     0.3.0
 - URIParser                     0.1.5
 - ZipFile                       0.2.6
 - Zlib                          0.1.12
INFO: Testing LLLplus
tests with small matrices...
...done

In all the following tests, the first time includes the JIT compilation; 
for the second execution the compilation is already done and the time
should be faster.

Testing LLL on 1000x1000 real matrix...
  0.809488 seconds (3.13 M allocations: 1.235 GB, 13.73% gc time)
  0.625827 seconds (2.92 M allocations: 1.225 GB, 17.91% gc time)

Testing LLL on 10x10 complex matrix...
  1.009088 seconds (1.64 M allocations: 74.538 MB, 1.15% gc time)
  0.000347 seconds (2.15 k allocations: 173.266 KB)
Testing VBLAST on same 10x10 complex matrix...
  0.533126 seconds (943.29 k allocations: 42.745 MB, 1.53% gc time)
  0.000232 seconds (499 allocations: 146.391 KB)

Testing sphere decoder on 100000 samples of 2x2 BPSK system...
  0.575460 seconds (4.29 M allocations: 223.321 MB, 3.53% gc time)
  0.182368 seconds (3.70 M allocations: 196.817 MB, 8.93% gc time)
Error Rate is 0.0. It should be zero or very small.

Testing now with 200x200 matrix from latticechallenge.org.
All the column norms should be 30.
max col-norm of input is 233.24879420910196
  0.057244 seconds (193.27 k allocations: 89.289 MB, 40.13% gc time)
max col-norm of lll-reduced basis is 30.0
  4.204407 seconds (28.07 M allocations: 4.001 GB, 6.47% gc time)
max column norm of seysen-reduced basis is 30.0
INFO: LLLplus tests passed

>>> End of log
