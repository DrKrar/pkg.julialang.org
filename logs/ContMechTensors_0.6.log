>>> 'Pkg.add("ContMechTensors")' log
INFO: Cloning cache of ContMechTensors from https://github.com/KristofferC/ContMechTensors.jl.git
INFO: Installing Calculus v0.1.15
INFO: Installing ContMechTensors v0.3.0
INFO: Installing DiffBase v0.0.2
INFO: Installing ForwardDiff v0.3.3
INFO: Installing NaNMath v0.2.2
INFO: Installing StaticArrays v0.1.2
INFO: Package database updated

>>> 'Pkg.test("ContMechTensors")' log
Julia Version 0.6.0-dev.1662
Commit f27c6f3 (2016-12-23 02:28 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (753.05859375 MB free)
Uptime: 10088.0 sec
Load Avg:  0.92822265625  0.97998046875  1.10986328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     572542 s       1522 s      73257 s     260603 s         34 s
#2  3499 MHz     212809 s       4455 s      42163 s     718401 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - ContMechTensors               0.3.0
 - JSON                          0.8.0
6 additional packages:
 - Calculus                      0.1.15
 - Compat                        0.9.5
 - DiffBase                      0.0.2
 - ForwardDiff                   0.3.3
 - NaNMath                       0.2.2
 - StaticArrays                  0.1.2
INFO: Computing test dependencies for ContMechTensors...
INFO: Installing DocStringExtensions v0.3.1
INFO: Installing Documenter v0.8.4
INFO: Testing ContMechTensors

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..+(...)".
Use "function Base.broadcast(::typeof(Base.+), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..-(...)".
Use "function Base.broadcast(::typeof(Base.-), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base..*(...)".
Use "function Base.broadcast(::typeof(Base.*), ...)" instead.

WARNING: deprecated syntax "function Base../(...)".
Use "function Base.broadcast(::typeof(Base./), ...)" instead.

WARNING: deprecated syntax "function Base../(...)".
Use "function Base.broadcast(::typeof(Base./), ...)" instead.

WARNING: deprecated syntax "function Base../(...)".
Use "function Base.broadcast(::typeof(Base./), ...)" instead.
Documenter: setting up build directory.
Documenter: expanding markdown templates.
Documenter: building cross-references.
Documenter: running document checks.
 > checking for missing docstrings.
 > running doctests.
 !! Test error in the following code block in 'src/man/constructing_tensors.md':

        julia> diagm(Tensor{2,2}, 2.0)
        2×2 ContMechTensors.Tensor{2,2,Float64,4}:
         2.0  0.0
         0.0  2.0
        
        julia> diagm(SymmetricTensor{2,3}, [1.0, 2.0, 3.0])
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
         1.0  0.0  0.0
         0.0  2.0  0.0
         0.0  0.0  3.0

    in expression:

        diagm(Tensor{2,2}, 2.0)

    expected:

        2×2 ContMechTensors.Tensor{2,2,Float64,4}:
         2.0  0.0
         0.0  2.0

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#*, ::Float64, ::StaticArrays.SVector{4,Float64}) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:43 (repeats 80000 times)

 !! Test error in the following code block in 'src/man/automatic_differentiation.md':

        julia> x = rand(Vec{2});
        
        julia> gradient(norm, x)
        2-element ContMechTensors.Tensor{1,2,Float64,2}:
         0.61036
         0.792124
        
        julia> x / norm(x)
        2-element ContMechTensors.Tensor{1,2,Float64,2}:
         0.61036
         0.792124

    in expression:

        x / norm(x)

    expected:

        2-element ContMechTensors.Tensor{1,2,Float64,2}:
         0.61036
         0.792124

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#/, ::StaticArrays.SVector{2,Float64}, ::Float64) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:28 (repeats 80000 times)

 !! Test error in the following code block in 'src/man/automatic_differentiation.md':

        julia> A = rand(SymmetricTensor{2,2});
        
        julia> gradient(det, A)
        2×2 ContMechTensors.SymmetricTensor{2,2,Float64,3}:
          0.566237  -0.766797
         -0.766797   0.590845
        
        julia> inv(A)' * det(A)
        2×2 ContMechTensors.SymmetricTensor{2,2,Float64,3}:
          0.566237  -0.766797
         -0.766797   0.590845

    in expression:

        inv(A)' * det(A)

    expected:

        2×2 ContMechTensors.SymmetricTensor{2,2,Float64,3}:
          0.566237  -0.766797
         -0.766797   0.590845

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#*, ::StaticArrays.SVector{3,Float64}, ::Float64) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:27 (repeats 80000 times)

 !! Test error in the following code block in 'src/man/automatic_differentiation.md':

        julia> E = rand(Tensor{4,2});
        
        julia> ψ(ϵ) = 1/2 * ϵ ⊡ E ⊡ ϵ;
        
        julia> E_sym = hessian(ψ, rand(Tensor{2,2}));
        
        julia> norm(majorsymmetric(E) - E_sym)
        0.0

    in expression:

        E_sym = hessian(ψ, rand(Tensor{2,2}));

    expected:

        

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#*, ::Float64, ::StaticArrays.SVector{4,ForwardDiff.Dual{4,ForwardDiff.Dual{4,Float64}}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:43 (repeats 80000 times)

 !! Test error in the following code block in 'src/man/automatic_differentiation.md':

        julia> E = rand(Tensor{4,2});
        
        julia> ψ(ϵ) = 1/2 * ϵ ⊡ E ⊡ ϵ;
        
        julia> E_sym = hessian(ψ, rand(Tensor{2,2}));
        
        julia> norm(majorsymmetric(E) - E_sym)
        0.0

    in expression:

        norm(majorsymmetric(E) - E_sym)

    expected:

        0.0

    returned:

        ERROR: UndefVarError: E_sym not defined

 !! Test error in the following code block in '/home/vagrant/.julia/v0.6/ContMechTensors/src/math_ops.jl':

        julia> A = rand(SymmetricTensor{2,3})
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147
        
        julia> Λ, Φ = eig(A);
        
        julia> Λ
        3-element ContMechTensors.Tensor{1,3,Float64,3}:
         -0.312033
          0.15636
          2.06075
        
        julia> Φ
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
          0.492843  -0.684993  0.536554
         -0.811724  -0.139855  0.567049
          0.313385   0.715     0.624952
        
        julia> Φ ⋅ diagm(Tensor{2,3}, Λ) ⋅ inv(Φ) # Same as A
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147

    in expression:

        Λ, Φ = eig(A);

    expected:

        

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#/, ::StaticArrays.SVector{3,Float64}, ::Float64) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:28 (repeats 80000 times)

 !! Test error in the following code block in '/home/vagrant/.julia/v0.6/ContMechTensors/src/math_ops.jl':

        julia> A = rand(SymmetricTensor{2,3})
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147
        
        julia> Λ, Φ = eig(A);
        
        julia> Λ
        3-element ContMechTensors.Tensor{1,3,Float64,3}:
         -0.312033
          0.15636
          2.06075
        
        julia> Φ
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
          0.492843  -0.684993  0.536554
         -0.811724  -0.139855  0.567049
          0.313385   0.715     0.624952
        
        julia> Φ ⋅ diagm(Tensor{2,3}, Λ) ⋅ inv(Φ) # Same as A
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147

    in expression:

        Λ

    expected:

        3-element ContMechTensors.Tensor{1,3,Float64,3}:
         -0.312033
          0.15636
          2.06075

    returned:

        ERROR: UndefVarError: Λ not defined

 !! Test error in the following code block in '/home/vagrant/.julia/v0.6/ContMechTensors/src/math_ops.jl':

        julia> A = rand(SymmetricTensor{2,3})
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147
        
        julia> Λ, Φ = eig(A);
        
        julia> Λ
        3-element ContMechTensors.Tensor{1,3,Float64,3}:
         -0.312033
          0.15636
          2.06075
        
        julia> Φ
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
          0.492843  -0.684993  0.536554
         -0.811724  -0.139855  0.567049
          0.313385   0.715     0.624952
        
        julia> Φ ⋅ diagm(Tensor{2,3}, Λ) ⋅ inv(Φ) # Same as A
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147

    in expression:

        Φ

    expected:

        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
          0.492843  -0.684993  0.536554
         -0.811724  -0.139855  0.567049
          0.313385   0.715     0.624952

    returned:

        ERROR: UndefVarError: Φ not defined

 !! Test error in the following code block in '/home/vagrant/.julia/v0.6/ContMechTensors/src/math_ops.jl':

        julia> A = rand(SymmetricTensor{2,3})
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147
        
        julia> Λ, Φ = eig(A);
        
        julia> Λ
        3-element ContMechTensors.Tensor{1,3,Float64,3}:
         -0.312033
          0.15636
          2.06075
        
        julia> Φ
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
          0.492843  -0.684993  0.536554
         -0.811724  -0.139855  0.567049
          0.313385   0.715     0.624952
        
        julia> Φ ⋅ diagm(Tensor{2,3}, Λ) ⋅ inv(Φ) # Same as A
        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147

    in expression:

        Φ ⋅ diagm(Tensor{2,3}, Λ) ⋅ inv(Φ) # Same as A

    expected:

        3×3 ContMechTensors.Tensor{2,3,Float64,9}:
         0.590845  0.766797  0.566237
         0.766797  0.460085  0.794026
         0.566237  0.794026  0.854147

    returned:

        ERROR: UndefVarError: Φ not defined

 !! Test error in the following code block in 'src/demos.md':

        julia> μ = 1e10;
        
        julia> Kb = 1.66e11;
        
        julia> F = one(Tensor{2,3}) + rand(Tensor{2,3});
        
        julia> C = tdot(F);
        
        julia> S_AD = 2 * gradient(C -> Ψ(C, μ, Kb), C)
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11
        
        julia> S(C, μ, Kb)
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11

    in expression:

        S_AD = 2 * gradient(C -> Ψ(C, μ, Kb), C)

    expected:

        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#*, ::ForwardDiff.Dual{6,Float64}, ::StaticArrays.SVector{6,ForwardDiff.Dual{6,Float64}}) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:43 (repeats 80000 times)

 !! Test error in the following code block in 'src/demos.md':

        julia> μ = 1e10;
        
        julia> Kb = 1.66e11;
        
        julia> F = one(Tensor{2,3}) + rand(Tensor{2,3});
        
        julia> C = tdot(F);
        
        julia> S_AD = 2 * gradient(C -> Ψ(C, μ, Kb), C)
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11
        
        julia> S(C, μ, Kb)
        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11

    in expression:

        S(C, μ, Kb)

    expected:

        3×3 ContMechTensors.SymmetricTensor{2,3,Float64,6}:
          4.30534e11  -2.30282e11  -8.52861e10
         -2.30282e11   4.38793e11  -2.64481e11
         -8.52861e10  -2.64481e11   7.85515e11

    returned:

        ERROR: StackOverflowError:
         in broadcast(::Base.#*, ::Float64, ::StaticArrays.SVector{6,Float64}) at /home/vagrant/.julia/v0.6/StaticArrays/src/arraymath.jl:43 (repeats 80000 times)

 > checking footnote links.
Documenter: populating indices.
ERROR: LoadError: LoadError: `makedocs` encountered an error. Terminating build
 in runner(::Type{Documenter.Builder.RenderDocument}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.6/Documenter/src/Builder.jl:202
 in dispatch(::Type{Documenter.Builder.DocumentPipeline}, ::Documenter.Documents.Document) at /home/vagrant/.julia/v0.6/Documenter/src/Selectors.jl:164
 in cd(::Documenter.##2#3{Documenter.Documents.Document}, ::String) at ./file.jl:69
 in #makedocs#1(::Bool, ::Array{Any,1}, ::Function) at /home/vagrant/.julia/v0.6/Documenter/src/Documenter.jl:159
 in (::Documenter.#kw##makedocs)(::Array{Any,1}, ::Documenter.#makedocs) at ./<missing>:0
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:292
 in _start() at ./client.jl:356
while loading /home/vagrant/.julia/v0.6/ContMechTensors/test/../docs/make.jl, in expression starting on line 3
while loading /home/vagrant/.julia/v0.6/ContMechTensors/test/runtests.jl, in expression starting on line 2
===========================[ ERROR: ContMechTensors ]===========================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/ContMechTensors/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing DocStringExtensions v0.3.1
INFO: Removing Documenter v0.8.4
ERROR: ContMechTensors had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:269
 in _start() at ./client.jl:356

>>> End of log
