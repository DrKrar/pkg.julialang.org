>>> 'Pkg.add("JuMPChance")' log
INFO: Cloning cache of JuMPChance from https://github.com/mlubin/JuMPChance.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.1.15
INFO: Installing DiffBase v0.0.2
INFO: Installing Distributions v0.11.1
INFO: Installing ECOS v0.7.0
INFO: Installing ForwardDiff v0.3.3
INFO: Installing JuMP v0.15.0
INFO: Installing JuMPChance v0.3.0
INFO: Installing Lazy v0.11.4
INFO: Installing MacroTools v0.3.4
INFO: Installing MathProgBase v0.5.8
INFO: Installing NaNMath v0.2.2
INFO: Installing PDMats v0.5.2
INFO: Installing ReverseDiffSparse v0.6.0
INFO: Installing Rmath v0.1.5
INFO: Installing SHA v0.3.0
INFO: Installing StatsBase v0.11.1
INFO: Installing StatsFuns v0.3.1
INFO: Installing URIParser v0.1.6
INFO: Building Rmath
INFO: Building ECOS
INFO: Package database updated

>>> 'Pkg.test("JuMPChance")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1462.3046875 MB free)
Uptime: 40784.0 sec
Load Avg:  1.0029296875  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz    2293441 s         73 s     290406 s    1042069 s         84 s
#2  3498 MHz     737945 s        101 s     127796 s    3111406 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.0
 - JuMPChance                    0.3.0
23 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.10.0
 - CompilerTools                 0.2.1
 - DataStructures                0.4.6
 - DiffBase                      0.0.2
 - Distributions                 0.11.1
 - DocOpt                        0.2.0
 - ECOS                          0.7.0
 - ForwardDiff                   0.3.3
 - JuMP                          0.15.0
 - Lazy                          0.11.4
 - MacroTools                    0.3.4
 - MathProgBase                  0.5.8
 - NaNMath                       0.2.2
 - PDMats                        0.5.2
 - ParallelAccelerator           0.2.2              6da2e374 (dirty)
 - ReverseDiffSparse             0.6.0
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - URIParser                     0.1.6
INFO: Computing test dependencies for JuMPChance...
INFO: Installing FactCheck v0.4.3
INFO: Installing GLPK v0.3.0
INFO: Installing GLPKMathProgInterface v0.2.3
INFO: Building GLPK
INFO: Testing JuMPChance
WARNING: The curly syntax (sum{},prod{},norm2{}) is deprecated in favor of the new generator syntax (sum(),prod(),norm()).
WARNING: Replace sum{quadobj.qcoeffs[i] * quadobj_t[i],i = 1:qterms} with sum(quadobj.qcoeffs[i] * quadobj_t[i] for i = 1:qterms).
WARNING: Replace sum{getmean(ccexpr.vars[i]) * ccexpr.coeffs[i],i = 1:nterms} with sum(getmean(ccexpr.vars[i]) * ccexpr.coeffs[i] for i = 1:nterms).
WARNING: Replace sum{varterm[i] ^ 2,i in 1:nterms} with sum(varterm[i] ^ 2 for i in 1:nterms).
WARNING: Replace sum{getmean(ccexpr.vars[k]) * ccexpr.coeffs[k],k = 1:nterms} with sum(getmean(ccexpr.vars[k]) * ccexpr.coeffs[k] for k = 1:nterms).
WARNING: Expression chancevarterm[i] should not be used as a variable name. Use the "anonymous" syntax chancevarterm[i] = @variable(m, ...) instead.
WARNING: Expression twosidechancevarterm[k] should not be used as a variable name. Use the "anonymous" syntax twosidechancevarterm[k] = @variable(m, ...) instead.
WARNING: Replace sum{qlinterm[i],i = 1:qterms} with sum(qlinterm[i] for i = 1:qterms).
WARNING: Replace sum{getvalue((chancevarterm[i])[k]) * (chancevarterm[i])[k],k in 1:nterms} with sum(getvalue((chancevarterm[i])[k]) * (chancevarterm[i])[k] for k in 1:nterms).
WARNING: Replace sum{getvalue((twosidechancevarterm[i])[k]) * (twosidechancevarterm[i])[k],k in 1:nterms} with sum(getvalue((twosidechancevarterm[i])[k]) * (twosidechancevarterm[i])[k] for k in 1:nterms).
WARNING: Replace sum{means_nominal[ccexpr.vars[k].idx] * ccexpr.coeffs[k],k = 1:nterms} with sum(means_nominal[ccexpr.vars[k].idx] * ccexpr.coeffs[k] for k = 1:nterms).
WARNING: Replace sum{sign(getvalue(ccexpr.coeffs[sorted_mean_idx[r]])) * means_deviation[ccexpr.vars[sorted_mean_idx[r]].idx] * ccexpr.coeffs[sorted_mean_idx[r]],r = 1:cc.uncertainty_budget_mean} with sum(sign(getvalue(ccexpr.coeffs[sorted_mean_idx[r]])) * means_deviation[ccexpr.vars[sorted_mean_idx[r]].idx] * ccexpr.coeffs[sorted_mean_idx[r]] for r = 1:cc.uncertainty_budget_mean).
WARNING: Replace sum{var_coeffs[k] * getvalue(ccexpr.coeffs[k]) * (ccexpr.coeffs[k] - getvalue(ccexpr.coeffs[k])),k = 1:nterms} with sum(var_coeffs[k] * getvalue(ccexpr.coeffs[k]) * (ccexpr.coeffs[k] - getvalue(ccexpr.coeffs[k])) for k = 1:nterms).
Operator overloads and printing
86 facts verified.
WARNING: The curly syntax (sum{},prod{},norm2{}) is deprecated in favor of the new generator syntax (sum(),prod(),norm()).
WARNING: Replace sum{y[i],i = 1:3} with sum(y[i] for i = 1:3).
Printing two-sided constraints
3 facts verified.
Basic chance constraint model
6 facts verified.
Flipped constraint sense
6 facts verified.
Invariance to transformations
8 facts verified.
Duplicate terms
4 facts verified.
@constraints block
4 facts verified.
Robust but no uncertainty budget
WARNING: Solver does not appear to support adding constraints to an existing model. Hot-start is disabled.
6 facts verified.
Quadratic objective
10 facts verified.
Uncertainty budget for mean
3 facts verified.
Uncertain variance, but no budget
2 facts verified.
Uncertain variance, with budget
8 facts verified.
WARNING: Replace sum{y,i = 1:1} with sum(y for i = 1:1).
Integer variables
WARNING: Solver does not appear to support providing initial feasible solutions.
2 facts verified.
Variance == 0 corner case
12 facts verified.
WARNING: Replace sum{x[i] * y[i],i = 1:2} with sum(x[i] * y[i] for i = 1:2).
Special cases where chance constraint becomes linear
8 facts verified.
WARNING: Replace sum{varterm[i] ^ 2,i = 1:2} with sum(varterm[i] ^ 2 for i = 1:2).
Compare with manual reformulation
48 facts verified.
WARNING: Replace sum{x[i] * ω[i],i = 1:4} with sum(x[i] * ω[i] for i = 1:4).
WARNING: Replace sum{i * x[i] * ω[i],i = 1:4} with sum(i * x[i] * ω[i] for i = 1:4).
Two-sided constraints vs. two one-sided constraints
WARNING: A variable named slackvar is already attached to this model. If creating variables programmatically, consider using the anonymous variable syntax x = @variable(m, [1:N], ...).
WARNING: A variable named varterm is already attached to this model. If creating variables programmatically, consider using the anonymous variable syntax x = @variable(m, [1:N], ...).
WARNING: A constraint named defvar is already attached to this model. If creating constraints programmatically, consider using the anonymous constraint syntax con = @constraint(m, ...).
10 facts verified.
Basic two-sided constraints
WARNING: A variable named t is already attached to this model. If creating variables programmatically, consider using the anonymous variable syntax x = @variable(m, [1:N], ...).
158 facts verified.
Empty two-sided constraints
1 fact verified.
JuMP macro corner case
1 fact verified.
INFO: JuMPChance tests passed
INFO: Removing FactCheck v0.4.3
INFO: Removing GLPK v0.3.0
INFO: Removing GLPKMathProgInterface v0.2.3

>>> End of log
