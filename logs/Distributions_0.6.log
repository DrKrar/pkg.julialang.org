>>> 'Pkg.add("Distributions")' log
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.2.0
INFO: Installing DataStructures v0.5.2
INFO: Installing Distributions v0.12.0
INFO: Installing PDMats v0.5.6
INFO: Installing QuadGK v0.1.1
INFO: Installing Rmath v0.1.6
INFO: Installing SHA v0.3.1
INFO: Installing StatsBase v0.13.0
INFO: Installing StatsFuns v0.4.0
INFO: Installing URIParser v0.1.8
INFO: Building Rmath
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] Array(::Type{Tuple{BinDeps.DependencyProvider,Dict{Symbol,Any}}}, ::Int64) at ./deprecated.jl:50
 [3] #_library_dependency#21(::Array{Any,1}, ::Function, ::BinDeps.PackageContext, ::String) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:60
 [4] (::BinDeps.#kw##_library_dependency)(::Array{Any,1}, ::BinDeps.#_library_dependency, ::BinDeps.PackageContext, ::String) at ./<missing>:0
 [5] #library_dependency#1(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N} where N) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:86
 [6] (::__anon__.#kw##library_dependency)(::Array{Any,1}, ::__anon__.#library_dependency, ::String, ::Vararg{String,N} where N) at ./<missing>:0
 [7] include_from_node1(::String) at ./loading.jl:539
 [8] include(::String) at ./sysimg.jl:14
 [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [10] cd(::##2#4, ::String) at ./file.jl:69
 [11] (::##1#3)(::IOStream) at ./none:12
 [12] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [13] eval(::Module, ::Any) at ./boot.jl:236
 [14] process_options(::Base.JLOptions) at ./client.jl:281
 [15] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 5
WARNING: Array{T}(::Type{T}, m::Int) is deprecated, use Array{T}(m) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] Array(::Type{Tuple{BinDeps.DependencyHelper,Dict{Symbol,Any}}}, ::Int64) at ./deprecated.jl:50
 [3] #_library_dependency#21(::Array{Any,1}, ::Function, ::BinDeps.PackageContext, ::String) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:60
 [4] (::BinDeps.#kw##_library_dependency)(::Array{Any,1}, ::BinDeps.#_library_dependency, ::BinDeps.PackageContext, ::String) at ./<missing>:0
 [5] #library_dependency#1(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N} where N) at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:86
 [6] (::__anon__.#kw##library_dependency)(::Array{Any,1}, ::__anon__.#library_dependency, ::String, ::Vararg{String,N} where N) at ./<missing>:0
 [7] include_from_node1(::String) at ./loading.jl:539
 [8] include(::String) at ./sysimg.jl:14
 [9] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [10] cd(::##2#4, ::String) at ./file.jl:69
 [11] (::##1#3)(::IOStream) at ./none:12
 [12] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [13] eval(::Module, ::Any) at ./boot.jl:236
 [14] process_options(::Base.JLOptions) at ./client.jl:281
 [15] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 5
WARNING: takebuf_string(b) is deprecated, use String(take!(b)) instead.
Stacktrace:
 [1] depwarn(::String, ::Symbol) at ./deprecated.jl:62
 [2] takebuf_string(::Base.AbstractIOBuffer{Array{UInt8,1}}) at ./deprecated.jl:50
 [3] macro expansion at /home/vagrant/.julia/v0.6/BinDeps/src/dependencies.jl:887 [inlined]
 [4] anonymous at ./<missing>:?
 [5] include_from_node1(::String) at ./loading.jl:539
 [6] include(::String) at ./sysimg.jl:14
 [7] evalfile(::String, ::Array{String,1}) at ./loading.jl:573 (repeats 2 times)
 [8] cd(::##2#4, ::String) at ./file.jl:69
 [9] (::##1#3)(::IOStream) at ./none:12
 [10] open(::##1#3, ::String, ::String) at ./iostream.jl:152
 [11] eval(::Module, ::Any) at ./boot.jl:236
 [12] process_options(::Base.JLOptions) at ./client.jl:281
 [13] _start() at ./client.jl:366
while loading /home/vagrant/.julia/v0.6/Rmath/deps/build.jl, in expression starting on line 43
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Distributions
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Distributions")' log
Julia Version 0.6.0-dev.2635
Commit dc2459d (2017-02-13 07:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (877.03125 MB free)
Uptime: 16699.0 sec
Load Avg:  0.9580078125  0.9853515625  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     850509 s       6588 s      84414 s     525629 s         40 s
#2  3500 MHz     279109 s         77 s      48590 s    1288211 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.9.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - Distributions                 0.12.0
 - JSON                          0.8.3
11 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.2.0
 - Compat                        0.18.0
 - DataStructures                0.5.2
 - PDMats                        0.5.6
 - QuadGK                        0.1.1
 - Rmath                         0.1.6
 - SHA                           0.3.1
 - StatsBase                     0.13.0
 - StatsFuns                     0.4.0
 - URIParser                     0.1.8
INFO: Computing test dependencies for Distributions...
INFO: Installing DiffBase v0.0.4
INFO: Installing ForwardDiff v0.3.4
INFO: Installing NaNMath v0.2.2
INFO: Testing Distributions
Running tests:
	From worker 2:	    testing Distributions.CategoricalDirectSampler
	From worker 2:	    testing Distributions.AliasTable
	From worker 2:	    testing Distributions.BinomialGeomSampler
	From worker 2:	    testing Distributions.BinomialTPESampler
	From worker 2:	    testing Distributions.BinomialPolySampler
	From worker 3:	    testing Distributions.Categorical{Float64}(K=2, p=[0.5, 0.5])
	From worker 2:	    testing Distributions.BinomialAliasSampler
	From worker 3:	    testing Distributions.Categorical{Float64}(K=4, p=[0.1, 0.3, 0.2, 0.4])
	From worker 3:	    testing Distributions.Categorical{Float64}(K=3, p=[0.15, 0.25, 0.6])
	From worker 2:	    testing Distributions.PoissonCountSampler
	From worker 2:	    testing Distributions.PoissonADSampler
	From worker 2:	    testing Distributions.PoissBinAliasSampler
	From worker 3:	    [Discrete]
	From worker 3:	    ------------
	From worker 3:	    testing Bernoulli()
	From worker 2:	    testing Distributions.ExponentialSampler
	From worker 2:	    testing Distributions.GammaGDSampler
	From worker 3:	    testing Bernoulli(0.25)
	From worker 3:	    testing Bernoulli(0.75)
	From worker 3:	    testing Binomial()
	From worker 2:	    testing Distributions.GammaMTSampler
	From worker 2:	    testing Distributions.GammaGSSampler
	From worker 3:	    testing Binomial(3)
	From worker 3:	    testing Binomial(5, 0.4)
	From worker 3:	    testing Binomial(6, 0.8)
	From worker 2:	    testing Distributions.GammaIPSampler
	From worker 3:	    testing Binomial(100, 0.1)
	From worker 3:	    testing Binomial(100, 0.9)
	From worker 3:	    testing DiscreteUniform(6)
	From worker 2:	    -----
	From worker 3:	    testing DiscreteUniform(0, 4)
	From worker 3:	    testing DiscreteUniform(2, 8)
	From worker 3:	    testing Geometric()
	From worker 2:	    testing Distributions.Biweight{Float64}(μ=0.0, σ=1.0)
	From worker 3:	    testing Geometric(0.02)
	From worker 3:	    testing Geometric(0.1)
	From worker 3:	    testing Geometric(0.5)
	From worker 3:	    testing Geometric(0.9)
	From worker 3:	    testing Hypergeometric(2, 2, 2)
	From worker 2:	    testing Distributions.Biweight{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Epanechnikov{Float64}(μ=0.0, σ=1.0)
	From worker 3:	    testing Hypergeometric(3, 2, 2)
	From worker 3:	    testing Hypergeometric(3, 2, 0)
	From worker 3:	    testing Hypergeometric(3, 2, 5)
	From worker 3:	    testing Hypergeometric(4, 5, 6)
	From worker 3:	    testing Hypergeometric(60, 80, 100)
	From worker 2:	    testing Distributions.Epanechnikov{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Frechet{Float64}(α=0.5, θ=1.0)
	From worker 3:	    testing NegativeBinomial()
	From worker 2:	    testing Distributions.Frechet{Float64}(α=3.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet{Float64}(α=20.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet{Float64}(α=120.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet{Float64}(α=0.5, θ=2.0)
	From worker 2:	    testing Distributions.Frechet{Float64}(α=3.0, θ=2.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=0.0, σ=1.0, ξ=1.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=0.0, σ=1.0, ξ=1.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=1.0, σ=1.0, ξ=1.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=0.1, σ=2.0, ξ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=0.0, σ=0.5, ξ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto{Float64}(μ=-1.5, σ=0.5, ξ=2.0)
	From worker 2:	    testing Distributions.InverseGaussian{Float64}(μ=1.0, λ=1.0)
	From worker 3:	    testing NegativeBinomial(6)
	From worker 3:	    testing NegativeBinomial(1, 0.5)
	From worker 3:	    testing NegativeBinomial(5, 0.6)
	From worker 3:	    testing NegativeBinomial(0.5, 0.5)
	From worker 3:	    testing Poisson()
	From worker 2:	    testing Distributions.InverseGaussian{Float64}(μ=2.0, λ=7.0)
	From worker 2:	    testing Distributions.Levy{Float64}(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.Levy{Float64}(μ=2.0, σ=8.0)
	From worker 2:	    testing Distributions.Levy{Float64}(μ=3.0, σ=3.0)
	From worker 2:	    testing Distributions.LogNormal{Float64}(μ=0.0, σ=1.0)
	From worker 3:	    testing Poisson(0.0)
	From worker 3:	    testing Poisson(0.5)
	From worker 3:	    testing Poisson(2.0)
	From worker 3:	    testing Poisson(10.0)
	From worker 3:	    testing Poisson(80.0)
	From worker 3:	    testing Skellam()
	From worker 2:	    testing Distributions.LogNormal{Float64}(μ=0.0, σ=2.0)
	From worker 2:	    testing Distributions.LogNormal{Float64}(μ=3.0, σ=0.5)
	From worker 2:	    testing Distributions.LogNormal{Float64}(μ=3.0, σ=1.0)
	From worker 2:	    testing Distributions.LogNormal{Float64}(μ=3.0, σ=2.0)
	From worker 2:	    testing Distributions.NoncentralBeta{Float64}(α=2.0, β=2.0, λ=0.0)
	From worker 3:	    testing Skellam(2.0)
	From worker 3:	    testing Skellam(2.0, 3.0)
	From worker 3:	    testing Skellam(3.2, 1.8)
	From worker 3:	
	From worker 3:	    [Continuous]
	From worker 3:	    ------------
	From worker 3:	    testing Arcsine()
	From worker 2:	    testing Distributions.NoncentralBeta{Float64}(α=2.0, β=6.0, λ=5.0)
	From worker 3:	    testing Arcsine(2.0)
	From worker 2:	    testing Distributions.NoncentralChisq{Float64}(ν=2.0, λ=2.0)
	From worker 3:	    testing Arcsine(1.0, 2.5)
	From worker 3:	    testing Beta(2.0, 2.0)
	From worker 3:	    testing Beta(3.0, 4.0)
	From worker 3:	    testing Beta(17.0, 13.0)
	From worker 3:	    testing BetaPrime(3.0, 3.0)
	From worker 2:	    testing Distributions.NoncentralChisq{Float64}(ν=2.0, λ=5.0)
	From worker 3:	    testing BetaPrime(3.0, 5.0)
	From worker 3:	    testing BetaPrime(5.0, 3.0)
	From worker 3:	    testing Cauchy()
	From worker 2:	    testing Distributions.NoncentralF{Float64}(ν1=2.0, ν2=2.0, λ=2.0)
	From worker 3:	    testing Cauchy(2.0)
	From worker 3:	    testing Cauchy(0.0, 1.0)
	From worker 3:	    testing Cauchy(10.0, 1.0)
	From worker 3:	    testing Cauchy(2.0, 10.0)
	From worker 3:	    testing Chi(1)
	From worker 2:	    testing Distributions.NoncentralF{Float64}(ν1=8.0, ν2=10.0, λ=5.0)
	From worker 2:	    testing Distributions.NoncentralT{Float64}(ν=2.0, λ=2.0)
	From worker 3:	    testing Chi(2)
	From worker 3:	    testing Chi(3)
	From worker 3:	    testing Chi(12)
	From worker 2:	    testing Distributions.NoncentralT{Float64}(ν=10.0, λ=2.0)
	From worker 3:	    testing Chisq(1)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=0.0, σ=1.0)
	From worker 3:	    testing Chisq(8)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=2.0, σ=1.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Triweight{Float64}(μ=1.0, σ=1.0)
	From worker 3:	    testing Chisq(20)
	From worker 3:	    testing Cosine()
	From worker 3:	    testing Cosine(1.5)
	From worker 3:	    testing Cosine(2.0, 2.8)
	From worker 3:	    testing Erlang(1, 1.0)
	From worker 3:	    testing Erlang(3, 1.0)
	From worker 3:	    testing Erlang(5, 2.0)
	From worker 3:	    testing Exponential()
	From worker 3:	    testing Exponential(2.0)
	From worker 3:	    testing Exponential(6.5)
	From worker 3:	    testing FDist(6.0, 8.0)
	From worker 3:	    testing FDist(8.0, 6.0)
	From worker 3:	    testing Gamma()
	From worker 3:	    testing Gamma(2.0)
	From worker 3:	    testing Gamma(1.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 2.0)
	From worker 3:	    testing GeneralizedPareto()
	From worker 2:	   testing PoissonBinomial p=0.8, n=6
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(0.1, 2.0, 0.0)
	From worker 3:	    testing GeneralizedPareto(-1.5, 0.5, 2.0)
	From worker 3:	    testing Gumbel()
	From worker 2:	   testing PoissonBinomial p=0.5, n=10
	From worker 2:	   testing PoissonBinomial p=0.04, n=20
	From worker 2:	   testing PoissonBinomial [10 × 0.1, 10 × 0.5, 10 × 0.9]
	From worker 2:	   testing PoissonBinomial [1 × 0.99, 10 × 0.1, 100 × 0.05]
	From worker 2:	   testing PoissonBinomial [5 × 0.01, 1 × 0.99, 3 × 0.999]
	From worker 2:	   testing PoissonBinomial [10 × 0.0, 7 × 0.9, 10 × 0.5]
	From worker 3:	    testing Gumbel(3.0)
	From worker 3:	    testing Gumbel(3.0, 5.0)
	From worker 3:	    testing Gumbel(5.0, 3.0)
	From worker 3:	    testing InverseGamma()
	From worker 3:	    testing InverseGamma(2.0)
	From worker 3:	    testing InverseGamma(1.0, 1.0)
	From worker 3:	    testing InverseGamma(1.0, 2.0)
	From worker 3:	    testing InverseGamma(2.0, 1.0)
	From worker 3:	    testing InverseGamma(2.0, 3.0)
	From worker 3:	    testing InverseGaussian()
	From worker 3:	    testing InverseGaussian(0.8)
	From worker 3:	    testing InverseGaussian(2.0)
	From worker 3:	    testing Laplace()
	From worker 3:	    testing Laplace(2.0)
	From worker 3:	    testing Laplace(0.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.5)
	From worker 3:	    testing Logistic()
	From worker 3:	    testing Logistic(2.0)
	From worker 3:	    testing Logistic(0.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.5)
	From worker 3:	    testing LogNormal()
	From worker 3:	    testing LogNormal(0.0)
	From worker 3:	    testing LogNormal(0.0, 2.0)
	From worker 3:	    testing Normal(0.0, 1.0)
	From worker 3:	    testing Normal(-3.0, 2.0)
	From worker 3:	    testing Normal(1.0, 10.0)
	From worker 3:	    testing NormalCanon()
	From worker 3:	    testing NormalCanon(0.0, 1.0)
	From worker 3:	    testing NormalCanon(-1.0, 2.5)
	From worker 3:	    testing NormalCanon(2.0, 0.8)
	From worker 3:	    testing Pareto()
	From worker 2:	    testing IsoNormal
	From worker 3:	    testing Pareto(2.0)
	From worker 3:	    testing Pareto(2.0, 1.5)
	From worker 3:	    testing Pareto(3.0, 2.0)
	From worker 3:	    testing Rayleigh()
	From worker 2:	    testing ZeroMeanIsoNormal
	From worker 3:	    testing Rayleigh(3.0)
	From worker 3:	    testing Rayleigh(8.0)
	From worker 2:	    testing DiagNormal
	From worker 3:	    testing SymTriangularDist()
	From worker 2:	    testing ZeroMeanDiagNormal
	From worker 3:	    testing SymTriangularDist(3.0)
	From worker 3:	    testing SymTriangularDist(3.0, 0.5)
	From worker 2:	    testing FullNormal
	From worker 3:	    testing SymTriangularDist(3.0, 2.0)
	From worker 3:	    testing SymTriangularDist(10.0, 8.0)
	From worker 3:	    testing TDist(1.2)
	From worker 2:	    testing ZeroMeanFullNormal
	From worker 2:	    testing IsoNormalCanon
	From worker 3:	    testing TDist(5.0)
	From worker 3:	    testing TDist(28.0)
	From worker 3:	    testing TriangularDist(0, 5)
	From worker 2:	    testing ZeroMeanIsoNormalCanon
	From worker 2:	    testing DiagNormalCanon
	From worker 2:	    testing ZeroMeanDiagormalCanon
	From worker 3:	    testing TriangularDist(-7, 2)
	From worker 3:	    testing TriangularDist(-4, 14, 3)
	From worker 3:	    testing TriangularDist(2, 2000, 500)
	From worker 3:	    testing TriangularDist(1, 3, 2)
	From worker 3:	    testing TruncatedNormal(0, 1, -2, 2)
	From worker 2:	    testing FullNormalCanon
	From worker 2:	    testing ZeroMeanFullNormalCanon
	From worker 3:	    testing TruncatedNormal(3, 10, 7, 8)
	From worker 3:	    testing TruncatedNormal(27, 3, 0, Inf)
	From worker 3:	    testing TruncatedNormal(-5, 1, -Inf, -10)
	From worker 3:	    testing TruncatedNormal(1.8, 1.2, -Inf, 0)
	From worker 2:	    testing fit_mle
	From worker 3:	    testing Uniform(0.0, 1.0)
	From worker 2:	    comparing results from MvLogNormal with univariate LogNormal
	From worker 3:	    testing Uniform(3.0, 17.0)
	From worker 3:	    testing Uniform(3.0, 3.1)
	From worker 3:	    testing VonMises()
	From worker 3:	    testing VonMises(4.0)
	From worker 3:	    testing VonMises(1.1, 2.5)
	From worker 3:	    testing Weibull()
	From worker 3:	    testing Weibull(0.5)
	From worker 3:	    testing Weibull(5.0)
	From worker 3:	    testing Weibull(20.0, 1.0)
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}} with normal distribution FullNormal
	From worker 3:	    testing Weibull(1.0, 2.0)
	From worker 3:	    testing Weibull(5.0, 2.0)
	From worker 3:	
	From worker 3:	    [Discrete_hand_coded]
	From worker 3:	    ------------
	From worker 3:	    testing BetaBinomial(2, 0.2, 0.25)
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanDiagNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.ScalMat{Float64},Array{Float64,1}} with normal distribution IsoNormal
	From worker 3:	
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.ScalMat{Float64},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanIsoNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Array{Float64,1}} with normal distribution DiagNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDiagMat{Float64,Array{Float64,1}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanDiagNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Array{Float64,1}} with normal distribution FullNormal
	From worker 2:	    testing Distributions.MvLogNormal{Float64,PDMats.PDMat{Float64,Array{Float64,2}},Distributions.ZeroVector{Float64}} with normal distribution ZeroMeanFullNormal
	From worker 2:	    testing UnivariateMixture
	From worker 2:	    testing MultivariateMixture
	From worker 3:	    [Discrete]
	From worker 3:	    ------------
	From worker 3:	    testing Truncated(Bernoulli(),3,5)
	From worker 3:	    testing Truncated(Bernoulli(0.25),3,5)
	From worker 3:	    testing Truncated(Bernoulli(0.75),3,5)
	From worker 3:	    testing Truncated(Binomial(),3,5)
	From worker 3:	    testing Truncated(Binomial(3),3,5)
	From worker 3:	    testing Truncated(Binomial(5, 0.4),3,5)
	From worker 3:	    testing Truncated(Binomial(6, 0.8),3,5)
	From worker 3:	    testing Truncated(Binomial(100, 0.1),3,5)
	From worker 3:	    testing Truncated(Binomial(100, 0.9),3,5)
	From worker 3:	    testing Truncated(DiscreteUniform(6),3,5)
	From worker 3:	    testing Truncated(DiscreteUniform(0, 4),3,5)
	From worker 3:	    testing Truncated(DiscreteUniform(2, 8),3,5)
	From worker 3:	    testing Truncated(Geometric(),3,5)
	From worker 3:	    testing Truncated(Geometric(0.02),3,5)
	From worker 3:	    testing Truncated(Geometric(0.1),3,5)
	From worker 3:	    testing Truncated(Geometric(0.5),3,5)
	From worker 3:	    testing Truncated(Geometric(0.9),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(2, 2, 2),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(3, 2, 2),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(3, 2, 0),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(3, 2, 5),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(4, 5, 6),3,5)
	From worker 3:	    testing Truncated(Hypergeometric(60, 80, 100),3,5)
	From worker 3:	    testing Truncated(NegativeBinomial(),3,5)
	From worker 3:	    testing Truncated(NegativeBinomial(6),3,5)
	From worker 3:	    testing Truncated(NegativeBinomial(1, 0.5),3,5)
	From worker 3:	    testing Truncated(NegativeBinomial(5, 0.6),3,5)
	From worker 3:	    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
	From worker 3:	    testing Truncated(Poisson(),3,5)
	From worker 3:	    testing Truncated(Poisson(0.0),3,5)
	From worker 3:	    testing Truncated(Poisson(0.5),3,5)
	From worker 3:	    testing Truncated(Poisson(2.0),3,5)
	From worker 3:	    testing Truncated(Poisson(10.0),3,5)
	From worker 3:	    testing Truncated(Poisson(80.0),3,5)
	From worker 3:	    testing Truncated(Skellam(),3,5)
	From worker 3:	    testing Truncated(Skellam(2.0),3,5)
	From worker 3:	    testing Truncated(Skellam(2.0, 3.0),3,5)
	From worker 3:	    testing Truncated(Skellam(3.2, 1.8),3,5)
	From worker 3:	
	From worker 3:	    [Continuous]
	From worker 3:	    ------------
	From worker 3:	    testing Truncated(Arcsine(),3,5)
	From worker 3:	    testing Truncated(Arcsine(2.0),3,5)
	From worker 3:	    testing Truncated(Arcsine(1.0, 2.5),3,5)
	From worker 3:	    testing Truncated(Beta(2.0, 2.0),3,5)
	From worker 3:	    testing Truncated(Beta(3.0, 4.0),3,5)
	From worker 3:	    testing Truncated(Beta(17.0, 13.0),3,5)
	From worker 3:	    testing Truncated(BetaPrime(3.0, 3.0),3,5)
	From worker 3:	    testing Truncated(BetaPrime(3.0, 5.0),3,5)
	From worker 3:	    testing Truncated(BetaPrime(5.0, 3.0),3,5)
	From worker 3:	    testing Truncated(Cauchy(),3,5)
	From worker 3:	    testing Truncated(Cauchy(2.0),3,5)
	From worker 3:	    testing Truncated(Cauchy(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Cauchy(10.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Cauchy(2.0, 10.0),3,5)
	From worker 3:	    testing Truncated(Chi(1),3,5)
	From worker 3:	    testing Truncated(Chi(2),3,5)
	From worker 3:	    testing Truncated(Chi(3),3,5)
	From worker 3:	    testing Truncated(Chi(12),3,5)
	From worker 3:	    testing Truncated(Chisq(1),3,5)
	From worker 3:	    testing Truncated(Chisq(8),3,5)
	From worker 3:	    testing Truncated(Chisq(20),3,5)
	From worker 3:	    testing Truncated(Cosine(),3,5)
	From worker 3:	    testing Truncated(Cosine(1.5),3,5)
	From worker 3:	    testing Truncated(Cosine(2.0, 2.8),3,5)
	From worker 3:	    testing Truncated(Erlang(1, 1.0),3,5)
	From worker 3:	    testing Truncated(Erlang(3, 1.0),3,5)
	From worker 3:	    testing Truncated(Erlang(5, 2.0),3,5)
	From worker 3:	    testing Truncated(Exponential(),3,5)
	From worker 3:	    testing Truncated(Exponential(2.0),3,5)
	From worker 3:	    testing Truncated(Exponential(6.5),3,5)
	From worker 3:	    testing Truncated(FDist(6.0, 8.0),3,5)
	From worker 3:	    testing Truncated(FDist(8.0, 6.0),3,5)
	From worker 3:	    testing Truncated(Gamma(),3,5)
	From worker 3:	    testing Truncated(Gamma(2.0),3,5)
	From worker 3:	    testing Truncated(Gamma(1.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Gamma(3.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Gamma(3.0, 2.0),3,5)
	From worker 3:	    testing Truncated(GeneralizedPareto(),3,5)
	From worker 3:	    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
	From worker 3:	    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
	From worker 3:	    testing Truncated(GeneralizedPareto(0.1, 2.0, 0.0),3,5)
	From worker 3:	    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
	From worker 3:	    testing Truncated(Gumbel(),3,5)
	From worker 3:	    testing Truncated(Gumbel(3.0),3,5)
	From worker 3:	    testing Truncated(Gumbel(3.0, 5.0),3,5)
	From worker 3:	    testing Truncated(Gumbel(5.0, 3.0),3,5)
	From worker 3:	    testing Truncated(InverseGamma(),3,5)
	From worker 3:	    testing Truncated(InverseGamma(2.0),3,5)
	From worker 3:	    testing Truncated(InverseGamma(1.0, 1.0),3,5)
	From worker 3:	    testing Truncated(InverseGamma(1.0, 2.0),3,5)
	From worker 3:	    testing Truncated(InverseGamma(2.0, 1.0),3,5)
	From worker 3:	    testing Truncated(InverseGamma(2.0, 3.0),3,5)
	From worker 3:	    testing Truncated(InverseGaussian(),3,5)
	From worker 3:	    testing Truncated(InverseGaussian(0.8),3,5)
	From worker 3:	    testing Truncated(InverseGaussian(2.0),3,5)
	From worker 3:	    testing Truncated(Laplace(),3,5)
	From worker 3:	    testing Truncated(Laplace(2.0),3,5)
	From worker 3:	    testing Truncated(Laplace(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Laplace(5.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Laplace(5.0, 1.5),3,5)
	From worker 3:	    testing Truncated(Logistic(),3,5)
	From worker 3:	    testing Truncated(Logistic(2.0),3,5)
	From worker 3:	    testing Truncated(Logistic(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Logistic(5.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Logistic(5.0, 1.5),3,5)
	From worker 3:	    testing Truncated(LogNormal(),3,5)
	From worker 3:	    testing Truncated(LogNormal(0.0),3,5)
	From worker 3:	    testing Truncated(LogNormal(0.0, 2.0),3,5)
	From worker 3:	    testing Truncated(Normal(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Normal(-3.0, 2.0),3,5)
	From worker 3:	    testing Truncated(Normal(1.0, 10.0),3,5)
	From worker 3:	    testing Truncated(NormalCanon(),3,5)
	From worker 3:	    testing Truncated(NormalCanon(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
	From worker 3:	    testing Truncated(NormalCanon(2.0, 0.8),3,5)
	From worker 3:	    testing Truncated(Pareto(),3,5)
	From worker 3:	    testing Truncated(Pareto(2.0),3,5)
	From worker 3:	    testing Truncated(Pareto(2.0, 1.5),3,5)
	From worker 3:	    testing Truncated(Pareto(3.0, 2.0),3,5)
	From worker 3:	    testing Truncated(Rayleigh(),3,5)
	From worker 3:	    testing Truncated(Rayleigh(3.0),3,5)
	From worker 3:	    testing Truncated(Rayleigh(8.0),3,5)
	From worker 3:	    testing Truncated(SymTriangularDist(),3,5)
	From worker 3:	    testing Truncated(SymTriangularDist(3.0),3,5)
	From worker 3:	    testing Truncated(SymTriangularDist(3.0, 0.5),3,5)
	From worker 3:	    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
	From worker 3:	    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
	From worker 3:	    testing Truncated(TDist(1.2),3,5)
	From worker 3:	    testing Truncated(TDist(5.0),3,5)
	From worker 3:	    testing Truncated(TDist(28.0),3,5)
	From worker 3:	    testing Truncated(TriangularDist(0, 5),3,5)
	From worker 3:	    testing Truncated(TriangularDist(-7, 2),3,5)
	From worker 3:	    testing Truncated(TriangularDist(-4, 14, 3),3,5)
	From worker 3:	    testing Truncated(TriangularDist(2, 2000, 500),3,5)
	From worker 3:	    testing Truncated(TriangularDist(1, 3, 2),3,5)
	From worker 3:	    testing Truncated(TruncatedNormal(0, 1, -2, 2),3,5)
	From worker 3:	    testing Truncated(TruncatedNormal(3, 10, 7, 8),3,5)
	From worker 3:	    testing Truncated(TruncatedNormal(27, 3, 0, Inf),3,5)
	From worker 3:	    testing Truncated(TruncatedNormal(-5, 1, -Inf, -10),3,5)
	From worker 3:	    testing Truncated(TruncatedNormal(1.8, 1.2, -Inf, 0),3,5)
	From worker 3:	    testing Truncated(Uniform(0.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Uniform(3.0, 17.0),3,5)
	From worker 3:	    testing Truncated(Uniform(3.0, 3.1),3,5)
	From worker 3:	    testing Truncated(VonMises(),3,5)
	From worker 3:	    testing Truncated(VonMises(4.0),3,5)
	From worker 3:	    testing Truncated(VonMises(1.1, 2.5),3,5)
	From worker 3:	    testing Truncated(Weibull(),3,5)
	From worker 3:	    testing Truncated(Weibull(0.5),3,5)
	From worker 3:	    testing Truncated(Weibull(5.0),3,5)
	From worker 3:	    testing Truncated(Weibull(20.0, 1.0),3,5)
	From worker 3:	    testing Truncated(Weibull(1.0, 2.0),3,5)
	From worker 3:	    testing Truncated(Weibull(5.0, 2.0),3,5)
	From worker 3:	
Potentially stale exports: 
Skipping Distributions.cgf
Skipping Distributions.cumulant
Skipping Distributions.fit_map
Skipping Distributions.fit_map!
Skipping Distributions.fit_mle!
Skipping Distributions.freecumulant
Skipping Distributions.kde
14-element Array{Tuple{Method,Method},1}:
 (insupport!{D<:(Distributions.Distribution{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(r::AbstractArray, d::Union{D, Type{D}}, X::AbstractArray{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/multivariates.jl:23, insupport!{D<:(Distributions.Distribution{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(r::AbstractArray, d::Union{D, Type{D}}, X::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:23)
 (fit_mle{D<:(Distributions.Distribution{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(dt::Type{D}, x::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/genericfit.jl:8, fit_mle{D<:(Distributions.Distribution{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(dt::Type{D}, x::AbstractArray{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/genericfit.jl:11)                                                                 
 (insupport{D<:(Distributions.Distribution{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(d::Union{D, Type{D}}, X::AbstractArray{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/multivariates.jl:32, insupport{D<:(Distributions.Distribution{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(d::Union{D, Type{D}}, X::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:31)                                      
 (nsamples{D<:(Distributions.Sampleable{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:33, nsamples{D<:(Distributions.Sampleable{Distributions.Matrixvariate,S} where S<:Distributions.ValueSupport), T<:Number}(::Type{D}, x::Array{Array{T,2},N} where N) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:35)                                                  
 (nsamples{D<:(Distributions.Sampleable{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:31, nsamples{D<:(Distributions.Sampleable{Distributions.Matrixvariate,S} where S<:Distributions.ValueSupport), T<:Number}(::Type{D}, x::Array{Array{T,2},N} where N) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:35)                                                                 
 (nsamples{D<:(Distributions.Sampleable{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:31, nsamples{D<:(Distributions.Sampleable{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:33)                                                                              
 (support{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Continuous}}(d::Union{D, Type{D}}) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:37, support{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}}(d::Union{D, Type{D}}) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:38)                                                                                                                               
 (hasfinitesupport{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}}(d::Union{D, Type{D}}) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:19, hasfinitesupport{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Continuous}}(d::Union{D, Type{D}}) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:20)                                                                                                             
 (nsamples{D<:(Distributions.Sampleable{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::Number) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:30, nsamples{D<:(Distributions.Sampleable{Distributions.Matrixvariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::Number) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:34)                                                                                                        
 (nsamples{D<:(Distributions.Sampleable{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray{T,1} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:32, nsamples{D<:(Distributions.Sampleable{Distributions.Matrixvariate,S} where S<:Distributions.ValueSupport), T<:Number}(::Type{D}, x::Array{Array{T,2},N} where N) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:35)                                                  
 (nsamples{D<:(Distributions.Distribution{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(e::Distributions.Estimator{D}, x::Array) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/estimators.jl:8, nsamples{D<:(Distributions.Distribution{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(e::Distributions.Estimator{D}, x::Array{T,2} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/estimators.jl:9)                                            
 (nsamples{D<:(Distributions.Sampleable{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:31, nsamples{D<:(Distributions.Sampleable{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(::Type{D}, x::AbstractArray{T,1} where T) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/common.jl:32)                                                                              
 (fit_mle{D<:(Distributions.Distribution{Distributions.Univariate,S} where S<:Distributions.ValueSupport)}(dt::Type{D}, x::AbstractArray, w::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/genericfit.jl:9, fit_mle{D<:(Distributions.Distribution{Distributions.Multivariate,S} where S<:Distributions.ValueSupport)}(dt::Type{D}, x::AbstractArray{T,2} where T, w::AbstractArray) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/genericfit.jl:12)                             
 (insupport{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Continuous}}(d::Union{D, Type{D}}, x::Real) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:34, insupport{D<:Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}}(d::Union{D, Type{D}}, x::Real) in Distributions at /home/vagrant/.julia/v0.6/Distributions/src/univariates.jl:35)                                                                                                         INFO: Distributions tests passed
INFO: Removing DiffBase v0.0.4
INFO: Removing ForwardDiff v0.3.4
INFO: Removing NaNMath v0.2.2

>>> End of log
