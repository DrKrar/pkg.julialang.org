>>> 'Pkg.add("VirtualArrays")' log
INFO: Installing VirtualArrays v0.1.1
INFO: Package database updated

>>> 'Pkg.test("VirtualArrays")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1100.16796875 MB free)
Uptime: 35741.0 sec
Load Avg:  0.96630859375  1.0146484375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    2003393 s         56 s     199176 s     979145 s        102 s
#2  3499 MHz     715674 s        108 s      87479 s    2677321 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - JSON                          0.8.0
 - VirtualArrays                 0.1.1
18 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.10.0
 - Distributions                 0.11.1
 - GenerativeModels              0.0.0-             master (unregistered)
 - Iterators                     0.2.0
 - LaTeXStrings                  0.2.0
 - PDMats                        0.5.2
 - POMDPBounds                   0.0.0-             master (unregistered)
 - POMDPModels                   0.0.0-             master (unregistered)
 - POMDPToolbox                  0.0.0-             master (unregistered)
 - POMDPs                        0.4.0
 - Rmath                         0.1.5
 - SHA                           0.3.0
 - StatsBase                     0.11.1
 - StatsFuns                     0.3.1
 - TikzPictures                  0.3.5
 - URIParser                     0.1.6
INFO: Computing test dependencies for VirtualArrays...
INFO: Installing FactCheck v0.4.3
INFO: Testing VirtualArrays
virtual_cat is like cat
  > empty parameters
  > concatenating no arrays
  > concatenating one 1 d array
  > concatenating two 1 d arrays
23 facts verified.
virtual_vcat is like vcat
  > concatenating two 1 d arrays
8 facts verified.
virtual_hcat is like hcat
  > concatenating two 1 d arrays
8 facts verified.
Creating a VirtualArray
  > normal case
  > one parent
  > multiple parent
  > 1 2 dimensional parent
  > 2 dimensional parents
  > multiple 2 dimensional parents
  > 1 multi dimensional parents
  > 2 multi dimensional parents
  > multi multi dimensional parents
57 facts verified.
Creating VirtualArrays and expanding on different dimensions
  > 1 2 dimensional parent
  > 2 dimensional parents
  > multiple 2 dimensional parents
  > 1 multi dimensional parents
  > 2 multi dimensional parents
  > multi multi dimensional parents
  > creating an 1 d VirtualArray with 1 d parents of different lengths
  > creating an 2 d VirtualArray with 2 d parents of different lengths
  > creating an 2 d VirtualArray with 2 d parents of different heights
  > creating an 2 d VirtualArray with 1 d parents
  > creating an 3> d VirtualArray with 1 d parents
62 facts verified.
Creating VirtualArrays oddly
  > storing float array into a real VirtualArray
5 facts verified.
Modifying values in a VirtualArray with 1 d arrays
  > normal case changing one VirtualArray element in the first parent
  > normal case changing one parent element in the first parent
  > normal case changing one VirtualArray element in the any parent
  > normal case changing one element in the any parent
  > changing a value when the parent is a subarray
WARNING: sub is deprecated, use view instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in sub(::Array{Int64,1}, ::Vararg{Any,N}) at ./deprecated.jl:30
 in (::##748#792)() at /home/vagrant/.julia/v0.5/VirtualArrays/test/VirtualArrays.jl:543
 in context(::##748#792, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:475
 in (::##715#759)() at /home/vagrant/.julia/v0.5/VirtualArrays/test/VirtualArrays.jl:536
 in facts(::##715#759, ::String) at /home/vagrant/.julia/v0.5/FactCheck/src/FactCheck.jl:449
 in include_from_node1(::String) at ./loading.jl:488 (repeats 2 times)
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/VirtualArrays/test/VirtualArrays.jl, in expression starting on line 437
19 facts verified.
Modifying values in a VirtualArray with 2 d arrays
  > normal case changing one VirtualArray element in the first parent
  > normal case changing one parent element in the first parent
  > normal case changing one VirtualArray element in the any parent
  > normal case changing one element in the any parent
13 facts verified.
Modifying values in a VirtualArray with mulit d arrays
  > normal case changing one VirtualArray element in the first parent
  > normal case changing one parent element in the first parent
  > normal case changing one VirtualArray element in the any parent
  > normal case changing one element in the any parent
12 facts verified.
Modifying values in a VirtualArray with mulit d arrays and expand in different dimensions
  > normal case changing one VirtualArray element in the first parent
  > normal case changing one parent element in the first parent
  > normal case changing one VirtualArray element in the any parent
  > normal case changing one element in the any parent
12 facts verified.
Accessing VirtualArray values oddly
  > accessing the element with a bunch of 1's padded on
  > setting the element with a bunch of 1's padded on
  > accessing a multi d VirtualArray like a 1 d array when expanded on dimension 1
  > accessing a multi d VirtualArray like a 1 d array when expanded on dimension 2
  > accessing a multi d VirtualArray like a 1 d array when expanded on dimension above 2
13 facts verified.
Modifying values in a 1 d VirtualArray with 1 d arrays of different lengths
  > modifying a value in the first parent from VirtualArray
  > modifying a value in the second parent from VirtualArray
  > modifying a value in the first parent from the parent
  > modifying a value in the second parent from the parent
12 facts verified.
modifying values of m d VirtualArrays with n d parents
  > modifying the value in the first parent from VirtualArray
  > modifying the value in the second parent from VirtualArray
  > modifying the value in the first parent from the parent
  > modifying the value in the second parent from the parent
12 facts verified.
Errors while using VirtualArray
  > out of bounds indexing on 1 1d array
  > tring to create a VirtualArray of the wrong type
  > out of bounds indexing on multiple 1d arrays
  > out of bounds setting on 1 1d array
  > out of bounds setting on multiple 1d arrays
  > throw the right type of error when accessing the array wrong
  > trying to make an 2 d array of 1 d parents of different sizes
  > creating an 2 d VirtualArray with 2 d parents of different lengths on the wrong dimension
20 facts verified.
Check the memory usage of VirtualArray
  > simple test
4 facts verified.
INFO: VirtualArrays tests passed
INFO: Removing FactCheck v0.4.3

>>> End of log
