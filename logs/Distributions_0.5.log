>>> 'Pkg.add("Distributions")' log
INFO: Installing ArrayViews v0.6.4
INFO: Installing Distributions v0.9.0
INFO: Installing PDMats v0.4.1
INFO: Installing StatsBase v0.8.1
INFO: Installing StatsFuns v0.2.2
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Distributions
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Distributions")' log
Julia Version 0.5.0-dev+4329
Commit ef7101b (2016-05-26 00:11 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
INFO: Computing test dependencies for Distributions...
INFO: Installing Calculus v0.1.14
INFO: Installing ForwardDiff v0.1.8
INFO: Installing NaNMath v0.2.1
INFO: Testing Distributions
Running tests:
WARNING: Base.CPU_CORES is deprecated.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl:37
	From worker 2:	    testing Distributions.CategoricalDirectSampler
	From worker 2:	    testing Distributions.AliasTable
	From worker 2:	    testing Distributions.BinomialGeomSampler
	From worker 3:	    testing Distributions.Categorical(K=2, p=[0.5,0.5])
	From worker 2:	    testing Distributions.BinomialTPESampler
	From worker 3:	    testing Distributions.Categorical(K=4, p=[0.1,0.3,0.2,0.4])
	From worker 3:	    testing Distributions.Categorical(K=3, p=[0.15,0.25,0.6])
	From worker 2:	    testing Distributions.BinomialPolySampler
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
	From worker 2:	    testing Distributions.BinomialAliasSampler
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
in #7 at 
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/univariates.jl:120
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
	From worker 3:	    [Discrete]
	From worker 3:	    ------------
	From worker 2:	    testing Distributions.PoissonCountSampler
	From worker 3:	    testing Bernoulli()
	From worker 3:	    testing Bernoulli(0.25)
	From worker 3:	    testing Bernoulli(0.75)
	From worker 3:	    testing BetaBinomial(2, 0.2, 0.25)
	From worker 2:	    testing Distributions.PoissonADSampler
	From worker 2:	    testing Distributions.PoissBinAliasSampler
	From worker 2:	    testing Distributions.ExponentialSampler
	From worker 2:	    testing Distributions.GammaGDSampler
	From worker 2:	    testing Distributions.GammaMTSampler
	From worker 3:	    testing Binomial()
	From worker 2:	    testing Distributions.GammaGSSampler
	From worker 3:	    testing Binomial(3)
	From worker 3:	    testing Binomial(5, 0.4)
	From worker 3:	    testing Binomial(6, 0.8)
	From worker 3:	    testing Binomial(100, 0.1)
	From worker 3:	    testing Binomial(100, 0.9)
	From worker 3:	    testing DiscreteUniform(6)
	From worker 2:	    testing Distributions.GammaIPSampler{S<:Distributions.Sampleable{Distributions.Univariate,Distributions.Continuous}}
	From worker 3:	    testing DiscreteUniform(0, 4)
	From worker 3:	    testing DiscreteUniform(2, 8)
	From worker 3:	    testing Geometric()
	From worker 2:	    -----
	From worker 3:	    testing Geometric(0.02)
	From worker 3:	    testing Geometric(0.1)
	From worker 3:	    testing Geometric(0.5)
	From worker 3:	    testing Geometric(0.9)
	From worker 3:	    testing Hypergeometric(2, 2, 2)
	From worker 3:	    testing Hypergeometric(3, 2, 2)
	From worker 2:	    testing Distributions.Biweight(μ=0.0, σ=1.0)
	From worker 3:	    testing Hypergeometric(3, 2, 0)
	From worker 3:	    testing Hypergeometric(3, 2, 5)
	From worker 3:	    testing Hypergeometric(4, 5, 6)
	From worker 3:	    testing Hypergeometric(60, 80, 100)
	From worker 3:	    testing NegativeBinomial()
	From worker 2:	    testing Distributions.Biweight(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Epanechnikov(μ=0.0, σ=1.0)
	From worker 3:	    testing NegativeBinomial(6)
	From worker 3:	    testing NegativeBinomial(1, 0.5)
	From worker 3:	    testing NegativeBinomial(5, 0.6)
	From worker 2:	    testing Distributions.Epanechnikov(μ=1.0, σ=3.0)
	From worker 3:	    testing NegativeBinomial(0.5, 0.5)
	From worker 2:	    testing Distributions.Frechet(α=0.5, θ=1.0)
	From worker 3:	    testing Poisson()
	From worker 2:	    testing Distributions.Frechet(α=3.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=20.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=120.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=0.5, θ=2.0)
	From worker 2:	    testing Distributions.Frechet(α=3.0, θ=2.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
	From worker 3:	    testing Poisson(0.0)
	From worker 3:	    testing Poisson(0.5)
	From worker 3:	    testing Poisson(2.0)
	From worker 3:	    testing Poisson(10.0)
	From worker 3:	    testing Poisson(80.0)
	From worker 3:	
	From worker 3:	    [Continuous]
	From worker 3:	    ------------
	From worker 3:	    testing Arcsine()
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=1.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=0.1, σ=2.0, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=0.0, σ=0.5, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=-1.5, σ=0.5, μ=2.0)
	From worker 2:	    testing Distributions.InverseGaussian(μ=1.0, λ=1.0)
	From worker 2:	    testing Distributions.InverseGaussian(μ=2.0, λ=7.0)
	From worker 2:	    testing Distributions.Levy(μ=0.0, σ=1.0)
	From worker 3:	    testing Arcsine(2.0)
	From worker 3:	    testing Arcsine(1.0, 2.5)
	From worker 3:	    testing Beta(2.0, 2.0)
	From worker 2:	    testing Distributions.Levy(μ=2.0, σ=8.0)
	From worker 2:	    testing Distributions.Levy(μ=3.0, σ=3.0)
	From worker 2:	    testing Distributions.LogNormal(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.LogNormal(μ=0.0, σ=2.0)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=0.5)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=1.0)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=2.0)
	From worker 2:	    testing Distributions.NoncentralBeta(α=2.0, β=2.0, λ=0.0)
	From worker 3:	    testing Beta(3.0, 4.0)
	From worker 3:	    testing Beta(17.0, 13.0)
	From worker 3:	    testing BetaPrime(3.0, 3.0)
	From worker 2:	    testing Distributions.NoncentralBeta(α=2.0, β=6.0, λ=5.0)
	From worker 2:	    testing Distributions.NoncentralChisq(ν=2.0, λ=2.0)
	From worker 3:	    testing BetaPrime(3.0, 5.0)
	From worker 3:	    testing BetaPrime(5.0, 3.0)
	From worker 3:	    testing Cauchy()
	From worker 3:	    testing Cauchy(2.0)
	From worker 3:	    testing Cauchy(0.0, 1.0)
	From worker 3:	    testing Cauchy(10.0, 1.0)
	From worker 2:	    testing Distributions.NoncentralChisq(ν=2.0, λ=5.0)
	From worker 3:	    testing Cauchy(2.0, 10.0)
	From worker 3:	    testing Chi(1)
	From worker 3:	    testing Chi(2)
	From worker 3:	    testing Chi(3)
	From worker 3:	    testing Chi(12)
	From worker 3:	    testing Chisq(1)
	From worker 2:	    testing Distributions.NoncentralF(ν1=2.0, ν2=2.0, λ=2.0)
	From worker 3:	    testing Chisq(8)
	From worker 3:	    testing Chisq(20)
	From worker 2:	    testing Distributions.NoncentralF(ν1=8.0, ν2=10.0, λ=5.0)
	From worker 3:	    testing Cosine()
	From worker 2:	    testing Distributions.NoncentralT(ν=2.0, λ=2.0)
	From worker 3:	    testing Cosine(1.5)
	From worker 3:	    testing Cosine(2.0, 2.8)
	From worker 2:	    testing Distributions.NoncentralT(ν=10.0, λ=2.0)
	From worker 3:	    testing Erlang(1, 1.0)
	From worker 2:	    testing Distributions.Triweight(μ=0.0, σ=1.0)
	From worker 3:	    testing Erlang(3, 1.0)
	From worker 2:	    testing Distributions.Triweight(μ=1.0, σ=3.0)
	From worker 3:	    testing Erlang(5, 2.0)
	From worker 3:	    testing Exponential()
	From worker 3:	    testing Exponential(2.0)
	From worker 3:	    testing Exponential(6.5)
	From worker 3:	    testing FDist(6.0, 8.0)
	From worker 3:	    testing FDist(8.0, 6.0)
	From worker 3:	    testing Gamma()
	From worker 3:	    testing Gamma(2.0)
	From worker 3:	    testing Gamma(1.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 2.0)
	From worker 3:	    testing GeneralizedPareto()
	From worker 2:	   testing PoissonBinomial p=0.8, n=6
	From worker 2:	   testing PoissonBinomial p=0.5, n=10
	From worker 2:	   testing PoissonBinomial p=0.04, n=20
	From worker 2:	   testing PoissonBinomial [10 × 0.1, 10 × 0.5, 10 × 0.9]
	From worker 2:	   testing PoissonBinomial [1 × 0.99, 10 × 0.1, 100 × 0.05]
	From worker 2:	   testing PoissonBinomial [5 × 0.01, 1 × 0.99, 3 × 0.999]
	From worker 2:	   testing PoissonBinomial [10 × 0.0, 7 × 0.9, 10 × 0.5]
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(0.1, 2.0, 0.0)
	From worker 3:	    testing GeneralizedPareto(-1.5, 0.5, 2.0)
	From worker 3:	    testing Gumbel()
	From worker 3:	    testing Gumbel(3.0)
	From worker 3:	    testing Gumbel(3.0, 5.0)
	From worker 3:	    testing Gumbel(5.0, 3.0)
	From worker 3:	    testing InverseGamma()
	From worker 3:	    testing InverseGamma(2.0)
	From worker 3:	    testing InverseGamma(1.0, 1.0)
	From worker 3:	    testing InverseGamma(1.0, 2.0)
	From worker 3:	    testing InverseGamma(2.0, 1.0)
	From worker 3:	    testing InverseGamma(2.0, 3.0)
	From worker 2:	    testing IsoNormal
	From worker 3:	    testing InverseGaussian()
	From worker 3:	    testing InverseGaussian(0.8)
	From worker 3:	    testing InverseGaussian(2.0)
	From worker 3:	    testing Laplace()
	From worker 2:	    testing ZeroMeanIsoNormal
	From worker 3:	    testing Laplace(2.0)
	From worker 3:	    testing Laplace(0.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.0)
	From worker 2:	    testing DiagNormal
	From worker 3:	    testing Laplace(5.0, 1.5)
	From worker 3:	    testing Logistic()
	From worker 2:	    testing ZeroMeanDiagNormal
	From worker 3:	    testing Logistic(2.0)
	From worker 2:	    testing FullNormal
	From worker 3:	    testing Logistic(0.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.5)
	From worker 3:	    testing LogNormal()
	From worker 2:	    testing ZeroMeanFullNormal
	From worker 3:	    testing LogNormal(0.0)
	From worker 2:	    testing IsoNormalCanon
	From worker 3:	    testing LogNormal(0.0, 2.0)
	From worker 3:	    testing Normal(0.0, 1.0)
	From worker 2:	    testing ZeroMeanIsoNormalCanon
	From worker 3:	    testing Normal(-3.0, 2.0)
	From worker 3:	    testing Normal(1.0, 10.0)
	From worker 2:	    testing DiagNormalCanon
	From worker 3:	    testing NormalCanon(0.0, 1.0)
	From worker 2:	    testing ZeroMeanDiagormalCanon
LLVM ERROR: Unable to allocate section memory!
Worker 3 terminated.
BT Array{	From worker 2:	    testing FullNormalCanon
Ptr{Void},1}0
ERROR (unhandled task failure): EOFError: read end of file
	From worker 2:	    testing ZeroMeanFullNormalCanon
	From worker 2:	    testing fit_mle
	From worker 2:	    comparing results from MvLogNormal with univariate LogNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution FullNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution ZeroMeanDiagNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution IsoNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution ZeroMeanIsoNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution DiagNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution ZeroMeanDiagNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution FullNormal
	From worker 2:	    testing Distributions.MvLogNormal with normal distribution ZeroMeanFullNormal
	From worker 2:	    testing UnivariateMixture
	From worker 2:	    testing MultivariateMixture
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
in #7 at 
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
WARNING: Base.UTF8String is deprecated, use String instead.
  likely near /home/vagrant/.julia/v0.5/Distributions/test/truncate.jl:102
in #7 at /home/vagrant/.julia/v0.5/JSON/src/JSON.jl
	From worker 2:	    [Discrete]
	From worker 2:	    ------------
	From worker 2:	    testing Truncated(Bernoulli(),3,5)
	From worker 2:	    testing Truncated(Bernoulli(0.25),3,5)
	From worker 2:	    testing Truncated(Bernoulli(0.75),3,5)
	From worker 2:	    testing Truncated(BetaBinomial(2, 0.2, 0.25),3,5)
	From worker 2:	    testing Truncated(Binomial(),3,5)
	From worker 2:	    testing Truncated(Binomial(3),3,5)
	From worker 2:	    testing Truncated(Binomial(5, 0.4),3,5)
	From worker 2:	    testing Truncated(Binomial(6, 0.8),3,5)
	From worker 2:	    testing Truncated(Binomial(100, 0.1),3,5)
	From worker 2:	    testing Truncated(Binomial(100, 0.9),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(6),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(0, 4),3,5)
	From worker 2:	    testing Truncated(DiscreteUniform(2, 8),3,5)
	From worker 2:	    testing Truncated(Geometric(),3,5)
	From worker 2:	    testing Truncated(Geometric(0.02),3,5)
	From worker 2:	    testing Truncated(Geometric(0.1),3,5)
	From worker 2:	    testing Truncated(Geometric(0.5),3,5)
	From worker 2:	    testing Truncated(Geometric(0.9),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(2, 2, 2),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(3, 2, 2),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(3, 2, 0),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(3, 2, 5),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(4, 5, 6),3,5)
	From worker 2:	    testing Truncated(Hypergeometric(60, 80, 100),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(6),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(1, 0.5),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(5, 0.6),3,5)
	From worker 2:	    testing Truncated(NegativeBinomial(0.5, 0.5),3,5)
	From worker 2:	    testing Truncated(Poisson(),3,5)
	From worker 2:	    testing Truncated(Poisson(0.0),3,5)
	From worker 2:	    testing Truncated(Poisson(0.5),3,5)
	From worker 2:	    testing Truncated(Poisson(2.0),3,5)
	From worker 2:	    testing Truncated(Poisson(10.0),3,5)
	From worker 2:	    testing Truncated(Poisson(80.0),3,5)
	From worker 2:	
	From worker 2:	    [Continuous]
	From worker 2:	    ------------
	From worker 2:	    testing Truncated(Arcsine(),3,5)
	From worker 2:	    testing Truncated(Arcsine(2.0),3,5)
	From worker 2:	    testing Truncated(Arcsine(1.0, 2.5),3,5)
	From worker 2:	    testing Truncated(Beta(2.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Beta(3.0, 4.0),3,5)
	From worker 2:	    testing Truncated(Beta(17.0, 13.0),3,5)
	From worker 2:	    testing Truncated(BetaPrime(3.0, 3.0),3,5)
	From worker 2:	    testing Truncated(BetaPrime(3.0, 5.0),3,5)
	From worker 2:	    testing Truncated(BetaPrime(5.0, 3.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(),3,5)
	From worker 2:	    testing Truncated(Cauchy(2.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(10.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Cauchy(2.0, 10.0),3,5)
	From worker 2:	    testing Truncated(Chi(1),3,5)
	From worker 2:	    testing Truncated(Chi(2),3,5)
	From worker 2:	    testing Truncated(Chi(3),3,5)
	From worker 2:	    testing Truncated(Chi(12),3,5)
	From worker 2:	    testing Truncated(Chisq(1),3,5)
	From worker 2:	    testing Truncated(Chisq(8),3,5)
	From worker 2:	    testing Truncated(Chisq(20),3,5)
	From worker 2:	    testing Truncated(Cosine(),3,5)
	From worker 2:	    testing Truncated(Cosine(1.5),3,5)
	From worker 2:	    testing Truncated(Cosine(2.0, 2.8),3,5)
	From worker 2:	    testing Truncated(Erlang(1, 1.0),3,5)
	From worker 2:	    testing Truncated(Erlang(3, 1.0),3,5)
	From worker 2:	    testing Truncated(Erlang(5, 2.0),3,5)
	From worker 2:	    testing Truncated(Exponential(),3,5)
	From worker 2:	    testing Truncated(Exponential(2.0),3,5)
	From worker 2:	    testing Truncated(Exponential(6.5),3,5)
	From worker 2:	    testing Truncated(FDist(6.0, 8.0),3,5)
	From worker 2:	    testing Truncated(FDist(8.0, 6.0),3,5)
	From worker 2:	    testing Truncated(Gamma(),3,5)
	From worker 2:	    testing Truncated(Gamma(2.0),3,5)
	From worker 2:	    testing Truncated(Gamma(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Gamma(3.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Gamma(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(1.0, 1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(0.1, 2.0, 0.0),3,5)
	From worker 2:	    testing Truncated(GeneralizedPareto(-1.5, 0.5, 2.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(),3,5)
	From worker 2:	    testing Truncated(Gumbel(3.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(3.0, 5.0),3,5)
	From worker 2:	    testing Truncated(Gumbel(5.0, 3.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(),3,5)
	From worker 2:	    testing Truncated(InverseGamma(2.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(1.0, 1.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(1.0, 2.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(2.0, 1.0),3,5)
	From worker 2:	    testing Truncated(InverseGamma(2.0, 3.0),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(0.8),3,5)
	From worker 2:	    testing Truncated(InverseGaussian(2.0),3,5)
	From worker 2:	    testing Truncated(Laplace(),3,5)
	From worker 2:	    testing Truncated(Laplace(2.0),3,5)
	From worker 2:	    testing Truncated(Laplace(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Laplace(5.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Laplace(5.0, 1.5),3,5)
	From worker 2:	    testing Truncated(Logistic(),3,5)
	From worker 2:	    testing Truncated(Logistic(2.0),3,5)
	From worker 2:	    testing Truncated(Logistic(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Logistic(5.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Logistic(5.0, 1.5),3,5)
	From worker 2:	    testing Truncated(LogNormal(),3,5)
	From worker 2:	    testing Truncated(LogNormal(0.0),3,5)
	From worker 2:	    testing Truncated(LogNormal(0.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Normal(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Normal(-3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Normal(1.0, 10.0),3,5)
	From worker 2:	    testing Truncated(NormalCanon(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(NormalCanon(-1.0, 2.5),3,5)
	From worker 2:	    testing Truncated(NormalCanon(2.0, 0.8),3,5)
	From worker 2:	    testing Truncated(Pareto(),3,5)
	From worker 2:	    testing Truncated(Pareto(2.0),3,5)
	From worker 2:	    testing Truncated(Pareto(2.0, 1.5),3,5)
	From worker 2:	    testing Truncated(Pareto(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Rayleigh(),3,5)
	From worker 2:	    testing Truncated(Rayleigh(3.0),3,5)
	From worker 2:	    testing Truncated(Rayleigh(8.0),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(3.0),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(3.0, 0.5),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(3.0, 2.0),3,5)
	From worker 2:	    testing Truncated(SymTriangularDist(10.0, 8.0),3,5)
	From worker 2:	    testing Truncated(TDist(1.2),3,5)
	From worker 2:	    testing Truncated(TDist(5.0),3,5)
	From worker 2:	    testing Truncated(TDist(28.0),3,5)
	From worker 2:	    testing Truncated(TriangularDist(0, 5),3,5)
	From worker 2:	    testing Truncated(TriangularDist(-7, 2),3,5)
	From worker 2:	    testing Truncated(TriangularDist(-4, 14, 3),3,5)
	From worker 2:	    testing Truncated(TriangularDist(2, 2000, 500),3,5)
	From worker 2:	    testing Truncated(TriangularDist(1, 3, 2),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(0, 1, -2, 2),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(3, 10, 7, 8),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(27, 3, 0, Inf),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(-5, 1, -Inf, -10),3,5)
	From worker 2:	    testing Truncated(TruncatedNormal(1.8, 1.2, -Inf, 0),3,5)
	From worker 2:	    testing Truncated(Uniform(0.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Uniform(3.0, 17.0),3,5)
	From worker 2:	    testing Truncated(Uniform(3.0, 3.1),3,5)
	From worker 2:	    testing Truncated(Weibull(),3,5)
	From worker 2:	    testing Truncated(Weibull(0.5),3,5)
	From worker 2:	    testing Truncated(Weibull(5.0),3,5)
	From worker 2:	    testing Truncated(Weibull(20.0, 1.0),3,5)
	From worker 2:	    testing Truncated(Weibull(1.0, 2.0),3,5)
	From worker 2:	    testing Truncated(Weibull(5.0, 2.0),3,5)
	From worker 2:	
ERROR: LoadError: ProcessExitedException()
 in yieldto(::Task, ::Any) at ./event.jl:89
 in wait() at ./event.jl:122
 in wait(::Condition) at ./event.jl:17
 in wait(::Channel{Any}) at ./channels.jl:67
 in take!(::Channel{Any}) at ./channels.jl:55
 in take!(::Base.RemoteValue) at ./multi.jl:933
 in #remotecall_fetch#291(::Array{Any,1}, ::Function, ::Function, ::Base.Worker, ::String, ::Vararg{String,N}) at ./multi.jl:827
 in remotecall_fetch(::Function, ::Base.Worker, ::String, ::Vararg{String,N}) at ./multi.jl:823
 in #remotecall_fetch#292(::Array{Any,1}, ::Function, ::Function, ::Int64, ::String, ::Vararg{String,N}) at ./multi.jl:832
 in remotecall_fetch(::Function, ::Int64, ::String, ::Vararg{String,N}) at ./multi.jl:832
 in #remotecall_pool#366(::Array{Any,1}, ::Function, ::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:59
 in remotecall_pool(::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:38
 in #remotecall_fetch#369(::Array{Any,1}, ::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:89
 in remotecall_fetch(::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:89
 in (::Base.###374#375#377{WorkerPool,##5#6})(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N}) at ./workerpool.jl:116
 in (::Base.##374#376)(::String, ::Vararg{String,N}) at ./workerpool.jl:116
 in macro expansion at ./asyncmap.jl:91 [inlined]
 in (::Base.##406#408{Base.AsyncCollector,Base.AsyncCollectorState})() at ./task.jl:316
 in sync_end() at ./task.jl:282
 in done at ./asyncmap.jl:70 [inlined]
 in pump_source(::Base.AsyncGenerator, ::Base.AsyncGeneratorState) at ./asyncmap.jl:143
 in next(::Base.AsyncGenerator, ::Base.AsyncGeneratorState) at ./asyncmap.jl:159
 in _collect(::UnitRange{Int64}, ::Base.AsyncGenerator, ::Base.HasEltype, ::Base.SizeUnknown) at ./array.jl:234
 in collect(::Base.AsyncGenerator) at ./array.jl:225
 in #pmap#397(::Array{Any,1}, ::Function, ::WorkerPool, ::Function, ::Array{String,1}, ::Vararg{Array{String,1},N}) at ./pmap.jl:146
 in pmap(::WorkerPool, ::Function, ::Array{String,1}, ::Vararg{Array{String,1},N}) at ./pmap.jl:145
 in #pmap#674(::Void, ::Void, ::Void, ::Array{Any,1}, ::Function, ::Function, ::Array{String,1}, ::Vararg{Array{String,1},N}) at ./deprecated.jl:1043
 in pmap(::Function, ::Array{String,1}) at ./deprecated.jl:1020
 in include_from_node1(::String) at ./loading.jl:426
 in process_options(::Base.JLOptions) at ./client.jl:266
 in _start() at ./client.jl:322
while loading /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl, in expression starting on line 42
============================[ ERROR: Distributions ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --check-bounds=yes --code-coverage=none --color=no /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing Calculus v0.1.14
INFO: Removing ForwardDiff v0.1.8
INFO: Removing NaNMath v0.2.1
ERROR: Distributions had test errors
 in #test#49(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:693
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./null:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./null:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg.jl:245
 in test(::String, ::Vararg{String,N}) at ./pkg.jl:245
 in eval(::Module, ::Any) at ./boot.jl:225
 in process_options(::Base.JLOptions) at ./client.jl:243
 in _start() at ./client.jl:322

>>> End of log
