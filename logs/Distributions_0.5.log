>>> 'Pkg.add("Distributions")' log
INFO: Installing BinDeps v0.4.5
INFO: Installing Calculus v0.1.15
INFO: Installing Distributions v0.10.2
INFO: Installing PDMats v0.4.2
INFO: Installing Rmath v0.1.3
INFO: Installing SHA v0.2.1
INFO: Installing StatsBase v0.10.0
INFO: Installing StatsFuns v0.3.1
INFO: Installing URIParser v0.1.6
INFO: Building Rmath
INFO: Package database updated
INFO: METADATA is out-of-date — you may not have the latest version of Distributions
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Distributions")' log
Julia Version 0.5.0
Commit 3c9d753 (2016-09-19 18:14 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1354.84375 MB free)
Uptime: 20871.0 sec
Load Avg:  1.39208984375  1.2998046875  1.1513671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1106788 s       6145 s     106528 s     627703 s         52 s
#2  3499 MHz     720548 s        134 s      65216 s    1195142 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.5
2 required packages:
 - Distributions                 0.10.2
 - JSON                          0.7.0
9 additional packages:
 - BinDeps                       0.4.5
 - Calculus                      0.1.15
 - Compat                        0.9.2
 - PDMats                        0.4.2
 - Rmath                         0.1.3
 - SHA                           0.2.1
 - StatsBase                     0.10.0
 - StatsFuns                     0.3.1
 - URIParser                     0.1.6
INFO: Computing test dependencies for Distributions...
INFO: Installing ForwardDiff v0.2.5
INFO: Installing NaNMath v0.2.1
INFO: Testing Distributions
Running tests:
	From worker 2:	    testing Distributions.CategoricalDirectSampler
	From worker 2:	    testing Distributions.AliasTable
	From worker 2:	    testing Distributions.BinomialGeomSampler
	From worker 2:	    testing Distributions.BinomialTPESampler
	From worker 2:	    testing Distributions.BinomialPolySampler
	From worker 3:	    testing Distributions.Categorical(K=2, p=[0.5,0.5])
	From worker 2:	    testing Distributions.BinomialAliasSampler
	From worker 2:	    testing Distributions.PoissonCountSampler
	From worker 3:	    testing Distributions.Categorical(K=4, p=[0.1,0.3,0.2,0.4])
	From worker 3:	    testing Distributions.Categorical(K=3, p=[0.15,0.25,0.6])
	From worker 2:	    testing Distributions.PoissonADSampler
	From worker 3:	    [Discrete]
	From worker 3:	    ------------
	From worker 2:	    testing Distributions.PoissBinAliasSampler
	From worker 3:	    testing Bernoulli()
	From worker 3:	    testing Bernoulli(0.25)
	From worker 3:	    testing Bernoulli(0.75)
	From worker 3:	    testing BetaBinomial(2, 0.2, 0.25)
	From worker 2:	    testing Distributions.ExponentialSampler
	From worker 2:	    testing Distributions.GammaGDSampler
	From worker 2:	    testing Distributions.GammaMTSampler
	From worker 3:	    testing Binomial()
	From worker 2:	    testing Distributions.GammaGSSampler
	From worker 3:	    testing Binomial(3)
	From worker 2:	    testing Distributions.GammaIPSampler{S<:Distributions.Sampleable{Distributions.Univariate,Distributions.Continuous}}
	From worker 3:	    testing Binomial(5, 0.4)
	From worker 3:	    testing Binomial(6, 0.8)
	From worker 3:	    testing Binomial(100, 0.1)
	From worker 3:	    testing Binomial(100, 0.9)
	From worker 3:	    testing DiscreteUniform(6)
	From worker 2:	    -----
	From worker 3:	    testing DiscreteUniform(0, 4)
	From worker 3:	    testing DiscreteUniform(2, 8)
	From worker 3:	    testing Geometric()
	From worker 2:	    testing Distributions.Biweight(μ=0.0, σ=1.0)
	From worker 3:	    testing Geometric(0.02)
	From worker 3:	    testing Geometric(0.1)
	From worker 3:	    testing Geometric(0.5)
	From worker 3:	    testing Geometric(0.9)
	From worker 3:	    testing Hypergeometric(2, 2, 2)
	From worker 2:	    testing Distributions.Biweight(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Epanechnikov(μ=0.0, σ=1.0)
	From worker 3:	    testing Hypergeometric(3, 2, 2)
	From worker 3:	    testing Hypergeometric(3, 2, 0)
	From worker 3:	    testing Hypergeometric(3, 2, 5)
	From worker 3:	    testing Hypergeometric(4, 5, 6)
	From worker 3:	    testing Hypergeometric(60, 80, 100)
	From worker 3:	    testing NegativeBinomial()
	From worker 2:	    testing Distributions.Epanechnikov(μ=1.0, σ=3.0)
	From worker 2:	    testing Distributions.Frechet(α=0.5, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=3.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=20.0, θ=1.0)
	From worker 3:	    testing NegativeBinomial(6)
	From worker 2:	    testing Distributions.Frechet(α=120.0, θ=1.0)
	From worker 2:	    testing Distributions.Frechet(α=0.5, θ=2.0)
	From worker 2:	    testing Distributions.Frechet(α=3.0, θ=2.0)
	From worker 3:	    testing NegativeBinomial(1, 0.5)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
	From worker 3:	    testing NegativeBinomial(5, 0.6)
	From worker 3:	    testing NegativeBinomial(0.5, 0.5)
	From worker 3:	    testing Poisson()
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=1.0, σ=1.0, μ=1.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=0.1, σ=2.0, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=0.0, σ=0.5, μ=0.0)
	From worker 2:	    testing Distributions.GeneralizedPareto(ξ=-1.5, σ=0.5, μ=2.0)
	From worker 2:	    testing Distributions.InverseGaussian(μ=1.0, λ=1.0)
	From worker 3:	    testing Poisson(0.0)
	From worker 3:	    testing Poisson(0.5)
	From worker 3:	    testing Poisson(2.0)
	From worker 3:	    testing Poisson(10.0)
	From worker 3:	    testing Poisson(80.0)
	From worker 3:	
	From worker 3:	    [Continuous]
	From worker 3:	    ------------
	From worker 3:	    testing Arcsine()
	From worker 2:	    testing Distributions.InverseGaussian(μ=2.0, λ=7.0)
	From worker 2:	    testing Distributions.Levy(μ=0.0, σ=1.0)
	From worker 3:	    testing Arcsine(2.0)
	From worker 3:	    testing Arcsine(1.0, 2.5)
	From worker 3:	    testing Beta(2.0, 2.0)
	From worker 2:	    testing Distributions.Levy(μ=2.0, σ=8.0)
	From worker 2:	    testing Distributions.Levy(μ=3.0, σ=3.0)
	From worker 2:	    testing Distributions.LogNormal(μ=0.0, σ=1.0)
	From worker 2:	    testing Distributions.LogNormal(μ=0.0, σ=2.0)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=0.5)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=1.0)
	From worker 2:	    testing Distributions.LogNormal(μ=3.0, σ=2.0)
	From worker 3:	    testing Beta(3.0, 4.0)
	From worker 2:	    testing Distributions.NoncentralBeta(α=2.0, β=2.0, λ=0.0)
	From worker 3:	    testing Beta(17.0, 13.0)
	From worker 3:	    testing BetaPrime(3.0, 3.0)
	From worker 2:	    testing Distributions.NoncentralBeta(α=2.0, β=6.0, λ=5.0)
	From worker 3:	    testing BetaPrime(3.0, 5.0)
	From worker 2:	    testing Distributions.NoncentralChisq(ν=2.0, λ=2.0)
	From worker 3:	    testing BetaPrime(5.0, 3.0)
	From worker 3:	    testing Cauchy()
	From worker 3:	    testing Cauchy(2.0)
	From worker 3:	    testing Cauchy(0.0, 1.0)
	From worker 3:	    testing Cauchy(10.0, 1.0)
	From worker 3:	    testing Cauchy(2.0, 10.0)
	From worker 3:	    testing Chi(1)
	From worker 2:	    testing Distributions.NoncentralChisq(ν=2.0, λ=5.0)
	From worker 3:	    testing Chi(2)
	From worker 3:	    testing Chi(3)
	From worker 3:	    testing Chi(12)
	From worker 3:	    testing Chisq(1)
	From worker 3:	    testing Chisq(8)
	From worker 3:	    testing Chisq(20)
	From worker 3:	    testing Cosine()
	From worker 2:	    testing Distributions.NoncentralF(ν1=2.0, ν2=2.0, λ=2.0)
	From worker 3:	    testing Cosine(1.5)
	From worker 3:	    testing Cosine(2.0, 2.8)
	From worker 3:	    testing Erlang(1, 1.0)
	From worker 2:	    testing Distributions.NoncentralF(ν1=8.0, ν2=10.0, λ=5.0)
	From worker 2:	    testing Distributions.NoncentralT(ν=2.0, λ=2.0)
	From worker 3:	    testing Erlang(3, 1.0)
	From worker 3:	    testing Erlang(5, 2.0)
	From worker 3:	    testing Exponential()
	From worker 2:	    testing Distributions.NoncentralT(ν=10.0, λ=2.0)
	From worker 3:	    testing Exponential(2.0)
	From worker 3:	    testing Exponential(6.5)
	From worker 2:	    testing Distributions.Triweight(μ=0.0, σ=1.0)
	From worker 3:	    testing FDist(6.0, 8.0)
	From worker 2:	    testing Distributions.Triweight(μ=1.0, σ=3.0)
	From worker 3:	    testing FDist(8.0, 6.0)
	From worker 3:	    testing Gamma()
	From worker 3:	    testing Gamma(2.0)
	From worker 3:	    testing Gamma(1.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 1.0)
	From worker 3:	    testing Gamma(3.0, 2.0)
	From worker 3:	    testing GeneralizedPareto()
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(1.0, 1.0, 1.0)
	From worker 3:	    testing GeneralizedPareto(0.1, 2.0, 0.0)
	From worker 3:	    testing GeneralizedPareto(-1.5, 0.5, 2.0)
	From worker 3:	    testing Gumbel()
	From worker 3:	    testing Gumbel(3.0)
	From worker 3:	    testing Gumbel(3.0, 5.0)
	From worker 3:	    testing Gumbel(5.0, 3.0)
	From worker 3:	    testing InverseGamma()
	From worker 3:	    testing InverseGamma(2.0)
	From worker 3:	    testing InverseGamma(1.0, 1.0)
	From worker 3:	    testing InverseGamma(1.0, 2.0)
	From worker 3:	    testing InverseGamma(2.0, 1.0)
	From worker 3:	    testing InverseGamma(2.0, 3.0)
	From worker 3:	    testing InverseGaussian()
	From worker 3:	    testing InverseGaussian(0.8)
	From worker 3:	    testing InverseGaussian(2.0)
	From worker 3:	    testing Laplace()
	From worker 3:	    testing Laplace(2.0)
	From worker 3:	    testing Laplace(0.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.0)
	From worker 3:	    testing Laplace(5.0, 1.5)
	From worker 3:	    testing Logistic()
	From worker 3:	    testing Logistic(2.0)
	From worker 3:	    testing Logistic(0.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.0)
	From worker 3:	    testing Logistic(5.0, 1.5)
	From worker 3:	    testing LogNormal()
	From worker 3:	    testing LogNormal(0.0)
	From worker 3:	    testing LogNormal(0.0, 2.0)
	From worker 3:	    testing Normal(0.0, 1.0)
	From worker 3:	    testing Normal(-3.0, 2.0)
	From worker 3:	    testing Normal(1.0, 10.0)
	From worker 3:	    testing NormalCanon(0.0, 1.0)
	From worker 3:	    testing NormalCanon(-1.0, 2.5)
	From worker 3:	    testing NormalCanon(2.0, 0.8)
	From worker 3:	    testing Pareto()
	From worker 3:	    testing Pareto(2.0)
	From worker 3:	    testing Pareto(2.0, 1.5)
	From worker 3:	    testing Pareto(3.0, 2.0)
	From worker 3:	    testing Rayleigh()
	From worker 3:	    testing Rayleigh(3.0)
	From worker 3:	    testing Rayleigh(8.0)
	From worker 3:	    testing SymTriangularDist()
	From worker 3:	    testing SymTriangularDist(3.0)
	From worker 3:	    testing SymTriangularDist(3.0, 0.5)
	From worker 3:	    testing SymTriangularDist(3.0, 2.0)
	From worker 3:	    testing SymTriangularDist(10.0, 8.0)
	From worker 3:	    testing TDist(1.2)
	From worker 3:	    testing TDist(5.0)
	From worker 3:	    testing TDist(28.0)
	From worker 3:	    testing TriangularDist(0, 5)
	From worker 3:	    testing TriangularDist(-7, 2)
	From worker 3:	    testing TriangularDist(-4, 14, 3)
	From worker 3:	    testing TriangularDist(2, 2000, 500)
	From worker 3:	    testing TriangularDist(1, 3, 2)
	From worker 3:	    testing TruncatedNormal(0, 1, -2, 2)
	From worker 3:	    testing TruncatedNormal(3, 10, 7, 8)
	From worker 3:	    testing TruncatedNormal(27, 3, 0, Inf)
	From worker 3:	    testing TruncatedNormal(-5, 1, -Inf, -10)
	From worker 3:	    testing TruncatedNormal(1.8, 1.2, -Inf, 0)
	From worker 3:	    testing Uniform(0.0, 1.0)
	From worker 3:	    testing Uniform(3.0, 17.0)
	From worker 3:	    testing Uniform(3.0, 3.1)
	From worker 3:	    testing Weibull()
	From worker 3:	    testing Weibull(0.5)
	From worker 3:	    testing Weibull(5.0)
	From worker 3:	    testing Weibull(20.0, 1.0)
	From worker 3:	    testing Weibull(1.0, 2.0)
	From worker 3:	    testing Weibull(5.0, 2.0)
	From worker 3:	
ERROR: LoadError: On worker 2:
LoadError: MethodError: no method matching mad(::Array{Float64,1}, ::Float64)
Closest candidates are:
  mad{T<:Real}(::AbstractArray{T<:Real,N}) at /home/vagrant/.julia/v0.5/StatsBase/src/scalarstats.jl:264
 in fit at /home/vagrant/.julia/v0.5/Distributions/src/genericfit.jl:14
 in include_string at ./loading.jl:441
 in include_from_node1 at ./loading.jl:491
 in #5 at /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl:44
 in #625 at ./multi.jl:1421
 in run_work_thunk at ./multi.jl:1001
 in macro expansion at ./multi.jl:1421 [inlined]
 in #624 at ./event.jl:68
while loading /home/vagrant/.julia/v0.5/Distributions/test/fit.jl, in expression starting on line 316
 in #remotecall_fetch#606(::Array{Any,1}, ::Function, ::Function, ::Base.Worker, ::String, ::Vararg{String,N}) at ./multi.jl:1070
 in remotecall_fetch(::Function, ::Base.Worker, ::String, ::Vararg{String,N}) at ./multi.jl:1062
 in #remotecall_fetch#609(::Array{Any,1}, ::Function, ::Function, ::Int64, ::String, ::Vararg{String,N}) at ./multi.jl:1080
 in remotecall_fetch(::Function, ::Int64, ::String, ::Vararg{Any,N}) at ./multi.jl:1080
 in #remotecall_pool#689(::Array{Any,1}, ::Function, ::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:93
 in remotecall_pool(::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:91
 in #remotecall_fetch#692(::Array{Any,1}, ::Function, ::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:124
 in remotecall_fetch(::Function, ::WorkerPool, ::String, ::Vararg{String,N}) at ./workerpool.jl:124
 in (::Base.###697#698#700{WorkerPool,##5#6})(::Array{Any,1}, ::Function, ::String, ::Vararg{String,N}) at ./workerpool.jl:151
 in (::Base.##697#699)(::String, ::Vararg{String,N}) at ./workerpool.jl:151
 in macro expansion at ./asyncmap.jl:63 [inlined]
 in (::Base.##755#757{Base.AsyncCollector,Base.AsyncCollectorState})() at ./task.jl:360
 in sync_end() at ./task.jl:311
 in done(::Base.AsyncCollector, ::Base.AsyncCollectorState) at ./asyncmap.jl:124
 in pump_source(::Base.AsyncGenerator, ::Base.AsyncGeneratorState) at ./asyncmap.jl:185
 in next(::Base.AsyncGenerator, ::Base.AsyncGeneratorState) at ./asyncmap.jl:201
 in _collect(::UnitRange{Int64}, ::Base.AsyncGenerator, ::Base.HasEltype, ::Base.SizeUnknown) at ./array.jl:282
 in #pmap#714(::Bool, ::Int64, ::Void, ::Int64, ::Float64, ::Function, ::Void, ::Void, ::Void, ::Base.#pmap, ::WorkerPool, ::##5#6, ::Array{String,1}) at ./pmap.jl:121
 in pmap(::WorkerPool, ::Function, ::Array{String,1}) at ./pmap.jl:80
 in #pmap#726(::Array{Any,1}, ::Function, ::Function, ::Array{String,1}) at ./pmap.jl:146
 in pmap(::Function, ::Array{String,1}) at ./pmap.jl:146
 in include_from_node1(::String) at ./loading.jl:488
 in process_options(::Base.JLOptions) at ./client.jl:262
 in _start() at ./client.jl:318
while loading /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl, in expression starting on line 43
============================[ ERROR: Distributions ]============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.5/Distributions/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
INFO: Removing ForwardDiff v0.2.5
INFO: Removing NaNMath v0.2.1
ERROR: Distributions had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:740
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:59
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:258
 in eval(::Module, ::Any) at ./boot.jl:234
 in process_options(::Base.JLOptions) at ./client.jl:239
 in _start() at ./client.jl:318

>>> End of log
