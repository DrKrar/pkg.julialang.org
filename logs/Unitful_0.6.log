>>> 'Pkg.add("Unitful")' log
INFO: Installing Unitful v0.0.4
INFO: Building Unitful
WARNING: `Pkg.build("Unitful.jl")` was run, but /home/vagrant/.julia/v0.6/Unitful/deps/Defaults.jl already exists. No action has been taken. If you encounter problems, you might consider backing up then deleting the existing file at /home/vagrant/.julia/v0.6/Unitful/deps/Defaults.jl, then running `Pkg.build("Unitful")` again.
INFO: Package database updated

>>> 'Pkg.test("Unitful")' log
Julia Version 0.6.0-dev.1553
Commit 840820d (2016-12-13 04:22 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (802.5859375 MB free)
Uptime: 27250.0 sec
Load Avg:  1.00732421875  0.984375  0.98779296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz    1564519 s       1145 s     210346 s     662362 s         90 s
#2  3499 MHz     532025 s       5446 s      93162 s    2004702 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.7.1 (ORCJIT, haswell)
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.6
2 required packages:
 - JSON                          0.8.0
 - Unitful                       0.0.4
1 additional packages:
 - Compat                        0.9.5
INFO: Testing Unitful
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl, in expression starting on line 674
WARNING: `@vectorize_2arg` is deprecated in favor of compact broadcast syntax. Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call `f.(arg1,arg2)`. 
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in @vectorize_2arg(::ANY, ::ANY) at ./deprecated.jl:997
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in anonymous at ./<missing>:2
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl, in expression starting on line 675
WARNING: num is deprecated, use numerator instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in num(::Rational{Int64}, ::Vararg{Rational{Int64},N}) at ./deprecated.jl:30
 in convfact(...) at /home/vagrant/.julia/v0.6/Unitful/src/Conversion.jl:102
 in get_staged(::Core.MethodInstance) at ./inference.jl:218
 in typeinf_frame(::Core.MethodInstance, ::Core.Inference.InferenceState, ::Bool, ::Bool, ::Core.Inference.InferenceParams) at ./inference.jl:1591
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1640
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:959
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1171
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1201
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:465
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1175
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:465
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1175
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1889
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1746
 in typeinf_frame(::Core.MethodInstance, ::Core.Inference.InferenceState, ::Bool, ::Bool, ::Core.Inference.InferenceParams) at ./inference.jl:1618
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1640
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:959
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1171
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1201
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1889
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1746
 in typeinf_frame(::Core.MethodInstance, ::Core.Inference.InferenceState, ::Bool, ::Bool, ::Core.Inference.InferenceParams) at ./inference.jl:1618
 in typeinf_edge(::Method, ::Any, ::SimpleVector, ::Core.Inference.InferenceState) at ./inference.jl:1640
 in abstract_call_gf_by_type(::Any, ::Any, ::Core.Inference.InferenceState) at ./inference.jl:959
 in abstract_call(::Any, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1171
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1201
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:465
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1175
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in copy!(::Array{Any,1}, ::Core.Inference.Generator{Array{Any,1},Core.Inference.##186#187{Array{Any,1},Core.Inference.InferenceState}}) at ./abstractarray.jl:465
 in abstract_eval_call(::Expr, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1175
 in abstract_eval(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1222
 in abstract_interpret(::Any, ::Array{Any,1}, ::Core.Inference.InferenceState) at ./inference.jl:1317
 in typeinf_frame(::Core.Inference.InferenceState) at ./inference.jl:1827
 in typeinf_loop(::Core.Inference.InferenceState) at ./inference.jl:1763
 in typeinf_ext(::Core.MethodInstance) at ./inference.jl:1733
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl, in expression starting on line 36
WARNING: imported binding for one overwritten in module Main
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{Float32,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:324 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{Float32,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:325 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{Float32,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:326 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Float32,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:327 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
WARNING: `x $ y` is deprecated.  use `xor(x, y)` or `x ⊻ y` instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in $ at ./deprecated.jl:1029 [inlined]
 in mod_fast(::Quantity{Float32, Dimensions:{𝐋}, Units:{m}}, ::Quantity{Float32, Dimensions:{𝐋}, Units:{m}}) at /home/vagrant/.julia/v0.6/Unitful/src/fastmath.jl:64
 in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:329 [inlined]
 in macro expansion; at ./test.jl:713 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
 in macro expansion; at ./test.jl:713 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl, in expression starting on line 156
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(one / zero) == convert(T,Inf)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Float32,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:333 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(-one / zero) == -(convert(T,Inf))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:334 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{Float64,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:324 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{Float64,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:325 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{Float64,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:326 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Float64,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:327 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
WARNING: `x $ y` is deprecated.  use `xor(x, y)` or `x ⊻ y` instead.
 in depwarn(::String, ::Symbol) at ./deprecated.jl:64
 in $ at ./deprecated.jl:1029 [inlined]
 in mod_fast(::Quantity{Float64, Dimensions:{𝐋}, Units:{m}}, ::Quantity{Float64, Dimensions:{𝐋}, Units:{m}}) at /home/vagrant/.julia/v0.6/Unitful/src/fastmath.jl:64
 in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:329 [inlined]
 in macro expansion; at ./test.jl:713 [inlined]
 in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
 in macro expansion; at ./test.jl:713 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl, in expression starting on line 156
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(one / zero) == convert(T,Inf)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Float64,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:333 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(-one / zero) == -(convert(T,Inf))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:334 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{BigFloat,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:324 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{BigFloat,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:325 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{BigFloat,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:326 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{BigFloat,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:327 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(one / zero) == convert(T,Inf)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{BigFloat,Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:333 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: @fastmath(-one / zero) == -(convert(T,Inf))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:334 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{Complex{Float32},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:353 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{Complex{Float32},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:354 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{Complex{Float32},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:355 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{Float32},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:356 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(one / zero))
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{Float32},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:359 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(-one / zero))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:360 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{Complex{Float64},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:353 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{Complex{Float64},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:354 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{Complex{Float64},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:355 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{Float64},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:356 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(one / zero))
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{Float64},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:359 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(-one / zero))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:360 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(zero + one + two),zero + one + two)
  MethodError: no method matching +(::Unitful.Quantity{Complex{BigFloat},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    +(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    +{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    ...
   in +; at ./operators.jl:289 [inlined]
   in add_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:353 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((zero - one) - two),(zero - one) - two)
  MethodError: no method matching -(::Unitful.Quantity{Complex{BigFloat},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}}, ::Base.#one)
  Closest candidates are:
    -(::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:327
    -{S,T,D,U}(::Unitful.Quantity{S,D,U}, !Matched::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:301
    -{S,T,D,SU,TU}(::Unitful.Quantity{S,D,SU}, !Matched::Unitful.Quantity{T,D,TU}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:307
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:354 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath(one * two * three),one * two * three)
  MethodError: no method matching *(::Base.#one, ::Unitful.Quantity{Complex{BigFloat},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:289
    *{T<:Unitful.Quantity{T,D,U}}(!Matched::Bool, ::T<:Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:451
    *{T<:Number}(!Matched::Bool, ::T<:Number) at bool.jl:65
    ...
   in *; at ./operators.jl:289 [inlined]
   in mul_fast; at ./fastmath.jl:239 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:355 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isapprox(@fastmath((one / two) / three),(one / two) / three)
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{BigFloat},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:356 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(one / zero))
  MethodError: no method matching /(::Base.#one, ::Unitful.Quantity{Complex{BigFloat},Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)},Unitful.Units{(Unitful.Unit{:Meter}(0,1//1),),Unitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}}})
  Closest candidates are:
    /(!Matched::Unitful.Quantity{T,D,U}, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:516
    /(!Matched::Unitful.Quantity{T,D,U}, ::Number) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:517
    /(!Matched::Number, ::Unitful.Quantity{T,D,U}) at /home/vagrant/.julia/v0.6/Unitful/src/Unitful.jl:518
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:359 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
> fastmath: Error During Test
  Test threw an exception of type MethodError
  Expression: isnan(@fastmath(-one / zero))
  MethodError: no method matching -(::Base.#one)
  Closest candidates are:
    -(!Matched::Bool, !Matched::Complex{Bool}) at complex.jl:195
    -(!Matched::Bool, !Matched::Bool) at bool.jl:54
    -(!Matched::Bool) at bool.jl:51
    ...
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:360 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in macro expansion; at /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl:0 [inlined]
   in macro expansion; at ./test.jl:713 [inlined]
   in anonymous at ./<missing>:?
   in include_from_node1(::String) at ./loading.jl:532
   in include(::String) at ./sysimg.jl:14
   in process_options(::Base.JLOptions) at ./client.jl:271
   in _start() at ./client.jl:335
ERROR: LoadError: Some tests did not pass: 580 passed, 0 failed, 36 errored, 0 broken.
 in finish(::Base.Test.DefaultTestSet) at ./test.jl:523
 in macro expansion; at ./test.jl:720 [inlined]
 in anonymous at ./<missing>:?
 in include_from_node1(::String) at ./loading.jl:532
 in include(::String) at ./sysimg.jl:14
 in process_options(::Base.JLOptions) at ./client.jl:271
 in _start() at ./client.jl:335
while loading /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl, in expression starting on line 156
===============================[ ERROR: Unitful ]===============================

failed process: Process(`/home/vagrant/julia/bin/julia -Cx86-64 -J/home/vagrant/julia/lib/julia/sys.so --compile=yes --depwarn=yes --check-bounds=yes --code-coverage=none --color=no --compilecache=yes /home/vagrant/.julia/v0.6/Unitful/test/runtests.jl`, ProcessExited(1)) [1]

================================================================================
ERROR: Unitful had test errors
 in #test#61(::Bool, ::Function, ::Array{AbstractString,1}) at ./pkg/entry.jl:749
 in (::Base.Pkg.Entry.#kw##test)(::Array{Any,1}, ::Base.Pkg.Entry.#test, ::Array{AbstractString,1}) at ./<missing>:0
 in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}})() at ./pkg/dir.jl:31
 in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#test,Tuple{Array{AbstractString,1}}}, ::String) at ./file.jl:69
 in #cd#1(::Array{Any,1}, ::Function, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./pkg/dir.jl:31
 in (::Base.Pkg.Dir.#kw##cd)(::Array{Any,1}, ::Base.Pkg.Dir.#cd, ::Function, ::Array{AbstractString,1}, ::Vararg{Array{AbstractString,1},N}) at ./<missing>:0
 in #test#3(::Bool, ::Function, ::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in test(::String, ::Vararg{String,N}) at ./pkg/pkg.jl:259
 in eval(::Module, ::Any) at ./boot.jl:236
 in process_options(::Base.JLOptions) at ./client.jl:248
 in _start() at ./client.jl:335

>>> End of log
