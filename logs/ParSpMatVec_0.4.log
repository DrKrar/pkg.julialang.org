>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1183.73828125 MB free)
Uptime: 13273.0 sec
Load Avg:  1.0029296875  0.9853515625  0.9775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz     562018 s       1810 s      57571 s     559176 s         24 s
#2  3502 MHz     386742 s       5242 s      47842 s     825603 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1504	 ParSpMatVec=0.0160	 speedup=9.3811
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1504	 ParSpMatVec=0.0094	 speedup=16.0588
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1504	 ParSpMatVec=0.0121	 speedup=12.4208
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1504	 ParSpMatVec=0.0104	 speedup=14.3978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1504	 ParSpMatVec=0.0094	 speedup=16.0725
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1139	 ParSpMatVec=0.0433	 speedup=2.6342
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1139	 ParSpMatVec=0.0135	 speedup=8.4671
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1139	 ParSpMatVec=0.0157	 speedup=7.2790
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1139	 ParSpMatVec=0.0125	 speedup=9.1374
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1139	 ParSpMatVec=0.0145	 speedup=7.8733

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0522	 ParSpMatVec=0.0363	 speedup=1.4362
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0522	 ParSpMatVec=0.0127	 speedup=4.1224
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0522	 ParSpMatVec=0.0127	 speedup=4.1082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0522	 ParSpMatVec=0.0136	 speedup=3.8279
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0522	 ParSpMatVec=0.0119	 speedup=4.3699

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0272	 ParSpMatVec=0.0270	 speedup=1.0084
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0272	 ParSpMatVec=0.0014	 speedup=19.5526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0272	 ParSpMatVec=0.0019	 speedup=14.0600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0272	 ParSpMatVec=0.0017	 speedup=16.4393
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0272	 ParSpMatVec=0.0020	 speedup=13.6477

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0093	 ParSpMatVec=0.0505	 speedup=0.1851
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0093	 ParSpMatVec=0.0042	 speedup=2.2330
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0093	 ParSpMatVec=0.0033	 speedup=2.7978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0093	 ParSpMatVec=0.0034	 speedup=2.7773
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0093	 ParSpMatVec=0.0028	 speedup=3.3299

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0325	 ParSpMatVec=0.0307	 speedup=1.0594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0325	 ParSpMatVec=0.0029	 speedup=11.0274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0325	 ParSpMatVec=0.0019	 speedup=16.7282
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0325	 ParSpMatVec=0.0024	 speedup=13.3989
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0325	 ParSpMatVec=0.0022	 speedup=14.6270

INFO: ParSpMatVec tests passed

>>> End of log
