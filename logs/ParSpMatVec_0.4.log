>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1174.79296875 MB free)
Uptime: 15299.0 sec
Load Avg:  1.0029296875  1.0146484375  0.9921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     739002 s       2593 s      59137 s     571226 s         24 s
#2  3500 MHz     476809 s       4470 s      51495 s     949515 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0810	 ParSpMatVec=0.0249	 speedup=3.2574
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0810	 ParSpMatVec=0.0093	 speedup=8.7021
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0810	 ParSpMatVec=0.0121	 speedup=6.6764
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0810	 ParSpMatVec=0.0084	 speedup=9.5818
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0810	 ParSpMatVec=0.0098	 speedup=8.2317
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1006	 ParSpMatVec=0.0263	 speedup=3.8240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1006	 ParSpMatVec=0.0118	 speedup=8.5071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1006	 ParSpMatVec=0.0146	 speedup=6.9133
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1006	 ParSpMatVec=0.0138	 speedup=7.3052
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1006	 ParSpMatVec=0.0164	 speedup=6.1199

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0489	 ParSpMatVec=0.0299	 speedup=1.6340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0489	 ParSpMatVec=0.0136	 speedup=3.5940
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0489	 ParSpMatVec=0.0166	 speedup=2.9464
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0489	 ParSpMatVec=0.0137	 speedup=3.5723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0489	 ParSpMatVec=0.0174	 speedup=2.8128

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0405	 ParSpMatVec=0.0392	 speedup=1.0327
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0405	 ParSpMatVec=0.0025	 speedup=16.0981
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0405	 ParSpMatVec=0.0065	 speedup=6.2070
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0405	 ParSpMatVec=0.0022	 speedup=18.0343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0405	 ParSpMatVec=0.0016	 speedup=24.6073

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0449	 speedup=0.1851
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0032	 speedup=2.6145
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0036	 speedup=2.3093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0085	 speedup=0.9780
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0053	 speedup=1.5605

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0521	 ParSpMatVec=0.0493	 speedup=1.0570
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0521	 ParSpMatVec=0.0042	 speedup=12.4424
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0521	 ParSpMatVec=0.0043	 speedup=12.1893
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0521	 ParSpMatVec=0.0039	 speedup=13.5148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0521	 ParSpMatVec=0.0028	 speedup=18.8917

INFO: ParSpMatVec tests passed

>>> End of log
