>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.1
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1068.609375 MB free)
Uptime: 13853.0 sec
Load Avg:  0.97265625  0.9755859375  0.92529296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     565424 s       6310 s      58022 s     602398 s         22 s
#2  3499 MHz     409052 s        342 s      48744 s     858646 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.1
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1237	 ParSpMatVec=0.0241	 speedup=5.1281
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1237	 ParSpMatVec=0.0105	 speedup=11.7581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1237	 ParSpMatVec=0.0168	 speedup=7.3719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1237	 ParSpMatVec=0.0093	 speedup=13.2596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1237	 ParSpMatVec=0.0076	 speedup=16.3093
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1169	 ParSpMatVec=0.0412	 speedup=2.8383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1169	 ParSpMatVec=0.0142	 speedup=8.2533
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1169	 ParSpMatVec=0.0153	 speedup=7.6316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1169	 ParSpMatVec=0.0151	 speedup=7.7295
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1169	 ParSpMatVec=0.0138	 speedup=8.4441

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0301	 ParSpMatVec=0.0180	 speedup=1.6731
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0301	 ParSpMatVec=0.0136	 speedup=2.2140
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0301	 ParSpMatVec=0.0164	 speedup=1.8345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0301	 ParSpMatVec=0.0158	 speedup=1.9088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0301	 ParSpMatVec=0.0143	 speedup=2.1093

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0401	 ParSpMatVec=0.0370	 speedup=1.0834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0401	 ParSpMatVec=0.0024	 speedup=16.8389
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0401	 ParSpMatVec=0.0025	 speedup=16.1717
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0401	 ParSpMatVec=0.0014	 speedup=29.6041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0401	 ParSpMatVec=0.0016	 speedup=25.6283

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0276	 speedup=0.3130
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0040	 speedup=2.1432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0015	 speedup=5.6237
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0028	 speedup=3.1250
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.5865

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0411	 ParSpMatVec=0.0444	 speedup=0.9246
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0411	 ParSpMatVec=0.0031	 speedup=13.3985
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0411	 ParSpMatVec=0.0024	 speedup=16.9634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0411	 ParSpMatVec=0.0028	 speedup=14.7674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0411	 ParSpMatVec=0.0029	 speedup=14.3583

INFO: ParSpMatVec tests passed

>>> End of log
