>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1187.8359375 MB free)
Uptime: 12751.0 sec
Load Avg:  1.16259765625  1.01904296875  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     534016 s       3659 s      53731 s     558961 s         10 s
#2  3499 MHz     351556 s        131 s      47314 s     841285 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0757	 ParSpMatVec=0.0150	 speedup=5.0462
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0757	 ParSpMatVec=0.0091	 speedup=8.2808
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0757	 ParSpMatVec=0.0146	 speedup=5.1845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0757	 ParSpMatVec=0.0104	 speedup=7.2996
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0757	 ParSpMatVec=0.0096	 speedup=7.9176
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1238	 ParSpMatVec=0.0404	 speedup=3.0651
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1238	 ParSpMatVec=0.0131	 speedup=9.4654
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1238	 ParSpMatVec=0.0143	 speedup=8.6803
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1238	 ParSpMatVec=0.0126	 speedup=9.8107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1238	 ParSpMatVec=0.0155	 speedup=7.9712

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0168	 speedup=2.6018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0164	 speedup=2.6700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0153	 speedup=2.8626
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0159	 speedup=2.7571
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0133	 speedup=3.2867

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0272	 ParSpMatVec=0.0225	 speedup=1.2090
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0272	 ParSpMatVec=0.0019	 speedup=14.5279
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0272	 ParSpMatVec=0.0020	 speedup=13.9686
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0272	 ParSpMatVec=0.0017	 speedup=16.4970
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0272	 ParSpMatVec=0.0017	 speedup=16.1831

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0428	 speedup=0.2007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0027	 speedup=3.1999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.5892
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0028	 speedup=3.0794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.5268

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0469	 speedup=0.9070
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0036	 speedup=11.8737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0041	 speedup=10.4400
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0039	 speedup=10.9074
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0020	 speedup=21.0071

INFO: ParSpMatVec tests passed

>>> End of log
