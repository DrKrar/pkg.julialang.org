>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.5703125 MB free)
Uptime: 15391.0 sec
Load Avg:  1.099609375  1.03955078125  1.00732421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     693010 s       1931 s      62628 s     631055 s         22 s
#2  3500 MHz     479398 s       4916 s      57174 s     938824 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0794	 ParSpMatVec=0.0274	 speedup=2.9015
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0794	 ParSpMatVec=0.0083	 speedup=9.5931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0794	 ParSpMatVec=0.0094	 speedup=8.4702
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0794	 ParSpMatVec=0.0082	 speedup=9.6552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0794	 ParSpMatVec=0.0077	 speedup=10.3258
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1272	 ParSpMatVec=0.0454	 speedup=2.8040
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1272	 ParSpMatVec=0.0129	 speedup=9.8842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1272	 ParSpMatVec=0.0082	 speedup=15.5978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1272	 ParSpMatVec=0.0094	 speedup=13.5586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1272	 ParSpMatVec=0.0100	 speedup=12.7292

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0442	 ParSpMatVec=0.0308	 speedup=1.4364
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0442	 ParSpMatVec=0.0139	 speedup=3.1890
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0442	 ParSpMatVec=0.0094	 speedup=4.7159
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0442	 ParSpMatVec=0.0110	 speedup=4.0057
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0442	 ParSpMatVec=0.0113	 speedup=3.9207

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0426	 speedup=1.1066
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0025	 speedup=19.1157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0015	 speedup=31.2291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0017	 speedup=28.1899
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0017	 speedup=28.5100

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0452	 speedup=0.1685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0038	 speedup=2.0161
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0020	 speedup=3.8207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0023	 speedup=3.3281
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0021	 speedup=3.7087

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0419	 ParSpMatVec=0.0433	 speedup=0.9688
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0419	 ParSpMatVec=0.0033	 speedup=12.6124
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0419	 ParSpMatVec=0.0020	 speedup=20.6297
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0419	 ParSpMatVec=0.0021	 speedup=20.2494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0419	 ParSpMatVec=0.0027	 speedup=15.7403

INFO: ParSpMatVec tests passed

>>> End of log
