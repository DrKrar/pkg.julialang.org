>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1163.07421875 MB free)
Uptime: 12766.0 sec
Load Avg:  1.02197265625  1.01416015625  0.990234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     571810 s       3941 s      61026 s     486894 s         31 s
#2  3499 MHz     372707 s       3768 s      54169 s     780641 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0915	 ParSpMatVec=0.0283	 speedup=3.2298
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0915	 ParSpMatVec=0.0083	 speedup=11.0275
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0915	 ParSpMatVec=0.0117	 speedup=7.8565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0915	 ParSpMatVec=0.0119	 speedup=7.6772
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0915	 ParSpMatVec=0.0102	 speedup=8.9482
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1212	 ParSpMatVec=0.0425	 speedup=2.8509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1212	 ParSpMatVec=0.0189	 speedup=6.4146
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1212	 ParSpMatVec=0.0154	 speedup=7.8675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1212	 ParSpMatVec=0.0137	 speedup=8.8754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1212	 ParSpMatVec=0.0130	 speedup=9.3414

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0393	 ParSpMatVec=0.0270	 speedup=1.4596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0393	 ParSpMatVec=0.0133	 speedup=2.9593
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0393	 ParSpMatVec=0.0150	 speedup=2.6256
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0393	 ParSpMatVec=0.0146	 speedup=2.6923
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0393	 ParSpMatVec=0.0142	 speedup=2.7761

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0521	 ParSpMatVec=0.0421	 speedup=1.2364
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0521	 ParSpMatVec=0.0028	 speedup=18.6727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0521	 ParSpMatVec=0.0030	 speedup=17.3995
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0521	 ParSpMatVec=0.0018	 speedup=29.4959
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0521	 ParSpMatVec=0.0018	 speedup=28.6484

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0254	 speedup=0.2862
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0035	 speedup=2.0766
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0025	 speedup=2.8841
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0041	 speedup=1.7617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0024	 speedup=3.0641

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0491	 speedup=0.9621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0037	 speedup=12.8072
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0015	 speedup=31.7120
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0030	 speedup=15.7277
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0028	 speedup=17.1426

INFO: ParSpMatVec tests passed

>>> End of log
