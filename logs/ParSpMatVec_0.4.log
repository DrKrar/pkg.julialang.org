>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.1
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1049.484375 MB free)
Uptime: 13652.0 sec
Load Avg:  1.21044921875  1.03369140625  1.02490234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     569357 s        127 s      58936 s     571353 s         38 s
#2  3500 MHz     419549 s         21 s      51598 s     809313 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.1
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1237	 ParSpMatVec=0.0171	 speedup=7.2131
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1237	 ParSpMatVec=0.0077	 speedup=16.0460
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1237	 ParSpMatVec=0.0119	 speedup=10.4131
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1237	 ParSpMatVec=0.0072	 speedup=17.2398
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1237	 ParSpMatVec=0.0077	 speedup=16.0641
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1147	 ParSpMatVec=0.0256	 speedup=4.4716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1147	 ParSpMatVec=0.0107	 speedup=10.7172
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1147	 ParSpMatVec=0.0095	 speedup=12.0612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1147	 ParSpMatVec=0.0094	 speedup=12.2565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1147	 ParSpMatVec=0.0084	 speedup=13.5855

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0396	 ParSpMatVec=0.0280	 speedup=1.4116
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0396	 ParSpMatVec=0.0112	 speedup=3.5244
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0396	 ParSpMatVec=0.0082	 speedup=4.8503
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0396	 ParSpMatVec=0.0087	 speedup=4.5304
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0396	 ParSpMatVec=0.0132	 speedup=2.9981

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0417	 ParSpMatVec=0.0300	 speedup=1.3920
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0417	 ParSpMatVec=0.0028	 speedup=14.6893
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0417	 ParSpMatVec=0.0020	 speedup=20.4276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0417	 ParSpMatVec=0.0017	 speedup=24.6546
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0417	 ParSpMatVec=0.0020	 speedup=20.8939

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0104	 ParSpMatVec=0.0459	 speedup=0.2267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0104	 ParSpMatVec=0.0078	 speedup=1.3396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0104	 ParSpMatVec=0.0027	 speedup=3.8929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0104	 ParSpMatVec=0.0032	 speedup=3.2798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0104	 ParSpMatVec=0.0027	 speedup=3.8807

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0495	 speedup=0.9131
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0043	 speedup=10.4268
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0025	 speedup=18.4174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0022	 speedup=20.1486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0023	 speedup=19.7391

INFO: ParSpMatVec tests passed

>>> End of log
