>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1168.75390625 MB free)
Uptime: 13681.0 sec
Load Avg:  0.935546875  0.94873046875  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     642806 s        540 s      58851 s     528935 s         32 s
#2  3499 MHz     411880 s       7374 s      49805 s     852423 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1255	 ParSpMatVec=0.0159	 speedup=7.8900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1255	 ParSpMatVec=0.0083	 speedup=15.0410
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1255	 ParSpMatVec=0.0101	 speedup=12.4035
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1255	 ParSpMatVec=0.0078	 speedup=16.1047
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1255	 ParSpMatVec=0.0077	 speedup=16.3384
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1250	 ParSpMatVec=0.0276	 speedup=4.5211
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1250	 ParSpMatVec=0.0133	 speedup=9.4243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1250	 ParSpMatVec=0.0145	 speedup=8.6195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1250	 ParSpMatVec=0.0135	 speedup=9.2497
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1250	 ParSpMatVec=0.0190	 speedup=6.5758

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0484	 ParSpMatVec=0.0281	 speedup=1.7202
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0484	 ParSpMatVec=0.0129	 speedup=3.7472
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0484	 ParSpMatVec=0.0147	 speedup=3.3012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0484	 ParSpMatVec=0.0128	 speedup=3.7900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0484	 ParSpMatVec=0.0165	 speedup=2.9267

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0408	 speedup=1.0055
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0024	 speedup=17.1029
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0024	 speedup=17.0335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0065	 speedup=6.2651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0012	 speedup=33.3356

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0434	 speedup=0.1952
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0030	 speedup=2.8719
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0023	 speedup=3.7173
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0022	 speedup=3.8756
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0029	 speedup=2.9226

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0275	 ParSpMatVec=0.0283	 speedup=0.9716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0275	 ParSpMatVec=0.0039	 speedup=7.1080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0275	 ParSpMatVec=0.0021	 speedup=13.1474
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0275	 ParSpMatVec=0.0028	 speedup=9.7852
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0275	 ParSpMatVec=0.0016	 speedup=17.0676

INFO: ParSpMatVec tests passed

>>> End of log
