>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1162.55859375 MB free)
Uptime: 11960.0 sec
Load Avg:  0.9443359375  0.919921875  0.83349609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     538847 s       2898 s      49094 s     486966 s          6 s
#2  3501 MHz     376936 s       2755 s      42648 s     737873 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0747	 ParSpMatVec=0.0225	 speedup=3.3263
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0747	 ParSpMatVec=0.0061	 speedup=12.2386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0747	 ParSpMatVec=0.0078	 speedup=9.5506
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0747	 ParSpMatVec=0.0037	 speedup=20.3082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0747	 ParSpMatVec=0.0097	 speedup=7.7371
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0690	 ParSpMatVec=0.0226	 speedup=3.0556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0690	 ParSpMatVec=0.0088	 speedup=7.8905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0690	 ParSpMatVec=0.0112	 speedup=6.1407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0690	 ParSpMatVec=0.0093	 speedup=7.4184
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0690	 ParSpMatVec=0.0119	 speedup=5.7961

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0270	 ParSpMatVec=0.0165	 speedup=1.6370
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0270	 ParSpMatVec=0.0095	 speedup=2.8552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0270	 ParSpMatVec=0.0100	 speedup=2.7053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0270	 ParSpMatVec=0.0096	 speedup=2.8115
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0270	 ParSpMatVec=0.0146	 speedup=1.8515

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0468	 ParSpMatVec=0.0392	 speedup=1.1928
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0468	 ParSpMatVec=0.0029	 speedup=16.2045
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0468	 ParSpMatVec=0.0024	 speedup=19.6616
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0468	 ParSpMatVec=0.0024	 speedup=19.2227
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0468	 ParSpMatVec=0.0032	 speedup=14.6223

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0494	 speedup=0.1652
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0043	 speedup=1.9201
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0044	 speedup=1.8584
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.4922
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0027	 speedup=3.0710

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0445	 ParSpMatVec=0.0459	 speedup=0.9706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0445	 ParSpMatVec=0.0039	 speedup=11.2886
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0445	 ParSpMatVec=0.0020	 speedup=21.7590
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0445	 ParSpMatVec=0.0025	 speedup=18.0923
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0445	 ParSpMatVec=0.0027	 speedup=16.4589

INFO: ParSpMatVec tests passed

>>> End of log
