>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1178.04296875 MB free)
Uptime: 12657.0 sec
Load Avg:  1.09521484375  1.01708984375  0.9892578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     542431 s       5253 s      61399 s     511482 s         28 s
#2  3499 MHz     381500 s       1088 s      55037 s     759996 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1315	 ParSpMatVec=0.0144	 speedup=9.1055
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1315	 ParSpMatVec=0.0059	 speedup=22.2721
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1315	 ParSpMatVec=0.0129	 speedup=10.1768
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1315	 ParSpMatVec=0.0078	 speedup=16.9411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1315	 ParSpMatVec=0.0087	 speedup=15.1067
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0764	 ParSpMatVec=0.0403	 speedup=1.8978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0764	 ParSpMatVec=0.0131	 speedup=5.8425
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0764	 ParSpMatVec=0.0144	 speedup=5.2935
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0764	 ParSpMatVec=0.0152	 speedup=5.0322
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0764	 ParSpMatVec=0.0129	 speedup=5.9065

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0307	 ParSpMatVec=0.0297	 speedup=1.0345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0307	 ParSpMatVec=0.0126	 speedup=2.4289
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0307	 ParSpMatVec=0.0151	 speedup=2.0288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0307	 ParSpMatVec=0.0129	 speedup=2.3743
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0307	 ParSpMatVec=0.0149	 speedup=2.0598

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0380	 speedup=1.0765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0025	 speedup=16.6645
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0020	 speedup=20.2244
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0015	 speedup=27.6598
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0022	 speedup=18.7156

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0110	 ParSpMatVec=0.0439	 speedup=0.2502
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0110	 ParSpMatVec=0.0045	 speedup=2.4623
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0110	 ParSpMatVec=0.0024	 speedup=4.5716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0110	 ParSpMatVec=0.0032	 speedup=3.4598
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0110	 ParSpMatVec=0.0044	 speedup=2.4793

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0338	 ParSpMatVec=0.0443	 speedup=0.7618
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0338	 ParSpMatVec=0.0041	 speedup=8.2888
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0338	 ParSpMatVec=0.0038	 speedup=8.7731
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0338	 ParSpMatVec=0.0027	 speedup=12.4810
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0338	 ParSpMatVec=0.0029	 speedup=11.7443

INFO: ParSpMatVec tests passed

>>> End of log
