>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.1
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1058.69921875 MB free)
Uptime: 13776.0 sec
Load Avg:  1.076171875  1.0791015625  1.01904296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     576718 s       4116 s      62998 s     573696 s         34 s
#2  3500 MHz     412118 s       2216 s      56149 s     829791 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.1
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1382	 ParSpMatVec=0.0281	 speedup=4.9166
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1382	 ParSpMatVec=0.0082	 speedup=16.8458
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1382	 ParSpMatVec=0.0119	 speedup=11.6589
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1382	 ParSpMatVec=0.0086	 speedup=16.0646
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1382	 ParSpMatVec=0.0086	 speedup=16.0305
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1398	 ParSpMatVec=0.0407	 speedup=3.4376
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1398	 ParSpMatVec=0.0138	 speedup=10.1395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1398	 ParSpMatVec=0.0132	 speedup=10.5887
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1398	 ParSpMatVec=0.0173	 speedup=8.0853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1398	 ParSpMatVec=0.0124	 speedup=11.2632

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0408	 ParSpMatVec=0.0296	 speedup=1.3789
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0408	 ParSpMatVec=0.0122	 speedup=3.3452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0408	 ParSpMatVec=0.0144	 speedup=2.8270
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0408	 ParSpMatVec=0.0130	 speedup=3.1465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0408	 ParSpMatVec=0.0139	 speedup=2.9340

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0392	 ParSpMatVec=0.0403	 speedup=0.9717
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0392	 ParSpMatVec=0.0019	 speedup=20.5543
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0392	 ParSpMatVec=0.0038	 speedup=10.4420
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0392	 ParSpMatVec=0.0027	 speedup=14.4187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0392	 ParSpMatVec=0.0026	 speedup=15.3545

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0534	 speedup=0.1384
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0051	 speedup=1.4600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0018	 speedup=4.0765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0017	 speedup=4.3374
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0024	 speedup=3.1024

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0384	 ParSpMatVec=0.0341	 speedup=1.1245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0384	 ParSpMatVec=0.0029	 speedup=13.2461
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0384	 ParSpMatVec=0.0016	 speedup=24.6876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0384	 ParSpMatVec=0.0060	 speedup=6.4206
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0384	 ParSpMatVec=0.0022	 speedup=17.2444

INFO: ParSpMatVec tests passed

>>> End of log
