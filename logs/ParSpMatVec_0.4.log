>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1167.1484375 MB free)
Uptime: 13105.0 sec
Load Avg:  0.94091796875  0.9658203125  0.951171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     565234 s       2428 s      50828 s     555892 s         40 s
#2  3499 MHz     360964 s       4699 s      43584 s     858535 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1360	 ParSpMatVec=0.0278	 speedup=4.8900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1360	 ParSpMatVec=0.0084	 speedup=16.1885
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1360	 ParSpMatVec=0.0140	 speedup=9.6911
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1360	 ParSpMatVec=0.0096	 speedup=14.1012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1360	 ParSpMatVec=0.0165	 speedup=8.2382
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1233	 ParSpMatVec=0.0417	 speedup=2.9549
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1233	 ParSpMatVec=0.0121	 speedup=10.2110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1233	 ParSpMatVec=0.0164	 speedup=7.5248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1233	 ParSpMatVec=0.0141	 speedup=8.7196
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1233	 ParSpMatVec=0.0155	 speedup=7.9504

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0306	 speedup=1.4202
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0144	 speedup=3.0287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0146	 speedup=2.9817
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0137	 speedup=3.1645
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0143	 speedup=3.0401

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0432	 ParSpMatVec=0.0438	 speedup=0.9859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0432	 ParSpMatVec=0.0154	 speedup=2.8132
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0432	 ParSpMatVec=0.0020	 speedup=21.4673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0432	 ParSpMatVec=0.0143	 speedup=3.0133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0432	 ParSpMatVec=0.0033	 speedup=13.2101

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0363	 speedup=0.2433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0082	 speedup=1.0736
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0031	 speedup=2.8659
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0019	 speedup=4.6302
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0030	 speedup=2.9368

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0446	 ParSpMatVec=0.0478	 speedup=0.9323
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0446	 ParSpMatVec=0.0037	 speedup=11.9308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0446	 ParSpMatVec=0.0018	 speedup=25.4275
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0446	 ParSpMatVec=0.0035	 speedup=12.9112
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0446	 ParSpMatVec=0.0024	 speedup=18.6082

INFO: ParSpMatVec tests passed

>>> End of log
