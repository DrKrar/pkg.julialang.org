>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.22265625 MB free)
Uptime: 14870.0 sec
Load Avg:  0.92822265625  0.9853515625  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     718038 s       2196 s      59008 s     558986 s         34 s
#2  3501 MHz     464465 s       4982 s      50554 s     918759 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.17.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0749	 ParSpMatVec=0.0148	 speedup=5.0497
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0749	 ParSpMatVec=0.0096	 speedup=7.8351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0749	 ParSpMatVec=0.0130	 speedup=5.7786
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0749	 ParSpMatVec=0.0088	 speedup=8.4978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0749	 ParSpMatVec=0.0121	 speedup=6.1807
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1021	 ParSpMatVec=0.0362	 speedup=2.8178
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1021	 ParSpMatVec=0.0123	 speedup=8.3100
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1021	 ParSpMatVec=0.0156	 speedup=6.5401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1021	 ParSpMatVec=0.0142	 speedup=7.2097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1021	 ParSpMatVec=0.0138	 speedup=7.3951

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0448	 ParSpMatVec=0.0309	 speedup=1.4514
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0448	 ParSpMatVec=0.0129	 speedup=3.4653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0448	 ParSpMatVec=0.0160	 speedup=2.8068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0448	 ParSpMatVec=0.0156	 speedup=2.8737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0448	 ParSpMatVec=0.0149	 speedup=3.0137

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0408	 ParSpMatVec=0.0230	 speedup=1.7767
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0408	 ParSpMatVec=0.0022	 speedup=18.3427
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0408	 ParSpMatVec=0.0019	 speedup=20.9288
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0408	 ParSpMatVec=0.0027	 speedup=15.1212
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0408	 ParSpMatVec=0.0018	 speedup=22.1419

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0285	 speedup=0.2873
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0043	 speedup=1.8871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0023	 speedup=3.5135
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0032	 speedup=2.5267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0030	 speedup=2.6951

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0500	 ParSpMatVec=0.0374	 speedup=1.3356
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0500	 ParSpMatVec=0.0040	 speedup=12.4727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0500	 ParSpMatVec=0.0044	 speedup=11.2942
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0500	 ParSpMatVec=0.0025	 speedup=19.9998
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0500	 ParSpMatVec=0.0063	 speedup=7.8998

INFO: ParSpMatVec tests passed

>>> End of log
