>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1183.79296875 MB free)
Uptime: 14478.0 sec
Load Avg:  0.9384765625  0.9833984375  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     696044 s         70 s      60183 s     544200 s         28 s
#2  3501 MHz     418155 s         83 s      53240 s     936288 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1173	 ParSpMatVec=0.0256	 speedup=4.5796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1173	 ParSpMatVec=0.0080	 speedup=14.6974
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1173	 ParSpMatVec=0.0124	 speedup=9.4926
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1173	 ParSpMatVec=0.0081	 speedup=14.5520
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1173	 ParSpMatVec=0.0070	 speedup=16.7241
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1134	 ParSpMatVec=0.0396	 speedup=2.8661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1134	 ParSpMatVec=0.0129	 speedup=8.7758
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1134	 ParSpMatVec=0.0163	 speedup=6.9500
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1134	 ParSpMatVec=0.0156	 speedup=7.2729
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1134	 ParSpMatVec=0.0102	 speedup=11.0814

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0299	 ParSpMatVec=0.0288	 speedup=1.0365
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0299	 ParSpMatVec=0.0129	 speedup=2.3125
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0299	 ParSpMatVec=0.0082	 speedup=3.6512
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0299	 ParSpMatVec=0.0104	 speedup=2.8760
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0299	 ParSpMatVec=0.0104	 speedup=2.8713

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0343	 ParSpMatVec=0.0317	 speedup=1.0823
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0343	 ParSpMatVec=0.0021	 speedup=16.4262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0343	 ParSpMatVec=0.0013	 speedup=26.0761
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0343	 ParSpMatVec=0.0013	 speedup=25.5180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0343	 ParSpMatVec=0.0017	 speedup=20.0698

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0438	 speedup=0.1998
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0039	 speedup=2.2615
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0041	 speedup=2.1572
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0021	 speedup=4.1085
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0027	 speedup=3.2240

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0437	 ParSpMatVec=0.0463	 speedup=0.9441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0437	 ParSpMatVec=0.0040	 speedup=10.8167
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0437	 ParSpMatVec=0.0028	 speedup=15.3739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0437	 ParSpMatVec=0.0025	 speedup=17.3134
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0437	 ParSpMatVec=0.0019	 speedup=23.1404

INFO: ParSpMatVec tests passed

>>> End of log
