>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1159.03515625 MB free)
Uptime: 12588.0 sec
Load Avg:  1.01123046875  1.1123046875  1.09814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     550720 s       2763 s      61520 s     494893 s         25 s
#2  3500 MHz     383076 s       3760 s      52228 s     764083 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1502	 ParSpMatVec=0.0165	 speedup=9.1288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1502	 ParSpMatVec=0.0085	 speedup=17.7645
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1502	 ParSpMatVec=0.0133	 speedup=11.2748
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1502	 ParSpMatVec=0.0087	 speedup=17.1904
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1502	 ParSpMatVec=0.0087	 speedup=17.3180
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1186	 ParSpMatVec=0.0474	 speedup=2.5036
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1186	 ParSpMatVec=0.0126	 speedup=9.4272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1186	 ParSpMatVec=0.0148	 speedup=8.0250
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1186	 ParSpMatVec=0.0132	 speedup=9.0110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1186	 ParSpMatVec=0.0132	 speedup=9.0029

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0366	 ParSpMatVec=0.0187	 speedup=1.9597
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0366	 ParSpMatVec=0.0174	 speedup=2.1021
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0366	 ParSpMatVec=0.0146	 speedup=2.5078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0366	 ParSpMatVec=0.0147	 speedup=2.4997
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0366	 ParSpMatVec=0.0162	 speedup=2.2644

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0288	 speedup=1.5098
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0024	 speedup=18.0187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0023	 speedup=19.3065
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0015	 speedup=28.1219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0016	 speedup=27.2133

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0056	 ParSpMatVec=0.0287	 speedup=0.1944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0056	 ParSpMatVec=0.0041	 speedup=1.3710
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0056	 ParSpMatVec=0.0018	 speedup=3.1528
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0056	 ParSpMatVec=0.0043	 speedup=1.2853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0056	 ParSpMatVec=0.0021	 speedup=2.6578

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0450	 ParSpMatVec=0.0466	 speedup=0.9663
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0450	 ParSpMatVec=0.0043	 speedup=10.4689
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0450	 ParSpMatVec=0.0026	 speedup=17.3191
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0450	 ParSpMatVec=0.0028	 speedup=15.9518
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0450	 ParSpMatVec=0.0029	 speedup=15.5730

INFO: ParSpMatVec tests passed

>>> End of log
