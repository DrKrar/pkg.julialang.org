>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1064.03125 MB free)
Uptime: 14099.0 sec
Load Avg:  1.0029296875  0.9853515625  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     578477 s       5922 s      59897 s     597051 s         38 s
#2  3500 MHz     414432 s         78 s      52367 s     866734 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1413	 ParSpMatVec=0.0256	 speedup=5.5269
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1413	 ParSpMatVec=0.0097	 speedup=14.5990
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1413	 ParSpMatVec=0.0121	 speedup=11.6897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1413	 ParSpMatVec=0.0100	 speedup=14.1318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1413	 ParSpMatVec=0.0073	 speedup=19.2994
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0820	 ParSpMatVec=0.0306	 speedup=2.6757
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0820	 ParSpMatVec=0.0165	 speedup=4.9754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0820	 ParSpMatVec=0.0157	 speedup=5.2348
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0820	 ParSpMatVec=0.0132	 speedup=6.2107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0820	 ParSpMatVec=0.0157	 speedup=5.2211

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0441	 ParSpMatVec=0.0276	 speedup=1.5941
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0441	 ParSpMatVec=0.0136	 speedup=3.2283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0441	 ParSpMatVec=0.0143	 speedup=3.0711
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0441	 ParSpMatVec=0.0158	 speedup=2.7911
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0441	 ParSpMatVec=0.0129	 speedup=3.4263

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0382	 speedup=1.1060
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0025	 speedup=16.9739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0025	 speedup=17.1197
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0034	 speedup=12.2855
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0020	 speedup=20.8084

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0347	 speedup=0.1965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0033	 speedup=2.0553
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0016	 speedup=4.2219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0034	 speedup=1.9803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0023	 speedup=2.9725

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0289	 ParSpMatVec=0.0273	 speedup=1.0586
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0289	 ParSpMatVec=0.0029	 speedup=10.1004
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0289	 ParSpMatVec=0.0027	 speedup=10.8999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0289	 ParSpMatVec=0.0026	 speedup=10.9859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0289	 ParSpMatVec=0.0027	 speedup=10.7761

INFO: ParSpMatVec tests passed

>>> End of log
