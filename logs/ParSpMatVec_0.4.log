>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.11328125 MB free)
Uptime: 15296.0 sec
Load Avg:  0.9970703125  0.998046875  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     727555 s       4264 s      56361 s     591965 s         27 s
#2  3499 MHz     498636 s       2155 s      50208 s     925923 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1173	 ParSpMatVec=0.0274	 speedup=4.2810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1173	 ParSpMatVec=0.0089	 speedup=13.1163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1173	 ParSpMatVec=0.0090	 speedup=13.0295
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1173	 ParSpMatVec=0.0063	 speedup=18.5194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1173	 ParSpMatVec=0.0090	 speedup=13.0286
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0803	 ParSpMatVec=0.0257	 speedup=3.1200
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0803	 ParSpMatVec=0.0134	 speedup=5.9813
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0803	 ParSpMatVec=0.0083	 speedup=9.6941
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0803	 ParSpMatVec=0.0108	 speedup=7.4494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0803	 ParSpMatVec=0.0114	 speedup=7.0389

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0353	 speedup=1.3247
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0131	 speedup=3.5737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0097	 speedup=4.7922
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0091	 speedup=5.1232
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0150	 speedup=3.1219

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0226	 speedup=1.3536
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0023	 speedup=13.1101
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0027	 speedup=11.1941
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0017	 speedup=17.9495
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0018	 speedup=16.7275

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0271	 speedup=0.2531
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0038	 speedup=1.8251
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0021	 speedup=3.2525
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0025	 speedup=2.7192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0022	 speedup=3.1118

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0277	 ParSpMatVec=0.0277	 speedup=0.9986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0277	 ParSpMatVec=0.0033	 speedup=8.3455
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0277	 ParSpMatVec=0.0021	 speedup=13.2146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0277	 ParSpMatVec=0.0021	 speedup=13.4500
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0277	 ParSpMatVec=0.0027	 speedup=10.2759

INFO: ParSpMatVec tests passed

>>> End of log
