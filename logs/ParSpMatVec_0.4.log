>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing ParSpMatVec v0.0.1
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1221	 ParSpMatVec=0.0192	 speedup=6.3463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1221	 ParSpMatVec=0.0075	 speedup=16.2783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1221	 ParSpMatVec=0.0119	 speedup=10.2888
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1221	 ParSpMatVec=0.0098	 speedup=12.4145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1221	 ParSpMatVec=0.0083	 speedup=14.7834
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1269	 ParSpMatVec=0.0441	 speedup=2.8749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1269	 ParSpMatVec=0.0150	 speedup=8.4728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1269	 ParSpMatVec=0.0130	 speedup=9.7662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1269	 ParSpMatVec=0.0111	 speedup=11.4310
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1269	 ParSpMatVec=0.0140	 speedup=9.0432

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0280	 speedup=1.5435
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0169	 speedup=2.5624
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0134	 speedup=3.2341
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0117	 speedup=3.7027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0124	 speedup=3.4910

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0399	 ParSpMatVec=0.0390	 speedup=1.0243
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0399	 ParSpMatVec=0.0023	 speedup=17.7259
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0399	 ParSpMatVec=0.0023	 speedup=17.4866
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0399	 ParSpMatVec=0.0014	 speedup=28.2392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0399	 ParSpMatVec=0.0012	 speedup=32.6118

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0432	 speedup=0.1992
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0033	 speedup=2.6146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0186	 speedup=0.4632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0039	 speedup=2.2325
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0279	 speedup=0.3084

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0449	 speedup=1.0091
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0028	 speedup=16.0422
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0015	 speedup=29.9509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0184	 speedup=2.4692
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0021	 speedup=21.4277

INFO: ParSpMatVec tests passed

>>> End of log
