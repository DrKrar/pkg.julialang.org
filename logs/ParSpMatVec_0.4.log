>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.23
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1143	 ParSpMatVec=0.0329	 speedup=3.4786
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1143	 ParSpMatVec=0.0097	 speedup=11.7735
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1143	 ParSpMatVec=0.0094	 speedup=12.2077
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1143	 ParSpMatVec=0.0066	 speedup=17.2238
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1143	 ParSpMatVec=0.0089	 speedup=12.8280
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0872	 ParSpMatVec=0.0283	 speedup=3.0759
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0872	 ParSpMatVec=0.0138	 speedup=6.3146
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0872	 ParSpMatVec=0.0095	 speedup=9.1334
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0872	 ParSpMatVec=0.0097	 speedup=9.0326
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0872	 ParSpMatVec=0.0114	 speedup=7.6537

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0320	 speedup=1.4749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0128	 speedup=3.6888
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0095	 speedup=4.9899
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0096	 speedup=4.9371
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0134	 speedup=3.5258

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0410	 speedup=1.1073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0031	 speedup=14.5356
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0020	 speedup=22.8658
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0028	 speedup=16.0434
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0023	 speedup=20.0236

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0437	 speedup=0.2185
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0042	 speedup=2.2714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0024	 speedup=3.9295
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0035	 speedup=2.7619
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0030	 speedup=3.2035

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0483	 ParSpMatVec=0.0471	 speedup=1.0263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0483	 ParSpMatVec=0.0046	 speedup=10.6023
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0483	 ParSpMatVec=0.0040	 speedup=12.2145
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0483	 ParSpMatVec=0.0033	 speedup=14.5938
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0483	 ParSpMatVec=0.0023	 speedup=21.3193

INFO: ParSpMatVec tests passed

>>> End of log
