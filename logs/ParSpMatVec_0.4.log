>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1172.15625 MB free)
Uptime: 11719.0 sec
Load Avg:  0.962890625  0.97119140625  0.98779296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz     541303 s        104 s      52628 s     458669 s          7 s
#2  3507 MHz     341656 s         53 s      47698 s     747533 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1141	 ParSpMatVec=0.0219	 speedup=5.2054
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1141	 ParSpMatVec=0.0088	 speedup=12.9174
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1141	 ParSpMatVec=0.0150	 speedup=7.6169
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1141	 ParSpMatVec=0.0095	 speedup=12.0366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1141	 ParSpMatVec=0.0096	 speedup=11.8750
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1088	 ParSpMatVec=0.0315	 speedup=3.4566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1088	 ParSpMatVec=0.0117	 speedup=9.3138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1088	 ParSpMatVec=0.0136	 speedup=8.0070
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1088	 ParSpMatVec=0.0128	 speedup=8.4939
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1088	 ParSpMatVec=0.0103	 speedup=10.5097

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0439	 ParSpMatVec=0.0181	 speedup=2.4258
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0439	 ParSpMatVec=0.0132	 speedup=3.3122
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0439	 ParSpMatVec=0.0143	 speedup=3.0687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0439	 ParSpMatVec=0.0140	 speedup=3.1442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0439	 ParSpMatVec=0.0140	 speedup=3.1286

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0404	 ParSpMatVec=0.0247	 speedup=1.6360
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0404	 ParSpMatVec=0.0022	 speedup=18.4843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0404	 ParSpMatVec=0.0022	 speedup=18.0602
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0404	 ParSpMatVec=0.0019	 speedup=21.1822
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0404	 ParSpMatVec=0.0015	 speedup=26.9316

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0394	 speedup=0.2270
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0039	 speedup=2.3089
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8708
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8784

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0489	 ParSpMatVec=0.0500	 speedup=0.9794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0489	 ParSpMatVec=0.0047	 speedup=10.4070
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0489	 ParSpMatVec=0.0021	 speedup=23.8599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0489	 ParSpMatVec=0.0028	 speedup=17.6490
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0489	 ParSpMatVec=0.0030	 speedup=16.4142

INFO: ParSpMatVec tests passed

>>> End of log
