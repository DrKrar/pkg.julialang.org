>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1184.62109375 MB free)
Uptime: 13752.0 sec
Load Avg:  1.07763671875  1.03271484375  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     581609 s       1080 s      60930 s     566687 s         35 s
#2  3496 MHz     374667 s       5990 s      51108 s     871450 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1082	 ParSpMatVec=0.0250	 speedup=4.3325
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1082	 ParSpMatVec=0.0085	 speedup=12.6976
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1082	 ParSpMatVec=0.0110	 speedup=9.8781
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1082	 ParSpMatVec=0.0097	 speedup=11.1446
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1082	 ParSpMatVec=0.0128	 speedup=8.4223
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0780	 ParSpMatVec=0.0586	 speedup=1.3316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0780	 ParSpMatVec=0.0134	 speedup=5.8386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0780	 ParSpMatVec=0.0173	 speedup=4.5081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0780	 ParSpMatVec=0.0116	 speedup=6.7241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0780	 ParSpMatVec=0.0159	 speedup=4.8952

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0332	 ParSpMatVec=0.0253	 speedup=1.3111
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0332	 ParSpMatVec=0.0130	 speedup=2.5543
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0332	 ParSpMatVec=0.0111	 speedup=2.9812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0332	 ParSpMatVec=0.0129	 speedup=2.5710
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0332	 ParSpMatVec=0.0117	 speedup=2.8306

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0383	 speedup=1.0968
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0029	 speedup=14.6526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0011	 speedup=37.5547
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0022	 speedup=19.2927
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0032	 speedup=13.1862

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0434	 speedup=0.1973
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0036	 speedup=2.4063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0033	 speedup=2.5561
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0042	 speedup=2.0521
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0039	 speedup=2.2094

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0467	 speedup=0.9674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0039	 speedup=11.6832
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0122	 speedup=3.6969
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0040	 speedup=11.1861
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0044	 speedup=10.2311

INFO: ParSpMatVec tests passed

>>> End of log
