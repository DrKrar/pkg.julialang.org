>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1181.8828125 MB free)
Uptime: 14055.0 sec
Load Avg:  1.080078125  1.06640625  1.05029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     683434 s       5619 s      62332 s     509700 s         35 s
#2  3500 MHz     406492 s       1065 s      55920 s     897444 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0909	 ParSpMatVec=0.0202	 speedup=4.4961
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0909	 ParSpMatVec=0.0113	 speedup=8.0183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0909	 ParSpMatVec=0.0189	 speedup=4.8120
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0909	 ParSpMatVec=0.0106	 speedup=8.6049
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0909	 ParSpMatVec=0.0133	 speedup=6.8465
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0884	 ParSpMatVec=0.0425	 speedup=2.0818
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0884	 ParSpMatVec=0.0158	 speedup=5.5955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0884	 ParSpMatVec=0.0155	 speedup=5.7088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0884	 ParSpMatVec=0.0135	 speedup=6.5385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0884	 ParSpMatVec=0.0165	 speedup=5.3543

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0534	 ParSpMatVec=0.0353	 speedup=1.5122
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0534	 ParSpMatVec=0.0132	 speedup=4.0485
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0534	 ParSpMatVec=0.0164	 speedup=3.2616
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0534	 ParSpMatVec=0.0142	 speedup=3.7503
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0534	 ParSpMatVec=0.0138	 speedup=3.8743

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0384	 ParSpMatVec=0.0551	 speedup=0.6956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0384	 ParSpMatVec=0.0019	 speedup=20.5519
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0384	 ParSpMatVec=0.0028	 speedup=13.6070
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0384	 ParSpMatVec=0.0202	 speedup=1.9005
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0384	 ParSpMatVec=0.0465	 speedup=0.8246

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0460	 speedup=0.1650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0056	 speedup=1.3557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0067	 speedup=1.1416
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0684	 speedup=0.1111
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0023	 speedup=3.3218

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0313	 ParSpMatVec=0.0296	 speedup=1.0563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0313	 ParSpMatVec=0.0041	 speedup=7.5993
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0313	 ParSpMatVec=0.0021	 speedup=15.1950
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0313	 ParSpMatVec=0.0047	 speedup=6.6031
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0313	 ParSpMatVec=0.0034	 speedup=9.3311

INFO: ParSpMatVec tests passed

>>> End of log
