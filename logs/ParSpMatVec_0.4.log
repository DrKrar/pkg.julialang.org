>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1190.96875 MB free)
Uptime: 15653.0 sec
Load Avg:  1.076171875  1.02099609375  0.99365234375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     781544 s       6189 s      60449 s     541192 s         51 s
#2  3499 MHz     488900 s        744 s      52076 s     962445 s          3 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.2
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.14.0
 - SHA                           0.3.0
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0993	 ParSpMatVec=0.0283	 speedup=3.5074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0993	 ParSpMatVec=0.0087	 speedup=11.3683
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0993	 ParSpMatVec=0.0136	 speedup=7.2874
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0993	 ParSpMatVec=0.0092	 speedup=10.7761
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0993	 ParSpMatVec=0.0091	 speedup=10.9155
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1442	 ParSpMatVec=0.0557	 speedup=2.5899
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1442	 ParSpMatVec=0.0189	 speedup=7.6273
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1442	 ParSpMatVec=0.0200	 speedup=7.2134
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1442	 ParSpMatVec=0.0173	 speedup=8.3162
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1442	 ParSpMatVec=0.0122	 speedup=11.8308

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0392	 ParSpMatVec=0.0203	 speedup=1.9282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0392	 ParSpMatVec=0.0156	 speedup=2.5163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0392	 ParSpMatVec=0.0169	 speedup=2.3196
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0392	 ParSpMatVec=0.0130	 speedup=3.0138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0392	 ParSpMatVec=0.0167	 speedup=2.3414

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0359	 ParSpMatVec=0.0239	 speedup=1.5052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0359	 ParSpMatVec=0.0022	 speedup=16.1377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0359	 ParSpMatVec=0.0018	 speedup=19.6686
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0359	 ParSpMatVec=0.0014	 speedup=24.9783
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0359	 ParSpMatVec=0.0013	 speedup=27.0561

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0416	 speedup=0.2332
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0038	 speedup=2.5508
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0041	 speedup=2.3435
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0031	 speedup=3.1765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0023	 speedup=4.2463

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0293	 ParSpMatVec=0.0324	 speedup=0.9030
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0293	 ParSpMatVec=0.0039	 speedup=7.4636
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0293	 ParSpMatVec=0.0021	 speedup=14.0876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0293	 ParSpMatVec=0.0019	 speedup=15.6574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0293	 ParSpMatVec=0.0025	 speedup=11.6627

INFO: ParSpMatVec tests passed

>>> End of log
