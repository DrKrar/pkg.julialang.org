>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1065.53515625 MB free)
Uptime: 13273.0 sec
Load Avg:  0.9501953125  0.998046875  1.0048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     598565 s       2864 s      61372 s     495352 s         17 s
#2  3500 MHz     362310 s       3814 s      52646 s     844801 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0812	 ParSpMatVec=0.0198	 speedup=4.0911
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0812	 ParSpMatVec=0.0079	 speedup=10.2482
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0812	 ParSpMatVec=0.0115	 speedup=7.0460
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0812	 ParSpMatVec=0.0084	 speedup=9.7215
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0812	 ParSpMatVec=0.0089	 speedup=9.1676
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1053	 ParSpMatVec=0.0294	 speedup=3.5788
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1053	 ParSpMatVec=0.0121	 speedup=8.7395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1053	 ParSpMatVec=0.0134	 speedup=7.8825
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1053	 ParSpMatVec=0.0143	 speedup=7.3834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1053	 ParSpMatVec=0.0146	 speedup=7.2028

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0241	 speedup=1.7517
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0131	 speedup=3.2365
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0150	 speedup=2.8109
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0114	 speedup=3.7166
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0199	 speedup=2.1246

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0400	 speedup=1.0581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0029	 speedup=14.6073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0021	 speedup=20.4926
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0019	 speedup=22.7699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0019	 speedup=21.7458

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0530	 speedup=0.1722
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0037	 speedup=2.4338
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0027	 speedup=3.4322
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0029	 speedup=3.1284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0026	 speedup=3.4861

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0514	 speedup=0.8292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0038	 speedup=11.1328
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0021	 speedup=20.2189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0028	 speedup=15.4375
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0021	 speedup=20.1352

INFO: ParSpMatVec tests passed

>>> End of log
