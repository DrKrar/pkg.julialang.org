>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1186.50390625 MB free)
Uptime: 13651.0 sec
Load Avg:  0.9072265625  0.96923828125  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     647301 s         92 s      58066 s     510160 s         47 s
#2  3499 MHz     396856 s       6135 s      50739 s     855218 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1208	 ParSpMatVec=0.0257	 speedup=4.7021
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1208	 ParSpMatVec=0.0084	 speedup=14.4097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1208	 ParSpMatVec=0.0118	 speedup=10.2719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1208	 ParSpMatVec=0.0094	 speedup=12.8565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1208	 ParSpMatVec=0.0111	 speedup=10.8741
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1100	 ParSpMatVec=0.0372	 speedup=2.9568
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1100	 ParSpMatVec=0.0120	 speedup=9.1591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1100	 ParSpMatVec=0.0078	 speedup=14.1590
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1100	 ParSpMatVec=0.0103	 speedup=10.7032
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1100	 ParSpMatVec=0.0100	 speedup=10.9676

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0389	 ParSpMatVec=0.0310	 speedup=1.2533
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0389	 ParSpMatVec=0.0139	 speedup=2.7915
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0389	 ParSpMatVec=0.0080	 speedup=4.8282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0389	 ParSpMatVec=0.0094	 speedup=4.1173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0389	 ParSpMatVec=0.0101	 speedup=3.8651

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0387	 ParSpMatVec=0.0389	 speedup=0.9931
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0387	 ParSpMatVec=0.0022	 speedup=17.8581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0387	 ParSpMatVec=0.0016	 speedup=23.5237
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0387	 ParSpMatVec=0.0016	 speedup=24.4432
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0387	 ParSpMatVec=0.0017	 speedup=22.1478

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0429	 speedup=0.1968
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0039	 speedup=2.1882
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0025	 speedup=3.4063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0020	 speedup=4.1622
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0026	 speedup=3.1960

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0405	 ParSpMatVec=0.0259	 speedup=1.5648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0405	 ParSpMatVec=0.0031	 speedup=13.1860
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0405	 ParSpMatVec=0.0031	 speedup=13.0165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0405	 ParSpMatVec=0.0023	 speedup=17.3949
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0405	 ParSpMatVec=0.0024	 speedup=16.6999

INFO: ParSpMatVec tests passed

>>> End of log
