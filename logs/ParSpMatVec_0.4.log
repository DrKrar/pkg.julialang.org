>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1141.87109375 MB free)
Uptime: 13558.0 sec
Load Avg:  0.9072265625  0.97216796875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     684606 s         64 s      57898 s     470561 s         35 s
#2  3499 MHz     423986 s         85 s      51140 s     836768 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1366	 ParSpMatVec=0.0265	 speedup=5.1590
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1366	 ParSpMatVec=0.0102	 speedup=13.4224
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1366	 ParSpMatVec=0.0129	 speedup=10.5787
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1366	 ParSpMatVec=0.0129	 speedup=10.5806
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1366	 ParSpMatVec=0.0111	 speedup=12.3511
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1251	 ParSpMatVec=0.0418	 speedup=2.9956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1251	 ParSpMatVec=0.0127	 speedup=9.8230
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1251	 ParSpMatVec=0.0138	 speedup=9.0732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1251	 ParSpMatVec=0.0114	 speedup=11.0017
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1251	 ParSpMatVec=0.0142	 speedup=8.7963

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0486	 ParSpMatVec=0.0316	 speedup=1.5405
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0486	 ParSpMatVec=0.0121	 speedup=4.0303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0486	 ParSpMatVec=0.0144	 speedup=3.3743
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0486	 ParSpMatVec=0.0158	 speedup=3.0778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0486	 ParSpMatVec=0.0151	 speedup=3.2318

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0353	 speedup=1.2329
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0044	 speedup=9.8215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0020	 speedup=21.9830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0018	 speedup=23.8516
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0021	 speedup=20.4511

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0054	 ParSpMatVec=0.0317	 speedup=0.1699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0054	 ParSpMatVec=0.0028	 speedup=1.9365
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0054	 ParSpMatVec=0.0016	 speedup=3.4642
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0054	 ParSpMatVec=0.0033	 speedup=1.6291
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0054	 ParSpMatVec=0.0021	 speedup=2.5395

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0521	 ParSpMatVec=0.0490	 speedup=1.0626
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0521	 ParSpMatVec=0.0066	 speedup=7.8634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0521	 ParSpMatVec=0.0022	 speedup=24.2214
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0521	 ParSpMatVec=0.0027	 speedup=19.3075
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0521	 ParSpMatVec=0.0027	 speedup=19.3620

INFO: ParSpMatVec tests passed

>>> End of log
