>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.02734375 MB free)
Uptime: 15061.0 sec
Load Avg:  1.01904296875  1.0146484375  0.99169921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     729979 s       3764 s      65695 s     551602 s         21 s
#2  3500 MHz     475928 s       2761 s      59869 s     921558 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1296	 ParSpMatVec=0.0251	 speedup=5.1659
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1296	 ParSpMatVec=0.0088	 speedup=14.7663
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1296	 ParSpMatVec=0.0141	 speedup=9.1841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1296	 ParSpMatVec=0.0112	 speedup=11.5566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1296	 ParSpMatVec=0.0113	 speedup=11.5097
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1185	 ParSpMatVec=0.0423	 speedup=2.8041
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1185	 ParSpMatVec=0.0141	 speedup=8.4275
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1185	 ParSpMatVec=0.0148	 speedup=8.0022
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1185	 ParSpMatVec=0.0126	 speedup=9.4301
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1185	 ParSpMatVec=0.0134	 speedup=8.8646

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0300	 speedup=1.4091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0152	 speedup=2.7807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0131	 speedup=3.2361
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0122	 speedup=3.4763
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0170	 speedup=2.4967

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0418	 ParSpMatVec=0.0394	 speedup=1.0617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0418	 ParSpMatVec=0.0026	 speedup=15.9919
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0418	 ParSpMatVec=0.0031	 speedup=13.4951
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0418	 ParSpMatVec=0.0024	 speedup=17.1799
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0418	 ParSpMatVec=0.0033	 speedup=12.5517

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0443	 speedup=0.1869
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0046	 speedup=1.8052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0026	 speedup=3.2021
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0028	 speedup=2.9136
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0033	 speedup=2.5222

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0267	 speedup=1.6958
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0023	 speedup=19.6505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0019	 speedup=24.0010
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0041	 speedup=10.9236
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0024	 speedup=19.2119

INFO: ParSpMatVec tests passed

>>> End of log
