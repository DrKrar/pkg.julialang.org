>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1190.2109375 MB free)
Uptime: 15912.0 sec
Load Avg:  1.06298828125  1.00048828125  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     756204 s       4177 s      56152 s     620904 s         29 s
#2  3499 MHz     481584 s       2809 s      48686 s    1013697 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1370	 ParSpMatVec=0.0268	 speedup=5.1181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1370	 ParSpMatVec=0.0093	 speedup=14.7265
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1370	 ParSpMatVec=0.0113	 speedup=12.0805
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1370	 ParSpMatVec=0.0062	 speedup=22.1384
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1370	 ParSpMatVec=0.0063	 speedup=21.9146
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0858	 ParSpMatVec=0.0438	 speedup=1.9581
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0858	 ParSpMatVec=0.0170	 speedup=5.0312
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0858	 ParSpMatVec=0.0217	 speedup=3.9431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0858	 ParSpMatVec=0.0133	 speedup=6.4431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0858	 ParSpMatVec=0.0164	 speedup=5.2202

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0331	 ParSpMatVec=0.0190	 speedup=1.7411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0331	 ParSpMatVec=0.0134	 speedup=2.4661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0331	 ParSpMatVec=0.0162	 speedup=2.0387
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0331	 ParSpMatVec=0.0136	 speedup=2.4321
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0331	 ParSpMatVec=0.0133	 speedup=2.4919

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0429	 speedup=0.9946
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0024	 speedup=17.5285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0024	 speedup=18.1327
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0064	 speedup=6.6906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0016	 speedup=26.9991

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0643	 speedup=0.1308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0043	 speedup=1.9752
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0022	 speedup=3.8788
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0030	 speedup=2.8155
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0029	 speedup=2.9485

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0491	 speedup=0.9258
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0042	 speedup=10.9090
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0022	 speedup=21.0104
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0024	 speedup=19.1367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0019	 speedup=23.9419

INFO: ParSpMatVec tests passed

>>> End of log
