>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1204.49609375 MB free)
Uptime: 13140.0 sec
Load Avg:  1.193359375  1.09130859375  1.03955078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3492 MHz     633424 s       3039 s      56134 s     479961 s         34 s
#2  3492 MHz     404054 s       2858 s      48930 s     807537 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0808	 ParSpMatVec=0.0167	 speedup=4.8287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0808	 ParSpMatVec=0.0076	 speedup=10.6304
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0808	 ParSpMatVec=0.0107	 speedup=7.5328
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0808	 ParSpMatVec=0.0101	 speedup=7.9859
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0808	 ParSpMatVec=0.0084	 speedup=9.6483
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0717	 ParSpMatVec=0.0245	 speedup=2.9262
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0717	 ParSpMatVec=0.0120	 speedup=5.9738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0717	 ParSpMatVec=0.0153	 speedup=4.6955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0717	 ParSpMatVec=0.0131	 speedup=5.4697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0717	 ParSpMatVec=0.0153	 speedup=4.6932

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0266	 speedup=1.5960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0172	 speedup=2.4684
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0138	 speedup=3.0704
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0151	 speedup=2.7982
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0128	 speedup=3.3003

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0445	 ParSpMatVec=0.0451	 speedup=0.9856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0445	 ParSpMatVec=0.0026	 speedup=16.8942
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0445	 ParSpMatVec=0.0023	 speedup=19.0225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0445	 ParSpMatVec=0.0033	 speedup=13.4863
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0445	 ParSpMatVec=0.0081	 speedup=5.4869

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0474	 speedup=0.1739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0036	 speedup=2.2635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.8833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.4666
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0028	 speedup=2.9258

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0373	 ParSpMatVec=0.0261	 speedup=1.4266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0373	 ParSpMatVec=0.0038	 speedup=9.9133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0373	 ParSpMatVec=0.0020	 speedup=18.8285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0373	 ParSpMatVec=0.0024	 speedup=15.7378
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0373	 ParSpMatVec=0.0024	 speedup=15.4230

INFO: ParSpMatVec tests passed

>>> End of log
