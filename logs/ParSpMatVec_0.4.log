>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1202.875 MB free)
Uptime: 14900.0 sec
Load Avg:  1.01025390625  0.9892578125  0.97265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     701057 s       9706 s      58128 s     565693 s         21 s
#2  3500 MHz     483784 s       4947 s      49982 s     904046 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1403	 ParSpMatVec=0.0269	 speedup=5.2199
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1403	 ParSpMatVec=0.0084	 speedup=16.6459
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1403	 ParSpMatVec=0.0141	 speedup=9.9386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1403	 ParSpMatVec=0.0090	 speedup=15.5937
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1403	 ParSpMatVec=0.0096	 speedup=14.6881
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1126	 ParSpMatVec=0.0375	 speedup=3.0007
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1126	 ParSpMatVec=0.0129	 speedup=8.7625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1126	 ParSpMatVec=0.0158	 speedup=7.1335
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1126	 ParSpMatVec=0.0126	 speedup=8.9407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1126	 ParSpMatVec=0.0111	 speedup=10.1594

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0307	 speedup=1.4442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0136	 speedup=3.2671
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0099	 speedup=4.4540
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0114	 speedup=3.8959
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0106	 speedup=4.1928

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0468	 ParSpMatVec=0.0397	 speedup=1.1801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0468	 ParSpMatVec=0.0021	 speedup=22.4394
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0468	 ParSpMatVec=0.0013	 speedup=35.1487
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0468	 ParSpMatVec=0.0017	 speedup=27.4859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0468	 ParSpMatVec=0.0021	 speedup=21.9121

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0435	 speedup=0.2194
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0034	 speedup=2.8047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0023	 speedup=4.1318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0029	 speedup=3.2934
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0027	 speedup=3.5215

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0507	 ParSpMatVec=0.0512	 speedup=0.9905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0507	 ParSpMatVec=0.0045	 speedup=11.2015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0507	 ParSpMatVec=0.0026	 speedup=19.7756
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0507	 ParSpMatVec=0.0029	 speedup=17.6604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0507	 ParSpMatVec=0.0024	 speedup=21.0833

INFO: ParSpMatVec tests passed

>>> End of log
