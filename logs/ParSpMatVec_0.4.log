>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1185.29296875 MB free)
Uptime: 15090.0 sec
Load Avg:  0.90966796875  0.9443359375  0.9755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     749419 s       2074 s      66321 s     530292 s         44 s
#2  3500 MHz     474383 s       4115 s      60108 s     908705 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.18.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1102	 ParSpMatVec=0.0248	 speedup=4.4509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1102	 ParSpMatVec=0.0088	 speedup=12.5022
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1102	 ParSpMatVec=0.0152	 speedup=7.2510
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1102	 ParSpMatVec=0.0135	 speedup=8.1878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1102	 ParSpMatVec=0.0108	 speedup=10.1553
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0868	 ParSpMatVec=0.0387	 speedup=2.2432
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0868	 ParSpMatVec=0.0133	 speedup=6.5241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0868	 ParSpMatVec=0.0202	 speedup=4.2926
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0868	 ParSpMatVec=0.0108	 speedup=8.0599
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0868	 ParSpMatVec=0.0138	 speedup=6.2734

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0487	 ParSpMatVec=0.0284	 speedup=1.7128
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0487	 ParSpMatVec=0.0150	 speedup=3.2403
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0487	 ParSpMatVec=0.0085	 speedup=5.7297
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0487	 ParSpMatVec=0.0100	 speedup=4.8541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0487	 ParSpMatVec=0.0113	 speedup=4.3133

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0441	 ParSpMatVec=0.0390	 speedup=1.1286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0441	 ParSpMatVec=0.0025	 speedup=17.9536
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0441	 ParSpMatVec=0.0038	 speedup=11.4860
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0441	 ParSpMatVec=0.0018	 speedup=24.3806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0441	 ParSpMatVec=0.0016	 speedup=27.1645

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0427	 speedup=0.2095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0038	 speedup=2.3281
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.9234
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0022	 speedup=4.0789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0024	 speedup=3.7396

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0416	 ParSpMatVec=0.0465	 speedup=0.8936
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0416	 ParSpMatVec=0.0039	 speedup=10.5698
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0416	 ParSpMatVec=0.0022	 speedup=19.3323
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0416	 ParSpMatVec=0.0030	 speedup=13.7087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0416	 ParSpMatVec=0.0025	 speedup=16.3520

INFO: ParSpMatVec tests passed

>>> End of log
