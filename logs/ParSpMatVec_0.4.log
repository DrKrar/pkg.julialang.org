>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1195.25 MB free)
Uptime: 15551.0 sec
Load Avg:  0.95166015625  0.97802734375  1.00537109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     745681 s         14 s      60925 s     589486 s         42 s
#2  3503 MHz     467535 s       5502 s      54501 s     981274 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1305	 ParSpMatVec=0.0273	 speedup=4.7853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1305	 ParSpMatVec=0.0085	 speedup=15.3894
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1305	 ParSpMatVec=0.0114	 speedup=11.4101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1305	 ParSpMatVec=0.0124	 speedup=10.4896
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1305	 ParSpMatVec=0.0110	 speedup=11.8677
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1246	 ParSpMatVec=0.0376	 speedup=3.3160
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1246	 ParSpMatVec=0.0137	 speedup=9.0728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1246	 ParSpMatVec=0.0144	 speedup=8.6535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1246	 ParSpMatVec=0.0139	 speedup=8.9847
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1246	 ParSpMatVec=0.0161	 speedup=7.7235

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0511	 ParSpMatVec=0.0331	 speedup=1.5459
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0511	 ParSpMatVec=0.0121	 speedup=4.2183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0511	 ParSpMatVec=0.0141	 speedup=3.6306
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0511	 ParSpMatVec=0.0124	 speedup=4.1168
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0511	 ParSpMatVec=0.0158	 speedup=3.2297

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0410	 speedup=1.0722
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0028	 speedup=15.5615
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0026	 speedup=17.2165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0019	 speedup=22.9971
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0025	 speedup=17.5181

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0491	 speedup=0.1829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0037	 speedup=2.4141
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0074	 speedup=1.2150
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0053	 speedup=1.6868
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0028	 speedup=3.2325

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0530	 ParSpMatVec=0.0518	 speedup=1.0234
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0530	 ParSpMatVec=0.0039	 speedup=13.4695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0530	 ParSpMatVec=0.0039	 speedup=13.5495
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0530	 ParSpMatVec=0.0034	 speedup=15.4015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0530	 ParSpMatVec=0.0200	 speedup=2.6426

INFO: ParSpMatVec tests passed

>>> End of log
