>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1070.359375 MB free)
Uptime: 13012.0 sec
Load Avg:  0.9970703125  0.9853515625  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     592284 s       4202 s      57341 s     484765 s         22 s
#2  3499 MHz     356046 s        277 s      48081 s     840634 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1157	 ParSpMatVec=0.0237	 speedup=4.8815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1157	 ParSpMatVec=0.0075	 speedup=15.3709
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1157	 ParSpMatVec=0.0114	 speedup=10.1150
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1157	 ParSpMatVec=0.0106	 speedup=10.8728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1157	 ParSpMatVec=0.0108	 speedup=10.7338
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1300	 ParSpMatVec=0.0429	 speedup=3.0320
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1300	 ParSpMatVec=0.0112	 speedup=11.6561
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1300	 ParSpMatVec=0.0121	 speedup=10.7609
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1300	 ParSpMatVec=0.0103	 speedup=12.6341
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1300	 ParSpMatVec=0.0099	 speedup=13.1474

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0308	 ParSpMatVec=0.0214	 speedup=1.4382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0308	 ParSpMatVec=0.0117	 speedup=2.6298
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0308	 ParSpMatVec=0.0125	 speedup=2.4628
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0308	 ParSpMatVec=0.0135	 speedup=2.2811
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0308	 ParSpMatVec=0.0147	 speedup=2.0910

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0262	 speedup=1.6094
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0024	 speedup=17.2906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0026	 speedup=16.5089
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0019	 speedup=22.1572
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0018	 speedup=22.9585

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0439	 speedup=0.1951
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0043	 speedup=1.9722
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0039	 speedup=2.2092
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0032	 speedup=2.7073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.6258

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0291	 ParSpMatVec=0.0253	 speedup=1.1530
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0291	 ParSpMatVec=0.0035	 speedup=8.4223
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0291	 ParSpMatVec=0.0021	 speedup=14.0024
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0291	 ParSpMatVec=0.0019	 speedup=15.1998
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0291	 ParSpMatVec=0.0027	 speedup=10.9563

INFO: ParSpMatVec tests passed

>>> End of log
