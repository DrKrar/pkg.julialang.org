>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1167.33203125 MB free)
Uptime: 13088.0 sec
Load Avg:  1.0400390625  1.001953125  0.99560546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     568227 s       3709 s      56972 s     524425 s         27 s
#2  3499 MHz     339603 s       4138 s      49710 s     853380 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0832	 ParSpMatVec=0.0164	 speedup=5.0692
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0832	 ParSpMatVec=0.0091	 speedup=9.1345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0832	 ParSpMatVec=0.0093	 speedup=8.9140
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0832	 ParSpMatVec=0.0091	 speedup=9.1012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0832	 ParSpMatVec=0.0084	 speedup=9.9353
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0739	 ParSpMatVec=0.0248	 speedup=2.9747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0739	 ParSpMatVec=0.0134	 speedup=5.4979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0739	 ParSpMatVec=0.0145	 speedup=5.0961
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0739	 ParSpMatVec=0.0135	 speedup=5.4709
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0739	 ParSpMatVec=0.0157	 speedup=4.7185

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0378	 ParSpMatVec=0.0295	 speedup=1.2842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0378	 ParSpMatVec=0.0129	 speedup=2.9254
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0378	 ParSpMatVec=0.0153	 speedup=2.4754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0378	 ParSpMatVec=0.0135	 speedup=2.8077
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0378	 ParSpMatVec=0.0139	 speedup=2.7307

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0398	 ParSpMatVec=0.0358	 speedup=1.1108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0398	 ParSpMatVec=0.0017	 speedup=24.0757
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0398	 ParSpMatVec=0.0031	 speedup=12.6801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0398	 ParSpMatVec=0.0017	 speedup=22.8325
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0398	 ParSpMatVec=0.0014	 speedup=29.4523

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0410	 speedup=0.1993
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0044	 speedup=1.8656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.9591
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0027	 speedup=3.0600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0027	 speedup=2.9761

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0505	 speedup=0.9284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0042	 speedup=11.1691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0044	 speedup=10.5458
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0031	 speedup=15.2929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0023	 speedup=19.9831

INFO: ParSpMatVec tests passed

>>> End of log
