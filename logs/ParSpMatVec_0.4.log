>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.0703125 MB free)
Uptime: 15479.0 sec
Load Avg:  0.94921875  0.998046875  1.0302734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     748154 s         59 s      58206 s     576669 s         21 s
#2  3499 MHz     456924 s         96 s      49538 s     987907 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0840	 ParSpMatVec=0.0266	 speedup=3.1609
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0840	 ParSpMatVec=0.0097	 speedup=8.6653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0840	 ParSpMatVec=0.0147	 speedup=5.7360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0840	 ParSpMatVec=0.0093	 speedup=9.0685
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0840	 ParSpMatVec=0.0107	 speedup=7.8407
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1203	 ParSpMatVec=0.0412	 speedup=2.9204
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1203	 ParSpMatVec=0.0145	 speedup=8.3138
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1203	 ParSpMatVec=0.0090	 speedup=13.4302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1203	 ParSpMatVec=0.0102	 speedup=11.7998
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1203	 ParSpMatVec=0.0109	 speedup=11.0532

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0294	 ParSpMatVec=0.0290	 speedup=1.0123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0294	 ParSpMatVec=0.0134	 speedup=2.1980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0294	 ParSpMatVec=0.0095	 speedup=3.0815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0294	 ParSpMatVec=0.0101	 speedup=2.9104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0294	 ParSpMatVec=0.0105	 speedup=2.8006

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0411	 ParSpMatVec=0.0399	 speedup=1.0308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0411	 ParSpMatVec=0.0035	 speedup=11.8918
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0411	 ParSpMatVec=0.0015	 speedup=26.9016
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0411	 ParSpMatVec=0.0017	 speedup=24.5544
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0411	 ParSpMatVec=0.0022	 speedup=18.7912

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0432	 speedup=0.1856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0036	 speedup=2.2252
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0024	 speedup=3.2776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0024	 speedup=3.3867
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0033	 speedup=2.4006

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0491	 ParSpMatVec=0.0461	 speedup=1.0648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0491	 ParSpMatVec=0.0037	 speedup=13.4290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0491	 ParSpMatVec=0.0024	 speedup=20.8447
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0491	 ParSpMatVec=0.0025	 speedup=19.3150
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0491	 ParSpMatVec=0.0033	 speedup=14.8095

INFO: ParSpMatVec tests passed

>>> End of log
