>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.64453125 MB free)
Uptime: 15776.0 sec
Load Avg:  0.97021484375  0.99462890625  0.97705078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     756786 s         72 s      61040 s     606210 s         21 s
#2  3499 MHz     489428 s       6234 s      52981 s     979267 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0830	 ParSpMatVec=0.0160	 speedup=5.1946
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0830	 ParSpMatVec=0.0055	 speedup=15.1890
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0830	 ParSpMatVec=0.0094	 speedup=8.8614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0830	 ParSpMatVec=0.0080	 speedup=10.3170
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0830	 ParSpMatVec=0.0065	 speedup=12.8230
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1143	 ParSpMatVec=0.0374	 speedup=3.0572
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1143	 ParSpMatVec=0.0127	 speedup=9.0097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1143	 ParSpMatVec=0.0146	 speedup=7.8443
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1143	 ParSpMatVec=0.0129	 speedup=8.8598
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1143	 ParSpMatVec=0.0131	 speedup=8.7208

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0288	 speedup=1.4611
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0125	 speedup=3.3624
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0144	 speedup=2.9300
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0094	 speedup=4.4825
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0097	 speedup=4.3284

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0384	 ParSpMatVec=0.0248	 speedup=1.5453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0384	 ParSpMatVec=0.0025	 speedup=15.1199
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0384	 ParSpMatVec=0.0021	 speedup=18.1486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0384	 ParSpMatVec=0.0015	 speedup=26.3329
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0384	 ParSpMatVec=0.0017	 speedup=23.2260

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0252	 speedup=0.3582
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0021	 speedup=4.3464
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0022	 speedup=4.1891
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0027	 speedup=3.3946
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0023	 speedup=3.9858

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0264	 ParSpMatVec=0.0255	 speedup=1.0351
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0264	 ParSpMatVec=0.0028	 speedup=9.5166
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0264	 ParSpMatVec=0.0020	 speedup=13.1377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0264	 ParSpMatVec=0.0027	 speedup=9.7610
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0264	 ParSpMatVec=0.0026	 speedup=10.1793

INFO: ParSpMatVec tests passed

>>> End of log
