>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1320	 ParSpMatVec=0.0160	 speedup=8.2675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1320	 ParSpMatVec=0.0081	 speedup=16.2370
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1320	 ParSpMatVec=0.0118	 speedup=11.1996
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1320	 ParSpMatVec=0.0101	 speedup=13.1260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1320	 ParSpMatVec=0.0133	 speedup=9.9127
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0844	 ParSpMatVec=0.0263	 speedup=3.2070
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0844	 ParSpMatVec=0.0135	 speedup=6.2713
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0844	 ParSpMatVec=0.0144	 speedup=5.8675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0844	 ParSpMatVec=0.0132	 speedup=6.4061
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0844	 ParSpMatVec=0.0126	 speedup=6.7216

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0300	 ParSpMatVec=0.0180	 speedup=1.6735
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0300	 ParSpMatVec=0.0112	 speedup=2.6709
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0300	 ParSpMatVec=0.0119	 speedup=2.5147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0300	 ParSpMatVec=0.0128	 speedup=2.3521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0300	 ParSpMatVec=0.0148	 speedup=2.0359

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0378	 speedup=1.1945
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0023	 speedup=19.3668
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0021	 speedup=21.6069
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0016	 speedup=27.7300
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0020	 speedup=23.0966

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0103	 ParSpMatVec=0.0287	 speedup=0.3594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0103	 ParSpMatVec=0.0031	 speedup=3.3567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0103	 ParSpMatVec=0.0018	 speedup=5.5834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0103	 ParSpMatVec=0.0034	 speedup=3.0372
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0103	 ParSpMatVec=0.0023	 speedup=4.3999

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0312	 ParSpMatVec=0.0286	 speedup=1.0900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0312	 ParSpMatVec=0.0032	 speedup=9.7573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0312	 ParSpMatVec=0.0019	 speedup=16.5487
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0312	 ParSpMatVec=0.0021	 speedup=14.7348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0312	 ParSpMatVec=0.0024	 speedup=12.7593

INFO: ParSpMatVec tests passed

>>> End of log
