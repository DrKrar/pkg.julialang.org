>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1174.00390625 MB free)
Uptime: 15850.0 sec
Load Avg:  0.92724609375  0.96923828125  0.958984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     588545 s       8224 s      64853 s     682268 s        182 s
#2  3499 MHz     430154 s       1431 s      57624 s     931946 s          5 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1398	 ParSpMatVec=0.0163	 speedup=8.5870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1398	 ParSpMatVec=0.0088	 speedup=15.8557
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1398	 ParSpMatVec=0.0116	 speedup=12.0667
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1398	 ParSpMatVec=0.0109	 speedup=12.8166
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1398	 ParSpMatVec=0.0081	 speedup=17.3143
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0700	 ParSpMatVec=0.0396	 speedup=1.7670
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0700	 ParSpMatVec=0.0127	 speedup=5.5151
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0700	 ParSpMatVec=0.0141	 speedup=4.9512
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0700	 ParSpMatVec=0.0137	 speedup=5.0934
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0700	 ParSpMatVec=0.0157	 speedup=4.4584

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0299	 speedup=1.6351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0110	 speedup=4.4190
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0150	 speedup=3.2485
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0138	 speedup=3.5383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0136	 speedup=3.5785

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0452	 speedup=0.9539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0035	 speedup=12.3097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0031	 speedup=13.9300
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0018	 speedup=24.2285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0014	 speedup=30.5958

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0319	 speedup=0.2940
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0036	 speedup=2.5988
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0032	 speedup=2.9162
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0034	 speedup=2.7894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0036	 speedup=2.6165

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0271	 speedup=1.6121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0049	 speedup=8.8324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0017	 speedup=25.8628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0022	 speedup=19.6790
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0021	 speedup=20.9150

INFO: ParSpMatVec tests passed

>>> End of log
