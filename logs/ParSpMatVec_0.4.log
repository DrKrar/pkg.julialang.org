>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1059.0703125 MB free)
Uptime: 13812.0 sec
Load Avg:  0.9189453125  0.96044921875  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     574387 s       2614 s      63326 s     580513 s         22 s
#2  3500 MHz     422431 s       5387 s      54344 s     829896 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1366	 ParSpMatVec=0.0274	 speedup=4.9867
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1366	 ParSpMatVec=0.0090	 speedup=15.1161
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1366	 ParSpMatVec=0.0111	 speedup=12.2744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1366	 ParSpMatVec=0.0073	 speedup=18.6456
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1366	 ParSpMatVec=0.0111	 speedup=12.3532
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1313	 ParSpMatVec=0.0430	 speedup=3.0574
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1313	 ParSpMatVec=0.0137	 speedup=9.5559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1313	 ParSpMatVec=0.0166	 speedup=7.9033
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1313	 ParSpMatVec=0.0155	 speedup=8.4595
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1313	 ParSpMatVec=0.0143	 speedup=9.2107

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0276	 speedup=1.7183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0138	 speedup=3.4272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0144	 speedup=3.2968
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0194	 speedup=2.4400
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0159	 speedup=2.9779

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0395	 ParSpMatVec=0.0373	 speedup=1.0601
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0395	 ParSpMatVec=0.0029	 speedup=13.4154
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0395	 ParSpMatVec=0.0026	 speedup=14.9728
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0395	 ParSpMatVec=0.0020	 speedup=19.3006
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0395	 ParSpMatVec=0.0018	 speedup=21.7888

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0418	 speedup=0.1991
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0038	 speedup=2.1734
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0030	 speedup=2.8071
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0027	 speedup=3.0578
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0032	 speedup=2.6104

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0463	 speedup=1.0117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0028	 speedup=16.5928
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0160	 speedup=2.9386
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0039	 speedup=11.8823
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0258	 speedup=1.8193

INFO: ParSpMatVec tests passed

>>> End of log
