>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1206.69921875 MB free)
Uptime: 16548.0 sec
Load Avg:  0.9189453125  0.98193359375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     725119 s       6792 s      61578 s     683767 s         34 s
#2  3500 MHz     471394 s         94 s      55132 s    1060557 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1331	 ParSpMatVec=0.0501	 speedup=2.6580
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1331	 ParSpMatVec=0.0088	 speedup=15.2088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1331	 ParSpMatVec=0.0117	 speedup=11.4274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1331	 ParSpMatVec=0.0171	 speedup=7.7786
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1331	 ParSpMatVec=0.0106	 speedup=12.6169
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1198	 ParSpMatVec=0.0414	 speedup=2.8913
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1198	 ParSpMatVec=0.0173	 speedup=6.9064
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1198	 ParSpMatVec=0.0145	 speedup=8.2473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1198	 ParSpMatVec=0.0124	 speedup=9.6504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1198	 ParSpMatVec=0.0131	 speedup=9.1485

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0292	 speedup=1.5744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0134	 speedup=3.4316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0143	 speedup=3.2203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0197	 speedup=2.3319
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0144	 speedup=3.2036

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0515	 ParSpMatVec=0.0442	 speedup=1.1655
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0515	 ParSpMatVec=0.0015	 speedup=33.4585
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0515	 ParSpMatVec=0.0035	 speedup=14.6122
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0515	 ParSpMatVec=0.0029	 speedup=17.4676
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0515	 ParSpMatVec=0.0014	 speedup=35.8725

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0241	 ParSpMatVec=0.0465	 speedup=0.5183
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0241	 ParSpMatVec=0.0037	 speedup=6.4921
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0241	 ParSpMatVec=0.0020	 speedup=12.0042
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0241	 ParSpMatVec=0.0020	 speedup=12.2057
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0241	 ParSpMatVec=0.0031	 speedup=7.7514

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0344	 ParSpMatVec=0.0300	 speedup=1.1477
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0344	 ParSpMatVec=0.0031	 speedup=11.0282
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0344	 ParSpMatVec=0.0016	 speedup=21.2833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0344	 ParSpMatVec=0.0049	 speedup=7.0488
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0344	 ParSpMatVec=0.0030	 speedup=11.2896

INFO: ParSpMatVec tests passed

>>> End of log
