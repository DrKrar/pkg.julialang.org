>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/lruthotto/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.3
Commit a2f713d (2016-01-12 21:37 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0728	 ParSpMatVec=0.0163	 speedup=4.4568
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0728	 ParSpMatVec=0.0060	 speedup=12.2003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0728	 ParSpMatVec=0.0079	 speedup=9.2367
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0728	 ParSpMatVec=0.0043	 speedup=16.7592
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0728	 ParSpMatVec=0.0097	 speedup=7.4958
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0692	 ParSpMatVec=0.0244	 speedup=2.8311
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0692	 ParSpMatVec=0.0116	 speedup=5.9783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0692	 ParSpMatVec=0.0134	 speedup=5.1494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0692	 ParSpMatVec=0.0110	 speedup=6.2764
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0692	 ParSpMatVec=0.0096	 speedup=7.1791

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0280	 ParSpMatVec=0.0215	 speedup=1.3038
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0280	 ParSpMatVec=0.0129	 speedup=2.1800
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0280	 ParSpMatVec=0.0137	 speedup=2.0488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0280	 ParSpMatVec=0.0115	 speedup=2.4368
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0280	 ParSpMatVec=0.0129	 speedup=2.1700

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0332	 ParSpMatVec=0.0223	 speedup=1.4879
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0332	 ParSpMatVec=0.0017	 speedup=19.3989
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0332	 ParSpMatVec=0.0014	 speedup=23.9815
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0332	 ParSpMatVec=0.0011	 speedup=30.3473
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0332	 ParSpMatVec=0.0014	 speedup=23.7150

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0410	 speedup=0.1631
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0030	 speedup=2.2355
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0019	 speedup=3.6109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0022	 speedup=3.0092
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0019	 speedup=3.4973

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0289	 ParSpMatVec=0.0358	 speedup=0.8057
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0289	 ParSpMatVec=0.0031	 speedup=9.3649
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0289	 ParSpMatVec=0.0019	 speedup=15.1853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0289	 ParSpMatVec=0.0020	 speedup=14.2790
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0289	 ParSpMatVec=0.0025	 speedup=11.4306

INFO: ParSpMatVec tests passed

>>> End of log
