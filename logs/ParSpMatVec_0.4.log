>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1184.41015625 MB free)
Uptime: 13125.0 sec
Load Avg:  0.96484375  0.998046875  1.00048828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     532590 s       2654 s      49534 s     575475 s         30 s
#2  3499 MHz     340530 s       4263 s      41604 s     859212 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0950	 ParSpMatVec=0.0245	 speedup=3.8813
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0950	 ParSpMatVec=0.0088	 speedup=10.7700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0950	 ParSpMatVec=0.0112	 speedup=8.4757
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0950	 ParSpMatVec=0.0096	 speedup=9.8690
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0950	 ParSpMatVec=0.0135	 speedup=7.0431
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1322	 ParSpMatVec=0.0435	 speedup=3.0420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1322	 ParSpMatVec=0.0130	 speedup=10.1735
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1322	 ParSpMatVec=0.0153	 speedup=8.6279
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1322	 ParSpMatVec=0.0129	 speedup=10.2157
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1322	 ParSpMatVec=0.0166	 speedup=7.9696

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0294	 speedup=1.6496
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0142	 speedup=3.4222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0146	 speedup=3.3163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0157	 speedup=3.0909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0157	 speedup=3.0901

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0391	 speedup=1.0957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0024	 speedup=17.6296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0026	 speedup=16.4176
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0038	 speedup=11.2721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0026	 speedup=16.4093

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0054	 ParSpMatVec=0.0486	 speedup=0.1115
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0054	 ParSpMatVec=0.0036	 speedup=1.4936
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0054	 ParSpMatVec=0.0022	 speedup=2.4852
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0054	 ParSpMatVec=0.0023	 speedup=2.3972
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0054	 ParSpMatVec=0.0018	 speedup=3.0544

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0516	 speedup=0.9129
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0058	 speedup=8.1794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0026	 speedup=18.0124
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0060	 speedup=7.9032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0023	 speedup=20.5972

INFO: ParSpMatVec tests passed

>>> End of log
