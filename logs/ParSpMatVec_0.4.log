>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1177.80859375 MB free)
Uptime: 13249.0 sec
Load Avg:  0.84765625  0.93310546875  0.94677734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz     586125 s        107 s      47548 s     520265 s         17 s
#2  3507 MHz     341020 s         38 s      39184 s     878968 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1252	 ParSpMatVec=0.0156	 speedup=8.0466
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1252	 ParSpMatVec=0.0082	 speedup=15.2657
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1252	 ParSpMatVec=0.0115	 speedup=10.8745
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1252	 ParSpMatVec=0.0095	 speedup=13.2034
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1252	 ParSpMatVec=0.0075	 speedup=16.6954
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0712	 ParSpMatVec=0.0261	 speedup=2.7301
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0712	 ParSpMatVec=0.0142	 speedup=5.0332
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0712	 ParSpMatVec=0.0140	 speedup=5.0925
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0712	 ParSpMatVec=0.0126	 speedup=5.6594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0712	 ParSpMatVec=0.0128	 speedup=5.5813

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0200	 speedup=2.2123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0128	 speedup=3.4769
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0139	 speedup=3.1786
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0125	 speedup=3.5413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0143	 speedup=3.0928

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0340	 ParSpMatVec=0.0389	 speedup=0.8749
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0340	 ParSpMatVec=0.0025	 speedup=13.4802
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0340	 ParSpMatVec=0.0024	 speedup=13.9702
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0340	 ParSpMatVec=0.0015	 speedup=22.4677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0340	 ParSpMatVec=0.0018	 speedup=19.0315

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0292	 speedup=0.2915
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0040	 speedup=2.1462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0022	 speedup=3.8266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0023	 speedup=3.6600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0018	 speedup=4.6686

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0332	 ParSpMatVec=0.0383	 speedup=0.8670
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0332	 ParSpMatVec=0.0037	 speedup=9.0203
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0332	 ParSpMatVec=0.0024	 speedup=13.7655
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0332	 ParSpMatVec=0.0033	 speedup=9.9303
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0332	 ParSpMatVec=0.0032	 speedup=10.3205

INFO: ParSpMatVec tests passed

>>> End of log
