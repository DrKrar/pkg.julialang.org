>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1033	 ParSpMatVec=0.0173	 speedup=5.9685
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1033	 ParSpMatVec=0.0092	 speedup=11.2045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1033	 ParSpMatVec=0.0122	 speedup=8.4889
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1033	 ParSpMatVec=0.0122	 speedup=8.4958
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1033	 ParSpMatVec=0.0119	 speedup=8.6483
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1508	 ParSpMatVec=0.0426	 speedup=3.5438
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1508	 ParSpMatVec=0.0129	 speedup=11.7253
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1508	 ParSpMatVec=0.0148	 speedup=10.2131
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1508	 ParSpMatVec=0.0123	 speedup=12.2469
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1508	 ParSpMatVec=0.0164	 speedup=9.2242

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0319	 ParSpMatVec=0.0225	 speedup=1.4157
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0319	 ParSpMatVec=0.0135	 speedup=2.3611
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0319	 ParSpMatVec=0.0193	 speedup=1.6542
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0319	 ParSpMatVec=0.0137	 speedup=2.3277
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0319	 ParSpMatVec=0.0168	 speedup=1.8969

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0394	 ParSpMatVec=0.0355	 speedup=1.1109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0394	 ParSpMatVec=0.0027	 speedup=14.4812
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0394	 ParSpMatVec=0.0017	 speedup=23.7459
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0394	 ParSpMatVec=0.0022	 speedup=17.9381
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0394	 ParSpMatVec=0.0021	 speedup=18.4781

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0428	 speedup=0.2093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0036	 speedup=2.4789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0024	 speedup=3.7844
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0023	 speedup=3.8816
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0032	 speedup=2.8190

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0286	 ParSpMatVec=0.0489	 speedup=0.5853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0286	 ParSpMatVec=0.0037	 speedup=7.7292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0286	 ParSpMatVec=0.0024	 speedup=11.9175
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0286	 ParSpMatVec=0.0025	 speedup=11.3437
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0286	 ParSpMatVec=0.0022	 speedup=12.8683

INFO: ParSpMatVec tests passed

>>> End of log
