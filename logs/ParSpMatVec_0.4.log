>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1164.32421875 MB free)
Uptime: 12992.0 sec
Load Avg:  1.17041015625  1.04443359375  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     540454 s       1243 s      60566 s     544386 s         30 s
#2  3500 MHz     352205 s       5345 s      53470 s     802660 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1358	 ParSpMatVec=0.0207	 speedup=6.5719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1358	 ParSpMatVec=0.0092	 speedup=14.6963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1358	 ParSpMatVec=0.0126	 speedup=10.7687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1358	 ParSpMatVec=0.0139	 speedup=9.7961
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1358	 ParSpMatVec=0.0047	 speedup=28.9052
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0827	 ParSpMatVec=0.0412	 speedup=2.0083
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0827	 ParSpMatVec=0.0136	 speedup=6.0942
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0827	 ParSpMatVec=0.0143	 speedup=5.7738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0827	 ParSpMatVec=0.0132	 speedup=6.2811
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0827	 ParSpMatVec=0.0161	 speedup=5.1264

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0395	 ParSpMatVec=0.0170	 speedup=2.3191
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0395	 ParSpMatVec=0.0115	 speedup=3.4331
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0395	 ParSpMatVec=0.0142	 speedup=2.7853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0395	 ParSpMatVec=0.0176	 speedup=2.2413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0395	 ParSpMatVec=0.0154	 speedup=2.5704

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0530	 speedup=0.8521
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0031	 speedup=14.7528
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0020	 speedup=22.5039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0022	 speedup=20.9838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0018	 speedup=25.6691

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0433	 speedup=0.1947
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0032	 speedup=2.6635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0029	 speedup=2.8925
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0026	 speedup=3.2700
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0027	 speedup=3.0757

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0275	 speedup=1.6478
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0041	 speedup=10.9573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0016	 speedup=27.6027
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0024	 speedup=19.0109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0026	 speedup=17.1623

INFO: ParSpMatVec tests passed

>>> End of log
