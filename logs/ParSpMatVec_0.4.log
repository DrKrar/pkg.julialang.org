>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1064.0234375 MB free)
Uptime: 14321.0 sec
Load Avg:  1.08544921875  1.03076171875  0.99755859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     628800 s         54 s      59679 s     570821 s         25 s
#2  3499 MHz     382205 s       5394 s      52324 s     916801 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1288	 ParSpMatVec=0.0237	 speedup=5.4341
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1288	 ParSpMatVec=0.0091	 speedup=14.1314
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1288	 ParSpMatVec=0.0122	 speedup=10.5409
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1288	 ParSpMatVec=0.0290	 speedup=4.4433
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1288	 ParSpMatVec=0.0061	 speedup=20.9707
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1376	 ParSpMatVec=0.0412	 speedup=3.3352
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1376	 ParSpMatVec=0.0131	 speedup=10.5366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1376	 ParSpMatVec=0.0081	 speedup=17.0103
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1376	 ParSpMatVec=0.0098	 speedup=14.0301
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1376	 ParSpMatVec=0.0099	 speedup=13.9350

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0448	 ParSpMatVec=0.0283	 speedup=1.5849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0448	 ParSpMatVec=0.0130	 speedup=3.4352
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0448	 ParSpMatVec=0.0077	 speedup=5.8467
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0448	 ParSpMatVec=0.0097	 speedup=4.6250
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0448	 ParSpMatVec=0.0142	 speedup=3.1502

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0411	 speedup=1.0375
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0026	 speedup=16.3606
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0016	 speedup=27.2524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0020	 speedup=21.4473
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0017	 speedup=25.0335

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0417	 speedup=0.1813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0038	 speedup=1.9684
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0021	 speedup=3.6586
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0023	 speedup=3.3300
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0022	 speedup=3.3562

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0470	 ParSpMatVec=0.0491	 speedup=0.9575
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0470	 ParSpMatVec=0.0038	 speedup=12.2244
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0470	 ParSpMatVec=0.0021	 speedup=22.5467
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0470	 ParSpMatVec=0.0435	 speedup=1.0801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0470	 ParSpMatVec=0.0032	 speedup=14.4876

INFO: ParSpMatVec tests passed

>>> End of log
