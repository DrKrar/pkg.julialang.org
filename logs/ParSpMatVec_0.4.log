>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1138	 ParSpMatVec=0.0185	 speedup=6.1625
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1138	 ParSpMatVec=0.0101	 speedup=11.2167
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1138	 ParSpMatVec=0.0122	 speedup=9.2984
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1138	 ParSpMatVec=0.0110	 speedup=10.3638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1138	 ParSpMatVec=0.0095	 speedup=11.9354
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1273	 ParSpMatVec=0.0545	 speedup=2.3385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1273	 ParSpMatVec=0.0125	 speedup=10.2104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1273	 ParSpMatVec=0.0150	 speedup=8.4723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1273	 ParSpMatVec=0.0139	 speedup=9.1528
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1273	 ParSpMatVec=0.0138	 speedup=9.1985

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0336	 ParSpMatVec=0.0303	 speedup=1.1095
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0336	 ParSpMatVec=0.0132	 speedup=2.5430
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0336	 ParSpMatVec=0.0134	 speedup=2.5115
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0336	 ParSpMatVec=0.0127	 speedup=2.6455
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0336	 ParSpMatVec=0.0189	 speedup=1.7825

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0489	 ParSpMatVec=0.0278	 speedup=1.7571
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0489	 ParSpMatVec=0.0025	 speedup=19.6986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0489	 ParSpMatVec=0.0025	 speedup=19.6788
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0489	 ParSpMatVec=0.0054	 speedup=9.0437
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0489	 ParSpMatVec=0.0022	 speedup=21.8451

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0452	 speedup=0.1778
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0032	 speedup=2.4938
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0036	 speedup=2.2055
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0024	 speedup=3.4014
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0025	 speedup=3.1634

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0423	 speedup=1.0685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0040	 speedup=11.3391
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0020	 speedup=22.0712
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0024	 speedup=19.1445
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0018	 speedup=24.8553

INFO: ParSpMatVec tests passed

>>> End of log
