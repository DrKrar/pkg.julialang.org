>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1156.9140625 MB free)
Uptime: 12684.0 sec
Load Avg:  1.0966796875  1.01611328125  1.037109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     562593 s       3564 s      60293 s     489514 s         34 s
#2  3499 MHz     337488 s        222 s      51943 s     796021 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0937	 ParSpMatVec=0.0281	 speedup=3.3345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0937	 ParSpMatVec=0.0094	 speedup=9.9853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0937	 ParSpMatVec=0.0122	 speedup=7.6531
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0937	 ParSpMatVec=0.0097	 speedup=9.6694
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0937	 ParSpMatVec=0.0093	 speedup=10.0977
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0873	 ParSpMatVec=0.0269	 speedup=3.2393
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0873	 ParSpMatVec=0.0122	 speedup=7.1485
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0873	 ParSpMatVec=0.0142	 speedup=6.1407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0873	 ParSpMatVec=0.0130	 speedup=6.7093
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0873	 ParSpMatVec=0.0137	 speedup=6.3616

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0323	 ParSpMatVec=0.0194	 speedup=1.6661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0323	 ParSpMatVec=0.0110	 speedup=2.9507
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0323	 ParSpMatVec=0.0155	 speedup=2.0891
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0323	 ParSpMatVec=0.0131	 speedup=2.4655
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0323	 ParSpMatVec=0.0159	 speedup=2.0324

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0332	 ParSpMatVec=0.0240	 speedup=1.3807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0332	 ParSpMatVec=0.0019	 speedup=17.6789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0332	 ParSpMatVec=0.0023	 speedup=14.4581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0332	 ParSpMatVec=0.0019	 speedup=17.2526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0332	 ParSpMatVec=0.0019	 speedup=17.3444

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0403	 speedup=0.1964
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0035	 speedup=2.2826
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0026	 speedup=3.0362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0028	 speedup=2.8699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0026	 speedup=3.0544

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0292	 ParSpMatVec=0.0288	 speedup=1.0140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0292	 ParSpMatVec=0.0039	 speedup=7.5105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0292	 ParSpMatVec=0.0023	 speedup=12.9164
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0292	 ParSpMatVec=0.0024	 speedup=11.9794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0292	 ParSpMatVec=0.0030	 speedup=9.6891

INFO: ParSpMatVec tests passed

>>> End of log
