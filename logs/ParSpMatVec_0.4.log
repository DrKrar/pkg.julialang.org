>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1185.20703125 MB free)
Uptime: 13706.0 sec
Load Avg:  0.962890625  0.98388671875  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3498 MHz     626012 s       2334 s      54270 s     557494 s         22 s
#2  3498 MHz     409476 s       4394 s      46385 s     871174 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1327	 ParSpMatVec=0.0150	 speedup=8.8653
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1327	 ParSpMatVec=0.0094	 speedup=14.1053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1327	 ParSpMatVec=0.0124	 speedup=10.7267
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1327	 ParSpMatVec=0.0099	 speedup=13.3562
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1327	 ParSpMatVec=0.0073	 speedup=18.1417
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1207	 ParSpMatVec=0.0431	 speedup=2.7974
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1207	 ParSpMatVec=0.0132	 speedup=9.1514
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1207	 ParSpMatVec=0.0160	 speedup=7.5232
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1207	 ParSpMatVec=0.0135	 speedup=8.9669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1207	 ParSpMatVec=0.0196	 speedup=6.1542

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0302	 speedup=1.3547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0136	 speedup=2.9988
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0150	 speedup=2.7318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0129	 speedup=3.1739
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0104	 speedup=3.9134

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0332	 speedup=1.3120
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0030	 speedup=14.7011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0026	 speedup=16.9809
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0022	 speedup=20.2393
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0015	 speedup=30.0324

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0267	 speedup=0.3093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0029	 speedup=2.8683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0018	 speedup=4.5900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0025	 speedup=3.2674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0029	 speedup=2.8626

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0254	 speedup=1.6573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0025	 speedup=16.9919
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0019	 speedup=22.7597
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0022	 speedup=19.4033
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0021	 speedup=19.8751

INFO: ParSpMatVec tests passed

>>> End of log
