>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1171.28515625 MB free)
Uptime: 13621.0 sec
Load Avg:  1.06298828125  1.037109375  0.98828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     656784 s       5036 s      61805 s     499674 s         28 s
#2  3500 MHz     437733 s       1505 s      56006 s     825581 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1511	 ParSpMatVec=0.0276	 speedup=5.4829
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1511	 ParSpMatVec=0.0087	 speedup=17.3980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1511	 ParSpMatVec=0.0122	 speedup=12.4148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1511	 ParSpMatVec=0.0087	 speedup=17.3440
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1511	 ParSpMatVec=0.0093	 speedup=16.3259
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1262	 ParSpMatVec=0.0443	 speedup=2.8503
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1262	 ParSpMatVec=0.0138	 speedup=9.1673
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1262	 ParSpMatVec=0.0085	 speedup=14.8234
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1262	 ParSpMatVec=0.0136	 speedup=9.2956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1262	 ParSpMatVec=0.0092	 speedup=13.6609

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0463	 ParSpMatVec=0.0307	 speedup=1.5071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0463	 ParSpMatVec=0.0137	 speedup=3.3931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0463	 ParSpMatVec=0.0083	 speedup=5.5757
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0463	 ParSpMatVec=0.0111	 speedup=4.1605
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0463	 ParSpMatVec=0.0106	 speedup=4.3547

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0443	 speedup=1.0226
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0023	 speedup=19.8576
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0016	 speedup=28.3730
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0018	 speedup=25.4260
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0020	 speedup=22.5768

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0098	 ParSpMatVec=0.0521	 speedup=0.1877
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0098	 ParSpMatVec=0.0049	 speedup=2.0140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0098	 ParSpMatVec=0.0024	 speedup=4.1428
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0098	 ParSpMatVec=0.0022	 speedup=4.4733
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0098	 ParSpMatVec=0.0038	 speedup=2.5652

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0484	 ParSpMatVec=0.0488	 speedup=0.9906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0484	 ParSpMatVec=0.0040	 speedup=12.0268
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0484	 ParSpMatVec=0.0042	 speedup=11.6010
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0484	 ParSpMatVec=0.0034	 speedup=14.1973
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0484	 ParSpMatVec=0.0343	 speedup=1.4102

INFO: ParSpMatVec tests passed

>>> End of log
