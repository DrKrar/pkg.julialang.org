>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1206.27734375 MB free)
Uptime: 15399.0 sec
Load Avg:  1.51953125  1.107421875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     748207 s       2093 s      58493 s     568663 s         27 s
#2  3500 MHz     447714 s       4673 s      50449 s     990237 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1472	 ParSpMatVec=0.0181	 speedup=8.1147
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1472	 ParSpMatVec=0.0092	 speedup=16.0229
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1472	 ParSpMatVec=0.0117	 speedup=12.5446
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1472	 ParSpMatVec=0.0080	 speedup=18.4586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1472	 ParSpMatVec=0.0070	 speedup=21.0743
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0982	 ParSpMatVec=0.0252	 speedup=3.9017
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0982	 ParSpMatVec=0.0134	 speedup=7.3061
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0982	 ParSpMatVec=0.0079	 speedup=12.3822
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0982	 ParSpMatVec=0.0093	 speedup=10.5398
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0982	 ParSpMatVec=0.0083	 speedup=11.8864

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0418	 ParSpMatVec=0.0268	 speedup=1.5590
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0418	 ParSpMatVec=0.0131	 speedup=3.1848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0418	 ParSpMatVec=0.0195	 speedup=2.1476
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0418	 ParSpMatVec=0.0141	 speedup=2.9642
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0418	 ParSpMatVec=0.0147	 speedup=2.8353

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0414	 speedup=1.1647
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0016	 speedup=29.5136
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0020	 speedup=23.5219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0024	 speedup=20.1711
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0021	 speedup=23.3630

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0486	 speedup=0.1696
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0035	 speedup=2.3709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0026	 speedup=3.1721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0023	 speedup=3.5107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0024	 speedup=3.3840

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0465	 ParSpMatVec=0.0450	 speedup=1.0322
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0465	 ParSpMatVec=0.0046	 speedup=10.1117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0465	 ParSpMatVec=0.0018	 speedup=25.5459
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0465	 ParSpMatVec=0.0028	 speedup=16.9025
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0465	 ParSpMatVec=0.0022	 speedup=21.2389

INFO: ParSpMatVec tests passed

>>> End of log
