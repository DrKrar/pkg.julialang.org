>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.56640625 MB free)
Uptime: 16240.0 sec
Load Avg:  1.04541015625  0.98828125  0.99658203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3507 MHz     739748 s       4880 s      64155 s     661039 s         30 s
#2  3507 MHz     523180 s       3009 s      59570 s     985307 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0883	 ParSpMatVec=0.0183	 speedup=4.8207
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0883	 ParSpMatVec=0.0137	 speedup=6.4566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0883	 ParSpMatVec=0.0132	 speedup=6.7014
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0883	 ParSpMatVec=0.0150	 speedup=5.8902
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0883	 ParSpMatVec=0.0103	 speedup=8.5367
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1205	 ParSpMatVec=0.0283	 speedup=4.2561
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1205	 ParSpMatVec=0.0130	 speedup=9.3056
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1205	 ParSpMatVec=0.0077	 speedup=15.6382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1205	 ParSpMatVec=0.0208	 speedup=5.7970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1205	 ParSpMatVec=0.0125	 speedup=9.6086

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0328	 ParSpMatVec=0.0213	 speedup=1.5410
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0328	 ParSpMatVec=0.0127	 speedup=2.5779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0328	 ParSpMatVec=0.0138	 speedup=2.3693
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0328	 ParSpMatVec=0.0123	 speedup=2.6754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0328	 ParSpMatVec=0.0121	 speedup=2.7152

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0389	 speedup=1.1079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0025	 speedup=16.9695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0034	 speedup=12.8532
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0020	 speedup=21.7208
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0029	 speedup=14.8403

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0100	 ParSpMatVec=0.0443	 speedup=0.2265
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0100	 ParSpMatVec=0.0036	 speedup=2.8032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0100	 ParSpMatVec=0.0041	 speedup=2.4330
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0100	 ParSpMatVec=0.0037	 speedup=2.7186
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0100	 ParSpMatVec=0.0046	 speedup=2.1794

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0517	 ParSpMatVec=0.0490	 speedup=1.0555
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0517	 ParSpMatVec=0.0039	 speedup=13.3493
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0517	 ParSpMatVec=0.0051	 speedup=10.0944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0517	 ParSpMatVec=0.0053	 speedup=9.6884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0517	 ParSpMatVec=0.0018	 speedup=29.4516

INFO: ParSpMatVec tests passed

>>> End of log
