>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1154	 ParSpMatVec=0.0159	 speedup=7.2725
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1154	 ParSpMatVec=0.0089	 speedup=12.9009
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1154	 ParSpMatVec=0.0093	 speedup=12.4129
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1154	 ParSpMatVec=0.0073	 speedup=15.8960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1154	 ParSpMatVec=0.0079	 speedup=14.6712
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0819	 ParSpMatVec=0.0263	 speedup=3.1216
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0819	 ParSpMatVec=0.0107	 speedup=7.6892
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0819	 ParSpMatVec=0.0083	 speedup=9.8712
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0819	 ParSpMatVec=0.0101	 speedup=8.1339
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0819	 ParSpMatVec=0.0111	 speedup=7.3515

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0375	 ParSpMatVec=0.0238	 speedup=1.5782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0375	 ParSpMatVec=0.0121	 speedup=3.0908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0375	 ParSpMatVec=0.0085	 speedup=4.4081
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0375	 ParSpMatVec=0.0109	 speedup=3.4484
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0375	 ParSpMatVec=0.0108	 speedup=3.4621

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0392	 ParSpMatVec=0.0253	 speedup=1.5510
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0392	 ParSpMatVec=0.0022	 speedup=18.1047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0392	 ParSpMatVec=0.0028	 speedup=13.9146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0392	 ParSpMatVec=0.0016	 speedup=24.8105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0392	 ParSpMatVec=0.0017	 speedup=23.5455

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0068	 ParSpMatVec=0.0271	 speedup=0.2509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0068	 ParSpMatVec=0.0032	 speedup=2.1232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0068	 ParSpMatVec=0.0022	 speedup=3.1613
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0068	 ParSpMatVec=0.0019	 speedup=3.6051
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0068	 ParSpMatVec=0.0024	 speedup=2.7894

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0290	 ParSpMatVec=0.0518	 speedup=0.5595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0290	 ParSpMatVec=0.0037	 speedup=7.8685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0290	 ParSpMatVec=0.0025	 speedup=11.6212
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0290	 ParSpMatVec=0.0026	 speedup=11.1838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0290	 ParSpMatVec=0.0024	 speedup=11.9668

INFO: ParSpMatVec tests passed

>>> End of log
