>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1181.4140625 MB free)
Uptime: 12825.0 sec
Load Avg:  0.9970703125  1.0146484375  1.0029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz     590686 s       7168 s      47712 s     501700 s         20 s
#2  3502 MHz     334220 s        170 s      41188 s     867817 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1331	 ParSpMatVec=0.0154	 speedup=8.6197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1331	 ParSpMatVec=0.0095	 speedup=13.9416
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1331	 ParSpMatVec=0.0147	 speedup=9.0771
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1331	 ParSpMatVec=0.0106	 speedup=12.5128
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1331	 ParSpMatVec=0.0098	 speedup=13.6292
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0787	 ParSpMatVec=0.0251	 speedup=3.1405
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0787	 ParSpMatVec=0.0126	 speedup=6.2696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0787	 ParSpMatVec=0.0140	 speedup=5.6035
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0787	 ParSpMatVec=0.0124	 speedup=6.3241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0787	 ParSpMatVec=0.0132	 speedup=5.9566

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0298	 speedup=1.5918
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0139	 speedup=3.4178
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0143	 speedup=3.3240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0153	 speedup=3.1029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0157	 speedup=3.0153

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0456	 ParSpMatVec=0.0467	 speedup=0.9763
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0456	 ParSpMatVec=0.0019	 speedup=23.8869
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0456	 ParSpMatVec=0.0027	 speedup=16.6898
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0456	 ParSpMatVec=0.0021	 speedup=21.6764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0456	 ParSpMatVec=0.0019	 speedup=24.1180

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0111	 ParSpMatVec=0.0547	 speedup=0.2028
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0111	 ParSpMatVec=0.0036	 speedup=3.0709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0111	 ParSpMatVec=0.0031	 speedup=3.6253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0111	 ParSpMatVec=0.0065	 speedup=1.7083
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0111	 ParSpMatVec=0.0027	 speedup=4.1453

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0383	 ParSpMatVec=0.0315	 speedup=1.2168
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0383	 ParSpMatVec=0.0039	 speedup=9.7250
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0383	 ParSpMatVec=0.0015	 speedup=25.1810
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0383	 ParSpMatVec=0.0026	 speedup=14.7006
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0383	 ParSpMatVec=0.0028	 speedup=13.8568

INFO: ParSpMatVec tests passed

>>> End of log
