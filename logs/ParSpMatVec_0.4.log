>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.1
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1064.0390625 MB free)
Uptime: 12981.0 sec
Load Avg:  1.130859375  1.03076171875  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     559808 s       4620 s      56771 s     517337 s         28 s
#2  3499 MHz     391190 s        406 s      49188 s     788720 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.1
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1425	 ParSpMatVec=0.0248	 speedup=5.7515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1425	 ParSpMatVec=0.0090	 speedup=15.8719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1425	 ParSpMatVec=0.0095	 speedup=15.0615
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1425	 ParSpMatVec=0.0056	 speedup=25.5596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1425	 ParSpMatVec=0.0082	 speedup=17.4849
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1124	 ParSpMatVec=0.0407	 speedup=2.7643
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1124	 ParSpMatVec=0.0155	 speedup=7.2718
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1124	 ParSpMatVec=0.0084	 speedup=13.3864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1124	 ParSpMatVec=0.0091	 speedup=12.3633
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1124	 ParSpMatVec=0.0105	 speedup=10.6819

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0377	 ParSpMatVec=0.0224	 speedup=1.6842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0377	 ParSpMatVec=0.0132	 speedup=2.8607
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0377	 ParSpMatVec=0.0082	 speedup=4.5971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0377	 ParSpMatVec=0.0108	 speedup=3.4833
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0377	 ParSpMatVec=0.0172	 speedup=2.1883

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0267	 ParSpMatVec=0.0238	 speedup=1.1207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0267	 ParSpMatVec=0.0026	 speedup=10.2035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0267	 ParSpMatVec=0.0029	 speedup=9.2214
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0267	 ParSpMatVec=0.0020	 speedup=13.5377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0267	 ParSpMatVec=0.0016	 speedup=16.1868

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0395	 speedup=0.2155
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0041	 speedup=2.0517
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0025	 speedup=3.4043
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0052	 speedup=1.6317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0021	 speedup=3.9679

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0490	 ParSpMatVec=0.0465	 speedup=1.0542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0490	 ParSpMatVec=0.0032	 speedup=15.3406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0490	 ParSpMatVec=0.0027	 speedup=17.8196
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0490	 ParSpMatVec=0.0026	 speedup=19.2040
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0490	 ParSpMatVec=0.0031	 speedup=16.0186

INFO: ParSpMatVec tests passed

>>> End of log
