>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1279	 ParSpMatVec=0.0243	 speedup=5.2635
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1279	 ParSpMatVec=0.0088	 speedup=14.4576
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1279	 ParSpMatVec=0.0167	 speedup=7.6802
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1279	 ParSpMatVec=0.0111	 speedup=11.5008
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1279	 ParSpMatVec=0.0097	 speedup=13.1256
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0984	 ParSpMatVec=0.0402	 speedup=2.4442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0984	 ParSpMatVec=0.0108	 speedup=9.1490
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0984	 ParSpMatVec=0.0131	 speedup=7.4880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0984	 ParSpMatVec=0.0118	 speedup=8.3631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0984	 ParSpMatVec=0.0107	 speedup=9.2125

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0285	 speedup=1.6774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0140	 speedup=3.4003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0146	 speedup=3.2799
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0135	 speedup=3.5434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0139	 speedup=3.4485

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0407	 speedup=1.0359
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0026	 speedup=16.0515
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0027	 speedup=15.6465
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0018	 speedup=22.8779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0018	 speedup=23.9786

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0076	 ParSpMatVec=0.0433	 speedup=0.1755
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0076	 ParSpMatVec=0.0035	 speedup=2.1650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0076	 ParSpMatVec=0.0027	 speedup=2.8622
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0076	 ParSpMatVec=0.0028	 speedup=2.7414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0076	 ParSpMatVec=0.0037	 speedup=2.0340

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0300	 ParSpMatVec=0.0269	 speedup=1.1143
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0300	 ParSpMatVec=0.0046	 speedup=6.5384
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0300	 ParSpMatVec=0.0033	 speedup=8.9977
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0300	 ParSpMatVec=0.0028	 speedup=10.7475
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0300	 ParSpMatVec=0.0027	 speedup=11.3119

INFO: ParSpMatVec tests passed

>>> End of log
