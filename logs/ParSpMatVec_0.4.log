>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1164.3203125 MB free)
Uptime: 12409.0 sec
Load Avg:  1.056640625  0.95947265625  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     555704 s         59 s      59468 s     477862 s         26 s
#2  3500 MHz     349396 s       6666 s      50724 s     781035 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.1
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0888	 ParSpMatVec=0.0155	 speedup=5.7281
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0888	 ParSpMatVec=0.0088	 speedup=10.0458
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0888	 ParSpMatVec=0.0149	 speedup=5.9615
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0888	 ParSpMatVec=0.0097	 speedup=9.1793
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0888	 ParSpMatVec=0.0095	 speedup=9.3870
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0792	 ParSpMatVec=0.0265	 speedup=2.9916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0792	 ParSpMatVec=0.0110	 speedup=7.1883
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0792	 ParSpMatVec=0.0121	 speedup=6.5149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0792	 ParSpMatVec=0.0124	 speedup=6.3642
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0792	 ParSpMatVec=0.0143	 speedup=5.5196

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0337	 ParSpMatVec=0.0188	 speedup=1.7901
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0337	 ParSpMatVec=0.0124	 speedup=2.7261
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0337	 ParSpMatVec=0.0132	 speedup=2.5553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0337	 ParSpMatVec=0.0099	 speedup=3.4092
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0337	 ParSpMatVec=0.0135	 speedup=2.5023

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0276	 ParSpMatVec=0.0426	 speedup=0.6481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0276	 ParSpMatVec=0.0031	 speedup=8.9413
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0276	 ParSpMatVec=0.0041	 speedup=6.7485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0276	 ParSpMatVec=0.0014	 speedup=19.3152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0276	 ParSpMatVec=0.0016	 speedup=17.4577

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0402	 speedup=0.2213
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0022	 speedup=4.1152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0022	 speedup=4.0574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0027	 speedup=3.3276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0026	 speedup=3.4443

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0516	 ParSpMatVec=0.0465	 speedup=1.1087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0516	 ParSpMatVec=0.0034	 speedup=14.9982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0516	 ParSpMatVec=0.0020	 speedup=25.1806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0516	 ParSpMatVec=0.0025	 speedup=20.2781
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0516	 ParSpMatVec=0.0024	 speedup=21.7100

INFO: ParSpMatVec tests passed

>>> End of log
