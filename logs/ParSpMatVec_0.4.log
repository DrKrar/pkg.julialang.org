>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1198.234375 MB free)
Uptime: 13007.0 sec
Load Avg:  1.162109375  1.06298828125  1.00732421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     620892 s       2961 s      55373 s     493620 s         17 s
#2  3499 MHz     397913 s       4035 s      48448 s     816659 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1240	 ParSpMatVec=0.0340	 speedup=3.6516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1240	 ParSpMatVec=0.0083	 speedup=14.8587
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1240	 ParSpMatVec=0.0107	 speedup=11.6121
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1240	 ParSpMatVec=0.0194	 speedup=6.3852
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1240	 ParSpMatVec=0.0093	 speedup=13.3174
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1170	 ParSpMatVec=0.0428	 speedup=2.7356
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1170	 ParSpMatVec=0.0127	 speedup=9.2104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1170	 ParSpMatVec=0.0129	 speedup=9.0679
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1170	 ParSpMatVec=0.0132	 speedup=8.8718
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1170	 ParSpMatVec=0.0144	 speedup=8.1548

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0275	 speedup=1.5283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0139	 speedup=3.0357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0187	 speedup=2.2488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0182	 speedup=2.3163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0242	 speedup=1.7418

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0370	 ParSpMatVec=0.0405	 speedup=0.9139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0370	 ParSpMatVec=0.0025	 speedup=14.5982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0370	 ParSpMatVec=0.0025	 speedup=14.8097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0370	 ParSpMatVec=0.0026	 speedup=14.1535
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0370	 ParSpMatVec=0.0246	 speedup=1.5042

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0333	 speedup=0.2567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0036	 speedup=2.3403
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0023	 speedup=3.7262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0032	 speedup=2.6805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0043	 speedup=1.9694

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0450	 ParSpMatVec=0.0489	 speedup=0.9211
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0450	 ParSpMatVec=0.0041	 speedup=10.9829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0450	 ParSpMatVec=0.0035	 speedup=12.8096
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0450	 ParSpMatVec=0.0043	 speedup=10.4884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0450	 ParSpMatVec=0.0043	 speedup=10.4610

INFO: ParSpMatVec tests passed

>>> End of log
