>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1158.34765625 MB free)
Uptime: 12509.0 sec
Load Avg:  0.9521484375  0.92431640625  0.94775390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     545944 s        128 s      59142 s     501100 s         23 s
#2  3500 MHz     372164 s       5678 s      51829 s     764776 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1615	 ParSpMatVec=0.0251	 speedup=6.4277
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1615	 ParSpMatVec=0.0104	 speedup=15.4891
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1615	 ParSpMatVec=0.0094	 speedup=17.1319
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1615	 ParSpMatVec=0.0077	 speedup=20.8930
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1615	 ParSpMatVec=0.0108	 speedup=14.9076
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0995	 ParSpMatVec=0.0387	 speedup=2.5703
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0995	 ParSpMatVec=0.0150	 speedup=6.6455
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0995	 ParSpMatVec=0.0151	 speedup=6.5901
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0995	 ParSpMatVec=0.0130	 speedup=7.6723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0995	 ParSpMatVec=0.0149	 speedup=6.6974

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0475	 ParSpMatVec=0.0338	 speedup=1.4066
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0475	 ParSpMatVec=0.0116	 speedup=4.1068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0475	 ParSpMatVec=0.0213	 speedup=2.2318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0475	 ParSpMatVec=0.0222	 speedup=2.1407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0475	 ParSpMatVec=0.0314	 speedup=1.5156

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0295	 ParSpMatVec=0.0399	 speedup=0.7397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0295	 ParSpMatVec=0.0033	 speedup=9.0134
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0295	 ParSpMatVec=0.0030	 speedup=9.7442
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0295	 ParSpMatVec=0.0017	 speedup=17.2334
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0295	 ParSpMatVec=0.0020	 speedup=14.7901

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0425	 speedup=0.2331
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0051	 speedup=1.9267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0018	 speedup=5.6433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0022	 speedup=4.4704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0058	 speedup=1.7220

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0518	 ParSpMatVec=0.0450	 speedup=1.1517
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0518	 ParSpMatVec=0.0045	 speedup=11.4490
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0518	 ParSpMatVec=0.0022	 speedup=23.0801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0518	 ParSpMatVec=0.0066	 speedup=7.8903
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0518	 ParSpMatVec=0.0021	 speedup=24.3136

INFO: ParSpMatVec tests passed

>>> End of log
