>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1193.671875 MB free)
Uptime: 14442.0 sec
Load Avg:  0.97509765625  0.96484375  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     628349 s       6576 s      55105 s     625274 s         24 s
#2  3500 MHz     484068 s         71 s      48178 s     871753 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1406	 ParSpMatVec=0.0249	 speedup=5.6367
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1406	 ParSpMatVec=0.0071	 speedup=19.7611
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1406	 ParSpMatVec=0.0115	 speedup=12.2192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1406	 ParSpMatVec=0.0084	 speedup=16.6434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1406	 ParSpMatVec=0.0077	 speedup=18.3041
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0687	 ParSpMatVec=0.0241	 speedup=2.8531
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0687	 ParSpMatVec=0.0108	 speedup=6.3870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0687	 ParSpMatVec=0.0088	 speedup=7.7960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0687	 ParSpMatVec=0.0095	 speedup=7.2537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0687	 ParSpMatVec=0.0083	 speedup=8.2886

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0296	 ParSpMatVec=0.0213	 speedup=1.3878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0296	 ParSpMatVec=0.0121	 speedup=2.4515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0296	 ParSpMatVec=0.0091	 speedup=3.2574
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0296	 ParSpMatVec=0.0097	 speedup=3.0580
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0296	 ParSpMatVec=0.0101	 speedup=2.9331

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0368	 speedup=1.1519
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0029	 speedup=14.8750
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0019	 speedup=22.7332
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0016	 speedup=26.4743
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0021	 speedup=20.0512

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0081	 ParSpMatVec=0.0529	 speedup=0.1534
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0081	 ParSpMatVec=0.0053	 speedup=1.5178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0081	 ParSpMatVec=0.0022	 speedup=3.7591
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0081	 ParSpMatVec=0.0026	 speedup=3.1158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0081	 ParSpMatVec=0.0022	 speedup=3.6405

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0569	 ParSpMatVec=0.0262	 speedup=2.1720
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0569	 ParSpMatVec=0.0051	 speedup=11.0960
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0569	 ParSpMatVec=0.0038	 speedup=14.9709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0569	 ParSpMatVec=0.0043	 speedup=13.3718
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0569	 ParSpMatVec=0.0028	 speedup=20.3234

INFO: ParSpMatVec tests passed

>>> End of log
