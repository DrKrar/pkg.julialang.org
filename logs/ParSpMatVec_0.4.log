>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1186.9296875 MB free)
Uptime: 14671.0 sec
Load Avg:  1.02978515625  1.001953125  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz     650471 s       7504 s      59995 s     607046 s         45 s
#2  3502 MHz     466840 s       8838 s      53306 s     888827 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1001	 ParSpMatVec=0.0157	 speedup=6.3661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1001	 ParSpMatVec=0.0086	 speedup=11.6848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1001	 ParSpMatVec=0.0114	 speedup=8.7878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1001	 ParSpMatVec=0.0129	 speedup=7.7530
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1001	 ParSpMatVec=0.0073	 speedup=13.6542
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0948	 ParSpMatVec=0.0404	 speedup=2.3487
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0948	 ParSpMatVec=0.0133	 speedup=7.1495
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0948	 ParSpMatVec=0.0159	 speedup=5.9591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0948	 ParSpMatVec=0.0143	 speedup=6.6487
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0948	 ParSpMatVec=0.0161	 speedup=5.8751

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0299	 ParSpMatVec=0.0189	 speedup=1.5798
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0299	 ParSpMatVec=0.0124	 speedup=2.4074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0299	 ParSpMatVec=0.0136	 speedup=2.1968
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0299	 ParSpMatVec=0.0126	 speedup=2.3659
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0299	 ParSpMatVec=0.0120	 speedup=2.4842

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0258	 ParSpMatVec=0.0402	 speedup=0.6415
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0258	 ParSpMatVec=0.0026	 speedup=9.8101
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0258	 ParSpMatVec=0.0023	 speedup=11.4099
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0258	 ParSpMatVec=0.0014	 speedup=17.9765
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0258	 ParSpMatVec=0.0012	 speedup=20.7511

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0402	 speedup=0.2270
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0036	 speedup=2.5419
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0024	 speedup=3.8517
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0024	 speedup=3.7764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0027	 speedup=3.3888

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0500	 ParSpMatVec=0.0415	 speedup=1.2041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0500	 ParSpMatVec=0.0050	 speedup=10.1034
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0500	 ParSpMatVec=0.0022	 speedup=22.6382
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0500	 ParSpMatVec=0.0027	 speedup=18.5245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0500	 ParSpMatVec=0.0025	 speedup=19.6369

INFO: ParSpMatVec tests passed

>>> End of log
