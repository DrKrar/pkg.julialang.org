>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1168.60546875 MB free)
Uptime: 13373.0 sec
Load Avg:  0.92529296875  0.9619140625  0.98388671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     565126 s       3103 s      61263 s     555471 s         30 s
#2  3499 MHz     366392 s       4268 s      53189 s     856003 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1376	 ParSpMatVec=0.0295	 speedup=4.6575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1376	 ParSpMatVec=0.0089	 speedup=15.3932
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1376	 ParSpMatVec=0.0121	 speedup=11.3518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1376	 ParSpMatVec=0.0101	 speedup=13.6450
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1376	 ParSpMatVec=0.0115	 speedup=11.9493
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0934	 ParSpMatVec=0.0312	 speedup=2.9951
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0934	 ParSpMatVec=0.0141	 speedup=6.6260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0934	 ParSpMatVec=0.0199	 speedup=4.7061
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0934	 ParSpMatVec=0.0141	 speedup=6.6178
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0934	 ParSpMatVec=0.0116	 speedup=8.0470

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0169	 speedup=1.7010
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0134	 speedup=2.1478
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0145	 speedup=1.9782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0134	 speedup=2.1467
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0131	 speedup=2.1963

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0264	 speedup=1.6253
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0045	 speedup=9.4447
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0027	 speedup=15.9098
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0019	 speedup=22.4563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0022	 speedup=19.7005

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0470	 speedup=0.1741
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.5086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.6798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0043	 speedup=1.8938
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0021	 speedup=3.8836

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0329	 ParSpMatVec=0.0428	 speedup=0.7683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0329	 ParSpMatVec=0.0031	 speedup=10.6107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0329	 ParSpMatVec=0.0013	 speedup=24.9673
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0329	 ParSpMatVec=0.0024	 speedup=13.8679
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0329	 ParSpMatVec=0.0020	 speedup=16.5459

INFO: ParSpMatVec tests passed

>>> End of log
