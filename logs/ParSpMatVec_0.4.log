>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0805	 ParSpMatVec=0.0252	 speedup=3.1956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0805	 ParSpMatVec=0.0091	 speedup=8.8724
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0805	 ParSpMatVec=0.0095	 speedup=8.4366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0805	 ParSpMatVec=0.0089	 speedup=9.0744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0805	 ParSpMatVec=0.0114	 speedup=7.0500
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1146	 ParSpMatVec=0.0417	 speedup=2.7484
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1146	 ParSpMatVec=0.0127	 speedup=9.0015
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1146	 ParSpMatVec=0.0142	 speedup=8.0798
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1146	 ParSpMatVec=0.0136	 speedup=8.4397
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1146	 ParSpMatVec=0.0164	 speedup=7.0031

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0328	 ParSpMatVec=0.0178	 speedup=1.8437
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0328	 ParSpMatVec=0.0132	 speedup=2.4857
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0328	 ParSpMatVec=0.0162	 speedup=2.0225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0328	 ParSpMatVec=0.0124	 speedup=2.6354
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0328	 ParSpMatVec=0.0140	 speedup=2.3428

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0376	 ParSpMatVec=0.0237	 speedup=1.5905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0376	 ParSpMatVec=0.0024	 speedup=15.6814
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0376	 ParSpMatVec=0.0021	 speedup=17.8994
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0376	 ParSpMatVec=0.0012	 speedup=30.6266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0376	 ParSpMatVec=0.0015	 speedup=25.0410

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0103	 ParSpMatVec=0.0398	 speedup=0.2583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0103	 ParSpMatVec=0.0031	 speedup=3.3109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0103	 ParSpMatVec=0.0020	 speedup=5.0688
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0103	 ParSpMatVec=0.0028	 speedup=3.7024
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0103	 ParSpMatVec=0.0026	 speedup=3.9692

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0462	 ParSpMatVec=0.0486	 speedup=0.9511
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0462	 ParSpMatVec=0.0045	 speedup=10.2848
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0462	 ParSpMatVec=0.0027	 speedup=16.8507
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0462	 ParSpMatVec=0.0029	 speedup=15.7204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0462	 ParSpMatVec=0.0029	 speedup=15.7028

INFO: ParSpMatVec tests passed

>>> End of log
