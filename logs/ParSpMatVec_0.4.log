>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1194.37890625 MB free)
Uptime: 13719.0 sec
Load Avg:  1.01806640625  1.00048828125  0.978515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     641306 s       2027 s      55656 s     542347 s         25 s
#2  3499 MHz     378412 s       6593 s      47882 s     899619 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1182	 ParSpMatVec=0.0158	 speedup=7.4679
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1182	 ParSpMatVec=0.0069	 speedup=17.0322
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1182	 ParSpMatVec=0.0082	 speedup=14.3348
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1182	 ParSpMatVec=0.0065	 speedup=18.0504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1182	 ParSpMatVec=0.0070	 speedup=16.7728
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1148	 ParSpMatVec=0.0397	 speedup=2.8903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1148	 ParSpMatVec=0.0135	 speedup=8.5278
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1148	 ParSpMatVec=0.0081	 speedup=14.1535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1148	 ParSpMatVec=0.0105	 speedup=10.9134
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1148	 ParSpMatVec=0.0112	 speedup=10.2245

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0330	 ParSpMatVec=0.0304	 speedup=1.0855
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0330	 ParSpMatVec=0.0129	 speedup=2.5560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0330	 ParSpMatVec=0.0095	 speedup=3.4696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0330	 ParSpMatVec=0.0094	 speedup=3.5005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0330	 ParSpMatVec=0.0135	 speedup=2.4428

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0287	 speedup=1.4755
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0021	 speedup=20.0604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0010	 speedup=42.4187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0012	 speedup=36.2380
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0016	 speedup=27.0149

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0280	 speedup=0.2451
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0030	 speedup=2.2909
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0019	 speedup=3.5978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0021	 speedup=3.2326
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0026	 speedup=2.6293

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0466	 speedup=0.9905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0041	 speedup=11.2626
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0025	 speedup=18.2278
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0026	 speedup=18.0815
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0025	 speedup=18.1893

INFO: ParSpMatVec tests passed

>>> End of log
