>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1206.6875 MB free)
Uptime: 13693.0 sec
Load Avg:  1.01416015625  0.98779296875  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     626374 s       6310 s      53518 s     550983 s         29 s
#2  3500 MHz     421108 s         93 s      46567 s     861424 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1393	 ParSpMatVec=0.0268	 speedup=5.2044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1393	 ParSpMatVec=0.0080	 speedup=17.4104
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1393	 ParSpMatVec=0.0142	 speedup=9.8209
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1393	 ParSpMatVec=0.0114	 speedup=12.2517
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1393	 ParSpMatVec=0.0302	 speedup=4.6156
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0784	 ParSpMatVec=0.0270	 speedup=2.9092
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0784	 ParSpMatVec=0.0111	 speedup=7.0616
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0784	 ParSpMatVec=0.0156	 speedup=5.0340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0784	 ParSpMatVec=0.0145	 speedup=5.4164
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0784	 ParSpMatVec=0.0141	 speedup=5.5718

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0412	 ParSpMatVec=0.0280	 speedup=1.4719
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0412	 ParSpMatVec=0.0124	 speedup=3.3117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0412	 ParSpMatVec=0.0147	 speedup=2.7964
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0412	 ParSpMatVec=0.0160	 speedup=2.5812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0412	 ParSpMatVec=0.0130	 speedup=3.1731

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0471	 ParSpMatVec=0.0619	 speedup=0.7606
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0471	 ParSpMatVec=0.0026	 speedup=17.8503
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0471	 ParSpMatVec=0.0039	 speedup=12.0088
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0471	 ParSpMatVec=0.0035	 speedup=13.2663
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0471	 ParSpMatVec=0.0021	 speedup=22.7793

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0469	 speedup=0.1774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0101	 speedup=0.8207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0034	 speedup=2.4285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0029	 speedup=2.8874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0092	 speedup=0.9039

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0487	 ParSpMatVec=0.0526	 speedup=0.9266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0487	 ParSpMatVec=0.0045	 speedup=10.7110
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0487	 ParSpMatVec=0.0041	 speedup=11.8388
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0487	 ParSpMatVec=0.0028	 speedup=17.6117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0487	 ParSpMatVec=0.0026	 speedup=19.0297

INFO: ParSpMatVec tests passed

>>> End of log
