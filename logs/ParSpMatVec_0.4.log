>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.296875 MB free)
Uptime: 16246.0 sec
Load Avg:  0.89990234375  1.03515625  1.0439453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     763541 s       7207 s      68723 s     620599 s         68 s
#2  3500 MHz     510090 s          6 s      61546 s     979159 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.18.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0867	 ParSpMatVec=0.0273	 speedup=3.1729
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0867	 ParSpMatVec=0.0113	 speedup=7.6675
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0867	 ParSpMatVec=0.0119	 speedup=7.2698
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0867	 ParSpMatVec=0.0065	 speedup=13.3107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0867	 ParSpMatVec=0.0099	 speedup=8.7396
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1404	 ParSpMatVec=0.0377	 speedup=3.7267
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1404	 ParSpMatVec=0.0139	 speedup=10.1187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1404	 ParSpMatVec=0.0215	 speedup=6.5189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1404	 ParSpMatVec=0.0097	 speedup=14.4240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1404	 ParSpMatVec=0.0141	 speedup=9.9544

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0550	 ParSpMatVec=0.0301	 speedup=1.8287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0550	 ParSpMatVec=0.0148	 speedup=3.7029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0550	 ParSpMatVec=0.0106	 speedup=5.2078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0550	 ParSpMatVec=0.0122	 speedup=4.4934
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0550	 ParSpMatVec=0.0095	 speedup=5.7732

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0375	 ParSpMatVec=0.0413	 speedup=0.9097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0375	 ParSpMatVec=0.0027	 speedup=13.8145
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0375	 ParSpMatVec=0.0018	 speedup=21.3226
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0375	 ParSpMatVec=0.0014	 speedup=26.7933
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0375	 ParSpMatVec=0.0036	 speedup=10.3641

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0469	 speedup=0.1575
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0026	 speedup=2.8365
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0322	 speedup=0.2294
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0034	 speedup=2.1973
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0043	 speedup=1.7186

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0492	 ParSpMatVec=0.0498	 speedup=0.9894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0492	 ParSpMatVec=0.0035	 speedup=14.0261
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0492	 ParSpMatVec=0.0030	 speedup=16.5836
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0492	 ParSpMatVec=0.0022	 speedup=22.6398
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0492	 ParSpMatVec=0.0024	 speedup=20.4284

INFO: ParSpMatVec tests passed

>>> End of log
