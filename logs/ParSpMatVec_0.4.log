>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1057.26171875 MB free)
Uptime: 14421.0 sec
Load Avg:  0.9033203125  0.982421875  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     590679 s       4513 s      61925 s     615449 s         28 s
#2  3499 MHz     412299 s       1060 s      54728 s     894286 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1100	 ParSpMatVec=0.0181	 speedup=6.0595
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1100	 ParSpMatVec=0.0094	 speedup=11.7568
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1100	 ParSpMatVec=0.0089	 speedup=12.3282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1100	 ParSpMatVec=0.0058	 speedup=18.9155
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1100	 ParSpMatVec=0.0089	 speedup=12.3879
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0819	 ParSpMatVec=0.0382	 speedup=2.1463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0819	 ParSpMatVec=0.0116	 speedup=7.0694
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0819	 ParSpMatVec=0.0094	 speedup=8.6877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0819	 ParSpMatVec=0.0119	 speedup=6.8631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0819	 ParSpMatVec=0.0144	 speedup=5.6758

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0357	 ParSpMatVec=0.0184	 speedup=1.9419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0357	 ParSpMatVec=0.0126	 speedup=2.8355
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0357	 ParSpMatVec=0.0084	 speedup=4.2548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0357	 ParSpMatVec=0.0103	 speedup=3.4634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0357	 ParSpMatVec=0.0112	 speedup=3.1842

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0406	 ParSpMatVec=0.0370	 speedup=1.0959
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0406	 ParSpMatVec=0.0028	 speedup=14.4286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0406	 ParSpMatVec=0.0016	 speedup=24.6974
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0406	 ParSpMatVec=0.0025	 speedup=16.1483
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0406	 ParSpMatVec=0.0025	 speedup=16.0592

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0392	 speedup=0.1777
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0037	 speedup=1.8771
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0016	 speedup=4.2393
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0025	 speedup=2.7554
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0025	 speedup=2.7804

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0362	 ParSpMatVec=0.0246	 speedup=1.4704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0362	 ParSpMatVec=0.0034	 speedup=10.5685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0362	 ParSpMatVec=0.0022	 speedup=16.2630
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0362	 ParSpMatVec=0.0034	 speedup=10.7504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0362	 ParSpMatVec=0.0020	 speedup=17.7214

INFO: ParSpMatVec tests passed

>>> End of log
