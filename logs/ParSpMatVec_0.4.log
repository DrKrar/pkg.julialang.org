>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1175.5546875 MB free)
Uptime: 13287.0 sec
Load Avg:  1.08642578125  1.05224609375  1.05029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     577850 s       5186 s      61305 s     528875 s         24 s
#2  3501 MHz     377680 s       1865 s      54252 s     826289 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0812	 ParSpMatVec=0.0264	 speedup=3.0795
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0812	 ParSpMatVec=0.0093	 speedup=8.7429
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0812	 ParSpMatVec=0.0133	 speedup=6.1031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0812	 ParSpMatVec=0.0080	 speedup=10.1938
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0812	 ParSpMatVec=0.0089	 speedup=9.0786
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0760	 ParSpMatVec=0.0289	 speedup=2.6318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0760	 ParSpMatVec=0.0133	 speedup=5.7238
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0760	 ParSpMatVec=0.0140	 speedup=5.4080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0760	 ParSpMatVec=0.0210	 speedup=3.6243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0760	 ParSpMatVec=0.0108	 speedup=7.0317

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0379	 ParSpMatVec=0.0185	 speedup=2.0528
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0379	 ParSpMatVec=0.0146	 speedup=2.6005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0379	 ParSpMatVec=0.0147	 speedup=2.5819
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0379	 ParSpMatVec=0.0135	 speedup=2.8125
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0379	 ParSpMatVec=0.0143	 speedup=2.6561

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0372	 speedup=1.2132
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0023	 speedup=19.2306
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0025	 speedup=18.1828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0059	 speedup=7.6259
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0016	 speedup=28.0447

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0437	 speedup=0.1916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0042	 speedup=1.9705
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0018	 speedup=4.6165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0031	 speedup=2.6741
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0056	 speedup=1.4925

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0458	 ParSpMatVec=0.0442	 speedup=1.0371
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0458	 ParSpMatVec=0.0039	 speedup=11.7798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0458	 ParSpMatVec=0.0022	 speedup=20.9916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0458	 ParSpMatVec=0.0025	 speedup=18.0605
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0458	 ParSpMatVec=0.0032	 speedup=14.5470

INFO: ParSpMatVec tests passed

>>> End of log
