>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1183.3515625 MB free)
Uptime: 13184.0 sec
Load Avg:  1.13623046875  1.0048828125  0.96826171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     604141 s       2993 s      51258 s     531605 s         25 s
#2  3499 MHz     362377 s       4276 s      45529 s     856954 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0836	 ParSpMatVec=0.0155	 speedup=5.3858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0836	 ParSpMatVec=0.0092	 speedup=9.0615
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0836	 ParSpMatVec=0.0109	 speedup=7.6880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0836	 ParSpMatVec=0.0094	 speedup=8.9076
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0836	 ParSpMatVec=0.0080	 speedup=10.5102
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1147	 ParSpMatVec=0.0410	 speedup=2.7971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1147	 ParSpMatVec=0.0141	 speedup=8.1463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1147	 ParSpMatVec=0.0151	 speedup=7.5918
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1147	 ParSpMatVec=0.0136	 speedup=8.4140
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1147	 ParSpMatVec=0.0135	 speedup=8.4857

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0525	 ParSpMatVec=0.0329	 speedup=1.5945
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0525	 ParSpMatVec=0.0203	 speedup=2.5840
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0525	 ParSpMatVec=0.0143	 speedup=3.6844
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0525	 ParSpMatVec=0.0212	 speedup=2.4837
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0525	 ParSpMatVec=0.0120	 speedup=4.3952

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0477	 ParSpMatVec=0.0296	 speedup=1.6080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0477	 ParSpMatVec=0.0019	 speedup=24.5219
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0477	 ParSpMatVec=0.0032	 speedup=14.8995
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0477	 ParSpMatVec=0.0034	 speedup=13.9456
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0477	 ParSpMatVec=0.0435	 speedup=1.0953

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0077	 ParSpMatVec=0.0426	 speedup=0.1801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0077	 ParSpMatVec=0.0034	 speedup=2.2827
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0077	 ParSpMatVec=0.0019	 speedup=3.9569
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0077	 ParSpMatVec=0.0027	 speedup=2.8154
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0077	 ParSpMatVec=0.0143	 speedup=0.5368

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0469	 ParSpMatVec=0.0453	 speedup=1.0356
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0469	 ParSpMatVec=0.0042	 speedup=11.0861
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0469	 ParSpMatVec=0.0021	 speedup=22.0345
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0469	 ParSpMatVec=0.0054	 speedup=8.7542
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0469	 ParSpMatVec=0.0030	 speedup=15.8543

INFO: ParSpMatVec tests passed

>>> End of log
