>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1116.47265625 MB free)
Uptime: 12892.0 sec
Load Avg:  0.91845703125  0.9482421875  0.94970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     589094 s        138 s      53666 s     527190 s         28 s
#2  3499 MHz     419542 s          0 s      45894 s     779209 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1280	 ParSpMatVec=0.0282	 speedup=4.5468
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1280	 ParSpMatVec=0.0080	 speedup=15.9742
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1280	 ParSpMatVec=0.0115	 speedup=11.1162
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1280	 ParSpMatVec=0.0088	 speedup=14.4970
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1280	 ParSpMatVec=0.0138	 speedup=9.2520
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1355	 ParSpMatVec=0.0446	 speedup=3.0401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1355	 ParSpMatVec=0.0143	 speedup=9.4920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1355	 ParSpMatVec=0.0146	 speedup=9.2742
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1355	 ParSpMatVec=0.0145	 speedup=9.3456
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1355	 ParSpMatVec=0.0113	 speedup=11.9951

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0518	 ParSpMatVec=0.0319	 speedup=1.6229
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0518	 ParSpMatVec=0.0263	 speedup=1.9667
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0518	 ParSpMatVec=0.0141	 speedup=3.6618
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0518	 ParSpMatVec=0.0132	 speedup=3.9142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0518	 ParSpMatVec=0.0191	 speedup=2.7118

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0464	 ParSpMatVec=0.0445	 speedup=1.0414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0464	 ParSpMatVec=0.0020	 speedup=23.1188
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0464	 ParSpMatVec=0.0027	 speedup=17.1498
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0464	 ParSpMatVec=0.0047	 speedup=9.8360
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0464	 ParSpMatVec=0.0017	 speedup=28.0115

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0673	 speedup=0.1169
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0034	 speedup=2.3201
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0021	 speedup=3.7362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0037	 speedup=2.1529
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0027	 speedup=2.9543

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0432	 ParSpMatVec=0.0441	 speedup=0.9790
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0432	 ParSpMatVec=0.0032	 speedup=13.4294
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0432	 ParSpMatVec=0.0037	 speedup=11.7204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0432	 ParSpMatVec=0.0029	 speedup=14.8704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0432	 ParSpMatVec=0.0042	 speedup=10.1955

INFO: ParSpMatVec tests passed

>>> End of log
