>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1185.359375 MB free)
Uptime: 13259.0 sec
Load Avg:  0.92578125  0.94970703125  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     596808 s       5749 s      53313 s     541028 s         25 s
#2  3499 MHz     409898 s        418 s      46902 s     825956 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1432	 ParSpMatVec=0.0246	 speedup=5.8097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1432	 ParSpMatVec=0.0095	 speedup=15.1019
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1432	 ParSpMatVec=0.0115	 speedup=12.4688
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1432	 ParSpMatVec=0.0103	 speedup=13.8391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1432	 ParSpMatVec=0.0125	 speedup=11.4267
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1264	 ParSpMatVec=0.0435	 speedup=2.9025
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1264	 ParSpMatVec=0.0123	 speedup=10.2626
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1264	 ParSpMatVec=0.0126	 speedup=10.0189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1264	 ParSpMatVec=0.0143	 speedup=8.8612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1264	 ParSpMatVec=0.0141	 speedup=8.9933

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0286	 speedup=1.6973
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0125	 speedup=3.8864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0145	 speedup=3.3361
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0132	 speedup=3.6814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0134	 speedup=3.6068

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0445	 ParSpMatVec=0.0401	 speedup=1.1102
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0445	 ParSpMatVec=0.0045	 speedup=9.9573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0445	 ParSpMatVec=0.0038	 speedup=11.8117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0445	 ParSpMatVec=0.0049	 speedup=9.0937
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0445	 ParSpMatVec=0.0031	 speedup=14.2751

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0257	 speedup=0.3248
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0038	 speedup=2.1912
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0020	 speedup=4.2137
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0023	 speedup=3.6396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0021	 speedup=3.9173

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0469	 speedup=1.0406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0033	 speedup=14.6173
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0023	 speedup=21.1507
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0040	 speedup=12.0541
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0023	 speedup=21.6660

INFO: ParSpMatVec tests passed

>>> End of log
