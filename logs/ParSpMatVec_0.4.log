>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1190.8359375 MB free)
Uptime: 15749.0 sec
Load Avg:  1.10400390625  1.03955078125  0.9931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     706568 s       6953 s      56561 s     652310 s         26 s
#2  3499 MHz     495881 s         41 s      48804 s     978790 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1390	 ParSpMatVec=0.0234	 speedup=5.9495
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1390	 ParSpMatVec=0.0083	 speedup=16.8184
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1390	 ParSpMatVec=0.0121	 speedup=11.4389
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1390	 ParSpMatVec=0.0078	 speedup=17.9274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1390	 ParSpMatVec=0.0101	 speedup=13.8140
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1078	 ParSpMatVec=0.0398	 speedup=2.7119
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1078	 ParSpMatVec=0.0129	 speedup=8.3633
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1078	 ParSpMatVec=0.0141	 speedup=7.6501
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1078	 ParSpMatVec=0.0150	 speedup=7.1775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1078	 ParSpMatVec=0.0188	 speedup=5.7375

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0316	 speedup=1.3505
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0133	 speedup=3.2105
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0139	 speedup=3.0822
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0147	 speedup=2.9006
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0164	 speedup=2.6054

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0431	 speedup=1.0709
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0032	 speedup=14.5600
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0028	 speedup=16.2418
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0018	 speedup=25.4399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0021	 speedup=21.5532

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0421	 speedup=0.2228
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0025	 speedup=3.7599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0032	 speedup=2.9625
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0039	 speedup=2.3900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0028	 speedup=3.3156

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0476	 ParSpMatVec=0.0377	 speedup=1.2635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0476	 ParSpMatVec=0.0033	 speedup=14.3569
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0476	 ParSpMatVec=0.0023	 speedup=21.1529
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0476	 ParSpMatVec=0.0025	 speedup=18.8527
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0476	 ParSpMatVec=0.0020	 speedup=24.3238

INFO: ParSpMatVec tests passed

>>> End of log
