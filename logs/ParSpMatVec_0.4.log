>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1202.3046875 MB free)
Uptime: 12970.0 sec
Load Avg:  1.025390625  1.0146484375  1.0302734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     599293 s       7349 s      54723 s     508551 s         26 s
#2  3500 MHz     400082 s         43 s      48477 s     799323 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0783	 ParSpMatVec=0.0271	 speedup=2.8919
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0783	 ParSpMatVec=0.0093	 speedup=8.4171
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0783	 ParSpMatVec=0.0084	 speedup=9.3398
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0783	 ParSpMatVec=0.0063	 speedup=12.3619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0783	 ParSpMatVec=0.0104	 speedup=7.5429
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0802	 ParSpMatVec=0.0214	 speedup=3.7414
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0802	 ParSpMatVec=0.0128	 speedup=6.2631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0802	 ParSpMatVec=0.0085	 speedup=9.4110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0802	 ParSpMatVec=0.0101	 speedup=7.9453
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0802	 ParSpMatVec=0.0143	 speedup=5.6099

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0260	 speedup=1.6707
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0125	 speedup=3.4775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0083	 speedup=5.2483
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0093	 speedup=4.6714
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0131	 speedup=3.3055

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0371	 ParSpMatVec=0.0358	 speedup=1.0363
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0371	 ParSpMatVec=0.0024	 speedup=15.2887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0371	 ParSpMatVec=0.0014	 speedup=25.8726
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0371	 ParSpMatVec=0.0011	 speedup=34.5657
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0371	 ParSpMatVec=0.0021	 speedup=17.7814

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0427	 speedup=0.1617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0039	 speedup=1.7698
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0021	 speedup=3.3208
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0029	 speedup=2.3720
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0036	 speedup=1.9180

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0296	 ParSpMatVec=0.0521	 speedup=0.5687
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0296	 ParSpMatVec=0.0059	 speedup=5.0187
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0296	 ParSpMatVec=0.0083	 speedup=3.5635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0296	 ParSpMatVec=0.0151	 speedup=1.9628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0296	 ParSpMatVec=0.0037	 speedup=7.9894

INFO: ParSpMatVec tests passed

>>> End of log
