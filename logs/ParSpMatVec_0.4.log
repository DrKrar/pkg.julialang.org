>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1193.71484375 MB free)
Uptime: 13307.0 sec
Load Avg:  1.1083984375  1.0126953125  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     642066 s        100 s      53711 s     500870 s         26 s
#2  3499 MHz     382858 s       6482 s      47409 s     855946 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0888	 ParSpMatVec=0.0331	 speedup=2.6811
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0888	 ParSpMatVec=0.0084	 speedup=10.5422
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0888	 ParSpMatVec=0.0106	 speedup=8.3875
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0888	 ParSpMatVec=0.0055	 speedup=16.1331
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0888	 ParSpMatVec=0.0094	 speedup=9.4805
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0845	 ParSpMatVec=0.0258	 speedup=3.2761
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0845	 ParSpMatVec=0.0137	 speedup=6.1617
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0845	 ParSpMatVec=0.0078	 speedup=10.8450
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0845	 ParSpMatVec=0.0192	 speedup=4.3928
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0845	 ParSpMatVec=0.0264	 speedup=3.2041

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0249	 speedup=1.7589
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0135	 speedup=3.2540
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0187	 speedup=2.3454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0147	 speedup=2.9793
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0174	 speedup=2.5188

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0413	 ParSpMatVec=0.0275	 speedup=1.5032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0413	 ParSpMatVec=0.0022	 speedup=18.7397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0413	 ParSpMatVec=0.0027	 speedup=15.5481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0413	 ParSpMatVec=0.0020	 speedup=20.4092
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0413	 ParSpMatVec=0.0022	 speedup=19.1253

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0452	 speedup=0.1878
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0039	 speedup=2.1816
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0020	 speedup=4.2595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0045	 speedup=1.8838
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0281	 speedup=0.3020

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0477	 ParSpMatVec=0.0475	 speedup=1.0039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0477	 ParSpMatVec=0.0039	 speedup=12.3014
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0477	 ParSpMatVec=0.0021	 speedup=22.8516
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0477	 ParSpMatVec=0.0047	 speedup=10.1643
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0477	 ParSpMatVec=0.0046	 speedup=10.4369

INFO: ParSpMatVec tests passed

>>> End of log
