>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0808	 ParSpMatVec=0.0166	 speedup=4.8561
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0808	 ParSpMatVec=0.0102	 speedup=7.9189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0808	 ParSpMatVec=0.0142	 speedup=5.6859
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0808	 ParSpMatVec=0.0098	 speedup=8.2835
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0808	 ParSpMatVec=0.0113	 speedup=7.1226
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0760	 ParSpMatVec=0.0254	 speedup=2.9908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0760	 ParSpMatVec=0.0112	 speedup=6.7687
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0760	 ParSpMatVec=0.0124	 speedup=6.1416
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0760	 ParSpMatVec=0.0121	 speedup=6.2961
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0760	 ParSpMatVec=0.0125	 speedup=6.0922

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0358	 ParSpMatVec=0.0178	 speedup=2.0179
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0358	 ParSpMatVec=0.0116	 speedup=3.0912
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0358	 ParSpMatVec=0.0148	 speedup=2.4155
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0358	 ParSpMatVec=0.0131	 speedup=2.7254
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0358	 ParSpMatVec=0.0142	 speedup=2.5175

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0336	 ParSpMatVec=0.0227	 speedup=1.4788
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0336	 ParSpMatVec=0.0028	 speedup=11.9454
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0336	 ParSpMatVec=0.0021	 speedup=15.7379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0336	 ParSpMatVec=0.0023	 speedup=14.8321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0336	 ParSpMatVec=0.0022	 speedup=15.5912

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0460	 speedup=0.1775
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0044	 speedup=1.8733
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0022	 speedup=3.7887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0027	 speedup=3.0059
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0026	 speedup=3.1079

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0468	 ParSpMatVec=0.0489	 speedup=0.9577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0468	 ParSpMatVec=0.0032	 speedup=14.6632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0468	 ParSpMatVec=0.0021	 speedup=22.6290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0468	 ParSpMatVec=0.0027	 speedup=17.0295
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0468	 ParSpMatVec=0.0024	 speedup=19.2905

INFO: ParSpMatVec tests passed

>>> End of log
