>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1166.05078125 MB free)
Uptime: 12993.0 sec
Load Avg:  1.05859375  0.99951171875  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     593746 s       5337 s      53605 s     510140 s         14 s
#2  3499 MHz     392566 s        387 s      47041 s     820681 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1354	 ParSpMatVec=0.0231	 speedup=5.8697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1354	 ParSpMatVec=0.0106	 speedup=12.8001
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1354	 ParSpMatVec=0.0117	 speedup=11.5601
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1354	 ParSpMatVec=0.0080	 speedup=16.9372
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1354	 ParSpMatVec=0.0073	 speedup=18.5594
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0836	 ParSpMatVec=0.0269	 speedup=3.1016
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0836	 ParSpMatVec=0.0128	 speedup=6.5169
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0836	 ParSpMatVec=0.0157	 speedup=5.3381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0836	 ParSpMatVec=0.0127	 speedup=6.5999
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0836	 ParSpMatVec=0.0133	 speedup=6.2748

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0294	 ParSpMatVec=0.0347	 speedup=0.8491
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0294	 ParSpMatVec=0.0133	 speedup=2.2092
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0294	 ParSpMatVec=0.0149	 speedup=1.9816
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0294	 ParSpMatVec=0.0139	 speedup=2.1255
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0294	 ParSpMatVec=0.0136	 speedup=2.1620

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0359	 speedup=1.2146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0027	 speedup=16.0803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0019	 speedup=23.1131
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0023	 speedup=18.6685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0017	 speedup=25.8339

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0072	 ParSpMatVec=0.0281	 speedup=0.2563
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0072	 ParSpMatVec=0.0039	 speedup=1.8233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0072	 ParSpMatVec=0.0015	 speedup=4.8304
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0072	 ParSpMatVec=0.0021	 speedup=3.3978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0072	 ParSpMatVec=0.0026	 speedup=2.7642

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0410	 ParSpMatVec=0.0442	 speedup=0.9266
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0410	 ParSpMatVec=0.0038	 speedup=10.6642
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0410	 ParSpMatVec=0.0025	 speedup=16.6262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0410	 ParSpMatVec=0.0026	 speedup=15.7546
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0410	 ParSpMatVec=0.0025	 speedup=16.5277

INFO: ParSpMatVec tests passed

>>> End of log
