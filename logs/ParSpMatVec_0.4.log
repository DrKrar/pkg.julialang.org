>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1190.9921875 MB free)
Uptime: 13518.0 sec
Load Avg:  1.0029296875  0.9853515625  0.95947265625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3502 MHz     558128 s        108 s      53101 s     576477 s         21 s
#2  3502 MHz     371052 s         36 s      44615 s     880066 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1342	 ParSpMatVec=0.0278	 speedup=4.8198
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1342	 ParSpMatVec=0.0101	 speedup=13.2840
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1342	 ParSpMatVec=0.0134	 speedup=10.0284
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1342	 ParSpMatVec=0.0096	 speedup=13.9194
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1342	 ParSpMatVec=0.0100	 speedup=13.3534
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1333	 ParSpMatVec=0.0265	 speedup=5.0277
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1333	 ParSpMatVec=0.0183	 speedup=7.2924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1333	 ParSpMatVec=0.0165	 speedup=8.0666
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1333	 ParSpMatVec=0.0224	 speedup=5.9546
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1333	 ParSpMatVec=0.0146	 speedup=9.1079

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0474	 ParSpMatVec=0.0297	 speedup=1.5969
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0474	 ParSpMatVec=0.0149	 speedup=3.1692
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0474	 ParSpMatVec=0.0192	 speedup=2.4619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0474	 ParSpMatVec=0.0134	 speedup=3.5274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0474	 ParSpMatVec=0.0141	 speedup=3.3494

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0465	 ParSpMatVec=0.0368	 speedup=1.2653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0465	 ParSpMatVec=0.0029	 speedup=15.8788
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0465	 ParSpMatVec=0.0035	 speedup=13.2877
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0465	 ParSpMatVec=0.0030	 speedup=15.5129
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0465	 ParSpMatVec=0.0015	 speedup=30.8986

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0483	 speedup=0.1828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0034	 speedup=2.5724
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0039	 speedup=2.2556
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0037	 speedup=2.3548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0025	 speedup=3.5178

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0492	 ParSpMatVec=0.0271	 speedup=1.8193
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0492	 ParSpMatVec=0.0045	 speedup=10.8214
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0492	 ParSpMatVec=0.0021	 speedup=23.0231
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0492	 ParSpMatVec=0.0026	 speedup=19.2347
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0492	 ParSpMatVec=0.0020	 speedup=24.1299

INFO: ParSpMatVec tests passed

>>> End of log
