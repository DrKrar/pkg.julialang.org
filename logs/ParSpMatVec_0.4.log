>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1169.67578125 MB free)
Uptime: 13645.0 sec
Load Avg:  1.0166015625  1.0419921875  1.03857421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     681328 s       2226 s      56970 s     483284 s         27 s
#2  3500 MHz     433082 s       4090 s      50442 s     835928 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1390	 ParSpMatVec=0.0271	 speedup=5.1219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1390	 ParSpMatVec=0.0095	 speedup=14.6972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1390	 ParSpMatVec=0.0113	 speedup=12.3197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1390	 ParSpMatVec=0.0088	 speedup=15.7956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1390	 ParSpMatVec=0.0081	 speedup=17.2071
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0911	 ParSpMatVec=0.0297	 speedup=3.0697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0911	 ParSpMatVec=0.0121	 speedup=7.5149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0911	 ParSpMatVec=0.0144	 speedup=6.3406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0911	 ParSpMatVec=0.0147	 speedup=6.2116
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0911	 ParSpMatVec=0.0127	 speedup=7.1482

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0320	 ParSpMatVec=0.0192	 speedup=1.6651
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0320	 ParSpMatVec=0.0121	 speedup=2.6363
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0320	 ParSpMatVec=0.0157	 speedup=2.0420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0320	 ParSpMatVec=0.0130	 speedup=2.4631
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0320	 ParSpMatVec=0.0122	 speedup=2.6163

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0404	 ParSpMatVec=0.0374	 speedup=1.0807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0404	 ParSpMatVec=0.0023	 speedup=17.4929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0404	 ParSpMatVec=0.0027	 speedup=14.8275
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0404	 ParSpMatVec=0.0019	 speedup=21.5957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0404	 ParSpMatVec=0.0018	 speedup=22.8670

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0460	 speedup=0.1602
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0030	 speedup=2.4390
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0037	 speedup=1.9705
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0022	 speedup=3.4029
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0027	 speedup=2.7563

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0488	 speedup=0.8871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0039	 speedup=11.1747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0024	 speedup=17.7599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0032	 speedup=13.6414
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0025	 speedup=17.3140

INFO: ParSpMatVec tests passed

>>> End of log
