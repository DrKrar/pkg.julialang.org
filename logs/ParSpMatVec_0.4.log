>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1069.40234375 MB free)
Uptime: 13420.0 sec
Load Avg:  1.01123046875  0.97900390625  0.97314453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     609068 s       4194 s      61198 s     499222 s         26 s
#2  3500 MHz     372994 s       1590 s      55057 s     814900 s          2 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1004	 ParSpMatVec=0.0150	 speedup=6.7079
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1004	 ParSpMatVec=0.0060	 speedup=16.8435
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1004	 ParSpMatVec=0.0097	 speedup=10.3668
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1004	 ParSpMatVec=0.0096	 speedup=10.4516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1004	 ParSpMatVec=0.0112	 speedup=8.9598
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1163	 ParSpMatVec=0.0439	 speedup=2.6464
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1163	 ParSpMatVec=0.0099	 speedup=11.7324
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1163	 ParSpMatVec=0.0104	 speedup=11.1526
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1163	 ParSpMatVec=0.0098	 speedup=11.9159
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1163	 ParSpMatVec=0.0084	 speedup=13.8784

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0295	 speedup=1.4766
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0156	 speedup=2.7944
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0138	 speedup=3.1629
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0131	 speedup=3.3272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0127	 speedup=3.4394

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0271	 speedup=1.5576
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0016	 speedup=26.5307
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0017	 speedup=25.0022
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0014	 speedup=30.1703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0013	 speedup=32.6573

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0441	 speedup=0.1949
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0040	 speedup=2.1396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.6263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.6358
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0023	 speedup=3.7502

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0432	 ParSpMatVec=0.0453	 speedup=0.9528
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0432	 ParSpMatVec=0.0034	 speedup=12.7126
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0432	 ParSpMatVec=0.0021	 speedup=20.6221
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0432	 ParSpMatVec=0.0023	 speedup=18.8336
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0432	 ParSpMatVec=0.0024	 speedup=18.0245

INFO: ParSpMatVec tests passed

>>> End of log
