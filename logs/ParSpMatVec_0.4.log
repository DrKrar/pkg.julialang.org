>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1205.01953125 MB free)
Uptime: 16483.0 sec
Load Avg:  1.00439453125  1.0146484375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     756352 s       3462 s      66284 s     659022 s         40 s
#2  3504 MHz     481517 s       3380 s      59932 s    1052103 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1523	 ParSpMatVec=0.0271	 speedup=5.6111
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1523	 ParSpMatVec=0.0083	 speedup=18.3728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1523	 ParSpMatVec=0.0126	 speedup=12.1080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1523	 ParSpMatVec=0.0086	 speedup=17.7571
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1523	 ParSpMatVec=0.0091	 speedup=16.7515
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1329	 ParSpMatVec=0.0409	 speedup=3.2494
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1329	 ParSpMatVec=0.0124	 speedup=10.6790
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1329	 ParSpMatVec=0.0149	 speedup=8.9373
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1329	 ParSpMatVec=0.0138	 speedup=9.6390
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1329	 ParSpMatVec=0.0134	 speedup=9.9049

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0473	 ParSpMatVec=0.0309	 speedup=1.5295
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0473	 ParSpMatVec=0.0137	 speedup=3.4522
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0473	 ParSpMatVec=0.0152	 speedup=3.1107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0473	 ParSpMatVec=0.0135	 speedup=3.5027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0473	 ParSpMatVec=0.0127	 speedup=3.7248

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0401	 ParSpMatVec=0.0411	 speedup=0.9743
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0401	 ParSpMatVec=0.0022	 speedup=18.5225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0401	 ParSpMatVec=0.0042	 speedup=9.5011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0401	 ParSpMatVec=0.0025	 speedup=15.9731
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0401	 ParSpMatVec=0.0019	 speedup=20.8297

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0460	 speedup=0.1948
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0034	 speedup=2.6465
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0044	 speedup=2.0275
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0032	 speedup=2.8007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0024	 speedup=3.7495

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0442	 speedup=0.9508
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0041	 speedup=10.2582
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0033	 speedup=12.7967
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0037	 speedup=11.2449
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0035	 speedup=11.9047

INFO: ParSpMatVec tests passed

>>> End of log
