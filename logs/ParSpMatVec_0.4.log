>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1165.88671875 MB free)
Uptime: 13662.0 sec
Load Avg:  0.955078125  0.974609375  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     672240 s       1634 s      58618 s     495416 s         24 s
#2  3500 MHz     434257 s       4429 s      52343 s     820415 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1304	 ParSpMatVec=0.0280	 speedup=4.6665
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1304	 ParSpMatVec=0.0117	 speedup=11.1096
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1304	 ParSpMatVec=0.0161	 speedup=8.0844
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1304	 ParSpMatVec=0.0061	 speedup=21.3201
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1304	 ParSpMatVec=0.0101	 speedup=12.9512
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0753	 ParSpMatVec=0.0375	 speedup=2.0066
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0753	 ParSpMatVec=0.0128	 speedup=5.8897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0753	 ParSpMatVec=0.0079	 speedup=9.5537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0753	 ParSpMatVec=0.0105	 speedup=7.2027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0753	 ParSpMatVec=0.0159	 speedup=4.7432

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0279	 ParSpMatVec=0.0152	 speedup=1.8344
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0279	 ParSpMatVec=0.0106	 speedup=2.6362
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0279	 ParSpMatVec=0.0136	 speedup=2.0541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0279	 ParSpMatVec=0.0143	 speedup=1.9470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0279	 ParSpMatVec=0.0133	 speedup=2.0936

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0443	 speedup=1.0223
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0026	 speedup=17.3833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0039	 speedup=11.5087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0064	 speedup=7.1046
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0031	 speedup=14.5865

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0081	 ParSpMatVec=0.0452	 speedup=0.1791
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0081	 ParSpMatVec=0.0042	 speedup=1.9239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0081	 ParSpMatVec=0.0021	 speedup=3.9135
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0081	 ParSpMatVec=0.0051	 speedup=1.5791
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0081	 ParSpMatVec=0.0043	 speedup=1.8697

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0291	 ParSpMatVec=0.0271	 speedup=1.0746
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0291	 ParSpMatVec=0.0034	 speedup=8.4656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0291	 ParSpMatVec=0.0020	 speedup=14.4230
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0291	 ParSpMatVec=0.0032	 speedup=8.9653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0291	 ParSpMatVec=0.0026	 speedup=11.0617

INFO: ParSpMatVec tests passed

>>> End of log
