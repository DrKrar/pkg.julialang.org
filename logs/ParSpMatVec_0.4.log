>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1204.7734375 MB free)
Uptime: 12623.0 sec
Load Avg:  1.09423828125  0.994140625  0.90283203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     564525 s       3439 s      51520 s     515931 s          6 s
#2  3500 MHz     339131 s       2832 s      45228 s     843331 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1334	 ParSpMatVec=0.0160	 speedup=8.3423
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1334	 ParSpMatVec=0.0094	 speedup=14.2383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1334	 ParSpMatVec=0.0126	 speedup=10.5882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1334	 ParSpMatVec=0.0101	 speedup=13.2094
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1334	 ParSpMatVec=0.0094	 speedup=14.2241
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1255	 ParSpMatVec=0.0436	 speedup=2.8783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1255	 ParSpMatVec=0.0126	 speedup=9.9505
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1255	 ParSpMatVec=0.0232	 speedup=5.4127
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1255	 ParSpMatVec=0.0113	 speedup=11.0703
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1255	 ParSpMatVec=0.0120	 speedup=10.4355

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0466	 ParSpMatVec=0.0286	 speedup=1.6274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0466	 ParSpMatVec=0.0134	 speedup=3.4878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0466	 ParSpMatVec=0.0161	 speedup=2.8915
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0466	 ParSpMatVec=0.0142	 speedup=3.2941
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0466	 ParSpMatVec=0.0133	 speedup=3.5184

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0514	 ParSpMatVec=0.0408	 speedup=1.2618
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0514	 ParSpMatVec=0.0029	 speedup=17.5136
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0514	 ParSpMatVec=0.0020	 speedup=25.5737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0514	 ParSpMatVec=0.0017	 speedup=30.1300
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0514	 ParSpMatVec=0.0116	 speedup=4.4242

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0072	 ParSpMatVec=0.0490	 speedup=0.1479
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0072	 ParSpMatVec=0.0047	 speedup=1.5335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0072	 ParSpMatVec=0.0070	 speedup=1.0286
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0072	 ParSpMatVec=0.0068	 speedup=1.0693
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0072	 ParSpMatVec=0.0042	 speedup=1.7155

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0405	 speedup=1.0794
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0047	 speedup=9.2739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0025	 speedup=17.4925
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0039	 speedup=11.2664
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0029	 speedup=15.3488

INFO: ParSpMatVec tests passed

>>> End of log
