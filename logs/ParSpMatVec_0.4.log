>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1198.40625 MB free)
Uptime: 13537.0 sec
Load Avg:  1.0703125  1.0078125  0.99609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     605888 s       8008 s      55276 s     556788 s         31 s
#2  3499 MHz     442988 s        483 s      49378 s     818023 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1240	 ParSpMatVec=0.0313	 speedup=3.9617
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1240	 ParSpMatVec=0.0100	 speedup=12.4553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1240	 ParSpMatVec=0.0126	 speedup=9.8305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1240	 ParSpMatVec=0.0121	 speedup=10.2210
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1240	 ParSpMatVec=0.0115	 speedup=10.7961
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1183	 ParSpMatVec=0.0389	 speedup=3.0449
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1183	 ParSpMatVec=0.0130	 speedup=9.1268
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1183	 ParSpMatVec=0.0149	 speedup=7.9293
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1183	 ParSpMatVec=0.0139	 speedup=8.4851
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1183	 ParSpMatVec=0.0188	 speedup=6.3067

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0499	 ParSpMatVec=0.0500	 speedup=0.9975
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0499	 ParSpMatVec=0.0132	 speedup=3.7797
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0499	 ParSpMatVec=0.0152	 speedup=3.2772
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0499	 ParSpMatVec=0.0129	 speedup=3.8764
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0499	 ParSpMatVec=0.0140	 speedup=3.5700

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0455	 ParSpMatVec=0.0410	 speedup=1.1118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0455	 ParSpMatVec=0.0028	 speedup=16.0205
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0455	 ParSpMatVec=0.0016	 speedup=27.8449
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0455	 ParSpMatVec=0.0030	 speedup=15.2019
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0455	 ParSpMatVec=0.0205	 speedup=2.2158

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0062	 ParSpMatVec=0.0472	 speedup=0.1321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0062	 ParSpMatVec=0.0036	 speedup=1.7441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0062	 ParSpMatVec=0.0025	 speedup=2.4956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0062	 ParSpMatVec=0.0025	 speedup=2.4706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0062	 ParSpMatVec=0.0117	 speedup=0.5326

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0484	 ParSpMatVec=0.0507	 speedup=0.9539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0484	 ParSpMatVec=0.0042	 speedup=11.6486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0484	 ParSpMatVec=0.0289	 speedup=1.6735
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0484	 ParSpMatVec=0.0088	 speedup=5.5193
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0484	 ParSpMatVec=0.0021	 speedup=23.2296

INFO: ParSpMatVec tests passed

>>> End of log
