>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.7
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.15625 MB free)
Uptime: 16771.0 sec
Load Avg:  1.0029296875  1.0146484375  0.98095703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     783574 s       2006 s      73824 s     600179 s        182 s
#2  3500 MHz     536958 s       4874 s      67339 s     946194 s          5 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.2
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.14.0
 - SHA                           0.3.0
 - URIParser                     0.1.7
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1364	 ParSpMatVec=0.0268	 speedup=5.0881
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1364	 ParSpMatVec=0.0086	 speedup=15.9548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1364	 ParSpMatVec=0.0136	 speedup=10.0117
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1364	 ParSpMatVec=0.0087	 speedup=15.6753
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1364	 ParSpMatVec=0.0074	 speedup=18.4553
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1425	 ParSpMatVec=0.0406	 speedup=3.5095
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1425	 ParSpMatVec=0.0144	 speedup=9.9292
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1425	 ParSpMatVec=0.0284	 speedup=5.0205
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1425	 ParSpMatVec=0.0154	 speedup=9.2774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1425	 ParSpMatVec=0.0133	 speedup=10.6783

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0181	 speedup=2.4931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0139	 speedup=3.2613
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0207	 speedup=2.1872
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0141	 speedup=3.2145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0128	 speedup=3.5322

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0285	 ParSpMatVec=0.0398	 speedup=0.7152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0285	 ParSpMatVec=0.0031	 speedup=9.2128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0285	 ParSpMatVec=0.0043	 speedup=6.5568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0285	 ParSpMatVec=0.0024	 speedup=11.8201
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0285	 ParSpMatVec=0.0022	 speedup=12.8540

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0471	 speedup=0.2060
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0050	 speedup=1.9373
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0023	 speedup=4.2087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0033	 speedup=2.9534
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0031	 speedup=3.1163

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0444	 ParSpMatVec=0.0425	 speedup=1.0434
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0444	 ParSpMatVec=0.0052	 speedup=8.4557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0444	 ParSpMatVec=0.0037	 speedup=12.1287
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0444	 ParSpMatVec=0.0033	 speedup=13.4041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0444	 ParSpMatVec=0.0025	 speedup=17.9757

INFO: ParSpMatVec tests passed

>>> End of log
