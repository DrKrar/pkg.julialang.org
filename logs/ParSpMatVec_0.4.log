>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1170.1796875 MB free)
Uptime: 12681.0 sec
Load Avg:  0.9755859375  0.95849609375  0.99658203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     546368 s       4878 s      54147 s     512507 s         22 s
#2  3500 MHz     375881 s        101 s      45526 s     778345 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.0
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1369	 ParSpMatVec=0.0222	 speedup=6.1804
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1369	 ParSpMatVec=0.0086	 speedup=15.9079
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1369	 ParSpMatVec=0.0094	 speedup=14.5344
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1369	 ParSpMatVec=0.0118	 speedup=11.5768
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1369	 ParSpMatVec=0.0074	 speedup=18.4532
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1177	 ParSpMatVec=0.0663	 speedup=1.7743
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1177	 ParSpMatVec=0.0133	 speedup=8.8576
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1177	 ParSpMatVec=0.0139	 speedup=8.4918
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1177	 ParSpMatVec=0.0122	 speedup=9.6794
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1177	 ParSpMatVec=0.0129	 speedup=9.1108

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0394	 ParSpMatVec=0.0181	 speedup=2.1761
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0394	 ParSpMatVec=0.0116	 speedup=3.3982
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0394	 ParSpMatVec=0.0120	 speedup=3.2916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0394	 ParSpMatVec=0.0118	 speedup=3.3296
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0394	 ParSpMatVec=0.0144	 speedup=2.7414

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0349	 ParSpMatVec=0.0322	 speedup=1.0831
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0349	 ParSpMatVec=0.0025	 speedup=13.8270
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0349	 ParSpMatVec=0.0055	 speedup=6.3975
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0349	 ParSpMatVec=0.0021	 speedup=16.4656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0349	 ParSpMatVec=0.0021	 speedup=16.6806

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0425	 speedup=0.2054
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0036	 speedup=2.4479
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0025	 speedup=3.5083
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0037	 speedup=2.3621
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0025	 speedup=3.4780

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0350	 ParSpMatVec=0.0323	 speedup=1.0863
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0350	 ParSpMatVec=0.0032	 speedup=10.7992
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0350	 ParSpMatVec=0.0021	 speedup=17.0016
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0350	 ParSpMatVec=0.0030	 speedup=11.5795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0350	 ParSpMatVec=0.0024	 speedup=14.4071

INFO: ParSpMatVec tests passed

>>> End of log
