>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1057.15234375 MB free)
Uptime: 14027.0 sec
Load Avg:  1.06396484375  1.01611328125  1.0380859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     588617 s         75 s      57716 s     583921 s         24 s
#2  3504 MHz     401802 s         70 s      49620 s     884871 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1054	 ParSpMatVec=0.0195	 speedup=5.4106
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1054	 ParSpMatVec=0.0082	 speedup=12.9346
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1054	 ParSpMatVec=0.0109	 speedup=9.6966
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1054	 ParSpMatVec=0.0082	 speedup=12.8225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1054	 ParSpMatVec=0.0135	 speedup=7.8332
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1484	 ParSpMatVec=0.0401	 speedup=3.6986
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1484	 ParSpMatVec=0.0127	 speedup=11.6545
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1484	 ParSpMatVec=0.0121	 speedup=12.2503
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1484	 ParSpMatVec=0.0140	 speedup=10.6238
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1484	 ParSpMatVec=0.0146	 speedup=10.1455

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0385	 ParSpMatVec=0.0172	 speedup=2.2371
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0385	 ParSpMatVec=0.0133	 speedup=2.8979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0385	 ParSpMatVec=0.0144	 speedup=2.6807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0385	 ParSpMatVec=0.0128	 speedup=3.0071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0385	 ParSpMatVec=0.0125	 speedup=3.0720

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0319	 ParSpMatVec=0.0260	 speedup=1.2234
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0319	 ParSpMatVec=0.0023	 speedup=13.7392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0319	 ParSpMatVec=0.0021	 speedup=14.8694
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0319	 ParSpMatVec=0.0019	 speedup=16.6929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0319	 ParSpMatVec=0.0042	 speedup=7.4996

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0115	 ParSpMatVec=0.0372	 speedup=0.3084
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0115	 ParSpMatVec=0.0033	 speedup=3.4650
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0115	 ParSpMatVec=0.0039	 speedup=2.9787
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0115	 ParSpMatVec=0.0041	 speedup=2.7676
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0115	 ParSpMatVec=0.0026	 speedup=4.3725

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0274	 ParSpMatVec=0.0286	 speedup=0.9574
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0274	 ParSpMatVec=0.0029	 speedup=9.3361
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0274	 ParSpMatVec=0.0022	 speedup=12.2728
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0274	 ParSpMatVec=0.0018	 speedup=15.3080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0274	 ParSpMatVec=0.0023	 speedup=12.0522

INFO: ParSpMatVec tests passed

>>> End of log
