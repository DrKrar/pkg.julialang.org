>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1182.4296875 MB free)
Uptime: 13680.0 sec
Load Avg:  1.0458984375  1.02490234375  1.02099609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     650017 s       7136 s      62398 s     518754 s         26 s
#2  3500 MHz     434478 s        460 s      53875 s     837186 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1279	 ParSpMatVec=0.0267	 speedup=4.7971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1279	 ParSpMatVec=0.0105	 speedup=12.1335
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1279	 ParSpMatVec=0.0081	 speedup=15.8538
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1279	 ParSpMatVec=0.0079	 speedup=16.1957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1279	 ParSpMatVec=0.0077	 speedup=16.5345
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1407	 ParSpMatVec=0.0406	 speedup=3.4664
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1407	 ParSpMatVec=0.0120	 speedup=11.7379
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1407	 ParSpMatVec=0.0112	 speedup=12.5259
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1407	 ParSpMatVec=0.0101	 speedup=13.9947
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1407	 ParSpMatVec=0.0105	 speedup=13.4150

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0272	 ParSpMatVec=0.0299	 speedup=0.9100
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0272	 ParSpMatVec=0.0126	 speedup=2.1592
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0272	 ParSpMatVec=0.0067	 speedup=4.0734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0272	 ParSpMatVec=0.0082	 speedup=3.3255
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0272	 ParSpMatVec=0.0100	 speedup=2.7125

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0310	 ParSpMatVec=0.0494	 speedup=0.6283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0310	 ParSpMatVec=0.0025	 speedup=12.5245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0310	 ParSpMatVec=0.0013	 speedup=23.8118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0310	 ParSpMatVec=0.0017	 speedup=18.7550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0310	 ParSpMatVec=0.0082	 speedup=3.7807

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0099	 ParSpMatVec=0.0484	 speedup=0.2053
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0099	 ParSpMatVec=0.0039	 speedup=2.5433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0099	 ParSpMatVec=0.0021	 speedup=4.6932
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0099	 ParSpMatVec=0.0022	 speedup=4.4285
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0099	 ParSpMatVec=0.0024	 speedup=4.0861

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0475	 speedup=1.0214
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0038	 speedup=12.8102
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0026	 speedup=18.8984
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0060	 speedup=8.1283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0017	 speedup=28.0034

INFO: ParSpMatVec tests passed

>>> End of log
