>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.9921875 MB free)
Uptime: 15298.0 sec
Load Avg:  0.982421875  1.02490234375  1.04443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     713989 s       4146 s      59626 s     603776 s         28 s
#2  3500 MHz     493568 s       2300 s      51997 s     927827 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0855	 ParSpMatVec=0.0266	 speedup=3.2198
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0855	 ParSpMatVec=0.0087	 speedup=9.7826
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0855	 ParSpMatVec=0.0132	 speedup=6.4963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0855	 ParSpMatVec=0.0102	 speedup=8.3853
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0855	 ParSpMatVec=0.0062	 speedup=13.8503
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1189	 ParSpMatVec=0.0408	 speedup=2.9130
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1189	 ParSpMatVec=0.0127	 speedup=9.3706
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1189	 ParSpMatVec=0.0149	 speedup=7.9879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1189	 ParSpMatVec=0.0177	 speedup=6.7178
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1189	 ParSpMatVec=0.0154	 speedup=7.7189

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0286	 speedup=1.4818
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0116	 speedup=3.6488
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0149	 speedup=2.8547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0160	 speedup=2.6472
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0149	 speedup=2.8544

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0428	 ParSpMatVec=0.0380	 speedup=1.1265
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0428	 ParSpMatVec=0.0022	 speedup=19.8536
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0428	 ParSpMatVec=0.0020	 speedup=21.4321
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0428	 ParSpMatVec=0.0018	 speedup=23.3026
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0428	 ParSpMatVec=0.0016	 speedup=26.7636

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0396	 speedup=0.2141
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0038	 speedup=2.2382
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0024	 speedup=3.5503
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0042	 speedup=2.0011
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0030	 speedup=2.7961

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0449	 ParSpMatVec=0.0473	 speedup=0.9486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0449	 ParSpMatVec=0.0039	 speedup=11.6314
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0449	 ParSpMatVec=0.0038	 speedup=11.8576
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0449	 ParSpMatVec=0.0022	 speedup=20.6335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0449	 ParSpMatVec=0.0022	 speedup=20.5723

INFO: ParSpMatVec tests passed

>>> End of log
