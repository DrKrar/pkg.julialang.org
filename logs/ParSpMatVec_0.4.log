>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1190.875 MB free)
Uptime: 13807.0 sec
Load Avg:  0.90966796875  0.97314453125  1.0029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     624305 s       8674 s      59155 s     555784 s         22 s
#2  3500 MHz     409168 s       4890 s      54219 s     861598 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0857	 ParSpMatVec=0.0169	 speedup=5.0773
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0857	 ParSpMatVec=0.0081	 speedup=10.5243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0857	 ParSpMatVec=0.0140	 speedup=6.1174
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0857	 ParSpMatVec=0.0080	 speedup=10.7422
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0857	 ParSpMatVec=0.0088	 speedup=9.7725
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0757	 ParSpMatVec=0.0243	 speedup=3.1154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0757	 ParSpMatVec=0.0108	 speedup=7.0391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0757	 ParSpMatVec=0.0153	 speedup=4.9500
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0757	 ParSpMatVec=0.0154	 speedup=4.9201
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0757	 ParSpMatVec=0.0131	 speedup=5.7776

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0295	 ParSpMatVec=0.0169	 speedup=1.7465
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0295	 ParSpMatVec=0.0106	 speedup=2.7823
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0295	 ParSpMatVec=0.0127	 speedup=2.3313
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0295	 ParSpMatVec=0.0112	 speedup=2.6395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0295	 ParSpMatVec=0.0124	 speedup=2.3759

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0310	 ParSpMatVec=0.0225	 speedup=1.3784
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0310	 ParSpMatVec=0.0016	 speedup=19.5327
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0310	 ParSpMatVec=0.0019	 speedup=16.1001
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0310	 ParSpMatVec=0.0018	 speedup=17.3740
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0310	 ParSpMatVec=0.0018	 speedup=17.0248

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0262	 speedup=0.2548
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0031	 speedup=2.1557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0021	 speedup=3.1953
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0034	 speedup=1.9434
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0021	 speedup=3.1368

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0419	 ParSpMatVec=0.0664	 speedup=0.6316
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0419	 ParSpMatVec=0.0039	 speedup=10.8239
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0419	 ParSpMatVec=0.0024	 speedup=17.1713
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0419	 ParSpMatVec=0.0025	 speedup=16.5014
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0419	 ParSpMatVec=0.0025	 speedup=16.6821

INFO: ParSpMatVec tests passed

>>> End of log
