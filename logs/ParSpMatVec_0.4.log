>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.09765625 MB free)
Uptime: 15494.0 sec
Load Avg:  1.00927734375  1.0146484375  1.00244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     770093 s       1656 s      59837 s     554012 s         31 s
#2  3499 MHz     428535 s       4815 s      52792 s    1008207 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0824	 ParSpMatVec=0.0266	 speedup=3.0965
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0824	 ParSpMatVec=0.0093	 speedup=8.8195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0824	 ParSpMatVec=0.0125	 speedup=6.5900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0824	 ParSpMatVec=0.0107	 speedup=7.7141
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0824	 ParSpMatVec=0.0094	 speedup=8.7887
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1225	 ParSpMatVec=0.0256	 speedup=4.7920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1225	 ParSpMatVec=0.0122	 speedup=10.0012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1225	 ParSpMatVec=0.0143	 speedup=8.5869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1225	 ParSpMatVec=0.0099	 speedup=12.3546
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1225	 ParSpMatVec=0.0102	 speedup=12.0372

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0428	 ParSpMatVec=0.0181	 speedup=2.3689
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0428	 ParSpMatVec=0.0149	 speedup=2.8652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0428	 ParSpMatVec=0.0142	 speedup=3.0174
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0428	 ParSpMatVec=0.0128	 speedup=3.3470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0428	 ParSpMatVec=0.0122	 speedup=3.5003

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0529	 ParSpMatVec=0.0361	 speedup=1.4674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0529	 ParSpMatVec=0.0020	 speedup=26.8287
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0529	 ParSpMatVec=0.0023	 speedup=23.1267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0529	 ParSpMatVec=0.0018	 speedup=29.9469
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0529	 ParSpMatVec=0.0019	 speedup=27.3822

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0064	 ParSpMatVec=0.0247	 speedup=0.2594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0064	 ParSpMatVec=0.0027	 speedup=2.3539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0064	 ParSpMatVec=0.0015	 speedup=4.3160
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0064	 ParSpMatVec=0.0024	 speedup=2.7200
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0064	 ParSpMatVec=0.0022	 speedup=2.9814

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0276	 ParSpMatVec=0.0269	 speedup=1.0264
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0276	 ParSpMatVec=0.0030	 speedup=9.2460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0276	 ParSpMatVec=0.0020	 speedup=13.6613
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0276	 ParSpMatVec=0.0019	 speedup=14.3949
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0276	 ParSpMatVec=0.0022	 speedup=12.6551

INFO: ParSpMatVec tests passed

>>> End of log
