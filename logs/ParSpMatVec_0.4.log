>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1060.16015625 MB free)
Uptime: 14221.0 sec
Load Avg:  1.033203125  1.0146484375  0.9765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     566460 s       7027 s      63591 s     616258 s         54 s
#2  3499 MHz     427343 s         52 s      57139 s     842848 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1655	 ParSpMatVec=0.0258	 speedup=6.4036
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1655	 ParSpMatVec=0.0126	 speedup=13.1746
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1655	 ParSpMatVec=0.0120	 speedup=13.8357
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1655	 ParSpMatVec=0.0122	 speedup=13.6174
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1655	 ParSpMatVec=0.0123	 speedup=13.4727
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1217	 ParSpMatVec=0.0326	 speedup=3.7315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1217	 ParSpMatVec=0.0142	 speedup=8.5955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1217	 ParSpMatVec=0.0168	 speedup=7.2399
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1217	 ParSpMatVec=0.0154	 speedup=7.8828
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1217	 ParSpMatVec=0.0143	 speedup=8.5167

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0337	 ParSpMatVec=0.0287	 speedup=1.1732
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0337	 ParSpMatVec=0.0134	 speedup=2.5228
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0337	 ParSpMatVec=0.0153	 speedup=2.1965
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0337	 ParSpMatVec=0.0167	 speedup=2.0234
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0337	 ParSpMatVec=0.0170	 speedup=1.9857

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0298	 speedup=1.5178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0028	 speedup=16.0617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0029	 speedup=15.4965
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0027	 speedup=16.9165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0020	 speedup=22.4224

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0206	 ParSpMatVec=0.0546	 speedup=0.3774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0206	 ParSpMatVec=0.0033	 speedup=6.2758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0206	 ParSpMatVec=0.0017	 speedup=12.1086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0206	 ParSpMatVec=0.0031	 speedup=6.5999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0206	 ParSpMatVec=0.0020	 speedup=10.2444

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0403	 ParSpMatVec=0.0669	 speedup=0.6026
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0403	 ParSpMatVec=0.0048	 speedup=8.3366
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0403	 ParSpMatVec=0.0047	 speedup=8.6544
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0403	 ParSpMatVec=0.0054	 speedup=7.4368
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0403	 ParSpMatVec=0.0067	 speedup=5.9969

INFO: ParSpMatVec tests passed

>>> End of log
