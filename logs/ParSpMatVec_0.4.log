>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1193.44140625 MB free)
Uptime: 15683.0 sec
Load Avg:  1.02734375  1.029296875  0.98046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     735298 s        362 s      60556 s     618119 s         30 s
#2  3500 MHz     490291 s       5946 s      54436 s     967693 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0865	 ParSpMatVec=0.0243	 speedup=3.5541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0865	 ParSpMatVec=0.0080	 speedup=10.8131
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0865	 ParSpMatVec=0.0111	 speedup=7.8251
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0865	 ParSpMatVec=0.0123	 speedup=7.0447
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0865	 ParSpMatVec=0.0074	 speedup=11.6636
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1301	 ParSpMatVec=0.0438	 speedup=2.9683
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1301	 ParSpMatVec=0.0151	 speedup=8.6045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1301	 ParSpMatVec=0.0142	 speedup=9.1785
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1301	 ParSpMatVec=0.0102	 speedup=12.7243
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1301	 ParSpMatVec=0.0164	 speedup=7.9431

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0451	 ParSpMatVec=0.0277	 speedup=1.6282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0451	 ParSpMatVec=0.0125	 speedup=3.6154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0451	 ParSpMatVec=0.0088	 speedup=5.0978
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0451	 ParSpMatVec=0.0105	 speedup=4.2987
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0451	 ParSpMatVec=0.0111	 speedup=4.0486

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0361	 ParSpMatVec=0.0341	 speedup=1.0588
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0361	 ParSpMatVec=0.0025	 speedup=14.2469
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0361	 ParSpMatVec=0.0018	 speedup=20.0900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0361	 ParSpMatVec=0.0014	 speedup=26.5571
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0361	 ParSpMatVec=0.0032	 speedup=11.3476

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0103	 ParSpMatVec=0.0563	 speedup=0.1837
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0103	 ParSpMatVec=0.0032	 speedup=3.2762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0103	 ParSpMatVec=0.0016	 speedup=6.5884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0103	 ParSpMatVec=0.0033	 speedup=3.1390
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0103	 ParSpMatVec=0.0022	 speedup=4.7823

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0455	 speedup=1.0677
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0035	 speedup=14.0264
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0057	 speedup=8.5915
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0022	 speedup=21.9692
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0020	 speedup=24.6532

INFO: ParSpMatVec tests passed

>>> End of log
