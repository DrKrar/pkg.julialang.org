>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1201.9140625 MB free)
Uptime: 13156.0 sec
Load Avg:  1.0078125  1.05517578125  1.00634765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     635444 s       7940 s      58193 s     480681 s         30 s
#2  3500 MHz     393083 s         46 s      52600 s     831258 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0776	 ParSpMatVec=0.0172	 speedup=4.5220
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0776	 ParSpMatVec=0.0106	 speedup=7.3121
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0776	 ParSpMatVec=0.0110	 speedup=7.0345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0776	 ParSpMatVec=0.0096	 speedup=8.0881
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0776	 ParSpMatVec=0.0065	 speedup=11.8535
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1290	 ParSpMatVec=0.0431	 speedup=2.9949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1290	 ParSpMatVec=0.0139	 speedup=9.2605
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1290	 ParSpMatVec=0.0143	 speedup=9.0282
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1290	 ParSpMatVec=0.0128	 speedup=10.0448
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1290	 ParSpMatVec=0.0128	 speedup=10.0534

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0494	 ParSpMatVec=0.0314	 speedup=1.5738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0494	 ParSpMatVec=0.0132	 speedup=3.7442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0494	 ParSpMatVec=0.0149	 speedup=3.3060
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0494	 ParSpMatVec=0.0170	 speedup=2.9005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0494	 ParSpMatVec=0.0133	 speedup=3.7078

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0393	 ParSpMatVec=0.0363	 speedup=1.0834
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0393	 ParSpMatVec=0.0025	 speedup=15.7377
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0393	 ParSpMatVec=0.0036	 speedup=11.0224
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0393	 ParSpMatVec=0.0035	 speedup=11.1084
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0393	 ParSpMatVec=0.0031	 speedup=12.7940

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0443	 speedup=0.1518
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0041	 speedup=1.6230
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0036	 speedup=1.8779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0051	 speedup=1.3212
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0024	 speedup=2.7738

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0271	 ParSpMatVec=0.0430	 speedup=0.6316
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0271	 ParSpMatVec=0.0037	 speedup=7.3025
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0271	 ParSpMatVec=0.0022	 speedup=12.5647
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0271	 ParSpMatVec=0.0134	 speedup=2.0290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0271	 ParSpMatVec=0.0033	 speedup=8.2078

INFO: ParSpMatVec tests passed

>>> End of log
