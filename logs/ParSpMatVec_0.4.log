>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1171.01953125 MB free)
Uptime: 13433.0 sec
Load Avg:  1.01318359375  0.9814453125  0.9814453125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     611025 s       3457 s      58558 s     547266 s         27 s
#2  3500 MHz     439125 s       3804 s      52369 s     803502 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1241	 ParSpMatVec=0.0249	 speedup=4.9869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1241	 ParSpMatVec=0.0088	 speedup=14.0385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1241	 ParSpMatVec=0.0154	 speedup=8.0577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1241	 ParSpMatVec=0.0113	 speedup=10.9972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1241	 ParSpMatVec=0.0083	 speedup=14.9365
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1155	 ParSpMatVec=0.0390	 speedup=2.9585
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1155	 ParSpMatVec=0.0137	 speedup=8.4107
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1155	 ParSpMatVec=0.0170	 speedup=6.7861
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1155	 ParSpMatVec=0.0152	 speedup=7.6234
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1155	 ParSpMatVec=0.0129	 speedup=8.9828

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0304	 speedup=1.3886
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0136	 speedup=3.1060
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0144	 speedup=2.9329
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0125	 speedup=3.3729
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0121	 speedup=3.5020

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0393	 speedup=1.1047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0031	 speedup=14.0793
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0041	 speedup=10.5874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0019	 speedup=22.9117
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0016	 speedup=27.8904

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0414	 speedup=0.2008
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0038	 speedup=2.1982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0020	 speedup=4.1614
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0024	 speedup=3.4348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0025	 speedup=3.2890

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0301	 ParSpMatVec=0.0282	 speedup=1.0665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0301	 ParSpMatVec=0.0034	 speedup=8.9356
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0301	 ParSpMatVec=0.0018	 speedup=16.6918
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0301	 ParSpMatVec=0.0022	 speedup=13.8392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0301	 ParSpMatVec=0.0025	 speedup=11.9745

INFO: ParSpMatVec tests passed

>>> End of log
