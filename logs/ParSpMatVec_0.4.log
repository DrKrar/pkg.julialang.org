>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1199.15234375 MB free)
Uptime: 16180.0 sec
Load Avg:  1.00537109375  1.02490234375  1.04443359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     780411 s       5977 s      66900 s     593772 s         60 s
#2  3499 MHz     493328 s        444 s      60017 s    1000584 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.2
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.14.0
 - SHA                           0.3.0
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0829	 ParSpMatVec=0.0262	 speedup=3.1583
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0829	 ParSpMatVec=0.0206	 speedup=4.0208
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0829	 ParSpMatVec=0.0084	 speedup=9.8695
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0829	 ParSpMatVec=0.0061	 speedup=13.5102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0829	 ParSpMatVec=0.0120	 speedup=6.9033
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1372	 ParSpMatVec=0.0551	 speedup=2.4905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1372	 ParSpMatVec=0.0117	 speedup=11.7146
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1372	 ParSpMatVec=0.0112	 speedup=12.2470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1372	 ParSpMatVec=0.0117	 speedup=11.7239
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1372	 ParSpMatVec=0.0144	 speedup=9.5118

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0452	 ParSpMatVec=0.0357	 speedup=1.2655
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0452	 ParSpMatVec=0.0139	 speedup=3.2421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0452	 ParSpMatVec=0.0104	 speedup=4.3408
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0452	 ParSpMatVec=0.0143	 speedup=3.1516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0452	 ParSpMatVec=0.0114	 speedup=3.9487

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0539	 speedup=0.7886
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0031	 speedup=13.8924
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0014	 speedup=31.1036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0034	 speedup=12.3246
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0029	 speedup=14.6731

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0308	 speedup=0.2683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0035	 speedup=2.3311
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0029	 speedup=2.8302
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0023	 speedup=3.5470
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0027	 speedup=3.0533

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0315	 ParSpMatVec=0.0301	 speedup=1.0461
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0315	 ParSpMatVec=0.0040	 speedup=7.9434
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0315	 ParSpMatVec=0.0027	 speedup=11.6999
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0315	 ParSpMatVec=0.0027	 speedup=11.6455
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0315	 ParSpMatVec=0.0024	 speedup=13.0262

INFO: ParSpMatVec tests passed

>>> End of log
