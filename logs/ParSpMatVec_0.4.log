>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1172.16015625 MB free)
Uptime: 13233.0 sec
Load Avg:  0.88134765625  0.931640625  0.93994140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3497 MHz     581664 s       5010 s      54111 s     513287 s         26 s
#2  3497 MHz     330064 s        850 s      45976 s     887376 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0850	 ParSpMatVec=0.0269	 speedup=3.1634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0850	 ParSpMatVec=0.0095	 speedup=8.9421
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0850	 ParSpMatVec=0.0141	 speedup=6.0361
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0850	 ParSpMatVec=0.0114	 speedup=7.4310
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0850	 ParSpMatVec=0.0097	 speedup=8.7986
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1042	 ParSpMatVec=0.0288	 speedup=3.6185
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1042	 ParSpMatVec=0.0124	 speedup=8.4148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1042	 ParSpMatVec=0.0145	 speedup=7.1847
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1042	 ParSpMatVec=0.0129	 speedup=8.0561
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1042	 ParSpMatVec=0.0128	 speedup=8.1478

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0322	 ParSpMatVec=0.0327	 speedup=0.9830
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0322	 ParSpMatVec=0.0136	 speedup=2.3592
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0322	 ParSpMatVec=0.0154	 speedup=2.0905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0322	 ParSpMatVec=0.0129	 speedup=2.5027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0322	 ParSpMatVec=0.0136	 speedup=2.3590

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0422	 ParSpMatVec=0.0420	 speedup=1.0045
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0422	 ParSpMatVec=0.0029	 speedup=14.2944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0422	 ParSpMatVec=0.0015	 speedup=28.5890
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0422	 ParSpMatVec=0.0015	 speedup=28.9395
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0422	 ParSpMatVec=0.0022	 speedup=19.3753

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0066	 ParSpMatVec=0.0276	 speedup=0.2397
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0066	 ParSpMatVec=0.0035	 speedup=1.8910
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0066	 ParSpMatVec=0.0078	 speedup=0.8516
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0066	 ParSpMatVec=0.0037	 speedup=1.7758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0066	 ParSpMatVec=0.0021	 speedup=3.1873

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0301	 ParSpMatVec=0.0321	 speedup=0.9383
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0301	 ParSpMatVec=0.0038	 speedup=7.9558
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0301	 ParSpMatVec=0.0023	 speedup=12.9565
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0301	 ParSpMatVec=0.0024	 speedup=12.6905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0301	 ParSpMatVec=0.0025	 speedup=12.0386

INFO: ParSpMatVec tests passed

>>> End of log
