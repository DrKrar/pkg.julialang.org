>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1197.5546875 MB free)
Uptime: 15519.0 sec
Load Avg:  1.03125  1.0478515625  1.04638671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     740340 s       2440 s      59611 s     600349 s         28 s
#2  3499 MHz     467232 s       4260 s      51634 s     985530 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1131	 ParSpMatVec=0.0147	 speedup=7.7145
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1131	 ParSpMatVec=0.0065	 speedup=17.2716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1131	 ParSpMatVec=0.0099	 speedup=11.4228
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1131	 ParSpMatVec=0.0091	 speedup=12.4088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1131	 ParSpMatVec=0.0056	 speedup=20.0201
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1080	 ParSpMatVec=0.0407	 speedup=2.6538
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1080	 ParSpMatVec=0.0108	 speedup=9.9610
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1080	 ParSpMatVec=0.0136	 speedup=7.9238
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1080	 ParSpMatVec=0.0121	 speedup=8.9411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1080	 ParSpMatVec=0.0114	 speedup=9.4832

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0175	 speedup=1.6203
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0103	 speedup=2.7565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0118	 speedup=2.3930
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0109	 speedup=2.6082
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0096	 speedup=2.9521

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0248	 ParSpMatVec=0.0222	 speedup=1.1166
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0248	 ParSpMatVec=0.0017	 speedup=14.9906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0248	 ParSpMatVec=0.0017	 speedup=14.7034
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0248	 ParSpMatVec=0.0014	 speedup=18.0543
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0248	 ParSpMatVec=0.0013	 speedup=19.3148

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0057	 ParSpMatVec=0.0244	 speedup=0.2335
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0057	 ParSpMatVec=0.0029	 speedup=1.9863
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0057	 ParSpMatVec=0.0018	 speedup=3.1768
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0057	 ParSpMatVec=0.0018	 speedup=3.2489
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0057	 ParSpMatVec=0.0015	 speedup=3.6966

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0253	 ParSpMatVec=0.0252	 speedup=1.0032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0253	 ParSpMatVec=0.0037	 speedup=6.7902
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0253	 ParSpMatVec=0.0019	 speedup=13.6344
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0253	 ParSpMatVec=0.0024	 speedup=10.6876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0253	 ParSpMatVec=0.0025	 speedup=10.2229

INFO: ParSpMatVec tests passed

>>> End of log
