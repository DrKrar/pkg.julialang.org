>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1177.9296875 MB free)
Uptime: 12637.0 sec
Load Avg:  0.9111328125  0.8701171875  0.9111328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     487841 s       6643 s      49316 s     585978 s         28 s
#2  3499 MHz     365988 s         58 s      43374 s     757969 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1102	 ParSpMatVec=0.0247	 speedup=4.4547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1102	 ParSpMatVec=0.0098	 speedup=11.2979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1102	 ParSpMatVec=0.0112	 speedup=9.8239
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1102	 ParSpMatVec=0.0089	 speedup=12.4386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1102	 ParSpMatVec=0.0115	 speedup=9.5618
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1157	 ParSpMatVec=0.0416	 speedup=2.7806
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1157	 ParSpMatVec=0.0123	 speedup=9.4454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1157	 ParSpMatVec=0.0144	 speedup=8.0569
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1157	 ParSpMatVec=0.0189	 speedup=6.1328
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1157	 ParSpMatVec=0.0103	 speedup=11.2628

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0379	 speedup=1.2697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0119	 speedup=4.0482
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0147	 speedup=3.2668
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0130	 speedup=3.7083
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0123	 speedup=3.9031

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0322	 ParSpMatVec=0.0440	 speedup=0.7330
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0322	 ParSpMatVec=0.0030	 speedup=10.8654
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0322	 ParSpMatVec=0.0024	 speedup=13.4341
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0322	 ParSpMatVec=0.0037	 speedup=8.7705
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0322	 ParSpMatVec=0.0013	 speedup=24.9968

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0132	 ParSpMatVec=0.0269	 speedup=0.4922
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0132	 ParSpMatVec=0.0039	 speedup=3.4158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0132	 ParSpMatVec=0.0054	 speedup=2.4682
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0132	 ParSpMatVec=0.0031	 speedup=4.2929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0132	 ParSpMatVec=0.0038	 speedup=3.5264

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0344	 ParSpMatVec=0.0475	 speedup=0.7242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0344	 ParSpMatVec=0.0042	 speedup=8.1299
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0344	 ParSpMatVec=0.0041	 speedup=8.4409
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0344	 ParSpMatVec=0.0038	 speedup=9.1490
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0344	 ParSpMatVec=0.0037	 speedup=9.2970

INFO: ParSpMatVec tests passed

>>> End of log
