>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1168.828125 MB free)
Uptime: 12369.0 sec
Load Avg:  1.076171875  0.98095703125  0.98583984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     561051 s       2286 s      55194 s     467210 s         25 s
#2  3499 MHz     356896 s       5283 s      46960 s     774229 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0929	 ParSpMatVec=0.0260	 speedup=3.5746
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0929	 ParSpMatVec=0.0090	 speedup=10.3356
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0929	 ParSpMatVec=0.0112	 speedup=8.3112
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0929	 ParSpMatVec=0.0090	 speedup=10.2936
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0929	 ParSpMatVec=0.0089	 speedup=10.4082
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1064	 ParSpMatVec=0.0274	 speedup=3.8796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1064	 ParSpMatVec=0.0125	 speedup=8.5353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1064	 ParSpMatVec=0.0145	 speedup=7.3224
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1064	 ParSpMatVec=0.0131	 speedup=8.1379
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1064	 ParSpMatVec=0.0132	 speedup=8.0534

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0172	 speedup=1.6412
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0130	 speedup=2.1696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0151	 speedup=1.8780
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0119	 speedup=2.3807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0124	 speedup=2.2878

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0335	 ParSpMatVec=0.0242	 speedup=1.3813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0335	 ParSpMatVec=0.0024	 speedup=14.2195
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0335	 ParSpMatVec=0.0021	 speedup=15.6008
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0335	 ParSpMatVec=0.0017	 speedup=19.2593
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0335	 ParSpMatVec=0.0026	 speedup=12.8590

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0066	 ParSpMatVec=0.0265	 speedup=0.2494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0066	 ParSpMatVec=0.0038	 speedup=1.7535
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0066	 ParSpMatVec=0.0021	 speedup=3.0857
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0066	 ParSpMatVec=0.0022	 speedup=2.9748
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0066	 ParSpMatVec=0.0030	 speedup=2.2273

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0333	 ParSpMatVec=0.0290	 speedup=1.1492
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0333	 ParSpMatVec=0.0047	 speedup=7.0178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0333	 ParSpMatVec=0.0028	 speedup=12.0800
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0333	 ParSpMatVec=0.0025	 speedup=13.1807
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0333	 ParSpMatVec=0.0023	 speedup=14.5351

INFO: ParSpMatVec tests passed

>>> End of log
