>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1072.53125 MB free)
Uptime: 14249.0 sec
Load Avg:  0.9765625  0.9853515625  1.0126953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     591276 s       1848 s      59962 s     612183 s         30 s
#2  3500 MHz     402982 s       4740 s      52330 s     883370 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1273	 ParSpMatVec=0.0270	 speedup=4.7071
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1273	 ParSpMatVec=0.0087	 speedup=14.5830
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1273	 ParSpMatVec=0.0130	 speedup=9.7686
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1273	 ParSpMatVec=0.0106	 speedup=11.9784
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1273	 ParSpMatVec=0.0075	 speedup=16.9263
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1121	 ParSpMatVec=0.0396	 speedup=2.8315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1121	 ParSpMatVec=0.0129	 speedup=8.7195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1121	 ParSpMatVec=0.0142	 speedup=7.8726
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1121	 ParSpMatVec=0.0144	 speedup=7.7742
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1121	 ParSpMatVec=0.0125	 speedup=8.9664

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0298	 ParSpMatVec=0.0205	 speedup=1.4525
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0298	 ParSpMatVec=0.0146	 speedup=2.0363
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0298	 ParSpMatVec=0.0147	 speedup=2.0321
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0298	 ParSpMatVec=0.0158	 speedup=1.8861
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0298	 ParSpMatVec=0.0133	 speedup=2.2339

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0254	 speedup=1.6511
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0025	 speedup=17.0772
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0020	 speedup=21.2680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0014	 speedup=31.0727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0011	 speedup=38.1061

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0057	 ParSpMatVec=0.0494	 speedup=0.1160
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0057	 ParSpMatVec=0.0028	 speedup=2.0186
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0057	 ParSpMatVec=0.0018	 speedup=3.1894
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0057	 ParSpMatVec=0.0024	 speedup=2.4095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0057	 ParSpMatVec=0.0046	 speedup=1.2480

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0276	 ParSpMatVec=0.0320	 speedup=0.8599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0276	 ParSpMatVec=0.0029	 speedup=9.5146
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0276	 ParSpMatVec=0.0023	 speedup=11.9460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0276	 ParSpMatVec=0.0023	 speedup=11.9204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0276	 ParSpMatVec=0.0021	 speedup=12.9359

INFO: ParSpMatVec tests passed

>>> End of log
