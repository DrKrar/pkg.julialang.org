>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1176.54296875 MB free)
Uptime: 12326.0 sec
Load Avg:  1.0341796875  1.021484375  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     566296 s       1963 s      54109 s     486172 s         15 s
#2  3500 MHz     366365 s       5682 s      48280 s     766384 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0775	 ParSpMatVec=0.0240	 speedup=3.2274
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0775	 ParSpMatVec=0.0065	 speedup=11.9885
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0775	 ParSpMatVec=0.0109	 speedup=7.1379
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0775	 ParSpMatVec=0.0095	 speedup=8.1272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0775	 ParSpMatVec=0.0060	 speedup=12.9079
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0749	 ParSpMatVec=0.0235	 speedup=3.1867
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0749	 ParSpMatVec=0.0104	 speedup=7.1979
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0749	 ParSpMatVec=0.0108	 speedup=6.9527
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0749	 ParSpMatVec=0.0133	 speedup=5.6440
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0749	 ParSpMatVec=0.0162	 speedup=4.6154

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0301	 ParSpMatVec=0.0178	 speedup=1.6932
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0301	 ParSpMatVec=0.0137	 speedup=2.1927
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0301	 ParSpMatVec=0.0146	 speedup=2.0652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0301	 ParSpMatVec=0.0114	 speedup=2.6255
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0301	 ParSpMatVec=0.0133	 speedup=2.2613

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0383	 speedup=1.1040
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0024	 speedup=17.6217
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0025	 speedup=16.7884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0018	 speedup=23.3249
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0018	 speedup=24.0405

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0077	 ParSpMatVec=0.0468	 speedup=0.1654
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0077	 ParSpMatVec=0.0040	 speedup=1.9420
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0077	 ParSpMatVec=0.0022	 speedup=3.5898
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0077	 ParSpMatVec=0.0027	 speedup=2.8627
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0077	 ParSpMatVec=0.0024	 speedup=3.2265

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0476	 ParSpMatVec=0.0480	 speedup=0.9904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0476	 ParSpMatVec=0.0039	 speedup=12.2584
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0476	 ParSpMatVec=0.0023	 speedup=20.5948
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0476	 ParSpMatVec=0.0027	 speedup=17.3557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0476	 ParSpMatVec=0.0025	 speedup=18.8441

INFO: ParSpMatVec tests passed

>>> End of log
