>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1192.7578125 MB free)
Uptime: 15894.0 sec
Load Avg:  1.15771484375  1.00927734375  0.96923828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     706129 s       3739 s      57654 s     666296 s         29 s
#2  3501 MHz     482024 s       3224 s      50567 s     994887 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1286	 ParSpMatVec=0.0270	 speedup=4.7550
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1286	 ParSpMatVec=0.0078	 speedup=16.3966
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1286	 ParSpMatVec=0.0124	 speedup=10.3991
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1286	 ParSpMatVec=0.0083	 speedup=15.4814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1286	 ParSpMatVec=0.0088	 speedup=14.6292
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1233	 ParSpMatVec=0.0527	 speedup=2.3375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1233	 ParSpMatVec=0.0112	 speedup=11.0237
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1233	 ParSpMatVec=0.0145	 speedup=8.4931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1233	 ParSpMatVec=0.0147	 speedup=8.3837
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1233	 ParSpMatVec=0.0158	 speedup=7.8046

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0542	 ParSpMatVec=0.0341	 speedup=1.5913
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0542	 ParSpMatVec=0.0139	 speedup=3.8956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0542	 ParSpMatVec=0.0157	 speedup=3.4425
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0542	 ParSpMatVec=0.0131	 speedup=4.1402
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0542	 ParSpMatVec=0.0110	 speedup=4.9506

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0399	 ParSpMatVec=0.0426	 speedup=0.9359
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0399	 ParSpMatVec=0.0071	 speedup=5.6168
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0399	 ParSpMatVec=0.0045	 speedup=8.9607
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0399	 ParSpMatVec=0.0017	 speedup=23.0581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0399	 ParSpMatVec=0.0037	 speedup=10.6386

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0447	 speedup=0.2138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0048	 speedup=2.0095
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0043	 speedup=2.2133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0045	 speedup=2.1198
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0026	 speedup=3.6437

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0502	 ParSpMatVec=0.0549	 speedup=0.9152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0502	 ParSpMatVec=0.0039	 speedup=12.7242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0502	 ParSpMatVec=0.0022	 speedup=23.2451
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0502	 ParSpMatVec=0.0037	 speedup=13.4680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0502	 ParSpMatVec=0.0037	 speedup=13.5167

INFO: ParSpMatVec tests passed

>>> End of log
