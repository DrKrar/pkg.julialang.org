>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-115-generic #162-Ubuntu SMP Fri Mar 24 16:03:51 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.203125 MB free)
Uptime: 15819.0 sec
Load Avg:  1.021484375  1.01025390625  0.9677734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     727787 s       6416 s      62062 s     632093 s         34 s
#2  3500 MHz     509776 s        813 s      56489 s     963272 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1086	 ParSpMatVec=0.0158	 speedup=6.8747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1086	 ParSpMatVec=0.0228	 speedup=4.7696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1086	 ParSpMatVec=0.0128	 speedup=8.4696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1086	 ParSpMatVec=0.0103	 speedup=10.5646
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1086	 ParSpMatVec=0.0125	 speedup=8.6918
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1171	 ParSpMatVec=0.0452	 speedup=2.5908
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1171	 ParSpMatVec=0.0115	 speedup=10.2224
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1171	 ParSpMatVec=0.0143	 speedup=8.1706
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1171	 ParSpMatVec=0.0112	 speedup=10.4603
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1171	 ParSpMatVec=0.0122	 speedup=9.5782

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0303	 ParSpMatVec=0.0290	 speedup=1.0464
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0303	 ParSpMatVec=0.0132	 speedup=2.2940
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0303	 ParSpMatVec=0.0153	 speedup=1.9877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0303	 ParSpMatVec=0.0133	 speedup=2.2802
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0303	 ParSpMatVec=0.0142	 speedup=2.1304

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0425	 ParSpMatVec=0.0420	 speedup=1.0121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0425	 ParSpMatVec=0.0071	 speedup=5.9978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0425	 ParSpMatVec=0.0023	 speedup=18.2722
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0425	 ParSpMatVec=0.0017	 speedup=25.0587
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0425	 ParSpMatVec=0.0024	 speedup=17.6590

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0115	 ParSpMatVec=0.0478	 speedup=0.2416
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0115	 ParSpMatVec=0.0034	 speedup=3.3505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0115	 ParSpMatVec=0.0017	 speedup=6.7626
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0115	 ParSpMatVec=0.0025	 speedup=4.6116
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0115	 ParSpMatVec=0.0027	 speedup=4.2739

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0472	 speedup=1.0205
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0034	 speedup=14.1805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0025	 speedup=19.3579
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0023	 speedup=20.8943
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0031	 speedup=15.7350

INFO: ParSpMatVec tests passed

>>> End of log
