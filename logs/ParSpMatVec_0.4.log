>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1185.421875 MB free)
Uptime: 13840.0 sec
Load Avg:  0.94091796875  0.970703125  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     634076 s        400 s      56348 s     555624 s         23 s
#2  3496 MHz     403249 s       6822 s      50684 s     879290 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0814	 ParSpMatVec=0.0447	 speedup=1.8186
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0814	 ParSpMatVec=0.0087	 speedup=9.3879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0814	 ParSpMatVec=0.0149	 speedup=5.4567
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0814	 ParSpMatVec=0.0107	 speedup=7.6068
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0814	 ParSpMatVec=0.0085	 speedup=9.5449
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1312	 ParSpMatVec=0.0439	 speedup=2.9884
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1312	 ParSpMatVec=0.0139	 speedup=9.4196
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1312	 ParSpMatVec=0.0161	 speedup=8.1434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1312	 ParSpMatVec=0.0124	 speedup=10.5976
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1312	 ParSpMatVec=0.0134	 speedup=9.8097

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0574	 ParSpMatVec=0.0306	 speedup=1.8728
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0574	 ParSpMatVec=0.0173	 speedup=3.3183
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0574	 ParSpMatVec=0.0162	 speedup=3.5417
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0574	 ParSpMatVec=0.0126	 speedup=4.5416
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0574	 ParSpMatVec=0.0110	 speedup=5.2221

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0349	 ParSpMatVec=0.0400	 speedup=0.8716
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0349	 ParSpMatVec=0.0027	 speedup=12.9742
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0349	 ParSpMatVec=0.0028	 speedup=12.3453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0349	 ParSpMatVec=0.0025	 speedup=13.7063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0349	 ParSpMatVec=0.0036	 speedup=9.5755

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0259	 speedup=0.2581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0037	 speedup=1.7910
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0028	 speedup=2.3635
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0038	 speedup=1.7752
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0034	 speedup=1.9950

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0487	 speedup=0.8928
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0044	 speedup=9.8234
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0024	 speedup=18.3582
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0020	 speedup=21.8047
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0207	 speedup=2.1030

INFO: ParSpMatVec tests passed

>>> End of log
