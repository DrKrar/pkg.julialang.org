>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1159.19140625 MB free)
Uptime: 13897.0 sec
Load Avg:  1.0556640625  1.02392578125  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     562212 s       1985 s      49536 s     657956 s         30 s
#2  3500 MHz     360514 s       3713 s      42523 s     935659 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0749	 ParSpMatVec=0.0165	 speedup=4.5463
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0749	 ParSpMatVec=0.0084	 speedup=8.8664
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0749	 ParSpMatVec=0.0112	 speedup=6.6692
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0749	 ParSpMatVec=0.0085	 speedup=8.8089
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0749	 ParSpMatVec=0.0083	 speedup=8.9690
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0694	 ParSpMatVec=0.0244	 speedup=2.8420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0694	 ParSpMatVec=0.0097	 speedup=7.1911
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0694	 ParSpMatVec=0.0122	 speedup=5.6926
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0694	 ParSpMatVec=0.0127	 speedup=5.4478
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0694	 ParSpMatVec=0.0127	 speedup=5.4632

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0277	 ParSpMatVec=0.0159	 speedup=1.7409
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0277	 ParSpMatVec=0.0125	 speedup=2.2180
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0277	 ParSpMatVec=0.0148	 speedup=1.8711
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0277	 ParSpMatVec=0.0127	 speedup=2.1858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0277	 ParSpMatVec=0.0105	 speedup=2.6317

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0308	 ParSpMatVec=0.0270	 speedup=1.1415
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0308	 ParSpMatVec=0.0021	 speedup=14.9549
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0308	 ParSpMatVec=0.0029	 speedup=10.6704
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0308	 ParSpMatVec=0.0017	 speedup=17.9007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0308	 ParSpMatVec=0.0018	 speedup=17.5082

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0075	 ParSpMatVec=0.0442	 speedup=0.1706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0075	 ParSpMatVec=0.0038	 speedup=2.0079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0075	 ParSpMatVec=0.0024	 speedup=3.1900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0075	 ParSpMatVec=0.0027	 speedup=2.7781
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0075	 ParSpMatVec=0.0027	 speedup=2.8256

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0502	 ParSpMatVec=0.0483	 speedup=1.0386
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0502	 ParSpMatVec=0.0042	 speedup=12.0081
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0502	 ParSpMatVec=0.0023	 speedup=21.8762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0502	 ParSpMatVec=0.0027	 speedup=18.6161
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0502	 ParSpMatVec=0.0025	 speedup=19.6822

INFO: ParSpMatVec tests passed

>>> End of log
