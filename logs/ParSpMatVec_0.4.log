>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.1
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1071.0859375 MB free)
Uptime: 13871.0 sec
Load Avg:  1.01318359375  1.02978515625  1.0341796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     565684 s       3382 s      56491 s     601948 s         28 s
#2  3499 MHz     435502 s       2401 s      49202 s     827704 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.1
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1247	 ParSpMatVec=0.0289	 speedup=4.3150
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1247	 ParSpMatVec=0.0089	 speedup=13.9412
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1247	 ParSpMatVec=0.0094	 speedup=13.3156
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1247	 ParSpMatVec=0.0064	 speedup=19.5755
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1247	 ParSpMatVec=0.0098	 speedup=12.7375
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1171	 ParSpMatVec=0.0417	 speedup=2.8110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1171	 ParSpMatVec=0.0125	 speedup=9.4017
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1171	 ParSpMatVec=0.0083	 speedup=14.1662
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1171	 ParSpMatVec=0.0148	 speedup=7.8910
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1171	 ParSpMatVec=0.0114	 speedup=10.2298

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0320	 speedup=1.3549
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0134	 speedup=3.2410
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0089	 speedup=4.8547
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0100	 speedup=4.3361
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0109	 speedup=3.9600

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0528	 ParSpMatVec=0.0308	 speedup=1.7153
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0528	 ParSpMatVec=0.0022	 speedup=24.4612
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0528	 ParSpMatVec=0.0017	 speedup=30.7256
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0528	 ParSpMatVec=0.0017	 speedup=31.3912
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0528	 ParSpMatVec=0.0021	 speedup=25.4721

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0083	 ParSpMatVec=0.0318	 speedup=0.2604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0083	 ParSpMatVec=0.0032	 speedup=2.5956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0083	 ParSpMatVec=0.0017	 speedup=4.7769
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0083	 ParSpMatVec=0.0029	 speedup=2.8739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0083	 ParSpMatVec=0.0022	 speedup=3.7569

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0296	 ParSpMatVec=0.0277	 speedup=1.0672
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0296	 ParSpMatVec=0.0035	 speedup=8.5481
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0296	 ParSpMatVec=0.0016	 speedup=18.6477
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0296	 ParSpMatVec=0.0026	 speedup=11.2439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0296	 ParSpMatVec=0.0028	 speedup=10.5181

INFO: ParSpMatVec tests passed

>>> End of log
