>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1173.45703125 MB free)
Uptime: 13185.0 sec
Load Avg:  0.8369140625  0.94921875  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     525618 s       7328 s      49178 s     577809 s         26 s
#2  3499 MHz     369324 s         66 s      40093 s     848393 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1248	 ParSpMatVec=0.0285	 speedup=4.3782
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1248	 ParSpMatVec=0.0093	 speedup=13.4849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1248	 ParSpMatVec=0.0136	 speedup=9.1672
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1248	 ParSpMatVec=0.0095	 speedup=13.1916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1248	 ParSpMatVec=0.0104	 speedup=12.0254
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0740	 ParSpMatVec=0.0270	 speedup=2.7359
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0740	 ParSpMatVec=0.0125	 speedup=5.9173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0740	 ParSpMatVec=0.0141	 speedup=5.2517
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0740	 ParSpMatVec=0.0127	 speedup=5.8390
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0740	 ParSpMatVec=0.0150	 speedup=4.9238

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0347	 ParSpMatVec=0.0222	 speedup=1.5641
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0347	 ParSpMatVec=0.0123	 speedup=2.8123
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0347	 ParSpMatVec=0.0174	 speedup=1.9995
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0347	 ParSpMatVec=0.0139	 speedup=2.4957
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0347	 ParSpMatVec=0.0127	 speedup=2.7278

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0426	 ParSpMatVec=0.0406	 speedup=1.0496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0426	 ParSpMatVec=0.0024	 speedup=17.8091
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0426	 ParSpMatVec=0.0032	 speedup=13.2630
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0426	 ParSpMatVec=0.0031	 speedup=13.6194
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0426	 ParSpMatVec=0.0036	 speedup=11.7380

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0474	 speedup=0.1774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0033	 speedup=2.5108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0021	 speedup=3.9806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0021	 speedup=3.9097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0026	 speedup=3.1751

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0480	 ParSpMatVec=0.0484	 speedup=0.9905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0480	 ParSpMatVec=0.0042	 speedup=11.5090
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0480	 ParSpMatVec=0.0020	 speedup=24.3039
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0480	 ParSpMatVec=0.0036	 speedup=13.3930
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0480	 ParSpMatVec=0.0052	 speedup=9.2366

INFO: ParSpMatVec tests passed

>>> End of log
