>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.0 MB free)
Uptime: 14834.0 sec
Load Avg:  1.05712890625  1.001953125  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     737669 s         46 s      65405 s     532070 s         26 s
#2  3499 MHz     455873 s       6127 s      58044 s     920551 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1341	 ParSpMatVec=0.0266	 speedup=5.0397
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1341	 ParSpMatVec=0.0094	 speedup=14.2772
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1341	 ParSpMatVec=0.0117	 speedup=11.4710
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1341	 ParSpMatVec=0.0086	 speedup=15.5454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1341	 ParSpMatVec=0.0085	 speedup=15.7559
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0772	 ParSpMatVec=0.0288	 speedup=2.6858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0772	 ParSpMatVec=0.0123	 speedup=6.2864
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0772	 ParSpMatVec=0.0155	 speedup=4.9745
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0772	 ParSpMatVec=0.0134	 speedup=5.7468
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0772	 ParSpMatVec=0.0133	 speedup=5.7966

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0286	 speedup=1.5054
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0108	 speedup=3.9738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0197	 speedup=2.1859
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0129	 speedup=3.3445
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0132	 speedup=3.2679

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0378	 speedup=1.2504
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0030	 speedup=15.6119
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0028	 speedup=16.7842
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0028	 speedup=16.6159
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0018	 speedup=26.8699

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0497	 speedup=0.1721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0042	 speedup=2.0263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0019	 speedup=4.4957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.5178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0072	 speedup=1.1847

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0480	 ParSpMatVec=0.0486	 speedup=0.9870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0480	 ParSpMatVec=0.0037	 speedup=12.9509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0480	 ParSpMatVec=0.0019	 speedup=25.3770
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0480	 ParSpMatVec=0.0023	 speedup=20.5496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0480	 ParSpMatVec=0.0024	 speedup=20.2234

INFO: ParSpMatVec tests passed

>>> End of log
