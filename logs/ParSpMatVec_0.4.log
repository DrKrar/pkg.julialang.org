>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1181.59375 MB free)
Uptime: 13659.0 sec
Load Avg:  1.01953125  1.0  1.0224609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     654920 s       5493 s      60762 s     505780 s         32 s
#2  3500 MHz     401054 s       2738 s      55332 s     855376 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0850	 ParSpMatVec=0.0164	 speedup=5.1891
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0850	 ParSpMatVec=0.0091	 speedup=9.3907
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0850	 ParSpMatVec=0.0149	 speedup=5.7181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0850	 ParSpMatVec=0.0098	 speedup=8.6303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0850	 ParSpMatVec=0.0109	 speedup=7.7659
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1220	 ParSpMatVec=0.0395	 speedup=3.0906
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1220	 ParSpMatVec=0.0143	 speedup=8.5531
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1220	 ParSpMatVec=0.0151	 speedup=8.1051
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1220	 ParSpMatVec=0.0129	 speedup=9.4544
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1220	 ParSpMatVec=0.0163	 speedup=7.4937

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0479	 ParSpMatVec=0.0319	 speedup=1.5000
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0479	 ParSpMatVec=0.0146	 speedup=3.2697
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0479	 ParSpMatVec=0.0161	 speedup=2.9709
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0479	 ParSpMatVec=0.0145	 speedup=3.3112
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0479	 ParSpMatVec=0.0142	 speedup=3.3664

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0433	 speedup=1.0020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0030	 speedup=14.4002
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0030	 speedup=14.4282
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0018	 speedup=24.0272
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0019	 speedup=23.2482

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0065	 ParSpMatVec=0.0284	 speedup=0.2309
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0065	 ParSpMatVec=0.0029	 speedup=2.2500
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0065	 ParSpMatVec=0.0022	 speedup=2.9491
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0065	 ParSpMatVec=0.0023	 speedup=2.9053
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0065	 ParSpMatVec=0.0021	 speedup=3.0883

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0284	 ParSpMatVec=0.0301	 speedup=0.9429
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0284	 ParSpMatVec=0.0031	 speedup=9.0150
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0284	 ParSpMatVec=0.0017	 speedup=16.9946
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0284	 ParSpMatVec=0.0023	 speedup=12.4707
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0284	 ParSpMatVec=0.0029	 speedup=9.8247

INFO: ParSpMatVec tests passed

>>> End of log
