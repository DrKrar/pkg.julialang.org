>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1150.40234375 MB free)
Uptime: 12804.0 sec
Load Avg:  0.9482421875  0.96826171875  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     529815 s       4799 s      61018 s     541795 s         28 s
#2  3499 MHz     389465 s       1449 s      53884 s     776240 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0811	 ParSpMatVec=0.0157	 speedup=5.1633
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0811	 ParSpMatVec=0.0098	 speedup=8.2733
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0811	 ParSpMatVec=0.0110	 speedup=7.3933
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0811	 ParSpMatVec=0.0099	 speedup=8.2037
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0811	 ParSpMatVec=0.0113	 speedup=7.1710
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1226	 ParSpMatVec=0.0410	 speedup=2.9923
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1226	 ParSpMatVec=0.0139	 speedup=8.8211
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1226	 ParSpMatVec=0.0138	 speedup=8.8736
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1226	 ParSpMatVec=0.0129	 speedup=9.4875
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1226	 ParSpMatVec=0.0127	 speedup=9.6201

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0393	 ParSpMatVec=0.0174	 speedup=2.2588
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0393	 ParSpMatVec=0.0125	 speedup=3.1406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0393	 ParSpMatVec=0.0154	 speedup=2.5591
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0393	 ParSpMatVec=0.0192	 speedup=2.0489
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0393	 ParSpMatVec=0.0092	 speedup=4.2650

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0283	 ParSpMatVec=0.0233	 speedup=1.2160
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0283	 ParSpMatVec=0.0022	 speedup=12.9204
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0283	 ParSpMatVec=0.0021	 speedup=13.6010
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0283	 ParSpMatVec=0.0015	 speedup=19.4772
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0283	 ParSpMatVec=0.0014	 speedup=20.8351

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0058	 ParSpMatVec=0.0347	 speedup=0.1670
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0058	 ParSpMatVec=0.0037	 speedup=1.5817
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0058	 ParSpMatVec=0.0016	 speedup=3.7176
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0058	 ParSpMatVec=0.0025	 speedup=2.3581
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0058	 ParSpMatVec=0.0021	 speedup=2.7577

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0266	 ParSpMatVec=0.0268	 speedup=0.9930
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0266	 ParSpMatVec=0.0034	 speedup=7.7269
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0266	 ParSpMatVec=0.0030	 speedup=8.7830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0266	 ParSpMatVec=0.0030	 speedup=8.9086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0266	 ParSpMatVec=0.0043	 speedup=6.1192

INFO: ParSpMatVec tests passed

>>> End of log
