>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1133.71484375 MB free)
Uptime: 14184.0 sec
Load Avg:  1.02490234375  1.009765625  1.0263671875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     681121 s         56 s      57910 s     529203 s         16 s
#2  3500 MHz     409469 s         89 s      51567 s     910625 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1218	 ParSpMatVec=0.0146	 speedup=8.3550
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1218	 ParSpMatVec=0.0087	 speedup=13.9613
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1218	 ParSpMatVec=0.0119	 speedup=10.2323
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1218	 ParSpMatVec=0.0115	 speedup=10.5815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1218	 ParSpMatVec=0.0104	 speedup=11.7133
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1114	 ParSpMatVec=0.0399	 speedup=2.7951
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1114	 ParSpMatVec=0.0134	 speedup=8.3364
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1114	 ParSpMatVec=0.0149	 speedup=7.4519
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1114	 ParSpMatVec=0.0123	 speedup=9.0263
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1114	 ParSpMatVec=0.0161	 speedup=6.9165

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0414	 ParSpMatVec=0.0291	 speedup=1.4241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0414	 ParSpMatVec=0.0140	 speedup=2.9481
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0414	 ParSpMatVec=0.0160	 speedup=2.5939
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0414	 ParSpMatVec=0.0108	 speedup=3.8375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0414	 ParSpMatVec=0.0102	 speedup=4.0379

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0315	 ParSpMatVec=0.0376	 speedup=0.8401
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0315	 ParSpMatVec=0.0021	 speedup=15.1274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0315	 ParSpMatVec=0.0022	 speedup=14.6277
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0315	 ParSpMatVec=0.0039	 speedup=8.1035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0315	 ParSpMatVec=0.0031	 speedup=10.2711

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0465	 speedup=0.1920
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0038	 speedup=2.3347
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0024	 speedup=3.6814
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.9084
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.8600

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0461	 speedup=1.0384
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0034	 speedup=14.1649
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0020	 speedup=23.5642
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0019	 speedup=24.7329
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0028	 speedup=17.3319

INFO: ParSpMatVec tests passed

>>> End of log
