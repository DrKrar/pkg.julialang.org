>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1176.2578125 MB free)
Uptime: 13190.0 sec
Load Avg:  1.01123046875  1.015625  0.98583984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     614280 s       4718 s      53276 s     518135 s         26 s
#2  3501 MHz     412492 s        310 s      46136 s     821021 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1324	 ParSpMatVec=0.0205	 speedup=6.4456
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1324	 ParSpMatVec=0.0094	 speedup=14.1077
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1324	 ParSpMatVec=0.0160	 speedup=8.2700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1324	 ParSpMatVec=0.0114	 speedup=11.6613
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1324	 ParSpMatVec=0.0115	 speedup=11.5133
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1175	 ParSpMatVec=0.0328	 speedup=3.5835
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1175	 ParSpMatVec=0.0137	 speedup=8.6050
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1175	 ParSpMatVec=0.0179	 speedup=6.5661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1175	 ParSpMatVec=0.0126	 speedup=9.3509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1175	 ParSpMatVec=0.0159	 speedup=7.3877

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0464	 ParSpMatVec=0.0334	 speedup=1.3897
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0464	 ParSpMatVec=0.0127	 speedup=3.6446
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0464	 ParSpMatVec=0.0103	 speedup=4.5215
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0464	 ParSpMatVec=0.0165	 speedup=2.8182
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0464	 ParSpMatVec=0.0104	 speedup=4.4485

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0403	 ParSpMatVec=0.0560	 speedup=0.7203
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0403	 ParSpMatVec=0.0032	 speedup=12.5409
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0403	 ParSpMatVec=0.0033	 speedup=12.3485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0403	 ParSpMatVec=0.0034	 speedup=11.6916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0403	 ParSpMatVec=0.0217	 speedup=1.8590

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0472	 speedup=0.1698
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0046	 speedup=1.7451
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0026	 speedup=3.1015
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0044	 speedup=1.8308
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0039	 speedup=2.0318

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0502	 ParSpMatVec=0.0536	 speedup=0.9371
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0502	 ParSpMatVec=0.0047	 speedup=10.7380
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0502	 ParSpMatVec=0.0079	 speedup=6.3726
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0502	 ParSpMatVec=0.0026	 speedup=19.3262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0502	 ParSpMatVec=0.0022	 speedup=23.0305

INFO: ParSpMatVec tests passed

>>> End of log
