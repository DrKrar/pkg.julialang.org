>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1174.15234375 MB free)
Uptime: 12961.0 sec
Load Avg:  0.97021484375  0.998046875  0.99462890625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     567730 s        459 s      59700 s     511207 s         37 s
#2  3500 MHz     346006 s       7221 s      50082 s     826012 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.1
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1359	 ParSpMatVec=0.0209	 speedup=6.5177
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1359	 ParSpMatVec=0.0149	 speedup=9.1241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1359	 ParSpMatVec=0.0170	 speedup=8.0116
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1359	 ParSpMatVec=0.0102	 speedup=13.3902
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1359	 ParSpMatVec=0.0123	 speedup=11.0791
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1318	 ParSpMatVec=0.0567	 speedup=2.3261
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1318	 ParSpMatVec=0.0127	 speedup=10.3807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1318	 ParSpMatVec=0.0145	 speedup=9.0880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1318	 ParSpMatVec=0.0124	 speedup=10.6457
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1318	 ParSpMatVec=0.0180	 speedup=7.3420

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0342	 ParSpMatVec=0.0279	 speedup=1.2271
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0342	 ParSpMatVec=0.0125	 speedup=2.7442
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0342	 ParSpMatVec=0.0152	 speedup=2.2462
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0342	 ParSpMatVec=0.0300	 speedup=1.1423
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0342	 ParSpMatVec=0.0417	 speedup=0.8210

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0491	 ParSpMatVec=0.0449	 speedup=1.0922
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0491	 ParSpMatVec=0.0022	 speedup=22.4515
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0491	 ParSpMatVec=0.0025	 speedup=19.3275
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0491	 ParSpMatVec=0.0015	 speedup=33.3105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0491	 ParSpMatVec=0.0027	 speedup=18.4689

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0446	 speedup=0.1578
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0029	 speedup=2.4462
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0053	 speedup=1.3158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0064	 speedup=1.0971
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0523	 speedup=0.1345

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0527	 ParSpMatVec=0.0535	 speedup=0.9863
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0527	 ParSpMatVec=0.0064	 speedup=8.2028
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0527	 ParSpMatVec=0.0266	 speedup=1.9852
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0527	 ParSpMatVec=0.0213	 speedup=2.4756
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0527	 ParSpMatVec=0.1177	 speedup=0.4481

INFO: ParSpMatVec tests passed

>>> End of log
