>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.4
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0984	 ParSpMatVec=0.0256	 speedup=3.8397
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0984	 ParSpMatVec=0.0099	 speedup=9.9069
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0984	 ParSpMatVec=0.0149	 speedup=6.6222
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0984	 ParSpMatVec=0.0106	 speedup=9.2521
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0984	 ParSpMatVec=0.0125	 speedup=7.8422
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0952	 ParSpMatVec=0.0502	 speedup=1.8956
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0952	 ParSpMatVec=0.0093	 speedup=10.1998
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0952	 ParSpMatVec=0.0137	 speedup=6.9343
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0952	 ParSpMatVec=0.0123	 speedup=7.7122
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0952	 ParSpMatVec=0.0114	 speedup=8.3562

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0579	 ParSpMatVec=0.0324	 speedup=1.7849
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0579	 ParSpMatVec=0.0137	 speedup=4.2111
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0579	 ParSpMatVec=0.0081	 speedup=7.1584
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0579	 ParSpMatVec=0.0149	 speedup=3.8778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0579	 ParSpMatVec=0.0113	 speedup=5.1208

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0414	 speedup=1.0169
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0022	 speedup=18.8695
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0014	 speedup=29.3853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0052	 speedup=8.0256
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0036	 speedup=11.6760

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0255	 speedup=0.3073
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0024	 speedup=3.2779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0019	 speedup=4.1274
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0032	 speedup=2.4888
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0018	 speedup=4.2980

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0273	 speedup=1.0524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0030	 speedup=9.6552
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0021	 speedup=13.8930
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0024	 speedup=11.8789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0027	 speedup=10.7778

INFO: ParSpMatVec tests passed

>>> End of log
