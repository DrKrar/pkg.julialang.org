>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1179.515625 MB free)
Uptime: 13052.0 sec
Load Avg:  0.9970703125  1.0166015625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     572294 s       3488 s      54995 s     514238 s         30 s
#2  3499 MHz     395687 s       2740 s      46276 s     787236 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1256	 ParSpMatVec=0.0240	 speedup=5.2356
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1256	 ParSpMatVec=0.0089	 speedup=14.1375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1256	 ParSpMatVec=0.0077	 speedup=16.2537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1256	 ParSpMatVec=0.0071	 speedup=17.8070
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1256	 ParSpMatVec=0.0075	 speedup=16.6923
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0794	 ParSpMatVec=0.0298	 speedup=2.6594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0794	 ParSpMatVec=0.0140	 speedup=5.6735
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0794	 ParSpMatVec=0.0088	 speedup=9.0516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0794	 ParSpMatVec=0.0096	 speedup=8.3057
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0794	 ParSpMatVec=0.0123	 speedup=6.4515

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0491	 ParSpMatVec=0.0307	 speedup=1.6012
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0491	 ParSpMatVec=0.0135	 speedup=3.6490
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0491	 ParSpMatVec=0.0092	 speedup=5.3686
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0491	 ParSpMatVec=0.0104	 speedup=4.7407
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0491	 ParSpMatVec=0.0118	 speedup=4.1799

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0401	 speedup=1.0685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0030	 speedup=14.2906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0014	 speedup=30.0653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0018	 speedup=23.2594
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0016	 speedup=27.3519

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0415	 speedup=0.2154
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0058	 speedup=1.5525
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0029	 speedup=3.0428
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0039	 speedup=2.2721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0031	 speedup=2.8630

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0462	 ParSpMatVec=0.0450	 speedup=1.0267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0462	 ParSpMatVec=0.0039	 speedup=11.8026
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0462	 ParSpMatVec=0.0047	 speedup=9.8614
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0462	 ParSpMatVec=0.0028	 speedup=16.6137
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0462	 ParSpMatVec=0.0034	 speedup=13.5369

INFO: ParSpMatVec tests passed

>>> End of log
