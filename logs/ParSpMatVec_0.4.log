>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.7
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1181.41796875 MB free)
Uptime: 13953.0 sec
Load Avg:  1.41748046875  1.10107421875  1.0244140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     711933 s       4865 s      61686 s     470079 s         24 s
#2  3500 MHz     439218 s       2015 s      54333 s     860836 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.11.0
 - SHA                           0.3.0
 - URIParser                     0.1.7
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0804	 ParSpMatVec=0.0155	 speedup=5.1871
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0804	 ParSpMatVec=0.0086	 speedup=9.3681
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0804	 ParSpMatVec=0.0150	 speedup=5.3783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0804	 ParSpMatVec=0.0108	 speedup=7.4300
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0804	 ParSpMatVec=0.0117	 speedup=6.8540
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1182	 ParSpMatVec=0.0415	 speedup=2.8486
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1182	 ParSpMatVec=0.0140	 speedup=8.4419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1182	 ParSpMatVec=0.0133	 speedup=8.8690
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1182	 ParSpMatVec=0.0124	 speedup=9.5557
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1182	 ParSpMatVec=0.0122	 speedup=9.6705

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0286	 speedup=1.6710
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0135	 speedup=3.5452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0152	 speedup=3.1551
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0132	 speedup=3.6312
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0134	 speedup=3.5805

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0406	 ParSpMatVec=0.0468	 speedup=0.8680
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0406	 ParSpMatVec=0.0029	 speedup=14.2263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0406	 ParSpMatVec=0.0022	 speedup=18.4165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0406	 ParSpMatVec=0.0014	 speedup=28.4179
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0406	 ParSpMatVec=0.0020	 speedup=20.2877

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0484	 speedup=0.1910
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0040	 speedup=2.3344
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0020	 speedup=4.7324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0021	 speedup=4.3083
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0029	 speedup=3.1583

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0506	 speedup=0.9343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0041	 speedup=11.4170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0025	 speedup=18.5653
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0035	 speedup=13.4127
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0063	 speedup=7.4836

INFO: ParSpMatVec tests passed

>>> End of log
