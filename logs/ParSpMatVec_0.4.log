>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1192.58203125 MB free)
Uptime: 13357.0 sec
Load Avg:  1.10595703125  1.09423828125  1.009765625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     617098 s       4761 s      52793 s     530705 s         38 s
#2  3499 MHz     416107 s       2122 s      47420 s     821756 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1301	 ParSpMatVec=0.0249	 speedup=5.2297
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1301	 ParSpMatVec=0.0080	 speedup=16.1754
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1301	 ParSpMatVec=0.0120	 speedup=10.8779
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1301	 ParSpMatVec=0.0090	 speedup=14.4520
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1301	 ParSpMatVec=0.0216	 speedup=6.0107
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1259	 ParSpMatVec=0.0390	 speedup=3.2286
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1259	 ParSpMatVec=0.0203	 speedup=6.2154
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1259	 ParSpMatVec=0.0129	 speedup=9.7894
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1259	 ParSpMatVec=0.0369	 speedup=3.4119
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1259	 ParSpMatVec=0.0129	 speedup=9.7769

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0456	 ParSpMatVec=0.0309	 speedup=1.4787
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0456	 ParSpMatVec=0.0124	 speedup=3.6875
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0456	 ParSpMatVec=0.0139	 speedup=3.2750
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0456	 ParSpMatVec=0.0131	 speedup=3.4744
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0456	 ParSpMatVec=0.0165	 speedup=2.7578

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0536	 ParSpMatVec=0.0436	 speedup=1.2290
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0536	 ParSpMatVec=0.0038	 speedup=14.1121
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0536	 ParSpMatVec=0.0024	 speedup=22.5713
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0536	 ParSpMatVec=0.0030	 speedup=17.9108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0536	 ParSpMatVec=0.0023	 speedup=23.3706

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0089	 ParSpMatVec=0.0494	 speedup=0.1805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0089	 ParSpMatVec=0.0039	 speedup=2.2974
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0089	 ParSpMatVec=0.0023	 speedup=3.9485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0089	 ParSpMatVec=0.0018	 speedup=4.8436
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0089	 ParSpMatVec=0.0030	 speedup=3.0028

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0417	 ParSpMatVec=0.0285	 speedup=1.4624
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0417	 ParSpMatVec=0.0043	 speedup=9.7675
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0417	 ParSpMatVec=0.0025	 speedup=16.5567
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0417	 ParSpMatVec=0.0029	 speedup=14.4180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0417	 ParSpMatVec=0.0073	 speedup=5.6876

INFO: ParSpMatVec tests passed

>>> End of log
