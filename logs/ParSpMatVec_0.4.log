>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1200.1953125 MB free)
Uptime: 15006.0 sec
Load Avg:  0.974609375  0.998046875  1.03466796875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     730601 s       3186 s      62946 s     548901 s         29 s
#2  3499 MHz     448758 s       4296 s      56582 s     934871 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1334	 ParSpMatVec=0.0279	 speedup=4.7844
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1334	 ParSpMatVec=0.0094	 speedup=14.2664
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1334	 ParSpMatVec=0.0129	 speedup=10.3126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1334	 ParSpMatVec=0.0119	 speedup=11.2257
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1334	 ParSpMatVec=0.0099	 speedup=13.4123
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1453	 ParSpMatVec=0.0425	 speedup=3.4207
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1453	 ParSpMatVec=0.0134	 speedup=10.8187
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1453	 ParSpMatVec=0.0152	 speedup=9.5823
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1453	 ParSpMatVec=0.0125	 speedup=11.6679
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1453	 ParSpMatVec=0.0110	 speedup=13.2600

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0558	 ParSpMatVec=0.0311	 speedup=1.7921
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0558	 ParSpMatVec=0.0122	 speedup=4.5793
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0558	 ParSpMatVec=0.0153	 speedup=3.6452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0558	 ParSpMatVec=0.0132	 speedup=4.2216
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0558	 ParSpMatVec=0.0152	 speedup=3.6627

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0308	 ParSpMatVec=0.0246	 speedup=1.2508
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0308	 ParSpMatVec=0.0021	 speedup=14.7791
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0308	 ParSpMatVec=0.0036	 speedup=8.6760
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0308	 ParSpMatVec=0.0018	 speedup=17.2804
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0308	 ParSpMatVec=0.0015	 speedup=20.0900

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0361	 speedup=0.2532
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0036	 speedup=2.5571
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0020	 speedup=4.6543
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0043	 speedup=2.1135
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0023	 speedup=3.9770

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0485	 ParSpMatVec=0.0491	 speedup=0.9873
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0485	 ParSpMatVec=0.0047	 speedup=10.3192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0485	 ParSpMatVec=0.0020	 speedup=23.8002
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0485	 ParSpMatVec=0.0023	 speedup=21.5118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0485	 ParSpMatVec=0.0022	 speedup=22.4773

INFO: ParSpMatVec tests passed

>>> End of log
