>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1182.203125 MB free)
Uptime: 15835.0 sec
Load Avg:  0.98779296875  0.9951171875  0.96923828125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     709662 s       6118 s      63700 s     656124 s         25 s
#2  3500 MHz     508076 s        458 s      57875 s     964573 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1188	 ParSpMatVec=0.0251	 speedup=4.7278
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1188	 ParSpMatVec=0.0092	 speedup=12.8535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1188	 ParSpMatVec=0.0084	 speedup=14.0851
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1188	 ParSpMatVec=0.0062	 speedup=19.0903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1188	 ParSpMatVec=0.0071	 speedup=16.7063
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1251	 ParSpMatVec=0.0414	 speedup=3.0192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1251	 ParSpMatVec=0.0136	 speedup=9.2001
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1251	 ParSpMatVec=0.0140	 speedup=8.9435
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1251	 ParSpMatVec=0.0131	 speedup=9.5186
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1251	 ParSpMatVec=0.0123	 speedup=10.1551

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0269	 speedup=1.6972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0120	 speedup=3.7932
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0167	 speedup=2.7340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0126	 speedup=3.6259
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0139	 speedup=3.2858

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0435	 ParSpMatVec=0.0416	 speedup=1.0455
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0435	 ParSpMatVec=0.0026	 speedup=16.4439
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0435	 ParSpMatVec=0.0029	 speedup=15.0192
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0435	 ParSpMatVec=0.0038	 speedup=11.4457
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0435	 ParSpMatVec=0.0026	 speedup=16.9099

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0500	 speedup=0.1763
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0040	 speedup=2.2109
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0024	 speedup=3.6996
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0021	 speedup=4.1829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0032	 speedup=2.7743

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0461	 ParSpMatVec=0.0482	 speedup=0.9556
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0461	 ParSpMatVec=0.0038	 speedup=12.2005
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0461	 ParSpMatVec=0.0021	 speedup=21.4731
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0461	 ParSpMatVec=0.0030	 speedup=15.5867
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0461	 ParSpMatVec=0.0033	 speedup=14.0531

INFO: ParSpMatVec tests passed

>>> End of log
