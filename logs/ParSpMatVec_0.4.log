>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1176.24609375 MB free)
Uptime: 14232.0 sec
Load Avg:  1.1025390625  1.05419921875  0.9931640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     667745 s         92 s      60203 s     553591 s         34 s
#2  3499 MHz     470947 s       6553 s      54363 s     840627 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1084	 ParSpMatVec=0.0247	 speedup=4.3843
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1084	 ParSpMatVec=0.0091	 speedup=11.9195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1084	 ParSpMatVec=0.0119	 speedup=9.1413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1084	 ParSpMatVec=0.0106	 speedup=10.2142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1084	 ParSpMatVec=0.0125	 speedup=8.7047
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0754	 ParSpMatVec=0.0257	 speedup=2.9356
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0754	 ParSpMatVec=0.0130	 speedup=5.7829
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0754	 ParSpMatVec=0.0086	 speedup=8.7241
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0754	 ParSpMatVec=0.0092	 speedup=8.2411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0754	 ParSpMatVec=0.0105	 speedup=7.1537

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0273	 ParSpMatVec=0.0169	 speedup=1.6197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0273	 ParSpMatVec=0.0142	 speedup=1.9259
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0273	 ParSpMatVec=0.0096	 speedup=2.8501
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0273	 ParSpMatVec=0.0099	 speedup=2.7552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0273	 ParSpMatVec=0.0125	 speedup=2.1818

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0273	 ParSpMatVec=0.0239	 speedup=1.1433
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0273	 ParSpMatVec=0.0022	 speedup=12.6081
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0273	 ParSpMatVec=0.0014	 speedup=19.7475
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0273	 ParSpMatVec=0.0017	 speedup=16.2847
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0273	 ParSpMatVec=0.0017	 speedup=16.2307

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0453	 speedup=0.1906
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0032	 speedup=2.7041
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0023	 speedup=3.6818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.6267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0025	 speedup=3.3972

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0444	 ParSpMatVec=0.0451	 speedup=0.9843
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0444	 ParSpMatVec=0.0040	 speedup=11.1845
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0444	 ParSpMatVec=0.0023	 speedup=19.1007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0444	 ParSpMatVec=0.0022	 speedup=20.0850
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0444	 ParSpMatVec=0.0026	 speedup=16.9164

INFO: ParSpMatVec tests passed

>>> End of log
