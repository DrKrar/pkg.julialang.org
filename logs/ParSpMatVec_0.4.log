>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1204	 ParSpMatVec=0.0321	 speedup=3.7549
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1204	 ParSpMatVec=0.0086	 speedup=14.0502
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1204	 ParSpMatVec=0.0142	 speedup=8.4559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1204	 ParSpMatVec=0.0175	 speedup=6.8955
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1204	 ParSpMatVec=0.0071	 speedup=16.9636
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1138	 ParSpMatVec=0.0401	 speedup=2.8366
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1138	 ParSpMatVec=0.0140	 speedup=8.1536
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1138	 ParSpMatVec=0.0073	 speedup=15.5565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1138	 ParSpMatVec=0.0085	 speedup=13.4537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1138	 ParSpMatVec=0.0114	 speedup=9.9719

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0339	 ParSpMatVec=0.0185	 speedup=1.8283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0339	 ParSpMatVec=0.0127	 speedup=2.6612
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0339	 ParSpMatVec=0.0078	 speedup=4.3195
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0339	 ParSpMatVec=0.0074	 speedup=4.5870
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0339	 ParSpMatVec=0.0110	 speedup=3.0763

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0477	 ParSpMatVec=0.0307	 speedup=1.5558
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0477	 ParSpMatVec=0.0020	 speedup=24.1367
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0477	 ParSpMatVec=0.0018	 speedup=26.5914
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0477	 ParSpMatVec=0.0019	 speedup=24.9611
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0477	 ParSpMatVec=0.0018	 speedup=25.8075

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0289	 speedup=0.2786
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0027	 speedup=3.0179
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0028	 speedup=2.8431
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0029	 speedup=2.7573
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0028	 speedup=2.8299

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0440	 speedup=1.0605
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0033	 speedup=13.9541
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0021	 speedup=22.6895
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0021	 speedup=22.4859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0031	 speedup=15.1219

INFO: ParSpMatVec tests passed

>>> End of log
