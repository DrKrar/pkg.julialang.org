>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1198.06640625 MB free)
Uptime: 16514.0 sec
Load Avg:  1.08056640625  1.04052734375  0.9853515625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     784253 s        746 s      60453 s     634571 s         26 s
#2  3500 MHz     435188 s       5686 s      52013 s    1113067 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0806	 ParSpMatVec=0.0271	 speedup=2.9734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0806	 ParSpMatVec=0.0091	 speedup=8.8410
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0806	 ParSpMatVec=0.0120	 speedup=6.7398
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0806	 ParSpMatVec=0.0084	 speedup=9.6102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0806	 ParSpMatVec=0.0179	 speedup=4.5020
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1253	 ParSpMatVec=0.0421	 speedup=2.9799
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1253	 ParSpMatVec=0.0137	 speedup=9.1604
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1253	 ParSpMatVec=0.0190	 speedup=6.5921
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1253	 ParSpMatVec=0.0127	 speedup=9.8315
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1253	 ParSpMatVec=0.0133	 speedup=9.4578

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0303	 speedup=1.4988
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0131	 speedup=3.4587
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0155	 speedup=2.9378
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0126	 speedup=3.5931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0125	 speedup=3.6370

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0519	 ParSpMatVec=0.0499	 speedup=1.0406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0519	 ParSpMatVec=0.0021	 speedup=24.3985
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0519	 ParSpMatVec=0.0048	 speedup=10.8403
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0519	 ParSpMatVec=0.0013	 speedup=40.2628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0519	 ParSpMatVec=0.0060	 speedup=8.6107

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0110	 ParSpMatVec=0.0510	 speedup=0.2163
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0110	 ParSpMatVec=0.0031	 speedup=3.5348
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0110	 ParSpMatVec=0.0030	 speedup=3.6215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0110	 ParSpMatVec=0.0029	 speedup=3.8471
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0110	 ParSpMatVec=0.0036	 speedup=3.0824

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0493	 speedup=0.9691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0048	 speedup=9.8645
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0039	 speedup=12.1068
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0034	 speedup=14.2140
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0033	 speedup=14.5093

INFO: ParSpMatVec tests passed

>>> End of log
