>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.9392929077148438 GB (1163.359375 MB free)
Uptime: 12979.0 sec
Load Avg:  0.9814453125  0.98681640625  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     567673 s         48 s      51337 s     552665 s         22 s
#2  3499 MHz     353046 s         92 s      47410 s     858295 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1224	 ParSpMatVec=0.0271	 speedup=4.5255
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1224	 ParSpMatVec=0.0082	 speedup=14.9220
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1224	 ParSpMatVec=0.0117	 speedup=10.4743
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1224	 ParSpMatVec=0.0100	 speedup=12.2548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1224	 ParSpMatVec=0.0081	 speedup=15.0352
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1222	 ParSpMatVec=0.0377	 speedup=3.2380
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1222	 ParSpMatVec=0.0124	 speedup=9.8405
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1222	 ParSpMatVec=0.0137	 speedup=8.9109
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1222	 ParSpMatVec=0.0128	 speedup=9.5717
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1222	 ParSpMatVec=0.0156	 speedup=7.8435

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0336	 speedup=1.3078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0133	 speedup=3.3102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0141	 speedup=3.1272
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0144	 speedup=3.0519
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0146	 speedup=3.0113

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0486	 ParSpMatVec=0.0377	 speedup=1.2871
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0486	 ParSpMatVec=0.0026	 speedup=18.6956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0486	 ParSpMatVec=0.0033	 speedup=14.7461
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0486	 ParSpMatVec=0.0016	 speedup=29.6157
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0486	 ParSpMatVec=0.0020	 speedup=24.5985

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0322	 speedup=0.2921
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0035	 speedup=2.6829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0023	 speedup=4.0405
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0022	 speedup=4.3123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0024	 speedup=3.8555

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0511	 ParSpMatVec=0.0487	 speedup=1.0488
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0511	 ParSpMatVec=0.0037	 speedup=13.7799
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0511	 ParSpMatVec=0.0021	 speedup=24.0964
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0511	 ParSpMatVec=0.0044	 speedup=11.7245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0511	 ParSpMatVec=0.0020	 speedup=25.7186

INFO: ParSpMatVec tests passed

>>> End of log
