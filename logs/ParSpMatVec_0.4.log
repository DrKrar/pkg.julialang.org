>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-109-generic #156-Ubuntu SMP Wed Feb 8 16:09:17 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1194.65625 MB free)
Uptime: 15379.0 sec
Load Avg:  1.076171875  1.07275390625  0.921875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     702894 s       1648 s      63978 s     621280 s         25 s
#2  3499 MHz     486389 s       5084 s      56316 s     945105 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1196	 ParSpMatVec=0.0158	 speedup=7.5692
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1196	 ParSpMatVec=0.0080	 speedup=15.0297
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1196	 ParSpMatVec=0.0123	 speedup=9.7571
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1196	 ParSpMatVec=0.0093	 speedup=12.8393
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1196	 ParSpMatVec=0.0058	 speedup=20.4631
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0757	 ParSpMatVec=0.0259	 speedup=2.9213
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0757	 ParSpMatVec=0.0092	 speedup=8.2317
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0757	 ParSpMatVec=0.0145	 speedup=5.2120
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0757	 ParSpMatVec=0.0166	 speedup=4.5696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0757	 ParSpMatVec=0.0158	 speedup=4.7826

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0287	 ParSpMatVec=0.0185	 speedup=1.5546
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0287	 ParSpMatVec=0.0130	 speedup=2.2053
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0287	 ParSpMatVec=0.0138	 speedup=2.0845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0287	 ParSpMatVec=0.0154	 speedup=1.8682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0287	 ParSpMatVec=0.0165	 speedup=1.7391

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0390	 speedup=1.1789
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0027	 speedup=16.8577
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0028	 speedup=16.6853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0025	 speedup=18.3283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0022	 speedup=21.0283

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0081	 ParSpMatVec=0.0450	 speedup=0.1798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0081	 ParSpMatVec=0.0037	 speedup=2.1764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0081	 ParSpMatVec=0.0030	 speedup=2.6945
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0081	 ParSpMatVec=0.0024	 speedup=3.3363
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0081	 ParSpMatVec=0.0026	 speedup=3.1523

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0531	 ParSpMatVec=0.0425	 speedup=1.2483
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0531	 ParSpMatVec=0.0047	 speedup=11.2188
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0531	 ParSpMatVec=0.0023	 speedup=23.1276
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0531	 ParSpMatVec=0.0167	 speedup=3.1737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0531	 ParSpMatVec=0.0028	 speedup=19.2095

INFO: ParSpMatVec tests passed

>>> End of log
