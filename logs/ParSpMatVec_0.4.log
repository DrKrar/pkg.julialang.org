>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1067.53125 MB free)
Uptime: 13665.0 sec
Load Avg:  1.00927734375  0.99658203125  0.962890625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     574947 s       3831 s      57326 s     571627 s         26 s
#2  3499 MHz     371950 s       2330 s      49264 s     879055 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.7
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0840	 ParSpMatVec=0.0197	 speedup=4.2611
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0840	 ParSpMatVec=0.0097	 speedup=8.6391
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0840	 ParSpMatVec=0.0093	 speedup=9.0121
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0840	 ParSpMatVec=0.0071	 speedup=11.7868
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0840	 ParSpMatVec=0.0065	 speedup=13.0078
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1356	 ParSpMatVec=0.0300	 speedup=4.5223
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1356	 ParSpMatVec=0.0127	 speedup=10.6564
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1356	 ParSpMatVec=0.0074	 speedup=18.3713
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1356	 ParSpMatVec=0.0088	 speedup=15.4168
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1356	 ParSpMatVec=0.0135	 speedup=10.0249

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0325	 ParSpMatVec=0.0211	 speedup=1.5420
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0325	 ParSpMatVec=0.0116	 speedup=2.7963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0325	 ParSpMatVec=0.0116	 speedup=2.7952
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0325	 ParSpMatVec=0.0090	 speedup=3.6246
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0325	 ParSpMatVec=0.0108	 speedup=3.0110

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0325	 ParSpMatVec=0.0329	 speedup=0.9865
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0325	 ParSpMatVec=0.0035	 speedup=9.3595
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0325	 ParSpMatVec=0.0016	 speedup=20.8748
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0325	 ParSpMatVec=0.0014	 speedup=23.7870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0325	 ParSpMatVec=0.0021	 speedup=15.3461

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0451	 speedup=0.1875
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0041	 speedup=2.0862
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0018	 speedup=4.6159
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0016	 speedup=5.1622
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0020	 speedup=4.2396

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0427	 ParSpMatVec=0.0345	 speedup=1.2379
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0427	 ParSpMatVec=0.0036	 speedup=11.7105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0427	 ParSpMatVec=0.0025	 speedup=17.0818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0427	 ParSpMatVec=0.0025	 speedup=17.3703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0427	 ParSpMatVec=0.0025	 speedup=17.3058

INFO: ParSpMatVec tests passed

>>> End of log
