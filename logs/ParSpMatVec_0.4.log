>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.59375 MB free)
Uptime: 13644.0 sec
Load Avg:  0.98828125  0.98828125  0.98876953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     668562 s       4564 s      54673 s     496496 s         32 s
#2  3500 MHz     443810 s       2483 s      46819 s     828522 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1321	 ParSpMatVec=0.0153	 speedup=8.6164
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1321	 ParSpMatVec=0.0105	 speedup=12.5431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1321	 ParSpMatVec=0.0124	 speedup=10.6497
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1321	 ParSpMatVec=0.0102	 speedup=12.9636
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1321	 ParSpMatVec=0.0155	 speedup=8.5246
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0987	 ParSpMatVec=0.0422	 speedup=2.3417
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0987	 ParSpMatVec=0.0116	 speedup=8.5253
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0987	 ParSpMatVec=0.0144	 speedup=6.8457
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0987	 ParSpMatVec=0.0128	 speedup=7.7287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0987	 ParSpMatVec=0.0115	 speedup=8.5942

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0483	 ParSpMatVec=0.0297	 speedup=1.6231
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0483	 ParSpMatVec=0.0132	 speedup=3.6708
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0483	 ParSpMatVec=0.0156	 speedup=3.0866
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0483	 ParSpMatVec=0.0127	 speedup=3.8099
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0483	 ParSpMatVec=0.0135	 speedup=3.5713

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0445	 ParSpMatVec=0.0252	 speedup=1.7644
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0445	 ParSpMatVec=0.0027	 speedup=16.3280
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0445	 ParSpMatVec=0.0023	 speedup=19.6513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0445	 ParSpMatVec=0.0017	 speedup=26.5271
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0445	 ParSpMatVec=0.0027	 speedup=16.5475

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0114	 ParSpMatVec=0.0473	 speedup=0.2410
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0114	 ParSpMatVec=0.0033	 speedup=3.4856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0114	 ParSpMatVec=0.0023	 speedup=4.9938
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0114	 ParSpMatVec=0.0031	 speedup=3.7168
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0114	 ParSpMatVec=0.0026	 speedup=4.3434

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0297	 speedup=1.5241
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0039	 speedup=11.6730
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0017	 speedup=27.2009
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0029	 speedup=15.5539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0023	 speedup=19.4618

INFO: ParSpMatVec tests passed

>>> End of log
