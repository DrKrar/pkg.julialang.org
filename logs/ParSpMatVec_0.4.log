>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.5
Commit 2ac304d (2016-03-18 00:58 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0892	 ParSpMatVec=0.0187	 speedup=4.7700
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0892	 ParSpMatVec=0.0081	 speedup=11.0432
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0892	 ParSpMatVec=0.0124	 speedup=7.1903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0892	 ParSpMatVec=0.0114	 speedup=7.8260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0892	 ParSpMatVec=0.0097	 speedup=9.1567
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1457	 ParSpMatVec=0.0383	 speedup=3.8013
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1457	 ParSpMatVec=0.0141	 speedup=10.3379
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1457	 ParSpMatVec=0.0146	 speedup=10.0045
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1457	 ParSpMatVec=0.0127	 speedup=11.4620
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1457	 ParSpMatVec=0.0137	 speedup=10.6041

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0482	 ParSpMatVec=0.0318	 speedup=1.5163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0482	 ParSpMatVec=0.0130	 speedup=3.7050
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0482	 ParSpMatVec=0.0138	 speedup=3.4931
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0482	 ParSpMatVec=0.0176	 speedup=2.7395
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0482	 ParSpMatVec=0.0130	 speedup=3.6922

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0359	 ParSpMatVec=0.0313	 speedup=1.1497
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0359	 ParSpMatVec=0.0018	 speedup=19.9447
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0359	 ParSpMatVec=0.0022	 speedup=16.4366
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0359	 ParSpMatVec=0.0018	 speedup=19.9612
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0359	 ParSpMatVec=0.0018	 speedup=19.5374

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0443	 speedup=0.1811
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0039	 speedup=2.0399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0022	 speedup=3.5779
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0042	 speedup=1.9190
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0036	 speedup=2.2450

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0380	 ParSpMatVec=0.0449	 speedup=0.8448
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0380	 ParSpMatVec=0.0030	 speedup=12.7745
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0380	 ParSpMatVec=0.0100	 speedup=3.7830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0380	 ParSpMatVec=0.0024	 speedup=15.5063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0380	 ParSpMatVec=0.0019	 speedup=19.5195

INFO: ParSpMatVec tests passed

>>> End of log
