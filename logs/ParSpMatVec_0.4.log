>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1202.26171875 MB free)
Uptime: 13176.0 sec
Load Avg:  0.98291015625  1.02880859375  0.99951171875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     653621 s       5528 s      53778 s     467910 s         23 s
#2  3500 MHz     425656 s       1990 s      47246 s     801820 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1109	 ParSpMatVec=0.0271	 speedup=4.0994
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1109	 ParSpMatVec=0.0098	 speedup=11.3452
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1109	 ParSpMatVec=0.0091	 speedup=12.1834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1109	 ParSpMatVec=0.0066	 speedup=16.7722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1109	 ParSpMatVec=0.0124	 speedup=8.9789
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1091	 ParSpMatVec=0.0425	 speedup=2.5640
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1091	 ParSpMatVec=0.0127	 speedup=8.5965
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1091	 ParSpMatVec=0.0085	 speedup=12.8280
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1091	 ParSpMatVec=0.0093	 speedup=11.7120
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1091	 ParSpMatVec=0.0141	 speedup=7.7435

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0268	 ParSpMatVec=0.0282	 speedup=0.9489
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0268	 ParSpMatVec=0.0109	 speedup=2.4614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0268	 ParSpMatVec=0.0080	 speedup=3.3501
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0268	 ParSpMatVec=0.0081	 speedup=3.3011
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0268	 ParSpMatVec=0.0097	 speedup=2.7707

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0416	 ParSpMatVec=0.0376	 speedup=1.1069
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0416	 ParSpMatVec=0.0022	 speedup=18.6295
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0416	 ParSpMatVec=0.0031	 speedup=13.5616
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0416	 ParSpMatVec=0.0017	 speedup=24.9143
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0416	 ParSpMatVec=0.0020	 speedup=21.0483

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0417	 speedup=0.2017
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0032	 speedup=2.5942
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0017	 speedup=5.0670
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0024	 speedup=3.4985
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0030	 speedup=2.7899

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0274	 ParSpMatVec=0.0269	 speedup=1.0174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0274	 ParSpMatVec=0.0028	 speedup=9.7398
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0274	 ParSpMatVec=0.0022	 speedup=12.4890
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0274	 ParSpMatVec=0.0023	 speedup=11.9506
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0274	 ParSpMatVec=0.0028	 speedup=9.8746

INFO: ParSpMatVec tests passed

>>> End of log
