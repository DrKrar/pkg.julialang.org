>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1189.67578125 MB free)
Uptime: 15042.0 sec
Load Avg:  1.0302734375  1.04052734375  1.04541015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     737780 s       5939 s      61980 s     541793 s         21 s
#2  3500 MHz     457460 s        322 s      53576 s     949603 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1198	 ParSpMatVec=0.0181	 speedup=6.6044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1198	 ParSpMatVec=0.0086	 speedup=14.0079
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1198	 ParSpMatVec=0.0116	 speedup=10.3594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1198	 ParSpMatVec=0.0111	 speedup=10.7831
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1198	 ParSpMatVec=0.0093	 speedup=12.8316
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1248	 ParSpMatVec=0.0439	 speedup=2.8457
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1248	 ParSpMatVec=0.0120	 speedup=10.4113
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1248	 ParSpMatVec=0.0145	 speedup=8.5809
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1248	 ParSpMatVec=0.0146	 speedup=8.5206
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1248	 ParSpMatVec=0.0178	 speedup=7.0074

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0400	 ParSpMatVec=0.0293	 speedup=1.3634
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0400	 ParSpMatVec=0.0124	 speedup=3.2281
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0400	 ParSpMatVec=0.0143	 speedup=2.7972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0400	 ParSpMatVec=0.0129	 speedup=3.1080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0400	 ParSpMatVec=0.0169	 speedup=2.3694

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0379	 ParSpMatVec=0.0352	 speedup=1.0762
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0379	 ParSpMatVec=0.0032	 speedup=11.8318
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0379	 ParSpMatVec=0.0024	 speedup=15.5703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0379	 ParSpMatVec=0.0015	 speedup=26.0714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0379	 ParSpMatVec=0.0016	 speedup=24.0609

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0075	 ParSpMatVec=0.0430	 speedup=0.1733
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0075	 ParSpMatVec=0.0042	 speedup=1.7534
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0075	 ParSpMatVec=0.0025	 speedup=3.0158
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0075	 ParSpMatVec=0.0026	 speedup=2.8585
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0075	 ParSpMatVec=0.0030	 speedup=2.4582

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0330	 ParSpMatVec=0.0280	 speedup=1.1758
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0330	 ParSpMatVec=0.0038	 speedup=8.6066
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0330	 ParSpMatVec=0.0024	 speedup=13.9170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0330	 ParSpMatVec=0.0032	 speedup=10.2550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0330	 ParSpMatVec=0.0022	 speedup=14.8387

INFO: ParSpMatVec tests passed

>>> End of log
