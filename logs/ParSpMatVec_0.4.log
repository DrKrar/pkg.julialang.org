>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.40625 MB free)
Uptime: 15938.0 sec
Load Avg:  0.9765625  1.0146484375  0.9970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     748868 s       6843 s      57660 s     618398 s         23 s
#2  3500 MHz     484038 s         43 s      48834 s    1009609 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1432	 ParSpMatVec=0.0251	 speedup=5.6998
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1432	 ParSpMatVec=0.0090	 speedup=15.8661
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1432	 ParSpMatVec=0.0074	 speedup=19.2541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1432	 ParSpMatVec=0.0133	 speedup=10.7383
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1432	 ParSpMatVec=0.0075	 speedup=18.9932
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1370	 ParSpMatVec=0.0434	 speedup=3.1596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1370	 ParSpMatVec=0.0129	 speedup=10.6005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1370	 ParSpMatVec=0.0092	 speedup=14.9351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1370	 ParSpMatVec=0.0100	 speedup=13.6865
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1370	 ParSpMatVec=0.0093	 speedup=14.6841

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0529	 ParSpMatVec=0.0207	 speedup=2.5552
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0529	 ParSpMatVec=0.0129	 speedup=4.1096
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0529	 ParSpMatVec=0.0144	 speedup=3.6672
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0529	 ParSpMatVec=0.0132	 speedup=4.0240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0529	 ParSpMatVec=0.0155	 speedup=3.4143

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0348	 speedup=1.3152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0031	 speedup=14.9583
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0021	 speedup=21.5851
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0020	 speedup=23.2881
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0015	 speedup=29.7311

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0105	 ParSpMatVec=0.0499	 speedup=0.2103
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0105	 ParSpMatVec=0.0039	 speedup=2.6833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0105	 ParSpMatVec=0.0021	 speedup=5.0564
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0105	 ParSpMatVec=0.0033	 speedup=3.2139
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0105	 ParSpMatVec=0.0022	 speedup=4.7578

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0494	 ParSpMatVec=0.0495	 speedup=0.9982
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0494	 ParSpMatVec=0.0033	 speedup=14.7628
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0494	 ParSpMatVec=0.0022	 speedup=22.9455
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0494	 ParSpMatVec=0.0023	 speedup=21.7880
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0494	 ParSpMatVec=0.0034	 speedup=14.4803

INFO: ParSpMatVec tests passed

>>> End of log
