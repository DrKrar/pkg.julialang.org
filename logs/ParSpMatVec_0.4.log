>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1164.2109375 MB free)
Uptime: 15258.0 sec
Load Avg:  1.07470703125  1.00390625  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     570498 s         10 s      58543 s     690246 s         95 s
#2  3500 MHz     406561 s        160 s      50435 s     948710 s          4 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0896	 ParSpMatVec=0.0180	 speedup=4.9874
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0896	 ParSpMatVec=0.0114	 speedup=7.8338
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0896	 ParSpMatVec=0.0134	 speedup=6.7074
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0896	 ParSpMatVec=0.0080	 speedup=11.1624
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0896	 ParSpMatVec=0.0083	 speedup=10.8605
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0826	 ParSpMatVec=0.0414	 speedup=1.9947
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0826	 ParSpMatVec=0.0119	 speedup=6.9305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0826	 ParSpMatVec=0.0147	 speedup=5.6122
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0826	 ParSpMatVec=0.0146	 speedup=5.6548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0826	 ParSpMatVec=0.0112	 speedup=7.3760

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0338	 ParSpMatVec=0.0176	 speedup=1.9202
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0338	 ParSpMatVec=0.0138	 speedup=2.4483
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0338	 ParSpMatVec=0.0145	 speedup=2.3285
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0338	 ParSpMatVec=0.0132	 speedup=2.5518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0338	 ParSpMatVec=0.0138	 speedup=2.4526

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0383	 speedup=1.1233
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0025	 speedup=16.8934
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0015	 speedup=29.3284
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0013	 speedup=33.5242
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0017	 speedup=25.9471

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0435	 speedup=0.1804
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0040	 speedup=1.9513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0021	 speedup=3.6785
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0022	 speedup=3.5177
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0027	 speedup=2.8725

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0289	 ParSpMatVec=0.0384	 speedup=0.7527
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0289	 ParSpMatVec=0.0031	 speedup=9.4063
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0289	 ParSpMatVec=0.0033	 speedup=8.7064
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0289	 ParSpMatVec=0.0036	 speedup=8.0074
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0289	 ParSpMatVec=0.0034	 speedup=8.4138

INFO: ParSpMatVec tests passed

>>> End of log
