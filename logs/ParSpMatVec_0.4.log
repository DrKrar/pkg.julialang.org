>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1185.39453125 MB free)
Uptime: 15826.0 sec
Load Avg:  1.0771484375  1.001953125  1.02783203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     703898 s       5336 s      57978 s     661165 s         31 s
#2  3499 MHz     518604 s         85 s      51479 s     962220 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1478	 ParSpMatVec=0.0247	 speedup=5.9775
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1478	 ParSpMatVec=0.0097	 speedup=15.1930
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1478	 ParSpMatVec=0.0140	 speedup=10.5711
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1478	 ParSpMatVec=0.0105	 speedup=14.0815
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1478	 ParSpMatVec=0.0119	 speedup=12.4353
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1226	 ParSpMatVec=0.0404	 speedup=3.0335
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1226	 ParSpMatVec=0.0143	 speedup=8.5902
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1226	 ParSpMatVec=0.0160	 speedup=7.6502
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1226	 ParSpMatVec=0.0131	 speedup=9.3774
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1226	 ParSpMatVec=0.0165	 speedup=7.4340

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0429	 ParSpMatVec=0.0300	 speedup=1.4296
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0429	 ParSpMatVec=0.0138	 speedup=3.1108
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0429	 ParSpMatVec=0.0145	 speedup=2.9516
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0429	 ParSpMatVec=0.0130	 speedup=3.2915
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0429	 ParSpMatVec=0.0145	 speedup=2.9483

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0460	 ParSpMatVec=0.0388	 speedup=1.1853
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0460	 ParSpMatVec=0.0029	 speedup=15.8375
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0460	 ParSpMatVec=0.0043	 speedup=10.6884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0460	 ParSpMatVec=0.0060	 speedup=7.6978
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0460	 ParSpMatVec=0.0026	 speedup=17.4806

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0453	 speedup=0.1849
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0055	 speedup=1.5216
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0038	 speedup=2.1774
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0065	 speedup=1.2862
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0022	 speedup=3.7426

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0679	 ParSpMatVec=0.0416	 speedup=1.6296
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0679	 ParSpMatVec=0.0027	 speedup=25.2071
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0679	 ParSpMatVec=0.0029	 speedup=23.0346
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0679	 ParSpMatVec=0.0026	 speedup=25.6881
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0679	 ParSpMatVec=0.0023	 speedup=30.0712

INFO: ParSpMatVec tests passed

>>> End of log
