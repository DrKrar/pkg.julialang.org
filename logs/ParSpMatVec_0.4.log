>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1194.578125 MB free)
Uptime: 13578.0 sec
Load Avg:  1.3818359375  1.0947265625  1.03271484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     655852 s       2687 s      58010 s     504560 s         25 s
#2  3500 MHz     412133 s       3911 s      51870 s     840830 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1203	 ParSpMatVec=0.0169	 speedup=7.1247
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1203	 ParSpMatVec=0.0096	 speedup=12.5287
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1203	 ParSpMatVec=0.0124	 speedup=9.6991
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1203	 ParSpMatVec=0.0078	 speedup=15.4190
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1203	 ParSpMatVec=0.0092	 speedup=13.1025
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1177	 ParSpMatVec=0.0410	 speedup=2.8716
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1177	 ParSpMatVec=0.0142	 speedup=8.2848
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1177	 ParSpMatVec=0.0152	 speedup=7.7303
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1177	 ParSpMatVec=0.0137	 speedup=8.6121
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1177	 ParSpMatVec=0.0128	 speedup=9.1870

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0311	 ParSpMatVec=0.0193	 speedup=1.6087
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0311	 ParSpMatVec=0.0136	 speedup=2.2876
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0311	 ParSpMatVec=0.0152	 speedup=2.0498
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0311	 ParSpMatVec=0.0130	 speedup=2.4018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0311	 ParSpMatVec=0.0126	 speedup=2.4770

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0390	 ParSpMatVec=0.0662	 speedup=0.5884
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0390	 ParSpMatVec=0.0067	 speedup=5.8003
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0390	 ParSpMatVec=0.0024	 speedup=16.2180
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0390	 ParSpMatVec=0.0015	 speedup=25.9983
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0390	 ParSpMatVec=0.0017	 speedup=23.3577

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0131	 ParSpMatVec=0.0432	 speedup=0.3036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0131	 ParSpMatVec=0.0033	 speedup=3.9417
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0131	 ParSpMatVec=0.0020	 speedup=6.5764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0131	 ParSpMatVec=0.0034	 speedup=3.8668
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0131	 ParSpMatVec=0.0019	 speedup=6.8562

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0337	 ParSpMatVec=0.0266	 speedup=1.2661
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0337	 ParSpMatVec=0.0029	 speedup=11.7512
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0337	 ParSpMatVec=0.0011	 speedup=32.0018
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0337	 ParSpMatVec=0.0021	 speedup=15.8912
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0337	 ParSpMatVec=0.0031	 speedup=10.8539

INFO: ParSpMatVec tests passed

>>> End of log
