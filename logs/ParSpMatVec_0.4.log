>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.0
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1070.78125 MB free)
Uptime: 13172.0 sec
Load Avg:  1.0703125  0.9189453125  0.93994140625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     582953 s       3405 s      62318 s     506684 s         24 s
#2  3499 MHz     387300 s       4069 s      54119 s     813243 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.6
 - SHA                           0.2.0
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1352	 ParSpMatVec=0.0256	 speedup=5.2892
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1352	 ParSpMatVec=0.0096	 speedup=14.0177
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1352	 ParSpMatVec=0.0116	 speedup=11.6550
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1352	 ParSpMatVec=0.0083	 speedup=16.2646
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1352	 ParSpMatVec=0.0098	 speedup=13.7825
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1122	 ParSpMatVec=0.0401	 speedup=2.7972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1122	 ParSpMatVec=0.0134	 speedup=8.4056
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1122	 ParSpMatVec=0.0130	 speedup=8.6229
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1122	 ParSpMatVec=0.0150	 speedup=7.4963
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1122	 ParSpMatVec=0.0156	 speedup=7.2006

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0299	 speedup=1.4518
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0160	 speedup=2.7200
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0149	 speedup=2.9142
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0246	 speedup=1.7674
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0111	 speedup=3.9029

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0394	 ParSpMatVec=0.0387	 speedup=1.0170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0394	 ParSpMatVec=0.0027	 speedup=14.4557
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0394	 ParSpMatVec=0.0026	 speedup=15.0516
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0394	 ParSpMatVec=0.0064	 speedup=6.1496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0394	 ParSpMatVec=0.0026	 speedup=14.9210

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0082	 ParSpMatVec=0.0454	 speedup=0.1800
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0082	 ParSpMatVec=0.0044	 speedup=1.8550
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0082	 ParSpMatVec=0.0024	 speedup=3.4450
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0082	 ParSpMatVec=0.0029	 speedup=2.8522
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0082	 ParSpMatVec=0.0033	 speedup=2.4618

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0462	 ParSpMatVec=0.0467	 speedup=0.9888
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0462	 ParSpMatVec=0.0042	 speedup=10.9023
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0462	 ParSpMatVec=0.0026	 speedup=17.6886
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0462	 ParSpMatVec=0.0028	 speedup=16.5738
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0462	 ParSpMatVec=0.0024	 speedup=18.8728

INFO: ParSpMatVec tests passed

>>> End of log
