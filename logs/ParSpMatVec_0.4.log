>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-113-generic #160-Ubuntu SMP Thu Mar 9 09:27:29 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1194.33984375 MB free)
Uptime: 15561.0 sec
Load Avg:  1.0234375  1.0146484375  0.970703125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     739698 s       5768 s      57784 s     598603 s         24 s
#2  3496 MHz     477260 s       2016 s      49200 s     977481 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.21.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1319	 ParSpMatVec=0.0252	 speedup=5.2324
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1319	 ParSpMatVec=0.0089	 speedup=14.8528
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1319	 ParSpMatVec=0.0123	 speedup=10.7225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1319	 ParSpMatVec=0.0110	 speedup=12.0431
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1319	 ParSpMatVec=0.0071	 speedup=18.6266
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1289	 ParSpMatVec=0.0418	 speedup=3.0837
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1289	 ParSpMatVec=0.0146	 speedup=8.8454
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1289	 ParSpMatVec=0.0155	 speedup=8.3416
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1289	 ParSpMatVec=0.0129	 speedup=10.0174
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1289	 ParSpMatVec=0.0142	 speedup=9.1060

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0490	 ParSpMatVec=0.0329	 speedup=1.4889
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0490	 ParSpMatVec=0.0152	 speedup=3.2318
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0490	 ParSpMatVec=0.0159	 speedup=3.0880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0490	 ParSpMatVec=0.0151	 speedup=3.2554
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0490	 ParSpMatVec=0.0175	 speedup=2.8025

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0349	 ParSpMatVec=0.0248	 speedup=1.4098
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0349	 ParSpMatVec=0.0029	 speedup=12.1929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0349	 ParSpMatVec=0.0032	 speedup=10.9737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0349	 ParSpMatVec=0.0021	 speedup=16.8149
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0349	 ParSpMatVec=0.0025	 speedup=13.8086

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0074	 ParSpMatVec=0.0285	 speedup=0.2599
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0074	 ParSpMatVec=0.0060	 speedup=1.2354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0074	 ParSpMatVec=0.0018	 speedup=4.1944
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0074	 ParSpMatVec=0.0061	 speedup=1.2231
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0074	 ParSpMatVec=0.0022	 speedup=3.4071

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0454	 ParSpMatVec=0.0468	 speedup=0.9714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0454	 ParSpMatVec=0.0041	 speedup=11.1872
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0454	 ParSpMatVec=0.0022	 speedup=20.3915
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0454	 ParSpMatVec=0.0038	 speedup=12.0805
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0454	 ParSpMatVec=0.0226	 speedup=2.0109

INFO: ParSpMatVec tests passed

>>> End of log
