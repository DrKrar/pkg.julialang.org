>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1211.89453125 MB free)
Uptime: 13422.0 sec
Load Avg:  1.01318359375  0.96630859375  0.95849609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     633904 s       7647 s      57454 s     512195 s         27 s
#2  3500 MHz     408554 s         55 s      53844 s     822650 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1352	 ParSpMatVec=0.0257	 speedup=5.2676
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1352	 ParSpMatVec=0.0117	 speedup=11.5149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1352	 ParSpMatVec=0.0131	 speedup=10.3504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1352	 ParSpMatVec=0.0192	 speedup=7.0455
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1352	 ParSpMatVec=0.0119	 speedup=11.3602
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1162	 ParSpMatVec=0.0468	 speedup=2.4863
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1162	 ParSpMatVec=0.0131	 speedup=8.8895
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1162	 ParSpMatVec=0.0154	 speedup=7.5608
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1162	 ParSpMatVec=0.0126	 speedup=9.2548
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1162	 ParSpMatVec=0.0169	 speedup=6.8954

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0470	 ParSpMatVec=0.0342	 speedup=1.3737
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0470	 ParSpMatVec=0.0130	 speedup=3.6149
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0470	 ParSpMatVec=0.0156	 speedup=3.0143
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0470	 ParSpMatVec=0.0148	 speedup=3.1712
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0470	 ParSpMatVec=0.0138	 speedup=3.4039

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0421	 ParSpMatVec=0.0261	 speedup=1.6162
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0421	 ParSpMatVec=0.0031	 speedup=13.4499
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0421	 ParSpMatVec=0.0027	 speedup=15.5124
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0421	 ParSpMatVec=0.0021	 speedup=19.8987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0421	 ParSpMatVec=0.0050	 speedup=8.4664

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0471	 speedup=0.2013
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0031	 speedup=3.1111
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0050	 speedup=1.8900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0059	 speedup=1.5990
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0025	 speedup=3.8143

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0475	 ParSpMatVec=0.0487	 speedup=0.9753
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0475	 ParSpMatVec=0.0034	 speedup=13.7803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0475	 ParSpMatVec=0.0022	 speedup=22.0663
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0475	 ParSpMatVec=0.0026	 speedup=18.2392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0475	 ParSpMatVec=0.0025	 speedup=19.2943

INFO: ParSpMatVec tests passed

>>> End of log
