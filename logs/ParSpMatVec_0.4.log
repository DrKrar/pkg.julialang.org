>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1162.51171875 MB free)
Uptime: 14001.0 sec
Load Avg:  1.00732421875  1.01953125  0.97607421875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     640432 s       6512 s      60635 s     553837 s         22 s
#2  3499 MHz     440980 s        422 s      55448 s     863608 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1211	 ParSpMatVec=0.0282	 speedup=4.2945
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1211	 ParSpMatVec=0.0086	 speedup=14.1237
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1211	 ParSpMatVec=0.0142	 speedup=8.5302
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1211	 ParSpMatVec=0.0089	 speedup=13.6298
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1211	 ParSpMatVec=0.0086	 speedup=14.0442
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1219	 ParSpMatVec=0.0420	 speedup=2.9024
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1219	 ParSpMatVec=0.0124	 speedup=9.8698
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1219	 ParSpMatVec=0.0183	 speedup=6.6553
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1219	 ParSpMatVec=0.0125	 speedup=9.7291
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1219	 ParSpMatVec=0.0130	 speedup=9.4138

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0428	 ParSpMatVec=0.0286	 speedup=1.4977
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0428	 ParSpMatVec=0.0135	 speedup=3.1705
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0428	 ParSpMatVec=0.0129	 speedup=3.3109
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0428	 ParSpMatVec=0.0150	 speedup=2.8537
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0428	 ParSpMatVec=0.0135	 speedup=3.1695

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0412	 speedup=1.0526
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0026	 speedup=16.8453
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0031	 speedup=13.8083
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0020	 speedup=21.2520
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0017	 speedup=26.2038

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0085	 ParSpMatVec=0.0260	 speedup=0.3249
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0085	 ParSpMatVec=0.0045	 speedup=1.8648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0085	 ParSpMatVec=0.0026	 speedup=3.2988
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0085	 ParSpMatVec=0.0025	 speedup=3.4214
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0085	 ParSpMatVec=0.0029	 speedup=2.9111

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0495	 ParSpMatVec=0.0499	 speedup=0.9916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0495	 ParSpMatVec=0.0039	 speedup=12.7445
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0495	 ParSpMatVec=0.0020	 speedup=24.1654
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0495	 ParSpMatVec=0.0020	 speedup=24.3507
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0495	 ParSpMatVec=0.0025	 speedup=20.1045

INFO: ParSpMatVec tests passed

>>> End of log
