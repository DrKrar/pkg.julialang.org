>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1208.9921875 MB free)
Uptime: 15304.0 sec
Load Avg:  1.02734375  1.0234375  1.04248046875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     713885 s         37 s      61590 s     598381 s         40 s
#2  3500 MHz     497481 s       5383 s      53903 s     908199 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1307	 ParSpMatVec=0.0270	 speedup=4.8353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1307	 ParSpMatVec=0.0078	 speedup=16.6574
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1307	 ParSpMatVec=0.0127	 speedup=10.3018
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1307	 ParSpMatVec=0.0075	 speedup=17.4967
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1307	 ParSpMatVec=0.0079	 speedup=16.5561
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1157	 ParSpMatVec=0.0401	 speedup=2.8869
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1157	 ParSpMatVec=0.0103	 speedup=11.2350
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1157	 ParSpMatVec=0.0145	 speedup=7.9684
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1157	 ParSpMatVec=0.0130	 speedup=8.8836
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1157	 ParSpMatVec=0.0158	 speedup=7.3122

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0494	 ParSpMatVec=0.0324	 speedup=1.5219
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0494	 ParSpMatVec=0.0146	 speedup=3.3749
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0494	 ParSpMatVec=0.0092	 speedup=5.3630
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0494	 ParSpMatVec=0.0116	 speedup=4.2543
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0494	 ParSpMatVec=0.0108	 speedup=4.5585

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0418	 ParSpMatVec=0.0391	 speedup=1.0696
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0418	 ParSpMatVec=0.0018	 speedup=23.8173
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0418	 ParSpMatVec=0.0012	 speedup=34.4449
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0418	 ParSpMatVec=0.0013	 speedup=31.5555
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0418	 ParSpMatVec=0.0026	 speedup=16.3308

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0097	 ParSpMatVec=0.0303	 speedup=0.3190
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0097	 ParSpMatVec=0.0042	 speedup=2.3229
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0097	 ParSpMatVec=0.0020	 speedup=4.8319
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0097	 ParSpMatVec=0.0038	 speedup=2.5474
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0097	 ParSpMatVec=0.0339	 speedup=0.2851

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0465	 ParSpMatVec=0.0506	 speedup=0.9183
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0465	 ParSpMatVec=0.0040	 speedup=11.6915
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0465	 ParSpMatVec=0.0019	 speedup=25.0337
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0465	 ParSpMatVec=0.0036	 speedup=12.8189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0465	 ParSpMatVec=0.0035	 speedup=13.4353

INFO: ParSpMatVec tests passed

>>> End of log
