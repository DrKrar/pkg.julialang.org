>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1158.05078125 MB free)
Uptime: 12135.0 sec
Load Avg:  0.85205078125  0.94677734375  1.0126953125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3503 MHz     567185 s         85 s      55498 s     439086 s         16 s
#2  3503 MHz     342116 s         68 s      46992 s     774032 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1267	 ParSpMatVec=0.0257	 speedup=4.9289
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1267	 ParSpMatVec=0.0087	 speedup=14.6283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1267	 ParSpMatVec=0.0149	 speedup=8.5172
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1267	 ParSpMatVec=0.0079	 speedup=16.0810
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1267	 ParSpMatVec=0.0084	 speedup=15.1568
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1204	 ParSpMatVec=0.0297	 speedup=4.0575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1204	 ParSpMatVec=0.0122	 speedup=9.8825
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1204	 ParSpMatVec=0.0144	 speedup=8.3639
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1204	 ParSpMatVec=0.0106	 speedup=11.3771
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1204	 ParSpMatVec=0.0120	 speedup=10.0616

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0274	 speedup=1.5738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0131	 speedup=3.2902
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0158	 speedup=2.7240
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0129	 speedup=3.3406
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0135	 speedup=3.1956

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0428	 ParSpMatVec=0.0386	 speedup=1.1081
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0428	 ParSpMatVec=0.0021	 speedup=20.8533
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0428	 ParSpMatVec=0.0024	 speedup=18.0017
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0428	 ParSpMatVec=0.0018	 speedup=23.2729
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0428	 ParSpMatVec=0.0019	 speedup=22.6196

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0066	 ParSpMatVec=0.0423	 speedup=0.1554
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0066	 ParSpMatVec=0.0030	 speedup=2.1929
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0066	 ParSpMatVec=0.0019	 speedup=3.3874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0066	 ParSpMatVec=0.0027	 speedup=2.4685
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0066	 ParSpMatVec=0.0032	 speedup=2.0349

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0271	 ParSpMatVec=0.0341	 speedup=0.7956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0271	 ParSpMatVec=0.0030	 speedup=9.1105
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0271	 ParSpMatVec=0.0015	 speedup=18.5390
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0271	 ParSpMatVec=0.0025	 speedup=10.8210
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0271	 ParSpMatVec=0.0022	 speedup=12.2005

INFO: ParSpMatVec tests passed

>>> End of log
