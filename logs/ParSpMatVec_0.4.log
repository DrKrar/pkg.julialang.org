>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.04296875 MB free)
Uptime: 14679.0 sec
Load Avg:  0.990234375  0.98583984375  0.85205078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     608644 s         57 s      53974 s     677099 s         19 s
#2  3499 MHz     400496 s         92 s      47668 s     981516 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0732	 ParSpMatVec=0.0165	 speedup=4.4345
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0732	 ParSpMatVec=0.0084	 speedup=8.7520
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0732	 ParSpMatVec=0.0140	 speedup=5.2427
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0732	 ParSpMatVec=0.0100	 speedup=7.3080
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0732	 ParSpMatVec=0.0089	 speedup=8.2367
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1097	 ParSpMatVec=0.0378	 speedup=2.9029
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1097	 ParSpMatVec=0.0127	 speedup=8.6096
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1097	 ParSpMatVec=0.0150	 speedup=7.3382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1097	 ParSpMatVec=0.0123	 speedup=8.9226
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1097	 ParSpMatVec=0.0102	 speedup=10.7600

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0302	 speedup=1.4354
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0145	 speedup=2.9974
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0150	 speedup=2.8924
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0126	 speedup=3.4499
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0082	 speedup=5.2770

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0430	 ParSpMatVec=0.0391	 speedup=1.1010
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0430	 ParSpMatVec=0.0028	 speedup=15.1080
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0430	 ParSpMatVec=0.0019	 speedup=22.9775
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0430	 ParSpMatVec=0.0019	 speedup=22.0743
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0430	 ParSpMatVec=0.0015	 speedup=29.0112

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0077	 ParSpMatVec=0.0382	 speedup=0.2012
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0077	 ParSpMatVec=0.0046	 speedup=1.6859
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0077	 ParSpMatVec=0.0023	 speedup=3.3428
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0077	 ParSpMatVec=0.0025	 speedup=3.0719
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0077	 ParSpMatVec=0.0023	 speedup=3.2970

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0386	 ParSpMatVec=0.0456	 speedup=0.8470
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0386	 ParSpMatVec=0.0037	 speedup=10.4486
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0386	 ParSpMatVec=0.0021	 speedup=18.6736
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0386	 ParSpMatVec=0.0024	 speedup=15.9587
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0386	 ParSpMatVec=0.0023	 speedup=16.7010

INFO: ParSpMatVec tests passed

>>> End of log
