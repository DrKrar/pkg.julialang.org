>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1178.92578125 MB free)
Uptime: 13894.0 sec
Load Avg:  0.9970703125  1.013671875  0.97021484375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     638571 s       1192 s      58277 s     557522 s         26 s
#2  3500 MHz     395648 s       5517 s      50655 s     887396 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.4
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1169	 ParSpMatVec=0.0245	 speedup=4.7733
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1169	 ParSpMatVec=0.0085	 speedup=13.8322
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1169	 ParSpMatVec=0.0114	 speedup=10.2980
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1169	 ParSpMatVec=0.0123	 speedup=9.4886
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1169	 ParSpMatVec=0.0103	 speedup=11.4060
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0792	 ParSpMatVec=0.0417	 speedup=1.8972
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0792	 ParSpMatVec=0.0140	 speedup=5.6437
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0792	 ParSpMatVec=0.0155	 speedup=5.1126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0792	 ParSpMatVec=0.0137	 speedup=5.7672
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0792	 ParSpMatVec=0.0158	 speedup=5.0176

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0307	 speedup=1.5249
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0127	 speedup=3.6910
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0152	 speedup=3.0694
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0134	 speedup=3.4814
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0170	 speedup=2.7448

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0394	 speedup=1.0670
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0021	 speedup=19.8252
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0020	 speedup=20.5260
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0017	 speedup=24.9513
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0014	 speedup=29.8840

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0057	 ParSpMatVec=0.0440	 speedup=0.1305
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0057	 ParSpMatVec=0.0035	 speedup=1.6505
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0057	 ParSpMatVec=0.0017	 speedup=3.4669
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0057	 ParSpMatVec=0.0044	 speedup=1.2956
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0057	 ParSpMatVec=0.0023	 speedup=2.5463

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0551	 ParSpMatVec=0.0386	 speedup=1.4262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0551	 ParSpMatVec=0.0032	 speedup=16.9638
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0551	 ParSpMatVec=0.0017	 speedup=31.9032
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0551	 ParSpMatVec=0.0024	 speedup=23.2706
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0551	 ParSpMatVec=0.0024	 speedup=22.5324

INFO: ParSpMatVec tests passed

>>> End of log
