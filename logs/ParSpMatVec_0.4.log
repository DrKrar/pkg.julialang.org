>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1158.00390625 MB free)
Uptime: 13223.0 sec
Load Avg:  1.12548828125  1.00830078125  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     585055 s       4270 s      59661 s     500739 s         26 s
#2  3500 MHz     343660 s       1460 s      51547 s     862006 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.1
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1393	 ParSpMatVec=0.0247	 speedup=5.6360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1393	 ParSpMatVec=0.0096	 speedup=14.5281
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1393	 ParSpMatVec=0.0126	 speedup=11.0733
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1393	 ParSpMatVec=0.0093	 speedup=14.9058
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1393	 ParSpMatVec=0.0088	 speedup=15.7930
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0737	 ParSpMatVec=0.0270	 speedup=2.7321
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0737	 ParSpMatVec=0.0132	 speedup=5.5916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0737	 ParSpMatVec=0.0148	 speedup=4.9682
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0737	 ParSpMatVec=0.0136	 speedup=5.4239
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0737	 ParSpMatVec=0.0157	 speedup=4.6855

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0440	 ParSpMatVec=0.0318	 speedup=1.3816
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0440	 ParSpMatVec=0.0127	 speedup=3.4722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0440	 ParSpMatVec=0.0098	 speedup=4.5073
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0440	 ParSpMatVec=0.0139	 speedup=3.1723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0440	 ParSpMatVec=0.0136	 speedup=3.2408

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0393	 ParSpMatVec=0.0398	 speedup=0.9890
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0393	 ParSpMatVec=0.0018	 speedup=22.4686
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0393	 ParSpMatVec=0.0015	 speedup=25.7737
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0393	 ParSpMatVec=0.0016	 speedup=23.8828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0393	 ParSpMatVec=0.0015	 speedup=26.7695

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0057	 ParSpMatVec=0.0254	 speedup=0.2267
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0057	 ParSpMatVec=0.0023	 speedup=2.5059
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0057	 ParSpMatVec=0.0018	 speedup=3.1990
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0057	 ParSpMatVec=0.0024	 speedup=2.4059
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0057	 ParSpMatVec=0.0025	 speedup=2.2687

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0443	 speedup=1.0663
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0041	 speedup=11.6114
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0018	 speedup=25.7097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0034	 speedup=13.8068
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0027	 speedup=17.3764

INFO: ParSpMatVec tests passed

>>> End of log
