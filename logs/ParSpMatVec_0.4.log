>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1199.88671875 MB free)
Uptime: 13136.0 sec
Load Avg:  1.00341796875  1.0146484375  0.98974609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     655674 s       2342 s      60226 s     459410 s         20 s
#2  3500 MHz     405021 s       4961 s      52876 s     810685 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1142	 ParSpMatVec=0.0246	 speedup=4.6413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1142	 ParSpMatVec=0.0088	 speedup=12.9789
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1142	 ParSpMatVec=0.0105	 speedup=10.8928
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1142	 ParSpMatVec=0.0087	 speedup=13.0590
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1142	 ParSpMatVec=0.0103	 speedup=11.0673
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0788	 ParSpMatVec=0.0243	 speedup=3.2419
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0788	 ParSpMatVec=0.0123	 speedup=6.3834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0788	 ParSpMatVec=0.0139	 speedup=5.6614
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0788	 ParSpMatVec=0.0137	 speedup=5.7312
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0788	 ParSpMatVec=0.0099	 speedup=7.9763

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0300	 ParSpMatVec=0.0187	 speedup=1.6087
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0300	 ParSpMatVec=0.0131	 speedup=2.2833
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0300	 ParSpMatVec=0.0143	 speedup=2.1049
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0300	 ParSpMatVec=0.0135	 speedup=2.2193
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0300	 ParSpMatVec=0.0117	 speedup=2.5635

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0266	 ParSpMatVec=0.0371	 speedup=0.7170
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0266	 ParSpMatVec=0.0023	 speedup=11.3258
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0266	 ParSpMatVec=0.0023	 speedup=11.3682
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0266	 ParSpMatVec=0.0016	 speedup=16.3777
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0266	 ParSpMatVec=0.0019	 speedup=14.0450

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0530	 speedup=0.1692
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0040	 speedup=2.2167
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0027	 speedup=3.3485
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0027	 speedup=3.3801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0028	 speedup=3.1860

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0489	 ParSpMatVec=0.0425	 speedup=1.1502
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0489	 ParSpMatVec=0.0050	 speedup=9.8362
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0489	 ParSpMatVec=0.0021	 speedup=23.1494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0489	 ParSpMatVec=0.0016	 speedup=30.8317
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0489	 ParSpMatVec=0.0027	 speedup=18.2455

INFO: ParSpMatVec tests passed

>>> End of log
