>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1185.7421875 MB free)
Uptime: 15465.0 sec
Load Avg:  0.93505859375  0.953125  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     726734 s        150 s      60171 s     603862 s         23 s
#2  3499 MHz     484706 s       6354 s      51910 s     952023 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1383	 ParSpMatVec=0.0256	 speedup=5.4132
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1383	 ParSpMatVec=0.0096	 speedup=14.3473
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1383	 ParSpMatVec=0.0133	 speedup=10.4325
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1383	 ParSpMatVec=0.0092	 speedup=15.0101
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1383	 ParSpMatVec=0.0118	 speedup=11.7231
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1207	 ParSpMatVec=0.0406	 speedup=2.9738
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1207	 ParSpMatVec=0.0125	 speedup=9.6515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1207	 ParSpMatVec=0.0143	 speedup=8.4685
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1207	 ParSpMatVec=0.0147	 speedup=8.2158
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1207	 ParSpMatVec=0.0134	 speedup=9.0253

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0305	 speedup=1.4866
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0151	 speedup=3.0044
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0159	 speedup=2.8466
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0137	 speedup=3.3091
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0164	 speedup=2.7565

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0346	 ParSpMatVec=0.0379	 speedup=0.9110
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0346	 ParSpMatVec=0.0025	 speedup=13.6986
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0346	 ParSpMatVec=0.0044	 speedup=7.9360
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0346	 ParSpMatVec=0.0110	 speedup=3.1480
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0346	 ParSpMatVec=0.0388	 speedup=0.8913

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0080	 ParSpMatVec=0.0422	 speedup=0.1890
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0080	 ParSpMatVec=0.0038	 speedup=2.1017
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0080	 ParSpMatVec=0.0020	 speedup=3.9258
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0080	 ParSpMatVec=0.0062	 speedup=1.2939
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0080	 ParSpMatVec=0.0050	 speedup=1.5886

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0441	 ParSpMatVec=0.0441	 speedup=1.0000
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0441	 ParSpMatVec=0.0044	 speedup=9.9837
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0441	 ParSpMatVec=0.0021	 speedup=21.1358
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0441	 ParSpMatVec=0.0253	 speedup=1.7406
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0441	 ParSpMatVec=0.0075	 speedup=5.9065

INFO: ParSpMatVec tests passed

>>> End of log
