>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1169.66796875 MB free)
Uptime: 14828.0 sec
Load Avg:  1.01318359375  0.9892578125  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     594632 s       5008 s      60214 s     660406 s         22 s
#2  3500 MHz     425192 s       2397 s      53698 s     897170 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1243	 ParSpMatVec=0.0314	 speedup=3.9541
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1243	 ParSpMatVec=0.0072	 speedup=17.3701
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1243	 ParSpMatVec=0.0118	 speedup=10.5708
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1243	 ParSpMatVec=0.0086	 speedup=14.5031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1243	 ParSpMatVec=0.0095	 speedup=13.0981
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1186	 ParSpMatVec=0.0400	 speedup=2.9632
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1186	 ParSpMatVec=0.0129	 speedup=9.1593
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1186	 ParSpMatVec=0.0144	 speedup=8.2401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1186	 ParSpMatVec=0.0129	 speedup=9.1959
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1186	 ParSpMatVec=0.0130	 speedup=9.1092

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0420	 ParSpMatVec=0.0298	 speedup=1.4110
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0420	 ParSpMatVec=0.0143	 speedup=2.9316
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0420	 ParSpMatVec=0.0140	 speedup=2.9964
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0420	 ParSpMatVec=0.0125	 speedup=3.3638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0420	 ParSpMatVec=0.0110	 speedup=3.8216

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0424	 ParSpMatVec=0.0385	 speedup=1.0998
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0424	 ParSpMatVec=0.0027	 speedup=15.9450
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0424	 ParSpMatVec=0.0026	 speedup=16.4665
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0424	 ParSpMatVec=0.0020	 speedup=21.2586
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0424	 ParSpMatVec=0.0014	 speedup=30.8718

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0055	 ParSpMatVec=0.0277	 speedup=0.1983
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0055	 ParSpMatVec=0.0036	 speedup=1.5056
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0055	 ParSpMatVec=0.0020	 speedup=2.6976
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0055	 ParSpMatVec=0.0020	 speedup=2.7689
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0055	 ParSpMatVec=0.0025	 speedup=2.2177

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0419	 ParSpMatVec=0.0485	 speedup=0.8640
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0419	 ParSpMatVec=0.0043	 speedup=9.7725
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0419	 ParSpMatVec=0.0035	 speedup=12.0148
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0419	 ParSpMatVec=0.0025	 speedup=17.0816
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0419	 ParSpMatVec=0.0025	 speedup=16.5786

INFO: ParSpMatVec tests passed

>>> End of log
