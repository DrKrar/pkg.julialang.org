>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1171.58984375 MB free)
Uptime: 13344.0 sec
Load Avg:  0.96630859375  0.9853515625  1.0185546875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     571568 s       2523 s      61465 s     539555 s         28 s
#2  3499 MHz     370701 s       3623 s      54170 s     845812 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0876	 ParSpMatVec=0.0250	 speedup=3.5102
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0876	 ParSpMatVec=0.0097	 speedup=9.0569
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0876	 ParSpMatVec=0.0142	 speedup=6.1905
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0876	 ParSpMatVec=0.0107	 speedup=8.1996
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0876	 ParSpMatVec=0.0105	 speedup=8.3325
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1171	 ParSpMatVec=0.0434	 speedup=2.6949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1171	 ParSpMatVec=0.0128	 speedup=9.1596
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1171	 ParSpMatVec=0.0145	 speedup=8.0621
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1171	 ParSpMatVec=0.0119	 speedup=9.8039
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1171	 ParSpMatVec=0.0167	 speedup=7.0215

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0403	 ParSpMatVec=0.0313	 speedup=1.2880
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0403	 ParSpMatVec=0.0147	 speedup=2.7528
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0403	 ParSpMatVec=0.0160	 speedup=2.5189
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0403	 ParSpMatVec=0.0136	 speedup=2.9563
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0403	 ParSpMatVec=0.0105	 speedup=3.8346

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0293	 ParSpMatVec=0.0374	 speedup=0.7830
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0293	 ParSpMatVec=0.0014	 speedup=21.1828
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0293	 ParSpMatVec=0.0030	 speedup=9.6980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0293	 ParSpMatVec=0.0096	 speedup=3.0448
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0293	 ParSpMatVec=0.0022	 speedup=13.4917

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0102	 ParSpMatVec=0.0256	 speedup=0.3975
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0102	 ParSpMatVec=0.0027	 speedup=3.7184
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0102	 ParSpMatVec=0.0028	 speedup=3.6008
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0102	 ParSpMatVec=0.0031	 speedup=3.2538
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0102	 ParSpMatVec=0.0022	 speedup=4.7094

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0447	 ParSpMatVec=0.0491	 speedup=0.9108
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0447	 ParSpMatVec=0.0032	 speedup=13.8350
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0447	 ParSpMatVec=0.0021	 speedup=21.3904
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0447	 ParSpMatVec=0.0022	 speedup=20.6251
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0447	 ParSpMatVec=0.0023	 speedup=19.3588

INFO: ParSpMatVec tests passed

>>> End of log
