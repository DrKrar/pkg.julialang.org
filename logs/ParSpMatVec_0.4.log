>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1196.4375 MB free)
Uptime: 14536.0 sec
Load Avg:  0.939453125  0.9423828125  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     683954 s       3326 s      58333 s     554149 s         41 s
#2  3500 MHz     450562 s       2886 s      50578 s     890259 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.2
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.15.0
 - SHA                           0.3.0
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1689	 ParSpMatVec=0.0328	 speedup=5.1559
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1689	 ParSpMatVec=0.0163	 speedup=10.3351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1689	 ParSpMatVec=0.0137	 speedup=12.3698
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1689	 ParSpMatVec=0.0161	 speedup=10.4778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1689	 ParSpMatVec=0.0130	 speedup=13.0256
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1496	 ParSpMatVec=0.0611	 speedup=2.4500
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1496	 ParSpMatVec=0.0156	 speedup=9.5819
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1496	 ParSpMatVec=0.0181	 speedup=8.2543
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1496	 ParSpMatVec=0.0218	 speedup=6.8572
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1496	 ParSpMatVec=0.0155	 speedup=9.6560

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0501	 ParSpMatVec=0.0306	 speedup=1.6381
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0501	 ParSpMatVec=0.0163	 speedup=3.0783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0501	 ParSpMatVec=0.0191	 speedup=2.6176
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0501	 ParSpMatVec=0.0150	 speedup=3.3413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0501	 ParSpMatVec=0.0147	 speedup=3.4012

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0493	 ParSpMatVec=0.0277	 speedup=1.7815
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0493	 ParSpMatVec=0.0028	 speedup=17.8656
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0493	 ParSpMatVec=0.0028	 speedup=17.8354
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0493	 ParSpMatVec=0.0019	 speedup=25.7651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0493	 ParSpMatVec=0.0014	 speedup=35.7336

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0088	 ParSpMatVec=0.0502	 speedup=0.1756
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0088	 ParSpMatVec=0.0048	 speedup=1.8373
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0088	 ParSpMatVec=0.0022	 speedup=3.9509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0088	 ParSpMatVec=0.0031	 speedup=2.8293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0088	 ParSpMatVec=0.0029	 speedup=3.0807

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0463	 ParSpMatVec=0.0516	 speedup=0.8968
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0463	 ParSpMatVec=0.0033	 speedup=13.8634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0463	 ParSpMatVec=0.0021	 speedup=22.1020
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0463	 ParSpMatVec=0.0029	 speedup=16.1489
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0463	 ParSpMatVec=0.0026	 speedup=18.1387

INFO: ParSpMatVec tests passed

>>> End of log
