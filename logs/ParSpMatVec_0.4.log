>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.0
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.5
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.4 LTS
  uname: Linux 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1064.31640625 MB free)
Uptime: 13364.0 sec
Load Avg:  1.00537109375  0.98388671875  0.95654296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     572723 s       4879 s      53217 s     547938 s         24 s
#2  3500 MHz     368323 s         47 s      46158 s     848702 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
13 additional packages:
 - BinDeps                       0.4.0
 - Calculus                      0.1.15
 - Compat                        0.8.6
 - Distances                     0.3.1
 - DualNumbers                   0.2.2
 - ForwardDiff                   0.2.2
 - NLsolve                       0.7.2              bc5bbedf (dirty)
 - NaNMath                       0.2.1
 - OCCA                          0.0.1              f9fb1c0c (dirty)
 - Optim                         0.5.0
 - PositiveFactorizations        0.0.1
 - SHA                           0.1.2
 - URIParser                     0.1.5
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1417	 ParSpMatVec=0.0254	 speedup=5.5723
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1417	 ParSpMatVec=0.0088	 speedup=16.1535
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1417	 ParSpMatVec=0.0121	 speedup=11.6944
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1417	 ParSpMatVec=0.0077	 speedup=18.5001
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1417	 ParSpMatVec=0.0103	 speedup=13.7836
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1164	 ParSpMatVec=0.0429	 speedup=2.7148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1164	 ParSpMatVec=0.0137	 speedup=8.5077
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1164	 ParSpMatVec=0.0148	 speedup=7.8585
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1164	 ParSpMatVec=0.0184	 speedup=6.3177
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1164	 ParSpMatVec=0.0130	 speedup=8.9730

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0490	 ParSpMatVec=0.0299	 speedup=1.6411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0490	 ParSpMatVec=0.0136	 speedup=3.6049
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0490	 ParSpMatVec=0.0145	 speedup=3.3778
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0490	 ParSpMatVec=0.0128	 speedup=3.8329
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0490	 ParSpMatVec=0.0141	 speedup=3.4819

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0415	 ParSpMatVec=0.0407	 speedup=1.0207
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0415	 ParSpMatVec=0.0027	 speedup=15.1278
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0415	 ParSpMatVec=0.0017	 speedup=23.8803
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0415	 ParSpMatVec=0.0011	 speedup=38.2009
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0415	 ParSpMatVec=0.0011	 speedup=36.2900

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0073	 ParSpMatVec=0.0516	 speedup=0.1409
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0073	 ParSpMatVec=0.0051	 speedup=1.4236
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0073	 ParSpMatVec=0.0037	 speedup=1.9812
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0073	 ParSpMatVec=0.0025	 speedup=2.9575
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0073	 ParSpMatVec=0.0025	 speedup=2.9009

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0496	 speedup=0.9634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0036	 speedup=13.4052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0022	 speedup=21.3817
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0023	 speedup=20.5833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0025	 speedup=19.4859

INFO: ParSpMatVec tests passed

>>> End of log
