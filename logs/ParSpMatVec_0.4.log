>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (637.07421875 MB free)
Uptime: 13932.0 sec
Load Avg:  1.68701171875  1.3759765625  1.236328125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     683786 s       3067 s      54685 s     572168 s         13 s
#2  3500 MHz     328957 s       3121 s      46178 s     956329 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.1
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1503	 ParSpMatVec=0.0255	 speedup=5.8841
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1503	 ParSpMatVec=0.0092	 speedup=16.3741
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1503	 ParSpMatVec=0.0110	 speedup=13.6845
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1503	 ParSpMatVec=0.0142	 speedup=10.6177
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1503	 ParSpMatVec=0.0204	 speedup=7.3625
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1839	 ParSpMatVec=0.0537	 speedup=3.4253
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1839	 ParSpMatVec=0.0151	 speedup=12.1451
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1839	 ParSpMatVec=0.0254	 speedup=7.2449
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1839	 ParSpMatVec=0.0132	 speedup=13.9020
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1839	 ParSpMatVec=0.0214	 speedup=8.6031

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0478	 ParSpMatVec=0.0293	 speedup=1.6328
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0478	 ParSpMatVec=0.0126	 speedup=3.7851
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0478	 ParSpMatVec=0.0138	 speedup=3.4722
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0478	 ParSpMatVec=0.0131	 speedup=3.6382
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0478	 ParSpMatVec=0.0141	 speedup=3.4028

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1097	 ParSpMatVec=0.0391	 speedup=2.8087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1097	 ParSpMatVec=0.0018	 speedup=61.0811
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1097	 ParSpMatVec=0.0070	 speedup=15.6118
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1097	 ParSpMatVec=0.0075	 speedup=14.5732
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1097	 ParSpMatVec=0.0057	 speedup=19.1136

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0095	 ParSpMatVec=0.0423	 speedup=0.2238
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0095	 ParSpMatVec=0.0041	 speedup=2.3093
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0095	 ParSpMatVec=0.0038	 speedup=2.4617
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0095	 ParSpMatVec=0.0023	 speedup=4.1747
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0095	 ParSpMatVec=0.0558	 speedup=0.1696

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0800	 ParSpMatVec=0.0440	 speedup=1.8206
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0800	 ParSpMatVec=0.0027	 speedup=30.0912
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0800	 ParSpMatVec=0.1043	 speedup=0.7674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0800	 ParSpMatVec=0.0244	 speedup=3.2833
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0800	 ParSpMatVec=0.0360	 speedup=2.2237

INFO: ParSpMatVec tests passed

>>> End of log
