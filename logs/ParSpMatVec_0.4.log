>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.2
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1060.6875 MB free)
Uptime: 14143.0 sec
Load Avg:  0.93310546875  0.962890625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     631056 s         91 s      55506 s     552124 s         28 s
#2  3499 MHz     373630 s         51 s      46921 s     925682 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.6.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.2
 - Compat                        0.8.7
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1331	 ParSpMatVec=0.0293	 speedup=4.5462
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1331	 ParSpMatVec=0.0089	 speedup=14.8899
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1331	 ParSpMatVec=0.0170	 speedup=7.8464
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1331	 ParSpMatVec=0.0110	 speedup=12.1181
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1331	 ParSpMatVec=0.0089	 speedup=14.9820
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1128	 ParSpMatVec=0.0306	 speedup=3.6916
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1128	 ParSpMatVec=0.0136	 speedup=8.2875
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1128	 ParSpMatVec=0.0152	 speedup=7.4182
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1128	 ParSpMatVec=0.0140	 speedup=8.0759
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1128	 ParSpMatVec=0.0132	 speedup=8.5729

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0384	 ParSpMatVec=0.0185	 speedup=2.0712
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0384	 ParSpMatVec=0.0132	 speedup=2.9127
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0384	 ParSpMatVec=0.0151	 speedup=2.5441
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0384	 ParSpMatVec=0.0136	 speedup=2.8193
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0384	 ParSpMatVec=0.0114	 speedup=3.3601

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0402	 speedup=1.0776
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0031	 speedup=14.0193
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0031	 speedup=13.9829
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0019	 speedup=22.7251
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0021	 speedup=20.8598

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0461	 speedup=0.1818
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0040	 speedup=2.1137
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0021	 speedup=4.0494
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0025	 speedup=3.3272
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0026	 speedup=3.2096

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0472	 ParSpMatVec=0.0473	 speedup=0.9994
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0472	 ParSpMatVec=0.0036	 speedup=13.2813
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0472	 ParSpMatVec=0.0021	 speedup=22.6522
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0472	 ParSpMatVec=0.0031	 speedup=15.4554
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0472	 ParSpMatVec=0.0025	 speedup=18.6703

INFO: ParSpMatVec tests passed

>>> End of log
