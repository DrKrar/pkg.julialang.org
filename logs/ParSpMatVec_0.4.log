>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1210.87109375 MB free)
Uptime: 14915.0 sec
Load Avg:  0.9970703125  0.9853515625  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     689346 s       5128 s      62634 s     585656 s         22 s
#2  3499 MHz     463605 s       1846 s      57142 s     927598 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1350	 ParSpMatVec=0.0281	 speedup=4.8027
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1350	 ParSpMatVec=0.0102	 speedup=13.1807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1350	 ParSpMatVec=0.0127	 speedup=10.6021
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1350	 ParSpMatVec=0.0103	 speedup=13.0971
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1350	 ParSpMatVec=0.0116	 speedup=11.6275
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1161	 ParSpMatVec=0.0499	 speedup=2.3253
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1161	 ParSpMatVec=0.0163	 speedup=7.1375
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1161	 ParSpMatVec=0.0216	 speedup=5.3715
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1161	 ParSpMatVec=0.0171	 speedup=6.7923
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1161	 ParSpMatVec=0.0122	 speedup=9.4859

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0496	 ParSpMatVec=0.0319	 speedup=1.5544
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0496	 ParSpMatVec=0.0205	 speedup=2.4221
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0496	 ParSpMatVec=0.0160	 speedup=3.1008
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0496	 ParSpMatVec=0.0187	 speedup=2.6577
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0496	 ParSpMatVec=0.0136	 speedup=3.6436

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0311	 ParSpMatVec=0.0246	 speedup=1.2664
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0311	 ParSpMatVec=0.0028	 speedup=11.1987
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0311	 ParSpMatVec=0.0035	 speedup=8.8822
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0311	 ParSpMatVec=0.0027	 speedup=11.7022
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0311	 ParSpMatVec=0.0020	 speedup=15.5291

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0094	 ParSpMatVec=0.0472	 speedup=0.1981
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0094	 ParSpMatVec=0.0062	 speedup=1.5052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0094	 ParSpMatVec=0.0059	 speedup=1.5916
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0094	 ParSpMatVec=0.0042	 speedup=2.2208
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0094	 ParSpMatVec=0.0023	 speedup=4.0809

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0540	 ParSpMatVec=0.0461	 speedup=1.1703
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0540	 ParSpMatVec=0.0042	 speedup=12.7800
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0540	 ParSpMatVec=0.0029	 speedup=18.3071
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0540	 ParSpMatVec=0.0042	 speedup=12.8683
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0540	 ParSpMatVec=0.0023	 speedup=23.7833

INFO: ParSpMatVec tests passed

>>> End of log
