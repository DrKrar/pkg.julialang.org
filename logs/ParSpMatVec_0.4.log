>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1172.08984375 MB free)
Uptime: 14029.0 sec
Load Avg:  1.103515625  1.0517578125  1.0537109375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     710463 s       7749 s      57449 s     485958 s         28 s
#2  3500 MHz     441802 s        922 s      51323 s     865940 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.10.0
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1192	 ParSpMatVec=0.0260	 speedup=4.5820
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1192	 ParSpMatVec=0.0098	 speedup=12.1457
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1192	 ParSpMatVec=0.0113	 speedup=10.5544
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1192	 ParSpMatVec=0.0101	 speedup=11.7747
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1192	 ParSpMatVec=0.0086	 speedup=13.8193
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1074	 ParSpMatVec=0.0426	 speedup=2.5242
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1074	 ParSpMatVec=0.0127	 speedup=8.4787
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1074	 ParSpMatVec=0.0136	 speedup=7.9148
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1074	 ParSpMatVec=0.0127	 speedup=8.4466
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1074	 ParSpMatVec=0.0136	 speedup=7.8795

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0317	 ParSpMatVec=0.0172	 speedup=1.8450
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0317	 ParSpMatVec=0.0135	 speedup=2.3387
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0317	 ParSpMatVec=0.0147	 speedup=2.1483
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0317	 ParSpMatVec=0.0123	 speedup=2.5725
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0317	 ParSpMatVec=0.0091	 speedup=3.4942

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0361	 ParSpMatVec=0.0224	 speedup=1.6101
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0361	 ParSpMatVec=0.0016	 speedup=22.3739
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0361	 ParSpMatVec=0.0017	 speedup=20.7261
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0361	 ParSpMatVec=0.0015	 speedup=24.0310
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0361	 ParSpMatVec=0.0018	 speedup=20.3734

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0062	 ParSpMatVec=0.0428	 speedup=0.1441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0062	 ParSpMatVec=0.0033	 speedup=1.8967
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0062	 ParSpMatVec=0.0033	 speedup=1.8962
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0062	 ParSpMatVec=0.0036	 speedup=1.6911
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0062	 ParSpMatVec=0.0023	 speedup=2.6972

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0306	 ParSpMatVec=0.0470	 speedup=0.6507
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0306	 ParSpMatVec=0.0032	 speedup=9.5006
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0306	 ParSpMatVec=0.0018	 speedup=16.6441
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0306	 ParSpMatVec=0.0041	 speedup=7.4007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0306	 ParSpMatVec=0.0029	 speedup=10.7290

INFO: ParSpMatVec tests passed

>>> End of log
