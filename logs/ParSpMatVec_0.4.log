>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1188.4453125 MB free)
Uptime: 16145.0 sec
Load Avg:  0.9375  0.9580078125  0.95166015625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz     743752 s       5376 s      59264 s     636568 s         22 s
#2  3495 MHz     456668 s       1415 s      51972 s    1057320 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0902	 ParSpMatVec=0.0256	 speedup=3.5308
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0902	 ParSpMatVec=0.0101	 speedup=8.8965
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0902	 ParSpMatVec=0.0113	 speedup=7.9960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0902	 ParSpMatVec=0.0117	 speedup=7.7353
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0902	 ParSpMatVec=0.0100	 speedup=8.9924
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1235	 ParSpMatVec=0.0497	 speedup=2.4878
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1235	 ParSpMatVec=0.0112	 speedup=11.0554
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1235	 ParSpMatVec=0.0129	 speedup=9.5404
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1235	 ParSpMatVec=0.0115	 speedup=10.7317
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1235	 ParSpMatVec=0.0222	 speedup=5.5638

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0317	 speedup=1.4304
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0141	 speedup=3.2192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0137	 speedup=3.2992
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0122	 speedup=3.7260
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0219	 speedup=2.0733

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0375	 ParSpMatVec=0.0413	 speedup=0.9061
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0375	 ParSpMatVec=0.0023	 speedup=16.5271
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0375	 ParSpMatVec=0.0026	 speedup=14.5880
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0375	 ParSpMatVec=0.0276	 speedup=1.3568
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0375	 ParSpMatVec=0.0046	 speedup=8.1519

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0467	 speedup=0.1973
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0032	 speedup=2.8580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0855	 speedup=0.1077
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0038	 speedup=2.4370
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0083	 speedup=1.1125

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0339	 ParSpMatVec=0.0312	 speedup=1.0874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0339	 ParSpMatVec=0.0031	 speedup=10.8979
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0339	 ParSpMatVec=0.0017	 speedup=20.1309
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0339	 ParSpMatVec=0.0027	 speedup=12.6832
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0339	 ParSpMatVec=0.0024	 speedup=14.2832

INFO: ParSpMatVec tests passed

>>> End of log
