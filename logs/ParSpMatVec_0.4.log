>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1187.421875 MB free)
Uptime: 15547.0 sec
Load Avg:  1.00927734375  0.97802734375  0.85302734375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     698610 s       6348 s      56070 s     638506 s         40 s
#2  3500 MHz     493054 s        348 s      49088 s     955282 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.18.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1359	 ParSpMatVec=0.0276	 speedup=4.9233
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1359	 ParSpMatVec=0.0080	 speedup=16.9556
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1359	 ParSpMatVec=0.0170	 speedup=8.0126
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1359	 ParSpMatVec=0.0143	 speedup=9.4949
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1359	 ParSpMatVec=0.0121	 speedup=11.2448
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1480	 ParSpMatVec=0.0575	 speedup=2.5755
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1480	 ParSpMatVec=0.0163	 speedup=9.0648
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1480	 ParSpMatVec=0.0180	 speedup=8.2426
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1480	 ParSpMatVec=0.0167	 speedup=8.8415
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1480	 ParSpMatVec=0.0173	 speedup=8.5748

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0477	 ParSpMatVec=0.0279	 speedup=1.7094
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0477	 ParSpMatVec=0.0277	 speedup=1.7197
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0477	 ParSpMatVec=0.0296	 speedup=1.6108
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0477	 ParSpMatVec=0.0208	 speedup=2.2936
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0477	 ParSpMatVec=0.0187	 speedup=2.5436

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0501	 ParSpMatVec=0.0466	 speedup=1.0756
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0501	 ParSpMatVec=0.0033	 speedup=15.1727
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0501	 ParSpMatVec=0.0035	 speedup=14.3292
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0501	 ParSpMatVec=0.0015	 speedup=33.3632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0501	 ParSpMatVec=0.0022	 speedup=22.3893

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0092	 ParSpMatVec=0.0346	 speedup=0.2670
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0092	 ParSpMatVec=0.0030	 speedup=3.0688
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0092	 ParSpMatVec=0.0028	 speedup=3.3297
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0092	 ParSpMatVec=0.0030	 speedup=3.0294
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0092	 ParSpMatVec=0.0022	 speedup=4.1317

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0361	 ParSpMatVec=0.0317	 speedup=1.1404
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0361	 ParSpMatVec=0.0044	 speedup=8.2116
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0361	 ParSpMatVec=0.0026	 speedup=13.7800
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0361	 ParSpMatVec=0.0035	 speedup=10.3923
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0361	 ParSpMatVec=0.0041	 speedup=8.7124

INFO: ParSpMatVec tests passed

>>> End of log
