>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.3
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1154.94140625 MB free)
Uptime: 14130.0 sec
Load Avg:  0.98681640625  0.9638671875  0.95458984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     590656 s       4080 s      55720 s     596347 s         30 s
#2  3500 MHz     413900 s       2256 s      48308 s     871093 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.3
 - Compat                        0.8.8
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1280	 ParSpMatVec=0.0257	 speedup=4.9903
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1280	 ParSpMatVec=0.0086	 speedup=14.9495
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1280	 ParSpMatVec=0.0133	 speedup=9.5919
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1280	 ParSpMatVec=0.0112	 speedup=11.4478
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1280	 ParSpMatVec=0.0069	 speedup=18.4845
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1236	 ParSpMatVec=0.0382	 speedup=3.2338
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1236	 ParSpMatVec=0.0125	 speedup=9.8609
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1236	 ParSpMatVec=0.0142	 speedup=8.6872
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1236	 ParSpMatVec=0.0131	 speedup=9.4161
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1236	 ParSpMatVec=0.0129	 speedup=9.5638

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0509	 ParSpMatVec=0.0288	 speedup=1.7696
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0509	 ParSpMatVec=0.0139	 speedup=3.6638
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0509	 ParSpMatVec=0.0155	 speedup=3.2766
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0509	 ParSpMatVec=0.0136	 speedup=3.7536
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0509	 ParSpMatVec=0.0129	 speedup=3.9502

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0397	 ParSpMatVec=0.0359	 speedup=1.1053
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0397	 ParSpMatVec=0.0023	 speedup=17.0399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0397	 ParSpMatVec=0.0049	 speedup=8.1086
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0397	 ParSpMatVec=0.0021	 speedup=18.9018
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0397	 ParSpMatVec=0.0043	 speedup=9.1849

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0079	 ParSpMatVec=0.0438	 speedup=0.1798
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0079	 ParSpMatVec=0.0035	 speedup=2.2334
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0079	 ParSpMatVec=0.0019	 speedup=4.2184
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0079	 ParSpMatVec=0.0030	 speedup=2.6613
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0079	 ParSpMatVec=0.0301	 speedup=0.2618

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0488	 ParSpMatVec=0.0392	 speedup=1.2440
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0488	 ParSpMatVec=0.0042	 speedup=11.7029
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0488	 ParSpMatVec=0.0057	 speedup=8.5766
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0488	 ParSpMatVec=0.0032	 speedup=15.3648
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0488	 ParSpMatVec=0.0023	 speedup=20.8958

INFO: ParSpMatVec tests passed

>>> End of log
