>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-96-generic #143-Ubuntu SMP Mon Aug 29 20:15:20 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1182.51171875 MB free)
Uptime: 12535.0 sec
Load Avg:  1.09814453125  1.0732421875  1.0029296875
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     566438 s       3554 s      60686 s     471472 s         34 s
#2  3499 MHz     373264 s       2884 s      53977 s     765763 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1289	 ParSpMatVec=0.0267	 speedup=4.8360
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1289	 ParSpMatVec=0.0095	 speedup=13.5206
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1289	 ParSpMatVec=0.0127	 speedup=10.1651
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1289	 ParSpMatVec=0.0103	 speedup=12.5133
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1289	 ParSpMatVec=0.0121	 speedup=10.6527
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0778	 ParSpMatVec=0.0422	 speedup=1.8425
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0778	 ParSpMatVec=0.0133	 speedup=5.8332
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0778	 ParSpMatVec=0.0162	 speedup=4.8078
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0778	 ParSpMatVec=0.0142	 speedup=5.4920
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0778	 ParSpMatVec=0.0136	 speedup=5.7072

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0467	 ParSpMatVec=0.0290	 speedup=1.6084
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0467	 ParSpMatVec=0.0135	 speedup=3.4690
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0467	 ParSpMatVec=0.0159	 speedup=2.9394
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0467	 ParSpMatVec=0.0128	 speedup=3.6529
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0467	 ParSpMatVec=0.0161	 speedup=2.9091

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0448	 speedup=1.0097
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0025	 speedup=18.2719
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0076	 speedup=5.9162
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0014	 speedup=32.5029
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0020	 speedup=22.8024

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0090	 ParSpMatVec=0.0472	 speedup=0.1905
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0090	 ParSpMatVec=0.0037	 speedup=2.4144
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0090	 ParSpMatVec=0.0026	 speedup=3.4728
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0090	 ParSpMatVec=0.0033	 speedup=2.7168
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0090	 ParSpMatVec=0.0022	 speedup=4.1002

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0436	 ParSpMatVec=0.0303	 speedup=1.4396
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0436	 ParSpMatVec=0.0032	 speedup=13.8447
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0436	 ParSpMatVec=0.0018	 speedup=24.4744
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0436	 ParSpMatVec=0.0031	 speedup=13.9133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0436	 ParSpMatVec=0.0018	 speedup=24.4485

INFO: ParSpMatVec tests passed

>>> End of log
