>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1156.82421875 MB free)
Uptime: 12634.0 sec
Load Avg:  1.0390625  0.95654296875  0.955078125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3501 MHz     590643 s       4907 s      58461 s     446837 s         27 s
#2  3501 MHz     328511 s        268 s      47232 s     840128 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1222	 ParSpMatVec=0.0246	 speedup=4.9765
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1222	 ParSpMatVec=0.0089	 speedup=13.6608
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1222	 ParSpMatVec=0.0118	 speedup=10.3649
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1222	 ParSpMatVec=0.0085	 speedup=14.3909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1222	 ParSpMatVec=0.0126	 speedup=9.7320
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0757	 ParSpMatVec=0.0244	 speedup=3.0994
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0757	 ParSpMatVec=0.0129	 speedup=5.8838
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0757	 ParSpMatVec=0.0142	 speedup=5.3514
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0757	 ParSpMatVec=0.0125	 speedup=6.0651
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0757	 ParSpMatVec=0.0150	 speedup=5.0490

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0267	 speedup=1.0783
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0119	 speedup=2.4119
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0157	 speedup=1.8348
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0148	 speedup=1.9536
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0163	 speedup=1.7637

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0260	 ParSpMatVec=0.0247	 speedup=1.0524
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0260	 ParSpMatVec=0.0023	 speedup=11.1509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0260	 ParSpMatVec=0.0023	 speedup=11.1858
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0260	 ParSpMatVec=0.0015	 speedup=17.3304
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0260	 ParSpMatVec=0.0014	 speedup=18.8879

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0054	 ParSpMatVec=0.0255	 speedup=0.2114
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0054	 ParSpMatVec=0.0027	 speedup=1.9892
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0054	 ParSpMatVec=0.0022	 speedup=2.4784
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0054	 ParSpMatVec=0.0022	 speedup=2.4721
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0054	 ParSpMatVec=0.0022	 speedup=2.4640

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0270	 ParSpMatVec=0.0258	 speedup=1.0460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0270	 ParSpMatVec=0.0027	 speedup=9.9052
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0270	 ParSpMatVec=0.0020	 speedup=13.4389
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0270	 ParSpMatVec=0.0027	 speedup=10.0036
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0270	 ParSpMatVec=0.0229	 speedup=1.1775

INFO: ParSpMatVec tests passed

>>> End of log
