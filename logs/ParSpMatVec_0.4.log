>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1198.57421875 MB free)
Uptime: 12166.0 sec
Load Avg:  0.990234375  0.9609375  0.98681640625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     541176 s        322 s      50167 s     501859 s         10 s
#2  3500 MHz     376684 s       5154 s      43605 s     746996 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0745	 ParSpMatVec=0.0234	 speedup=3.1820
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0745	 ParSpMatVec=0.0089	 speedup=8.3884
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0745	 ParSpMatVec=0.0109	 speedup=6.8173
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0745	 ParSpMatVec=0.0104	 speedup=7.1850
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0745	 ParSpMatVec=0.0090	 speedup=8.2560
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1164	 ParSpMatVec=0.0392	 speedup=2.9693
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1164	 ParSpMatVec=0.0125	 speedup=9.3409
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1164	 ParSpMatVec=0.0144	 speedup=8.0767
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1164	 ParSpMatVec=0.0134	 speedup=8.6593
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1164	 ParSpMatVec=0.0162	 speedup=7.1968

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0392	 ParSpMatVec=0.0252	 speedup=1.5570
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0392	 ParSpMatVec=0.0143	 speedup=2.7386
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0392	 ParSpMatVec=0.0152	 speedup=2.5794
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0392	 ParSpMatVec=0.0115	 speedup=3.4233
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0392	 ParSpMatVec=0.0106	 speedup=3.6930

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0406	 ParSpMatVec=0.0268	 speedup=1.5144
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0406	 ParSpMatVec=0.0015	 speedup=26.8202
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0406	 ParSpMatVec=0.0020	 speedup=20.4714
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0406	 ParSpMatVec=0.0010	 speedup=39.4064
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0406	 ParSpMatVec=0.0012	 speedup=33.5969

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0050	 ParSpMatVec=0.0278	 speedup=0.1801
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0050	 ParSpMatVec=0.0009	 speedup=5.2980
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0050	 ParSpMatVec=0.0020	 speedup=2.5114
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0050	 ParSpMatVec=0.0026	 speedup=1.9655
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0050	 ParSpMatVec=0.0027	 speedup=1.8338

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0288	 ParSpMatVec=0.0291	 speedup=0.9927
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0288	 ParSpMatVec=0.0038	 speedup=7.5620
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0288	 ParSpMatVec=0.0018	 speedup=16.3003
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0288	 ParSpMatVec=0.0022	 speedup=13.4104
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0288	 ParSpMatVec=0.0024	 speedup=11.7756

INFO: ParSpMatVec tests passed

>>> End of log
