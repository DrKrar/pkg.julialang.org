>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1181.296875 MB free)
Uptime: 12144.0 sec
Load Avg:  1.09228515625  1.02294921875  1.02392578125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3496 MHz     553619 s       3786 s      50793 s     482700 s         14 s
#2  3496 MHz     338483 s       3414 s      44849 s     785288 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1126	 ParSpMatVec=0.0175	 speedup=6.4225
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1126	 ParSpMatVec=0.0088	 speedup=12.7288
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1126	 ParSpMatVec=0.0122	 speedup=9.2351
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1126	 ParSpMatVec=0.0072	 speedup=15.6031
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1126	 ParSpMatVec=0.0074	 speedup=15.2761
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1199	 ParSpMatVec=0.0424	 speedup=2.8258
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1199	 ParSpMatVec=0.0137	 speedup=8.7761
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1199	 ParSpMatVec=0.0166	 speedup=7.2020
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1199	 ParSpMatVec=0.0113	 speedup=10.5885
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1199	 ParSpMatVec=0.0115	 speedup=10.4472

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0344	 ParSpMatVec=0.0182	 speedup=1.8885
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0344	 ParSpMatVec=0.0109	 speedup=3.1586
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0344	 ParSpMatVec=0.0130	 speedup=2.6413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0344	 ParSpMatVec=0.0120	 speedup=2.8812
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0344	 ParSpMatVec=0.0127	 speedup=2.7064

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0423	 ParSpMatVec=0.0375	 speedup=1.1293
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0423	 ParSpMatVec=0.0028	 speedup=15.1678
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0423	 ParSpMatVec=0.0024	 speedup=17.7634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0423	 ParSpMatVec=0.0016	 speedup=26.0283
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0423	 ParSpMatVec=0.0019	 speedup=22.8160

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0084	 ParSpMatVec=0.0344	 speedup=0.2428
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0084	 ParSpMatVec=0.0026	 speedup=3.2147
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0084	 ParSpMatVec=0.0024	 speedup=3.5469
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0084	 ParSpMatVec=0.0021	 speedup=3.9601
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0084	 ParSpMatVec=0.0023	 speedup=3.6844

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0320	 ParSpMatVec=0.0284	 speedup=1.1270
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0320	 ParSpMatVec=0.0032	 speedup=9.9211
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0320	 ParSpMatVec=0.0024	 speedup=13.4502
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0320	 ParSpMatVec=0.0023	 speedup=14.2202
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0320	 ParSpMatVec=0.0023	 speedup=14.0649

INFO: ParSpMatVec tests passed

>>> End of log
