>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.0
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64
Memory: 2.9392738342285156 GB (1205.015625 MB free)
Uptime: 14111.0 sec
Load Avg:  0.99169921875  1.0146484375  0.98193359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     665123 s       6386 s      55714 s     543699 s         32 s
#2  3499 MHz     444350 s         89 s      47470 s     870985 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.5
 - SHA                           0.3.0
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1297	 ParSpMatVec=0.0242	 speedup=5.3669
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1297	 ParSpMatVec=0.0092	 speedup=14.0805
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1297	 ParSpMatVec=0.0220	 speedup=5.9097
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1297	 ParSpMatVec=0.0110	 speedup=11.7883
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1297	 ParSpMatVec=0.0097	 speedup=13.4356
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1271	 ParSpMatVec=0.0389	 speedup=3.2659
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1271	 ParSpMatVec=0.0134	 speedup=9.4758
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1271	 ParSpMatVec=0.0179	 speedup=7.1003
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1271	 ParSpMatVec=0.0133	 speedup=9.5399
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1271	 ParSpMatVec=0.0153	 speedup=8.2965

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0515	 ParSpMatVec=0.0305	 speedup=1.6858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0515	 ParSpMatVec=0.0130	 speedup=3.9523
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0515	 ParSpMatVec=0.0157	 speedup=3.2842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0515	 ParSpMatVec=0.0168	 speedup=3.0636
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0515	 ParSpMatVec=0.0126	 speedup=4.0942

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0438	 ParSpMatVec=0.0402	 speedup=1.0876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0438	 ParSpMatVec=0.0053	 speedup=8.2131
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0438	 ParSpMatVec=0.0039	 speedup=11.2580
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0438	 ParSpMatVec=0.0057	 speedup=7.6856
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0438	 ParSpMatVec=0.0025	 speedup=17.7541

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0091	 ParSpMatVec=0.0537	 speedup=0.1698
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0091	 ParSpMatVec=0.0036	 speedup=2.5496
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0091	 ParSpMatVec=0.0020	 speedup=4.5632
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0091	 ParSpMatVec=0.0024	 speedup=3.8688
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0091	 ParSpMatVec=0.0026	 speedup=3.5155

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0556	 ParSpMatVec=0.0497	 speedup=1.1182
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0556	 ParSpMatVec=0.0034	 speedup=16.1697
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0556	 ParSpMatVec=0.0058	 speedup=9.5616
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0556	 ParSpMatVec=0.0027	 speedup=20.6033
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0556	 ParSpMatVec=0.0044	 speedup=12.6372

INFO: ParSpMatVec tests passed

>>> End of log
