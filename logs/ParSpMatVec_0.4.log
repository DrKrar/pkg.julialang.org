>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1199.21484375 MB free)
Uptime: 13130.0 sec
Load Avg:  1.09228515625  1.03125  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     609695 s       5826 s      54416 s     515232 s         17 s
#2  3499 MHz     415300 s        848 s      47192 s     802040 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1243	 ParSpMatVec=0.0253	 speedup=4.9175
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1243	 ParSpMatVec=0.0098	 speedup=12.6439
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1243	 ParSpMatVec=0.0128	 speedup=9.7426
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1243	 ParSpMatVec=0.0105	 speedup=11.8842
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1243	 ParSpMatVec=0.0098	 speedup=12.7159
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1212	 ParSpMatVec=0.0438	 speedup=2.7677
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1212	 ParSpMatVec=0.0136	 speedup=8.9340
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1212	 ParSpMatVec=0.0158	 speedup=7.6840
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1212	 ParSpMatVec=0.0154	 speedup=7.8928
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1212	 ParSpMatVec=0.0137	 speedup=8.8187

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0292	 ParSpMatVec=0.0172	 speedup=1.6960
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0292	 ParSpMatVec=0.0123	 speedup=2.3708
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0292	 ParSpMatVec=0.0145	 speedup=2.0113
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0292	 ParSpMatVec=0.0112	 speedup=2.6136
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0292	 ParSpMatVec=0.0140	 speedup=2.0815

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0408	 ParSpMatVec=0.0413	 speedup=0.9900
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0408	 ParSpMatVec=0.0034	 speedup=12.1515
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0408	 ParSpMatVec=0.0023	 speedup=17.7925
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0408	 ParSpMatVec=0.0018	 speedup=22.8719
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0408	 ParSpMatVec=0.0017	 speedup=24.4287

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0103	 ParSpMatVec=0.0328	 speedup=0.3128
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0103	 ParSpMatVec=0.0064	 speedup=1.6112
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0103	 ParSpMatVec=0.0016	 speedup=6.2852
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0103	 ParSpMatVec=0.0026	 speedup=4.0169
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0103	 ParSpMatVec=0.0029	 speedup=3.4955

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0294	 ParSpMatVec=0.0373	 speedup=0.7874
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0294	 ParSpMatVec=0.0037	 speedup=7.9282
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0294	 ParSpMatVec=0.0037	 speedup=8.0509
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0294	 ParSpMatVec=0.0024	 speedup=12.4477
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0294	 ParSpMatVec=0.0026	 speedup=11.1096

INFO: ParSpMatVec tests passed

>>> End of log
