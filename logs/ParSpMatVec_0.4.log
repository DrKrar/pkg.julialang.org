>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.3.21
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.3
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0831	 ParSpMatVec=0.0255	 speedup=3.2560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0831	 ParSpMatVec=0.0082	 speedup=10.1838
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0831	 ParSpMatVec=0.0115	 speedup=7.2308
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0831	 ParSpMatVec=0.0097	 speedup=8.5256
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0831	 ParSpMatVec=0.0108	 speedup=7.6804
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0767	 ParSpMatVec=0.0261	 speedup=2.9368
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0767	 ParSpMatVec=0.0127	 speedup=6.0425
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0767	 ParSpMatVec=0.0155	 speedup=4.9542
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0767	 ParSpMatVec=0.0168	 speedup=4.5504
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0767	 ParSpMatVec=0.0146	 speedup=5.2686

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0453	 ParSpMatVec=0.0298	 speedup=1.5193
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0453	 ParSpMatVec=0.0128	 speedup=3.5428
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0453	 ParSpMatVec=0.0101	 speedup=4.4745
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0453	 ParSpMatVec=0.0186	 speedup=2.4372
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0453	 ParSpMatVec=0.0181	 speedup=2.4985

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0407	 ParSpMatVec=0.0291	 speedup=1.4007
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0407	 ParSpMatVec=0.0019	 speedup=21.5492
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0407	 ParSpMatVec=0.0022	 speedup=18.5804
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0407	 ParSpMatVec=0.0036	 speedup=11.4295
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0407	 ParSpMatVec=0.0018	 speedup=22.3753

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0078	 ParSpMatVec=0.0460	 speedup=0.1691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0078	 ParSpMatVec=0.0036	 speedup=2.1827
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0078	 ParSpMatVec=0.0018	 speedup=4.3552
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0078	 ParSpMatVec=0.0048	 speedup=1.6138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0078	 ParSpMatVec=0.0023	 speedup=3.3255

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0466	 ParSpMatVec=0.0480	 speedup=0.9691
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0466	 ParSpMatVec=0.0041	 speedup=11.4263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0466	 ParSpMatVec=0.0017	 speedup=27.1314
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0466	 ParSpMatVec=0.0023	 speedup=20.5113
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0466	 ParSpMatVec=0.0024	 speedup=19.2174

INFO: ParSpMatVec tests passed

>>> End of log
