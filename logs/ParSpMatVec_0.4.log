>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-110-generic #157-Ubuntu SMP Mon Feb 20 11:54:05 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1186.23828125 MB free)
Uptime: 15098.0 sec
Load Avg:  0.9296875  0.96533203125  0.95068359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     697909 s       3072 s      56984 s     590234 s         32 s
#2  3500 MHz     497552 s       3698 s      51870 s     899624 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1204	 ParSpMatVec=0.0252	 speedup=4.7796
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1204	 ParSpMatVec=0.0077	 speedup=15.5834
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1204	 ParSpMatVec=0.0155	 speedup=7.7575
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1204	 ParSpMatVec=0.0123	 speedup=9.7945
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1204	 ParSpMatVec=0.0221	 speedup=5.4433
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0748	 ParSpMatVec=0.0438	 speedup=1.7087
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0748	 ParSpMatVec=0.0149	 speedup=5.0249
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0748	 ParSpMatVec=0.0142	 speedup=5.2560
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0748	 ParSpMatVec=0.0129	 speedup=5.7913
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0748	 ParSpMatVec=0.0121	 speedup=6.1628

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0442	 ParSpMatVec=0.0287	 speedup=1.5385
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0442	 ParSpMatVec=0.0124	 speedup=3.5652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0442	 ParSpMatVec=0.0131	 speedup=3.3594
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0442	 ParSpMatVec=0.0124	 speedup=3.5644
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0442	 ParSpMatVec=0.0128	 speedup=3.4628

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0409	 ParSpMatVec=0.0428	 speedup=0.9570
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0409	 ParSpMatVec=0.0045	 speedup=9.1908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0409	 ParSpMatVec=0.0024	 speedup=16.8387
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0409	 ParSpMatVec=0.0015	 speedup=27.3957
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0409	 ParSpMatVec=0.0017	 speedup=24.0194

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0086	 ParSpMatVec=0.0477	 speedup=0.1806
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0086	 ParSpMatVec=0.0034	 speedup=2.5152
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0086	 ParSpMatVec=0.0022	 speedup=3.8985
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0086	 ParSpMatVec=0.0024	 speedup=3.6603
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0086	 ParSpMatVec=0.0025	 speedup=3.3919

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0365	 ParSpMatVec=0.0318	 speedup=1.1460
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0365	 ParSpMatVec=0.0037	 speedup=9.7649
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0365	 ParSpMatVec=0.0018	 speedup=20.8165
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0365	 ParSpMatVec=0.0025	 speedup=14.5474
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0365	 ParSpMatVec=0.0026	 speedup=14.0658

INFO: ParSpMatVec tests passed

>>> End of log
