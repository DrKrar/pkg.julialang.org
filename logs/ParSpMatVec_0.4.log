>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.7
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.2
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-112-generic #159-Ubuntu SMP Fri Mar 3 15:26:07 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1208.640625 MB free)
Uptime: 16019.0 sec
Load Avg:  1.0029296875  1.0146484375  1.0400390625
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3500 MHz     743320 s       1388 s      64352 s     635958 s         25 s
#2  3500 MHz     485473 s       6000 s      57741 s    1004440 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.7
 - Compat                        0.20.0
 - SHA                           0.3.2
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1517	 ParSpMatVec=0.0270	 speedup=5.6170
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1517	 ParSpMatVec=0.0101	 speedup=14.9879
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1517	 ParSpMatVec=0.0104	 speedup=14.5771
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1517	 ParSpMatVec=0.0062	 speedup=24.5792
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1517	 ParSpMatVec=0.0146	 speedup=10.3985
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1263	 ParSpMatVec=0.0400	 speedup=3.1562
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1263	 ParSpMatVec=0.0128	 speedup=9.8882
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1263	 ParSpMatVec=0.0106	 speedup=11.8770
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1263	 ParSpMatVec=0.0093	 speedup=13.6119
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1263	 ParSpMatVec=0.0121	 speedup=10.3995

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0433	 ParSpMatVec=0.0286	 speedup=1.5152
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0433	 ParSpMatVec=0.0126	 speedup=3.4515
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0433	 ParSpMatVec=0.0071	 speedup=6.1036
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0433	 ParSpMatVec=0.0131	 speedup=3.3015
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0433	 ParSpMatVec=0.0134	 speedup=3.2331

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0314	 ParSpMatVec=0.0398	 speedup=0.7908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0314	 ParSpMatVec=0.0024	 speedup=13.3181
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0314	 ParSpMatVec=0.0027	 speedup=11.7438
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0314	 ParSpMatVec=0.0018	 speedup=17.5795
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0314	 ParSpMatVec=0.0022	 speedup=14.1471

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0259	 speedup=0.2592
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0034	 speedup=2.0035
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0025	 speedup=2.7263
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0023	 speedup=2.9087
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0028	 speedup=2.4149

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0443	 ParSpMatVec=0.0429	 speedup=1.0324
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0443	 ParSpMatVec=0.0034	 speedup=13.0539
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0443	 ParSpMatVec=0.0053	 speedup=8.4107
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0443	 ParSpMatVec=0.0118	 speedup=3.7618
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0443	 ParSpMatVec=0.0120	 speedup=3.7048

INFO: ParSpMatVec tests passed

>>> End of log
