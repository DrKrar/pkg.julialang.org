>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-101-generic #148-Ubuntu SMP Thu Oct 20 22:08:32 UTC 2016 x86_64 x86_64
Memory: 2.939281463623047 GB (1195.421875 MB free)
Uptime: 14016.0 sec
Load Avg:  1.00732421875  1.005859375  1.01318359375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     672022 s       6591 s      55300 s     522042 s         27 s
#2  3499 MHz     416764 s       7427 s      47969 s     887996 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1126	 ParSpMatVec=0.0279	 speedup=4.0439
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1126	 ParSpMatVec=0.0094	 speedup=12.0428
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1126	 ParSpMatVec=0.0131	 speedup=8.5982
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1126	 ParSpMatVec=0.0187	 speedup=6.0090
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1126	 ParSpMatVec=0.0074	 speedup=15.1361
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1305	 ParSpMatVec=0.0373	 speedup=3.5006
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1305	 ParSpMatVec=0.0181	 speedup=7.2088
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1305	 ParSpMatVec=0.0153	 speedup=8.5135
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1305	 ParSpMatVec=0.0133	 speedup=9.8163
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1305	 ParSpMatVec=0.0176	 speedup=7.4219

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0523	 ParSpMatVec=0.0333	 speedup=1.5698
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0523	 ParSpMatVec=0.0178	 speedup=2.9438
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0523	 ParSpMatVec=0.0178	 speedup=2.9401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0523	 ParSpMatVec=0.0126	 speedup=4.1609
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0523	 ParSpMatVec=0.0137	 speedup=3.8090

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0459	 ParSpMatVec=0.0408	 speedup=1.1245
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0459	 ParSpMatVec=0.0031	 speedup=14.6790
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0459	 ParSpMatVec=0.0016	 speedup=28.0400
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0459	 ParSpMatVec=0.0095	 speedup=4.8236
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0459	 ParSpMatVec=0.0015	 speedup=29.7388

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0087	 ParSpMatVec=0.0533	 speedup=0.1634
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0087	 ParSpMatVec=0.0051	 speedup=1.7232
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0087	 ParSpMatVec=0.0021	 speedup=4.1466
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0087	 ParSpMatVec=0.0023	 speedup=3.8133
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0087	 ParSpMatVec=0.0064	 speedup=1.3572

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0338	 ParSpMatVec=0.0477	 speedup=0.7079
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0338	 ParSpMatVec=0.0038	 speedup=8.8262
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0338	 ParSpMatVec=0.0059	 speedup=5.7067
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0338	 ParSpMatVec=0.0042	 speedup=7.9609
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0338	 ParSpMatVec=0.0318	 speedup=1.0616

INFO: ParSpMatVec tests passed

>>> End of log
