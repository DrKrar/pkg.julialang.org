>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.6
Commit 2e358ce (2016-06-19 17:16 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64
Memory: 2.4471054077148438 GB (1174.37109375 MB free)
Uptime: 13574.0 sec
Load Avg:  0.97119140625  0.9853515625  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3504 MHz     565664 s       2831 s      60407 s     572281 s         25 s
#2  3504 MHz     354629 s       1530 s      52342 s     891155 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.7.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.0
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0984	 ParSpMatVec=0.0194	 speedup=5.0619
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0984	 ParSpMatVec=0.0075	 speedup=13.0935
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0984	 ParSpMatVec=0.0125	 speedup=7.8910
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0984	 ParSpMatVec=0.0145	 speedup=6.7900
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0984	 ParSpMatVec=0.0120	 speedup=8.1984
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1179	 ParSpMatVec=0.0404	 speedup=2.9157
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1179	 ParSpMatVec=0.0116	 speedup=10.1234
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1179	 ParSpMatVec=0.0162	 speedup=7.2874
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1179	 ParSpMatVec=0.0139	 speedup=8.4554
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1179	 ParSpMatVec=0.0190	 speedup=6.2180

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0316	 ParSpMatVec=0.0179	 speedup=1.7656
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0316	 ParSpMatVec=0.0135	 speedup=2.3411
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0316	 ParSpMatVec=0.0142	 speedup=2.2251
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0316	 ParSpMatVec=0.0178	 speedup=1.7760
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0316	 ParSpMatVec=0.0150	 speedup=2.1087

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0431	 ParSpMatVec=0.0427	 speedup=1.0110
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0431	 ParSpMatVec=0.0032	 speedup=13.3781
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0431	 ParSpMatVec=0.0027	 speedup=15.7174
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0431	 ParSpMatVec=0.0022	 speedup=19.6189
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0431	 ParSpMatVec=0.0018	 speedup=23.4532

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0070	 ParSpMatVec=0.0335	 speedup=0.2103
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0070	 ParSpMatVec=0.0031	 speedup=2.2392
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0070	 ParSpMatVec=0.0046	 speedup=1.5178
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0070	 ParSpMatVec=0.0032	 speedup=2.1746
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0070	 ParSpMatVec=0.0027	 speedup=2.5933

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0284	 ParSpMatVec=0.0275	 speedup=1.0343
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0284	 ParSpMatVec=0.0029	 speedup=9.6674
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0284	 ParSpMatVec=0.0040	 speedup=7.1463
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0284	 ParSpMatVec=0.0025	 speedup=11.4151
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0284	 ParSpMatVec=0.0023	 speedup=12.5823

INFO: ParSpMatVec tests passed

>>> End of log
