>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1206.390625 MB free)
Uptime: 13460.0 sec
Load Avg:  1.0029296875  0.98681640625  0.9833984375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     613403 s       6606 s      51162 s     546819 s         30 s
#2  3499 MHz     409186 s        130 s      44902 s     842757 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0762	 ParSpMatVec=0.0252	 speedup=3.0192
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0762	 ParSpMatVec=0.0088	 speedup=8.6413
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0762	 ParSpMatVec=0.0120	 speedup=6.3640
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0762	 ParSpMatVec=0.0080	 speedup=9.5032
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0762	 ParSpMatVec=0.0152	 speedup=5.0163
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1178	 ParSpMatVec=0.0399	 speedup=2.9492
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1178	 ParSpMatVec=0.0121	 speedup=9.7608
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1178	 ParSpMatVec=0.0131	 speedup=9.0250
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1178	 ParSpMatVec=0.0173	 speedup=6.7887
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1178	 ParSpMatVec=0.0102	 speedup=11.5724

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0476	 ParSpMatVec=0.0286	 speedup=1.6626
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0476	 ParSpMatVec=0.0139	 speedup=3.4235
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0476	 ParSpMatVec=0.0074	 speedup=6.4226
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0476	 ParSpMatVec=0.0107	 speedup=4.4652
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0476	 ParSpMatVec=0.0114	 speedup=4.1803

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0406	 ParSpMatVec=0.0229	 speedup=1.7699
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0406	 ParSpMatVec=0.0021	 speedup=18.9575
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0406	 ParSpMatVec=0.0009	 speedup=45.6662
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0406	 ParSpMatVec=0.0015	 speedup=27.0224
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0406	 ParSpMatVec=0.0014	 speedup=28.3981

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0069	 ParSpMatVec=0.0265	 speedup=0.2604
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0069	 ParSpMatVec=0.0035	 speedup=1.9908
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0069	 ParSpMatVec=0.0017	 speedup=4.1419
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0069	 ParSpMatVec=0.0021	 speedup=3.2961
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0069	 ParSpMatVec=0.0029	 speedup=2.3531

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0511	 ParSpMatVec=0.0443	 speedup=1.1545
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0511	 ParSpMatVec=0.0032	 speedup=16.0723
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0511	 ParSpMatVec=0.0017	 speedup=30.7960
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0511	 ParSpMatVec=0.0032	 speedup=15.9498
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0511	 ParSpMatVec=0.0025	 speedup=20.3284

INFO: ParSpMatVec tests passed

>>> End of log
