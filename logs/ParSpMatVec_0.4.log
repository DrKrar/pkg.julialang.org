>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.3.1
INFO: Installing URIParser v0.1.8
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-108-generic #155-Ubuntu SMP Wed Jan 11 16:58:52 UTC 2017 x86_64 x86_64
Memory: 2.9392738342285156 GB (1199.30859375 MB free)
Uptime: 15712.0 sec
Load Avg:  0.955078125  0.93310546875  0.9599609375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3506 MHz     728569 s       4344 s      66545 s     612052 s         50 s
#2  3506 MHz     526130 s       2706 s      60944 s     916995 s          1 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.3
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.19.0
 - SHA                           0.3.1
 - URIParser                     0.1.8
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1735	 ParSpMatVec=0.0344	 speedup=5.0474
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1735	 ParSpMatVec=0.0112	 speedup=15.4947
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1735	 ParSpMatVec=0.0122	 speedup=14.2766
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1735	 ParSpMatVec=0.0156	 speedup=11.1509
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1735	 ParSpMatVec=0.0104	 speedup=16.6911
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1641	 ParSpMatVec=0.0515	 speedup=3.1847
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1641	 ParSpMatVec=0.0278	 speedup=5.8967
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1641	 ParSpMatVec=0.0089	 speedup=18.3681
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1641	 ParSpMatVec=0.0130	 speedup=12.6188
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1641	 ParSpMatVec=0.0143	 speedup=11.5105

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0636	 ParSpMatVec=0.0520	 speedup=1.2248
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0636	 ParSpMatVec=0.0165	 speedup=3.8635
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0636	 ParSpMatVec=0.0164	 speedup=3.8714
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0636	 ParSpMatVec=0.0678	 speedup=0.9389
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0636	 ParSpMatVec=0.0134	 speedup=4.7644

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0495	 ParSpMatVec=0.0425	 speedup=1.1637
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0495	 ParSpMatVec=0.0028	 speedup=17.5123
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0495	 ParSpMatVec=0.0378	 speedup=1.3078
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0495	 ParSpMatVec=0.0145	 speedup=3.4164
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0495	 ParSpMatVec=0.0049	 speedup=10.0240

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0100	 ParSpMatVec=0.0603	 speedup=0.1652
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0100	 ParSpMatVec=0.0036	 speedup=2.7870
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0100	 ParSpMatVec=0.0031	 speedup=3.2135
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0100	 ParSpMatVec=0.0528	 speedup=0.1887
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0100	 ParSpMatVec=0.0031	 speedup=3.2642

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0575	 ParSpMatVec=0.0529	 speedup=1.0876
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0575	 ParSpMatVec=0.0037	 speedup=15.3923
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0575	 ParSpMatVec=0.0030	 speedup=19.3764
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0575	 ParSpMatVec=0.0051	 speedup=11.3223
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0575	 ParSpMatVec=0.0700	 speedup=0.8213

INFO: ParSpMatVec tests passed

>>> End of log
