>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-98-generic #145-Ubuntu SMP Sat Oct 8 20:13:07 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1184.98046875 MB free)
Uptime: 13323.0 sec
Load Avg:  1.0830078125  1.001953125  0.96533203125
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3495 MHz     642527 s       3791 s      53455 s     495275 s         21 s
#2  3495 MHz     367117 s       2649 s      47641 s     876497 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.2
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1318	 ParSpMatVec=0.0288	 speedup=4.5807
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1318	 ParSpMatVec=0.0109	 speedup=12.0331
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1318	 ParSpMatVec=0.0150	 speedup=8.7909
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1318	 ParSpMatVec=0.0083	 speedup=15.8417
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1318	 ParSpMatVec=0.0103	 speedup=12.8218
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1190	 ParSpMatVec=0.0411	 speedup=2.8976
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1190	 ParSpMatVec=0.0144	 speedup=8.2734
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1190	 ParSpMatVec=0.0144	 speedup=8.2529
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1190	 ParSpMatVec=0.0127	 speedup=9.3993
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1190	 ParSpMatVec=0.0133	 speedup=8.9202

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0515	 ParSpMatVec=0.0290	 speedup=1.7762
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0515	 ParSpMatVec=0.0134	 speedup=3.8470
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0515	 ParSpMatVec=0.0136	 speedup=3.7877
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0515	 ParSpMatVec=0.0101	 speedup=5.0858
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0515	 ParSpMatVec=0.0111	 speedup=4.6455

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0896	 ParSpMatVec=0.0437	 speedup=2.0510
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0896	 ParSpMatVec=0.0137	 speedup=6.5196
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0896	 ParSpMatVec=0.0042	 speedup=21.4399
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0896	 ParSpMatVec=0.0014	 speedup=63.2724
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0896	 ParSpMatVec=0.0020	 speedup=45.5876

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0066	 ParSpMatVec=0.0474	 speedup=0.1387
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0066	 ParSpMatVec=0.0027	 speedup=2.4613
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0066	 ParSpMatVec=0.0020	 speedup=3.2814
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0066	 ParSpMatVec=0.0024	 speedup=2.7228
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0066	 ParSpMatVec=0.0024	 speedup=2.6891

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0332	 ParSpMatVec=0.0452	 speedup=0.7340
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0332	 ParSpMatVec=0.0033	 speedup=10.0444
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0332	 ParSpMatVec=0.0201	 speedup=1.6502
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0332	 ParSpMatVec=0.0022	 speedup=15.3879
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0332	 ParSpMatVec=0.0170	 speedup=1.9531

INFO: ParSpMatVec tests passed

>>> End of log
