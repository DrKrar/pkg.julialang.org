>>> 'Pkg.add("ParSpMatVec")' log
INFO: Cloning cache of ParSpMatVec from git://github.com/JuliaInv/ParSpMatVec.jl.git
INFO: Installing BinDeps v0.4.5
INFO: Installing ParSpMatVec v0.0.1
INFO: Installing SHA v0.2.1
INFO: Installing URIParser v0.1.6
INFO: Building ParSpMatVec
=== Building ParSpMatVec ===
depsdir  = /home/vagrant/.julia/v0.4/ParSpMatVec/deps
builddir = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/builds
srcdir   = /home/vagrant/.julia/v0.4/ParSpMatVec/deps/src
useIntel = false
creating build directory
fortran version
GNU Fortran (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.

GNU Fortran comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Fortran
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING

INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of ParSpMatVec
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("ParSpMatVec")' log
Julia Version 0.4.7
Commit ae26b25 (2016-09-18 16:17 UTC)
Platform Info:
  System: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz
  WORD_SIZE: 64
           Ubuntu 14.04.5 LTS
  uname: Linux 3.13.0-100-generic #147-Ubuntu SMP Tue Oct 18 16:48:51 UTC 2016 x86_64 x86_64
Memory: 2.939289093017578 GB (1207.8984375 MB free)
Uptime: 12294.0 sec
Load Avg:  0.8798828125  0.95458984375  0.96630859375
Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz: 
       speed         user         nice          sys         idle          irq
#1  3499 MHz     549329 s       5385 s      50942 s     492924 s          8 s
#2  3499 MHz     372961 s        620 s      42086 s     789130 s          0 s

  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas64_
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
Environment:
  TERM = vt100
  LD_LIBRARY_PATH = :/usr/local/lib/
  PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/vagrant/julia/bin/
  JAVA_HOME = /usr/lib/jvm/java-7-oracle
  HOME = /home/vagrant

Package Directory: /home/vagrant/.julia/v0.4
2 required packages:
 - JSON                          0.8.0
 - ParSpMatVec                   0.0.1
4 additional packages:
 - BinDeps                       0.4.5
 - Compat                        0.9.3
 - SHA                           0.2.1
 - URIParser                     0.1.6
INFO: Testing ParSpMatVec
Real
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1360	 ParSpMatVec=0.0264	 speedup=5.1565
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1360	 ParSpMatVec=0.0100	 speedup=13.6267
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1360	 ParSpMatVec=0.0120	 speedup=11.3205
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1360	 ParSpMatVec=0.0085	 speedup=15.9283
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1360	 ParSpMatVec=0.0102	 speedup=13.3361
Complex Scalars, Real Matrix
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.1208	 ParSpMatVec=0.0427	 speedup=2.8269
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.1208	 ParSpMatVec=0.0131	 speedup=9.2305
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.1208	 ParSpMatVec=0.0144	 speedup=8.4005
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.1208	 ParSpMatVec=0.0118	 speedup=10.2401
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.1208	 ParSpMatVec=0.0166	 speedup=7.2727

Complex
y = beta*y + alpha * A*x
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0434	 ParSpMatVec=0.0323	 speedup=1.3434
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0434	 ParSpMatVec=0.0137	 speedup=3.1566
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0434	 ParSpMatVec=0.0163	 speedup=2.6590
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0434	 ParSpMatVec=0.0146	 speedup=2.9633
ParSpMatVec.A_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0434	 ParSpMatVec=0.0134	 speedup=3.2326

Real
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0457	 ParSpMatVec=0.0407	 speedup=1.1225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0457	 ParSpMatVec=0.0026	 speedup=17.7009
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0457	 ParSpMatVec=0.0026	 speedup=17.8215
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0457	 ParSpMatVec=0.0012	 speedup=39.0001
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0457	 ParSpMatVec=0.0023	 speedup=20.1327

Complex Scalars, Real matrix
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0067	 ParSpMatVec=0.0274	 speedup=0.2445
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0067	 ParSpMatVec=0.0039	 speedup=1.7225
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0067	 ParSpMatVec=0.0037	 speedup=1.8138
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0067	 ParSpMatVec=0.0024	 speedup=2.8116
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0067	 ParSpMatVec=0.0020	 speedup=3.3350

Complex
y = beta*y + alpha * A'*x
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,0)
Base=0.0293	 ParSpMatVec=0.0271	 speedup=1.0787
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,1)
Base=0.0293	 ParSpMatVec=0.0040	 speedup=7.2651
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,2)
Base=0.0293	 ParSpMatVec=0.0025	 speedup=11.4858
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,3)
Base=0.0293	 ParSpMatVec=0.0028	 speedup=10.3921
ParSpMatVec.Ac_mul_B!( alpha, A, x, beta, y3,4)
Base=0.0293	 ParSpMatVec=0.0029	 speedup=10.0906

INFO: ParSpMatVec tests passed

>>> End of log
