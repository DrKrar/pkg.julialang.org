>>> 'Pkg.add("ParserCombinator")' log
INFO: Cloning cache of AutoHashEquals from git://github.com/andrewcooke/AutoHashEquals.jl.git
INFO: Cloning cache of ParserCombinator from git://github.com/andrewcooke/ParserCombinator.jl.git
INFO: Installing AutoHashEquals v0.0.4
INFO: Installing ParserCombinator v1.2.0
INFO: Package database updated

>>> 'Pkg.test("ParserCombinator")' log
INFO: Testing ParserCombinator
names ok
one level
  1:ab         00 Trace->Dot
  2:b          00 Trace<-['a']
multiple
  2:b          00 Trace->Depth
  2:b          01  Depth->Dot
  3:           01  Depth<-['b']
  3:           01  Depth->Dot
  3:           01  Depth<-!!!
  3:           00 Trace<-['b']
  2:b          00 Trace->Depth
  2:b          01  Depth->Dot
  2:b          01  Depth<-!!!
  2:b          00 Trace<-[]
debug ok
3 3 a r"a{3,3}"
1 2 a r"a{1,2}?"
1 3 aa r"a{1,3}"
2 4  r"a{2,4}?"
2 2  r"a{2,2}"
3 5 aaa r"a{3,5}?"
1 2 aaaa r"a{1,2}"
1 2 a r"a{1,2}?"
3 3 aa r"a{3,3}"
0 2 aaaa r"a{0,2}?"
3 5 aaa r"a{3,5}"
0 0 aaa r"a{0,0}?"
3 4 aaa r"a{3,4}"
1 1 a r"a{1,1}?"
1 1 aaaa r"a{1,1}"
0 2  r"a{0,2}?"
3 5  r"a{3,5}"
0 1 a r"a{0,1}?"
1 3  r"a{1,3}"
0 2  r"a{0,2}?"
tests ok
greedy true
ParserCombinator.NoCache
 253.064 milliseconds (196 k allocations: 8730 KB, 3.09% gc time)
  14.292 milliseconds (13130 allocations: 663 KB)
n results: 35
max depth: 5
max iter: 4
n calls: 323
ParserCombinator.Cache
 315.961 milliseconds (95070 allocations: 4319 KB)
  27.998 milliseconds (14696 allocations: 712 KB)
n results: 35
max depth: 5
max iter: 4
n calls: 232
slow ok
case ok
  1:1+2*3/4    00 Trace->all
  1:1+2*3/4    01  all->sum
  1:1+2*3/4    02   TransSuccess->Seq
  1:1+2*3/4    03    Seq->prd
  1:1+2*3/4    04     prd->Seq
  1:1+2*3/4    05      Seq->neg
  1:1+2*3/4    06       Alt->Seq
  1:1+2*3/4    07        Seq->Drop
  1:1+2*3/4    08         Drop->Equal
  2:+2*3/4     08         Drop<-!!!
  2:+2*3/4     07        Seq<-!!!
  1:1+2*3/4    06       Alt<-!!!
  1:1+2*3/4    06       Alt->TransSuccess
  1:1+2*3/4    07        TransSuccess->Pattern
  2:+2*3/4     07        TransSuccess<-["1"]
  2:+2*3/4     06       Alt<-[1.0]
  2:+2*3/4     05      Seq<-[1.0]
  2:+2*3/4     05      Seq->Depth
  2:+2*3/4     06       Depth->Alt
  2:+2*3/4     07        Alt->mul
  2:+2*3/4     08         mul->Drop
  2:+2*3/4     09          Drop->Equal
  3:2*3/4      09          Drop<-!!!
  3:2*3/4      08         mul<-!!!
  2:+2*3/4     07        Alt<-!!!
  2:+2*3/4     07        Alt->div
  2:+2*3/4     08         div->Seq
  2:+2*3/4     09          Seq->Drop
  2:+2*3/4     10 Drop->Equal
  3:2*3/4      10 Drop<-!!!
  3:2*3/4      09          Seq<-!!!
  2:+2*3/4     08         div<-!!!
  2:+2*3/4     07        Alt<-!!!
  2:+2*3/4     06       Depth<-!!!
  2:+2*3/4     05      Seq<-[]
  2:+2*3/4     04     prd<-[1.0]
  2:+2*3/4     03    Seq<-[Prd(Any[1.0])]
  2:+2*3/4     03    Seq->Depth
  2:+2*3/4     04     Depth->Alt
  2:+2*3/4     05      Alt->add
  2:+2*3/4     06       add->Drop
  2:+2*3/4     07        Drop->Equal
  3:2*3/4      07        Drop<-["+"]
  3:2*3/4      06       add<-[]
  3:2*3/4      06       add->prd
  3:2*3/4      07        prd->Seq
  3:2*3/4      08         Seq->neg
  3:2*3/4      09          Alt->Seq
  3:2*3/4      10 Seq->Drop
  3:2*3/4      11  Drop->Equal
  4:*3/4       11  Drop<-!!!
  4:*3/4       10 Seq<-!!!
  3:2*3/4      09          Alt<-!!!
  3:2*3/4      09          Alt->TransSuccess
  3:2*3/4      10 TransSuccess->Pattern
  4:*3/4       10 TransSuccess<-["2"]
  4:*3/4       09          Alt<-[2.0]
  4:*3/4       08         Seq<-[2.0]
  4:*3/4       08         Seq->Depth
  4:*3/4       09          Depth->Alt
  4:*3/4       10 Alt->mul
  4:*3/4       11  mul->Drop
  4:*3/4       12   Drop->Equal
  5:3/4        12   Drop<-["*"]
  5:3/4        11  mul<-[]
  5:3/4        11  mul->neg
  5:3/4        12   Alt->Seq
  5:3/4        13    Seq->Drop
  5:3/4        14     Drop->Equal
  6:/4         14     Drop<-!!!
  6:/4         13    Seq<-!!!
  5:3/4        12   Alt<-!!!
  5:3/4        12   Alt->TransSuccess
  5:3/4        13    TransSuccess->Pattern
  6:/4         13    TransSuccess<-["3"]
  6:/4         12   Alt<-[3.0]
  6:/4         11  mul<-[3.0]
  6:/4         10 Alt<-[3.0]
  6:/4         09          Depth<-[3.0]
  6:/4         09          Depth->Alt
  6:/4         10 Alt->mul
  6:/4         11  mul->Drop
  6:/4         12   Drop->Equal
  7:4          12   Drop<-!!!
  7:4          11  mul<-!!!
  6:/4         10 Alt<-!!!
  6:/4         10 Alt->div
  6:/4         11  div->Seq
  6:/4         12   Seq->Drop
  6:/4         13    Drop->Equal
  7:4          13    Drop<-["/"]
  7:4          12   Seq<-[]
  7:4          12   Seq->neg
  7:4          13    Alt->Seq
  7:4          14     Seq->Drop
  7:4          15      Drop->Equal
  8:           15      Drop<-!!!
  8:           14     Seq<-!!!
  7:4          13    Alt<-!!!
  7:4          13    Alt->TransSuccess
  7:4          14     TransSuccess->Pattern
  8:           14     TransSuccess<-["4"]
  8:           13    Alt<-[4.0]
  8:           12   Seq<-[4.0]
  8:           11  div<-[4.0]
  8:           10 Alt<-[Inv(4.0)]
  8:           09          Depth<-[Inv(4.0)]
  8:           09          Depth->Alt
  8:           10 Alt->mul
  8:           11  mul->Drop
  8:           12   Drop->Equal
  8:           12   Drop<-!!!
  8:           11  mul<-!!!
  8:           10 Alt<-!!!
  8:           10 Alt->div
  8:           11  div->Seq
  8:           12   Seq->Drop
  8:           13    Drop->Equal
  8:           13    Drop<-!!!
  8:           12   Seq<-!!!
  8:           11  div<-!!!
  8:           10 Alt<-!!!
  8:           09          Depth<-!!!
  8:           08         Seq<-[3.0,Inv(4.0)]
  8:           07        prd<-[2.0,3.0,Inv(4.0)]
  8:           06       add<-[Prd(Any[2.0,3.0,Inv(4.0)])]
  8:           05      Alt<-[Prd(Any[2.0,3.0,Inv(4.0)])]
  8:           04     Depth<-[Prd(Any[2.0,3.0,Inv(4.0)])]
  8:           04     Depth->Alt
  8:           05      Alt->add
  8:           06       add->Drop
  8:           07        Drop->Equal
  8:           07        Drop<-!!!
  8:           06       add<-!!!
  8:           05      Alt<-!!!
  8:           05      Alt->sub
  8:           06       sub->Seq
  8:           07        Seq->Drop
  8:           08         Drop->Equal
  8:           08         Drop<-!!!
  8:           07        Seq<-!!!
  8:           06       sub<-!!!
  8:           05      Alt<-!!!
  8:           04     Depth<-!!!
  8:           03    Seq<-[Prd(Any[2.0,3.0,Inv(4.0)])]
  8:           02   TransSuccess<-[Prd(Any[1.0]),Prd(Any[2.0,3.0,Inv(4.0)])]
  8:           01  all<-[Sum(Any[Prd(Any[1.0]),Prd(Any[....0,Inv(4.0)])])]
  8:           01  all->Eos
  8:           01  all<-[]
  8:           00 Trace<-[Sum(Any[Prd(Any[1.0]),Prd(Any[....0,Inv(4.0)])])]
1 = 1
-1 = -1
1+1 = 2
1-1 = 0
-1-1 = -2
1.0 = 1.0
-1.0 = -1.0
--1.0 = 1.0
1+2 = 3.0
1+2*3/4 = 2.5
Neg(Prd(Any[7.0,Inv(0.0),Inv(2.0),Inv(Neg(0.0))])) Inf Inf
Inv(Neg(0.0)) -Inf
Inv(Prd(Any[Neg(Sum(Any[Prd(Any[0.0])]))])) -Inf
Inv(Sum(Any[Prd(Any[Neg(Sum(Any[Prd(Any[0.0])]))])])) -Inf
Neg(Prd(Any[7.0,Inv(0.0),Inv(2.0),Inv(Sum(Any[Prd(Any[Neg(Sum(Any[Prd(Any[0.0])]))])])),3.0])) Inf Inf
Inf Sum(Any[Prd(Any[-9.0]),Neg(Prd(Any[7.0,Inv(0.0),Inv(2.0),Inv(Sum(Any[Prd(Any[Neg(Sum(Any[Prd(Any[0.0])]))])])),3.0])),Neg(Prd(Any[7.0,Inv(Neg(Sum(Any[Prd(Any[9.0]),Prd(Any[5.0])])))])),Prd(Any[5.0]),Neg(Prd(Any[7.0]))]) Inf
expr -(6.0-1.0)/((7.0/8.0)-0.0+6.0)+(5.0/4.0)/4.0*6.0*2.0/1.0-2.0/(1.0*9.0-5.0)+1.0*6.0
expr -9.0
expr 5.0+0.0+7.0-4.0/6.0-7.0-7.0-(2.0)/2.0/2.0
expr (5.0)*3.0-3.0+-1.0/0.0/5.0+3.0+0.0*9.0*4.0/4.0-9.0*-0.0*7.0+3.0/6.0/2.0
expr 7.0-2.0-4.0*9.0+7.0/5.0-2.0/8.0-8.0
expr -(0.0-3.0-8.0)/(-4.0)/8.0/6.0+4.0-(0.0)+7.0-1.0/1.0
expr -1.0/8.0-7.0
expr 6.0-9.0-2.0*1.0-0.0/6.0*2.0
expr -1.0-4.0+7.0/2.0/-5.0*2.0+4.0+2.0/(6.0)+9.0/0.0-(6.0)+8.0*1.0-9.0+7.0
expr 3.0*8.0*3.0/2.0
expr (9.0-9.0)/7.0+((2.0*0.0)+2.0+9.0)/(6.0-0.0)/5.0*7.0*3.0+0.0-7.0*8.0
expr -3.0/5.0/8.0+3.0*6.0+5.0/2.0*3.0
expr -0.0*8.0+0.0*4.0*1.0-1.0+2.0
expr (7.0/1.0)
expr 2.0*7.0+5.0+5.0-6.0-5.0*9.0*(-0.0)*0.0/3.0/6.0
expr 3.0*8.0/8.0-(-0.0-2.0/9.0/3.0)*(8.0+5.0*7.0/8.0)/8.0-7.0/2.0-9.0
expr (2.0)+1.0-4.0/7.0/4.0*(-8.0*5.0)-5.0/-(2.0)-9.0+1.0/2.0+7.0/2.0-(1.0)*7.0
expr -6.0*3.0/7.0+7.0*1.0+3.0*3.0
expr -7.0+9.0+9.0+5.0-8.0/3.0/1.0+5.0/0.0
expr 4.0+8.0*8.0-0.0*2.0-4.0/-(1.0)*1.0*2.0-2.0/9.0/5.0*4.0*(3.0)*-4.0-3.0
calc ok
INFO: ParserCombinator tests passed
INFO: No packages to install, update or remove

>>> End of log
