>>> 'Pkg.add("Mocha")' log
INFO: Cloning cache of Logging from git://github.com/kmsquire/Logging.jl.git
INFO: Cloning cache of Mocha from git://github.com/pluskid/Mocha.jl.git
INFO: Installing BinDeps v0.3.12
INFO: Installing Blosc v0.1.2
INFO: Installing HDF5 v0.4.17
INFO: Installing Logging v0.1.1
INFO: Installing Mocha v0.0.8
INFO: Installing SHA v0.0.4
INFO: Installing URIParser v0.0.5
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated

>>> 'Pkg.test("Mocha")' log
Julia Version 0.3.10
Commit c8ceeef* (2015-06-24 13:54 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Nehalem)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing Mocha
05-Jul 06:26:15:INFO:root:Configuring Mocha...
05-Jul 06:26:15:INFO:root: * CUDA       disabled by default
05-Jul 06:26:15:INFO:root: * Native Ext disabled by default
05-Jul 06:26:15:INFO:root:Mocha configured, continue loading module...
-- Testing network topology with duplicated blobs
05-Jul 06:26:22:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:22:INFO:root:Topological sorting 1 layers...
05-Jul 06:26:22:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:22:INFO:root:Topological sorting 2 layers...
-- Testing network topology with missing blobs
05-Jul 06:26:22:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:22:INFO:root:Topological sorting 1 layers...
-- Testing network topology with circular dependency
05-Jul 06:26:22:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:22:INFO:root:Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
05-Jul 06:26:22:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:22:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:22:INFO:root:Setup layers...
05-Jul 06:26:23:INFO:root:Network constructed!
05-Jul 06:26:23:DEBUG:root:Destroying network net
    > Bad blob sharing
05-Jul 06:26:24:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:24:INFO:root:Topological sorting 6 layers...
05-Jul 06:26:24:INFO:root:Setup layers...
05-Jul 06:26:24:INFO:root:Network constructed!
-- Testing network topology with dangling blob
    > Good case
05-Jul 06:26:24:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:24:INFO:root:Topological sorting 4 layers...
05-Jul 06:26:24:INFO:root:Setup layers...
05-Jul 06:26:24:INFO:root:Network constructed!
05-Jul 06:26:24:DEBUG:root:Destroying network net
    > Bad case
05-Jul 06:26:24:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:24:INFO:root:Topological sorting 4 layers...
05-Jul 06:26:24:INFO:root:Setup layers...
05-Jul 06:26:24:INFO:root:Network constructed!
05-Jul 06:26:24:DEBUG:root:Destroying network net
    > Good case 2
05-Jul 06:26:24:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:24:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:24:INFO:root:Setup layers...
05-Jul 06:26:24:INFO:root:Network constructed!
05-Jul 06:26:24:DEBUG:root:Destroying network net
    > Bad case 2
05-Jul 06:26:24:INFO:root:Constructing net net on CPUBackend...
05-Jul 06:26:24:INFO:root:Topological sorting 6 layers...
05-Jul 06:26:24:INFO:root:Setup layers...
05-Jul 06:26:24:INFO:root:Network constructed!
05-Jul 06:26:24:DEBUG:root:Destroying network net
-- Testing gradients on simple network (example for gradient checking code)
05-Jul 06:26:26:INFO:root:Constructing net TEST on CPUBackend...
05-Jul 06:26:26:INFO:root:Topological sorting 4 layers...
05-Jul 06:26:26:INFO:root:Setup layers...
05-Jul 06:26:26:INFO:root:Network constructed!
Warning: could not attach metadata for @simd loop.
Warning: could not attach metadata for @simd loop.
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on CPUBackend{Float32}...
-- Testing blob reshape on CPUBackend{Float64}...
-- Testing ReLU neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on CPUBackend{Float32}...
-- Testing L2 regularizer on CPUBackend{Float64}...
-- Testing L1 regularizer on CPUBackend{Float32}...
-- Testing L1 regularizer on CPUBackend{Float64}...
-- Testing L2 constraint on CPUBackend{Float32}...
-- Testing L2 constraint on CPUBackend{Float64}...
-- Testing DataTransformers on CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (10,11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (7,7,9,10) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (8,8,10,8,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (8,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (6,8,11,9) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (6,8,10,10,11) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (9,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (10,10,7,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (8,9,7,11,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (11,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (7,11,10,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (8,11,11,8,8) (operate on dimension 4)
    > Forward
    > Backward
-- Testing PowerLayer on CPUBackend{Float32}...
    > scale=0.99, shift=0.3, power=2, tensor_dim=6
    > scale=0, shift=0.45, power=6, tensor_dim=6
    > scale=0.59, shift=0.99, power=2, tensor_dim=5
    > scale=0.7, shift=0, power=3, tensor_dim=5
    > scale=0.88, shift=0.2, power=4, tensor_dim=4
    > scale=0.03, shift=0.69, power=0, tensor_dim=1
    > scale=0.82, shift=0.41, power=1, tensor_dim=6
    > scale=0.86, shift=0.69, power=-1, tensor_dim=5
-- Testing PowerLayer on CPUBackend{Float64}...
    > scale=0.55, shift=0.77, power=2, tensor_dim=1
    > scale=0, shift=0.69, power=5, tensor_dim=5
    > scale=0.19, shift=0.67, power=2, tensor_dim=6
    > scale=0.17, shift=0, power=3, tensor_dim=5
    > scale=0.42, shift=0.08, power=4, tensor_dim=3
    > scale=0.81, shift=0.39, power=0, tensor_dim=2
    > scale=0.38, shift=0.52, power=1, tensor_dim=5
    > scale=0.77, shift=0.48, power=-1, tensor_dim=2
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [10,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [11,6,10,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [6,10,11,6,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [7,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [11,11,7,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [10,11,7,8,6] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [9,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [11,9,8,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [7,9,7,10,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [9,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [11,7,9,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [9,9,10,10,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [10,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [7,7,7,8] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [7,10,9,10,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [10,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [7,9,10,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [11,10,8,6,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [10,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [10,9,9,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [9,7,8,9,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [7,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [8,6,8,10] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [10,10,9,7,9] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [10,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [10,8,6,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [6,8,7,9,11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [11,7] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [6,10,7,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [6,7,8,11,9] (operate on dimension 4)
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (8,11) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (6,11,6,8) (operate on dimension 3)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (6,6,10,10,6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (6,11) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (8,7,10,6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (7,6,10,8,6) (operate on dimension 3)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing TiedInnerProductLayer on CPUBackend{Float32}...
    > Setup
05-Jul 06:26:54:INFO:root:Constructing net test-tied-ip on CPUBackend...
05-Jul 06:26:54:INFO:root:Topological sorting 3 layers...
05-Jul 06:26:54:INFO:root:Setup layers...
05-Jul 06:26:54:INFO:root:Network constructed!
05-Jul 06:26:54:DEBUG:root:Init network test-tied-ip
05-Jul 06:26:54:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:26:54:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:26:54:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
05-Jul 06:26:54:DEBUG:root:Destroying network test-tied-ip
-- Testing TiedInnerProductLayer on CPUBackend{Float64}...
    > Setup
05-Jul 06:26:54:INFO:root:Constructing net test-tied-ip on CPUBackend...
05-Jul 06:26:54:INFO:root:Topological sorting 3 layers...
05-Jul 06:26:54:INFO:root:Setup layers...
05-Jul 06:26:54:INFO:root:Network constructed!
05-Jul 06:26:54:DEBUG:root:Init network test-tied-ip
05-Jul 06:26:54:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:26:54:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:26:54:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
05-Jul 06:26:54:DEBUG:root:Destroying network test-tied-ip
-- Testing SquareLossLayer on CPUBackend{Float32}...
    > (6,9,6,8)
-- Testing SquareLossLayer on CPUBackend{Float64}...
    > (7,6,7)
-- Testing SplitLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 2
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 3
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (7,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (7,10,6,7) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (8,9,6,10,10) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (10,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (7,10,9,7) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (6,8,8,10,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing convolution layer with shared param on CPUBackend{Float64}...
05-Jul 06:26:57:INFO:root:Constructing net test-shared-params on CPUBackend...
05-Jul 06:26:57:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:57:INFO:root:Setup layers...
05-Jul 06:26:57:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
05-Jul 06:26:57:INFO:root:Network constructed!
05-Jul 06:26:57:DEBUG:root:Init network test-shared-params
05-Jul 06:26:57:DEBUG:root:Init parameter filter for layer conv1
05-Jul 06:26:57:DEBUG:root:Init parameter bias for layer conv1
05-Jul 06:26:57:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float64}...
05-Jul 06:26:57:INFO:root:Constructing net test-shared-params on CPUBackend...
05-Jul 06:26:57:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:57:INFO:root:Setup layers...
05-Jul 06:26:57:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
05-Jul 06:26:57:INFO:root:Network constructed!
05-Jul 06:26:57:DEBUG:root:Init network test-shared-params
05-Jul 06:26:57:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:26:57:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:26:57:DEBUG:root:Destroying network test-shared-params
-- Testing convolution layer with shared param on CPUBackend{Float32}...
05-Jul 06:26:57:INFO:root:Constructing net test-shared-params on CPUBackend...
05-Jul 06:26:57:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:57:INFO:root:Setup layers...
05-Jul 06:26:57:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
05-Jul 06:26:57:INFO:root:Network constructed!
05-Jul 06:26:57:DEBUG:root:Init network test-shared-params
05-Jul 06:26:57:DEBUG:root:Init parameter filter for layer conv1
05-Jul 06:26:57:DEBUG:root:Init parameter bias for layer conv1
05-Jul 06:26:58:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float32}...
05-Jul 06:26:58:INFO:root:Constructing net test-shared-params on CPUBackend...
05-Jul 06:26:58:INFO:root:Topological sorting 5 layers...
05-Jul 06:26:58:INFO:root:Setup layers...
05-Jul 06:26:58:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
05-Jul 06:26:58:INFO:root:Network constructed!
05-Jul 06:26:58:DEBUG:root:Init network test-shared-params
05-Jul 06:26:58:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:26:58:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:26:58:DEBUG:root:Destroying network test-shared-params
-- Testing ReshapeLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on CPUBackend{Float64}
    > 3 input blobs with tensor dims [3,2,2]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on CPUBackend{Float32}
    > 3 input blobs with tensor dims [2,5,6]
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Memory Output Layer on CPUBackend{Float32}...
    > (4,1,7)
-- Testing Memory Output Layer on CPUBackend{Float64}...
    > (5,3,5)
-- Testing Memory Data Layer on CPUBackend{Float32}...
    > (3,5,1,5,2)
-- Testing Memory Data Layer on CPUBackend{Float64}...
    > (1,1,5,1)
-- Testing LRN(AcrossChannel) on CPUBackend{Float32}...
    > Setup with dims (9,9,8,6)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float32}...
    > Setup with dims (11,10,8,6)
    > Forward
    > Backward
-- Testing LRN(AcrossChannel) on CPUBackend{Float64}...
    > Setup with dims (6,7,10,11)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float64}...
    > Setup with dims (6,9,6,11)
    > Forward
    > Backward
-- Testing InplaceLayer on CPUBackend{Float64}...
    > Setup
05-Jul 06:28:01:INFO:root:Constructing net test-inplace on CPUBackend...
05-Jul 06:28:01:INFO:root:Topological sorting 5 layers...
05-Jul 06:28:01:INFO:root:Setup layers...
05-Jul 06:28:01:INFO:root:Network constructed!
05-Jul 06:28:01:DEBUG:root:Init network test-inplace
05-Jul 06:28:01:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:28:01:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:28:01:DEBUG:root:Init parameter weight for layer ip2
05-Jul 06:28:01:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
05-Jul 06:28:01:DEBUG:root:Destroying network test-inplace
-- Testing InplaceLayer on CPUBackend{Float32}...
    > Setup
05-Jul 06:28:01:INFO:root:Constructing net test-inplace on CPUBackend...
05-Jul 06:28:01:INFO:root:Topological sorting 5 layers...
05-Jul 06:28:01:INFO:root:Setup layers...
05-Jul 06:28:01:INFO:root:Network constructed!
05-Jul 06:28:01:DEBUG:root:Init network test-inplace
05-Jul 06:28:01:DEBUG:root:Init parameter weight for layer ip1
05-Jul 06:28:01:DEBUG:root:Init parameter bias for layer ip1
05-Jul 06:28:01:DEBUG:root:Init parameter weight for layer ip2
05-Jul 06:28:01:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
05-Jul 06:28:01:DEBUG:root:Destroying network test-inplace
-- Testing InnerProductLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 3
-- Testing IdentityLayer on CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HDF5 Output Layer on CPUBackend{Float32}...
    > (7,2,2)
05-Jul 06:28:08:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-28256-wzDnF4GlAFOr2UsnOO0CZcN4ONxBGo0m.hdf5' already exists, overwriting
-- Testing HDF5 Output Layer on CPUBackend{Float64}...
    > (7,8,6)
05-Jul 06:28:10:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-28256-gPohVh3BHFKrkRcZKdzsDYkO44mkgZGS.hdf5' already exists, overwriting
-- Testing  HDF5 Data Layer on CPUBackend{Float32}...
    > (2,7,4,2,8,5)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float32}...
    > (6,8,3,7,7,6)
05-Jul 06:28:15:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:15:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on CPUBackend{Float64}...
    > (8,2,5,1,3,5)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float64}...
    > (7,6)
05-Jul 06:28:17:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:17:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
WARNING: data not shuffled, is today a lucky day or is there a bug?
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
05-Jul 06:28:19:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float32}...
    > (8,3,7)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float32}...
    > (6,)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float32}...
    > (7,4)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float32}...
    > (4,4,4,8,6,1)
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float64}...
    > (6,6,4,2,2,4)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float64}...
    > (5,6,6,3,6)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float64}...
    > (4,)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float64}...
    > (8,3)
-- Testing Dropout on CPUBackend{Float64}...
    > (7,1)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on CPUBackend{Float32}...
    > (6,6,2,4,5,3)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing ConcatLayer(dim=1) on CPUBackend{Float64}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float64}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float64}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on CPUBackend{Float32}...
    > 6-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float32}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float32}...
    > 3-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float32}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 5 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 6-D tensors)
    > Forward
    > Backward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
INFO: Mocha tests passed
INFO: No packages to install, update or remove

>>> End of log
