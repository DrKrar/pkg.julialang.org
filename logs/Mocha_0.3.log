>>> 'Pkg.add("Mocha")' log
INFO: Installing BinDeps v0.3.15
INFO: Installing Blosc v0.1.4
INFO: Installing Dates v0.3.2
INFO: Installing HDF5 v0.5.5
INFO: Installing HttpCommon v0.1.2
INFO: Installing JLD v0.5.4
INFO: Installing Logging v0.1.1
INFO: Installing Mocha v0.0.9
INFO: Installing SHA v0.1.1
INFO: Installing URIParser v0.0.7
INFO: Building Blosc
INFO: Building HDF5
INFO: Building Mocha
Running `g++ -fPIC -Wall -O3 -shared -fopenmp -o libmochaext.so im2col.cpp pooling.cpp`
INFO: Package database updated
INFO: METADATA is out-of-date â€” you may not have the latest version of Mocha
INFO: Use `Pkg.update()` to get the latest versions of your packages

>>> 'Pkg.test("Mocha")' log
Julia Version 0.3.11
Commit 483dbf5* (2015-07-27 06:18 UTC)
Platform Info:
  System: Linux (x86_64-unknown-linux-gnu)
  CPU: Intel(R) Core(TM) i5-2500K CPU @ 3.30GHz
  WORD_SIZE: 64
  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Sandybridge)
  LAPACK: libopenblas
  LIBM: libopenlibm
  LLVM: libLLVM-3.3
INFO: Testing Mocha
Configuring Mocha...
 * CUDA       disabled by default
 * Native Ext disabled by default
Mocha configured, continue loading module...
-- Testing network topology with duplicated blobs
01-Sep 22:12:14:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:14:INFO:root:Topological sorting 1 layers...
01-Sep 22:12:14:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:14:INFO:root:Topological sorting 2 layers...
-- Testing network topology with missing blobs
01-Sep 22:12:14:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:14:INFO:root:Topological sorting 1 layers...
-- Testing network topology with circular dependency
01-Sep 22:12:14:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:14:INFO:root:Topological sorting 2 layers...
-- Testing network topology with multiple back-propagate path
    > Good blob sharing
01-Sep 22:12:14:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:14:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:14:INFO:root:Setup layers...
01-Sep 22:12:15:INFO:root:Network constructed!
01-Sep 22:12:15:DEBUG:root:Destroying network net
    > Bad blob sharing
01-Sep 22:12:15:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:15:INFO:root:Topological sorting 6 layers...
01-Sep 22:12:15:INFO:root:Setup layers...
01-Sep 22:12:16:INFO:root:Network constructed!
-- Testing network topology with dangling blob
    > Good case
01-Sep 22:12:16:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:16:INFO:root:Topological sorting 4 layers...
01-Sep 22:12:16:INFO:root:Setup layers...
01-Sep 22:12:16:INFO:root:Network constructed!
01-Sep 22:12:16:DEBUG:root:Destroying network net
    > Bad case
01-Sep 22:12:16:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:16:INFO:root:Topological sorting 4 layers...
01-Sep 22:12:16:INFO:root:Setup layers...
01-Sep 22:12:16:INFO:root:Network constructed!
01-Sep 22:12:16:DEBUG:root:Destroying network net
    > Good case 2
01-Sep 22:12:16:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:16:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:16:INFO:root:Setup layers...
01-Sep 22:12:16:INFO:root:Network constructed!
01-Sep 22:12:16:DEBUG:root:Destroying network net
    > Bad case 2
01-Sep 22:12:16:INFO:root:Constructing net net on CPUBackend...
01-Sep 22:12:16:INFO:root:Topological sorting 6 layers...
01-Sep 22:12:16:INFO:root:Setup layers...
01-Sep 22:12:16:INFO:root:Network constructed!
01-Sep 22:12:16:DEBUG:root:Destroying network net
-- Testing gradients on simple network (example for gradient checking code)
01-Sep 22:12:17:INFO:root:Constructing net TEST on CPUBackend...
01-Sep 22:12:17:INFO:root:Topological sorting 4 layers...
01-Sep 22:12:17:INFO:root:Setup layers...
01-Sep 22:12:17:INFO:root:Network constructed!
Warning: could not attach metadata for @simd loop.
Warning: could not attach metadata for @simd loop.
-- Testing simple reference counting...
-- Testing glob Utilities
-- Testing RawBLAS{Float32} Utilities
-- Testing RawBLAS{Float64} Utilities
-- Testing blob reshape on CPUBackend{Float32}...
-- Testing blob reshape on CPUBackend{Float64}...
-- Testing ReLU neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing ReLU neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Sigmoid neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing Tanh neuron on CPUBackend{Float32}...
    > Forward
    > Backward
-- Testing Tanh neuron on CPUBackend{Float64}...
    > Forward
    > Backward
-- Testing L2 regularizer on CPUBackend{Float32}...
-- Testing L2 regularizer on CPUBackend{Float64}...
-- Testing L1 regularizer on CPUBackend{Float32}...
-- Testing L1 regularizer on CPUBackend{Float64}...
-- Testing L2 constraint on CPUBackend{Float32}...
-- Testing L2 constraint on CPUBackend{Float64}...
-- Testing DataTransformers on CPUBackend{Float32}...
    > SubMean
    > Scale
-- Testing DataTransformers on CPUBackend{Float64}...
    > SubMean
    > Scale
-- Testing TiedInnerProductLayer on CPUBackend{Float32}...
    > Setup
01-Sep 22:12:24:INFO:root:Constructing net test-tied-ip on CPUBackend...
01-Sep 22:12:24:INFO:root:Topological sorting 3 layers...
01-Sep 22:12:24:INFO:root:Setup layers...
01-Sep 22:12:24:INFO:root:Network constructed!
01-Sep 22:12:24:DEBUG:root:Init network test-tied-ip
01-Sep 22:12:24:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:12:24:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:12:24:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
01-Sep 22:12:25:DEBUG:root:Destroying network test-tied-ip
-- Testing TiedInnerProductLayer on CPUBackend{Float64}...
    > Setup
01-Sep 22:12:25:INFO:root:Constructing net test-tied-ip on CPUBackend...
01-Sep 22:12:25:INFO:root:Topological sorting 3 layers...
01-Sep 22:12:25:INFO:root:Setup layers...
01-Sep 22:12:25:INFO:root:Network constructed!
01-Sep 22:12:25:DEBUG:root:Init network test-tied-ip
01-Sep 22:12:25:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:12:25:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:12:25:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
01-Sep 22:12:25:DEBUG:root:Destroying network test-tied-ip
-- Testing SquareLossLayer on CPUBackend{Float32}...
    > (10,8,6)
-- Testing SquareLossLayer on CPUBackend{Float64}...
    > (10,11,10,8,6)
-- Testing SplitLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing SplitLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (8,10) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (10,6,6,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} ...
    > (8,11,10,10,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (7,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (9,9,11,11) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float64} (with weights)...
    > (7,6,10,6,11) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (11,9) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (6,8,8,8) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} ...
    > (6,10,10,9,8) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (6,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (9,10,9,10) (operate on dimension 3)
    > Forward
    > Backward
-- Testing SoftmaxLossLayer on CPUBackend{Float32} (with weights)...
    > (8,9,9,6,8) (operate on dimension 4)
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 4-dimensional input, normalize along dimension 2
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float64}...
    > 5-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 2-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 4-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftmaxLayer on CPUBackend{Float32}...
    > 5-dimensional input, normalize along dimension 1
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (10,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (11,6,9,8) (operate on dimension 2)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float64}...
    > (9,11,10,7,7) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (6,6) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (11,10,9,11) (operate on dimension 1)
    > Forward
    > Backward
-- Testing SoftlabelSoftmaxLossLayer on CPUBackend{Float32}...
    > (11,10,8,8,7) (operate on dimension 4)
    > Forward
    > Backward
-- Testing convolution layer with shared param on CPUBackend{Float64}...
01-Sep 22:12:35:INFO:root:Constructing net test-shared-params on CPUBackend...
01-Sep 22:12:35:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:35:INFO:root:Setup layers...
01-Sep 22:12:35:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
01-Sep 22:12:35:INFO:root:Network constructed!
01-Sep 22:12:35:DEBUG:root:Init network test-shared-params
01-Sep 22:12:35:DEBUG:root:Init parameter filter for layer conv1
01-Sep 22:12:35:DEBUG:root:Init parameter bias for layer conv1
01-Sep 22:12:35:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float64}...
01-Sep 22:12:35:INFO:root:Constructing net test-shared-params on CPUBackend...
01-Sep 22:12:35:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:35:INFO:root:Setup layers...
01-Sep 22:12:35:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
01-Sep 22:12:35:INFO:root:Network constructed!
01-Sep 22:12:35:DEBUG:root:Init network test-shared-params
01-Sep 22:12:35:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:12:35:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:12:35:DEBUG:root:Destroying network test-shared-params
-- Testing convolution layer with shared param on CPUBackend{Float32}...
01-Sep 22:12:35:INFO:root:Constructing net test-shared-params on CPUBackend...
01-Sep 22:12:35:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:35:INFO:root:Setup layers...
01-Sep 22:12:35:DEBUG:root:ConvolutionLayer(conv2): sharing filters and bias
01-Sep 22:12:35:INFO:root:Network constructed!
01-Sep 22:12:35:DEBUG:root:Init network test-shared-params
01-Sep 22:12:35:DEBUG:root:Init parameter filter for layer conv1
01-Sep 22:12:35:DEBUG:root:Init parameter bias for layer conv1
01-Sep 22:12:36:DEBUG:root:Destroying network test-shared-params
-- Testing inner-product layer with shared param on CPUBackend{Float32}...
01-Sep 22:12:36:INFO:root:Constructing net test-shared-params on CPUBackend...
01-Sep 22:12:36:INFO:root:Topological sorting 5 layers...
01-Sep 22:12:36:INFO:root:Setup layers...
01-Sep 22:12:36:DEBUG:root:InnerProductLayer(ip2): sharing weights and bias
01-Sep 22:12:36:INFO:root:Network constructed!
01-Sep 22:12:36:DEBUG:root:Init network test-shared-params
01-Sep 22:12:36:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:12:36:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:12:36:DEBUG:root:Destroying network test-shared-params
-- Testing ReshapeLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing ReshapeLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on CPUBackend{Float64}
    > 3 input blobs with tensor dims [6,5,2]
    > Setup
    > Forward
    > Backward
-- Testing RandomMask on CPUBackend{Float32}
    > 3 input blobs with tensor dims [1,2,1]
    > Setup
    > Forward
    > Backward
-- Testing PowerLayer on CPUBackend{Float32}...
    > scale=0.21, shift=0.57, power=2, tensor_dim=3
    > scale=0, shift=0.57, power=5, tensor_dim=4
    > scale=0.27, shift=0.2, power=2, tensor_dim=6
    > scale=0.19, shift=0, power=3, tensor_dim=3
    > scale=0.14, shift=0.98, power=4, tensor_dim=3
    > scale=0.11, shift=0.84, power=0, tensor_dim=5
    > scale=0.2, shift=0.36, power=1, tensor_dim=5
    > scale=0.47, shift=0.4, power=-1, tensor_dim=2
-- Testing PowerLayer on CPUBackend{Float64}...
    > scale=0.3, shift=0.73, power=2, tensor_dim=6
    > scale=0, shift=0.58, power=5, tensor_dim=2
    > scale=0.75, shift=0.62, power=2, tensor_dim=6
    > scale=0.78, shift=0, power=3, tensor_dim=5
    > scale=0.27, shift=0.55, power=4, tensor_dim=2
    > scale=0.9, shift=0.84, power=0, tensor_dim=1
    > scale=0.21, shift=0.35, power=1, tensor_dim=4
    > scale=0.04, shift=0.99, power=-1, tensor_dim=2
-- Testing Pooling(Max)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean)  on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Max) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing Pooling(Mean) with padding on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [6,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [7,9,9,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float64}...
    > [6,11,7,9,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [10,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [7,8,9,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float64}...
    > [10,6,7,6,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [8,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [10,10,11,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float64}...
    > [8,6,11,7,10] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [9,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [10,9,6,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float64}...
    > [10,8,10,6,11] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [11,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [6,8,10,9] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float64}...
    > [8,7,8,8,10] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [9,6] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [11,9,9,7] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{equal,local} on CPUBackend{Float32}...
    > [9,6,9,6,7] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [10,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [10,10,11,6] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{local,local} on CPUBackend{Float32}...
    > [9,9,7,7,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [11,8] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [10,8,10,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,global} on CPUBackend{Float32}...
    > [8,8,6,9,8] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [7,11] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [6,11,7,11] (operate on dimension 3)
-- Testing MultinomialLogisticLossLayer{global,local} on CPUBackend{Float32}...
    > [10,8,7,7,6] (operate on dimension 4)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [11,9] (operate on dimension 1)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [10,11,10,10] (operate on dimension 2)
-- Testing MultinomialLogisticLossLayer{no,no} on CPUBackend{Float32}...
    > [10,6,11,7,11] (operate on dimension 1)
-- Testing Memory Output Layer on CPUBackend{Float32}...
    > (4,5,1)
-- Testing Memory Output Layer on CPUBackend{Float64}...
    > (7,2,6)
-- Testing Memory Data Layer on CPUBackend{Float32}...
    > (6,6,1,4,4,6)
-- Testing Memory Data Layer on CPUBackend{Float64}...
    > (2,1)
-- Testing LRN(AcrossChannel) on CPUBackend{Float32}...
    > Setup with dims (7,8,9,10)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float32}...
    > Setup with dims (7,7,11,10)
    > Forward
    > Backward
-- Testing LRN(AcrossChannel) on CPUBackend{Float64}...
    > Setup with dims (9,7,8,10)
    > Forward
    > Backward
-- Testing LRN(WithinChannel) on CPUBackend{Float64}...
    > Setup with dims (6,7,8,8)
    > Forward
    > Backward
-- Testing InplaceLayer on CPUBackend{Float64}...
    > Setup
01-Sep 22:13:04:INFO:root:Constructing net test-inplace on CPUBackend...
01-Sep 22:13:04:INFO:root:Topological sorting 5 layers...
01-Sep 22:13:04:INFO:root:Setup layers...
01-Sep 22:13:04:INFO:root:Network constructed!
01-Sep 22:13:04:DEBUG:root:Init network test-inplace
01-Sep 22:13:04:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:13:04:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:13:04:DEBUG:root:Init parameter weight for layer ip2
01-Sep 22:13:04:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
01-Sep 22:13:04:DEBUG:root:Destroying network test-inplace
-- Testing InplaceLayer on CPUBackend{Float32}...
    > Setup
01-Sep 22:13:04:INFO:root:Constructing net test-inplace on CPUBackend...
01-Sep 22:13:04:INFO:root:Topological sorting 5 layers...
01-Sep 22:13:04:INFO:root:Setup layers...
01-Sep 22:13:04:INFO:root:Network constructed!
01-Sep 22:13:04:DEBUG:root:Init network test-inplace
01-Sep 22:13:04:DEBUG:root:Init parameter weight for layer ip1
01-Sep 22:13:04:DEBUG:root:Init parameter bias for layer ip1
01-Sep 22:13:04:DEBUG:root:Init parameter weight for layer ip2
01-Sep 22:13:04:DEBUG:root:Init parameter bias for layer ip2
    > Forward
    > Backward
01-Sep 22:13:04:DEBUG:root:Destroying network test-inplace
-- Testing InnerProductLayer on CPUBackend{Float32}...
    > Setup
    > Forward
    > Backward
-- Testing InnerProductLayer on CPUBackend{Float64}...
    > Setup
    > Forward
    > Backward
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 4-dimensional input, expanding along dimension 2
-- Testing Index2OnehotLayer on CPUBackend{Float32}...
    > 5-dimensional input, expanding along dimension 4
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 2-dimensional input, expanding along dimension 1
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 4-dimensional input, expanding along dimension 3
-- Testing Index2OnehotLayer on CPUBackend{Float64}...
    > 5-dimensional input, expanding along dimension 3
-- Testing IdentityLayer on CPUBackend{Float32}...
    > Setup
    > Forward
-- Testing IdentityLayer on CPUBackend{Float64}...
    > Setup
    > Forward
-- Testing HDF5 Output Layer on CPUBackend{Float32}...
    > (4,3)
01-Sep 22:13:06:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-4179-ojMK0Zf3XFaSbSAHq6cYGITBAdJknMSV.hdf5' already exists, overwriting
-- Testing HDF5 Output Layer on CPUBackend{Float64}...
    > (3,8)
01-Sep 22:13:07:WARNING:root:HDF5OutputLayer: output file '/tmp/Mocha-4179-avvGKAi8QJrjBPQ5WKWbHisqZstWsnOw.hdf5' already exists, overwriting
-- Testing  HDF5 Data Layer on CPUBackend{Float32}...
    > (8,8,2,1)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float32}...
    > (8,1)
01-Sep 22:13:09:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:09:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer on CPUBackend{Float64}...
    > (7,)
-- Testing (Async) HDF5 Data Layer on CPUBackend{Float64}...
    > (2,8,2,7,1)
01-Sep 22:13:09:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:09:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float32}...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float32}...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=6,b=4) on CPUBackend{Float64}...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing  HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
-- Testing (Async) HDF5 Data Layer (shuffle,n=4,b=6) on CPUBackend{Float64}...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: Stopping IO task...
01-Sep 22:13:10:INFO:root:AsyncHDF5DataLayer: IO Task reaching the end...
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float32}...
    > (7,5,2,8,6,2)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float32}...
    > (1,4,4,8,7,3)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float32}...
    > (2,6,4,8,7,5)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float32}...
    > (7,4,2,8,6,5)
-- Testing ElementWiseLayer{Add()} on CPUBackend{Float64}...
    > (6,6,7,5,6,5)
-- Testing ElementWiseLayer{Subtract()} on CPUBackend{Float64}...
    > (8,8,4,1,8)
-- Testing ElementWiseLayer{Multiply()} on CPUBackend{Float64}...
    > (4,1,7)
-- Testing ElementWiseLayer{Divide()} on CPUBackend{Float64}...
    > (7,5)
-- Testing Dropout on CPUBackend{Float64}...
    > (2,)
    > Setup
    > Forward
    > Backward
-- Testing Dropout on CPUBackend{Float32}...
    > (8,1,1)
    > Setup
    > Forward
    > Backward
-- Testing CropLayer on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float64} with mirror...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} ...
    > Setup
    > Forward
-- Testing CropLayer{rnd} on CPUBackend{Float32} with mirror...
    > Setup
    > Forward
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float64} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(3,4)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=true) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing Convolution(frozen=false) on CPUBackend{Float32} filter=(1,1)...
    > Setup
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float64}...
    > 2-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=1) on CPUBackend{Float32}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=2) on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=3) on CPUBackend{Float32}...
    > 7-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=4) on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ConcatLayer(dim=5) on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float32}...
    > Setup (pool along dimension 4 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Max) on CPUBackend{Float64}...
    > Setup (pool along dimension 2 for 6-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 2-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 3-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 3 for 4-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 1 for 5-D tensors)
    > Forward
    > Backward
-- Testing ChannelPooling(Mean) on CPUBackend{Float64}...
    > Setup (pool along dimension 4 for 6-D tensors)
    > Forward
    > Backward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float64}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 2-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 4-dimensional tensor
    > Setup
    > Forward
-- Testing ArgmaxLayer on CPUBackend{Float32}...
    > 5-dimensional tensor
    > Setup
    > Forward
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (11,11) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (8,6,7,6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float32}...
    > (11,7,10,10,11) (operate on dimension 3)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (10,6) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (11,7,8,7) (operate on dimension 1)
    > Forward
    > Forward Again
    > Forward Again and Again
-- Testing AccuracyLayer on CPUBackend{Float64}...
    > (11,10,6,10,10) (operate on dimension 2)
    > Forward
    > Forward Again
    > Forward Again and Again
INFO: Mocha tests passed
INFO: No packages to install, update or remove

>>> End of log
